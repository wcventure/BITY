;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B611-7234-BB			    |
; |		Doskey Lee, Kingsoft Internet Security Software		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	A120DE57516CCFFCD40387A40F79CBC5
; Input	CRC32 :	A2D0EA59

; File Name   :	D:\coreutils-o\nl.o
; Format      :	ELF for	Intel 386 (Relocatable)
;
; Source File :	'nl.c'

		include	uni.inc	; see unicode subdir of	ida for	info on	unicode

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	byte public 'CODE' use32
		assume cs:_text
		;org 8000000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void emit_ancillary_info()
emit_ancillary_info proc near		; CODE XREF: usage+19Bp

lc_messages	= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset msgid	; "\nReport %s bugs to %s\n"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset aBugCoreutils@g ; "bug-coreutils@gnu.org"
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	offset aSHomePageHttpW ; "%s home page:	<http://www.gnu.org/softw"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset domainname ; "coreutils"
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aGeneralHelpUsi ; "General help using GNU software: <http:"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		sub	esp, 8
		push	0		; locale
		push	5		; category
		call	setlocale
		add	esp, 10h
		mov	[ebp+lc_messages], eax
		cmp	[ebp+lc_messages], 0
		jz	short loc_80000E6
		sub	esp, 4
		push	3		; n
		push	offset s2	; "en_"
		push	[ebp+lc_messages] ; s1
		call	strncmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_80000E6
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aReportSTransla ; "Report %s translation	bugs to	<http://t"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h

loc_80000E6:				; CODE XREF: emit_ancillary_info+9Bj
					; emit_ancillary_info+B4j
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aForCompleteDoc ; "For complete documentation, run: info	c"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		nop
		mov	ebx, [ebp+var_4]
		leave
		retn
emit_ancillary_info endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; void __cdecl usage(int status)
		public usage
usage		proc near		; CODE XREF: main+518p	main+593p

status		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 4
		cmp	[ebp+status], 0
		jz	short loc_8000159
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, ds:stderr
		sub	esp, 4
		push	ebx
		push	edx		; format
		push	eax		; stream
		call	fprintf
		add	esp, 10h
		jmp	loc_80002BC
; ---------------------------------------------------------------------------

loc_8000159:				; CODE XREF: usage+Bj
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aUsageSOption__ ; "Usage: %s [OPTION]...	[FILE]...\n"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aWriteEachFileT ; "Write	each FILE to standard output, wit"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aMandatoryArgum ; "Mandatory arguments to long options are"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aBBodyNumbering ; "  -b,	--body-numbering=STYLE	    use	S"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aHHeaderNumberi ; "  -h,	--header-numbering=STYLE    use	S"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aVStartingLineN ; "  -v,	--starting-line-number=NUMBER  fi"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aHelpDisplayThi ; "	--help	   display this	help and "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aVersionOutputV ; "	--version  output version informa"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aByDefaultSelec ; "\nBy default,	selects	-v1 -i1	-l1 -sTAB"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aANumberAllLine ; "\n  a		number all lines\n  t	 "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		call	emit_ancillary_info

loc_80002BC:				; CODE XREF: usage+38j
		sub	esp, 0Ch
		push	[ebp+status]	; status
		call	exit
usage		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; _Bool	__cdecl	build_type_arg(const char **typep, re_pattern_buffer *regexp, char *fastmap)
build_type_arg	proc near		; CODE XREF: main+147p	main+1A6p ...

rval		= byte ptr -0Dh
errmsg		= dword	ptr -0Ch
typep		= dword	ptr  8
regexp		= dword	ptr  0Ch
fastmap		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+rval], 1
		mov	eax, ds:optarg
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		cmp	eax, 6Eh
		jz	short loc_80002FE
		cmp	eax, 6Eh
		jg	short loc_80002F0
		cmp	eax, 61h
		jz	short loc_80002FE
		jmp	loc_8000398
; ---------------------------------------------------------------------------

loc_80002F0:				; CODE XREF: build_type_arg+1Dj
		cmp	eax, 70h
		jz	short loc_800030E
		cmp	eax, 74h
		jnz	loc_8000398

loc_80002FE:				; CODE XREF: build_type_arg+18j
					; build_type_arg+22j
		mov	edx, ds:optarg
		mov	eax, [ebp+typep]
		mov	[eax], edx
		jmp	loc_800039F
; ---------------------------------------------------------------------------

loc_800030E:				; CODE XREF: build_type_arg+2Cj
		mov	eax, ds:optarg
		lea	edx, [eax+1]
		mov	ds:optarg, edx
		mov	edx, [ebp+typep]
		mov	[edx], eax
		mov	eax, [ebp+regexp]
		mov	dword ptr [eax], 0
		mov	eax, [ebp+regexp]
		mov	dword ptr [eax+4], 0
		mov	eax, [ebp+regexp]
		mov	edx, [ebp+fastmap]
		mov	[eax+10h], edx
		mov	eax, [ebp+regexp]
		mov	dword ptr [eax+14h], 0
		mov	ds:re_syntax_options, 2C6h
		mov	eax, ds:optarg
		sub	esp, 0Ch
		push	eax		; s
		call	strlen
		add	esp, 10h
		mov	edx, eax
		mov	eax, ds:optarg
		sub	esp, 4
		push	[ebp+regexp]	; buffer
		push	edx		; length
		push	eax		; pattern
		call	re_compile_pattern
		add	esp, 10h
		mov	[ebp+errmsg], eax
		cmp	[ebp+errmsg], 0
		jz	short loc_800039E
		push	[ebp+errmsg]
		push	offset format	; "%s"
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h
		jmp	short loc_800039E
; ---------------------------------------------------------------------------

loc_8000398:				; CODE XREF: build_type_arg+24j
					; build_type_arg+31j
		mov	[ebp+rval], 0
		jmp	short loc_800039F
; ---------------------------------------------------------------------------

loc_800039E:				; CODE XREF: build_type_arg+B9j
					; build_type_arg+CFj
		nop

loc_800039F:				; CODE XREF: build_type_arg+42j
					; build_type_arg+D5j
		movzx	eax, [ebp+rval]
		leave
		retn
build_type_arg	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void print_lineno()
print_lineno	proc near		; CODE XREF: proc_text:loc_8000595p
					; proc_text:loc_80005D0p ...

next_line_no	= qword	ptr -10h

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	esi, separator_str
		mov	eax, dword ptr ds:line_no
		mov	edx, dword ptr ds:line_no+4
		mov	ebx, lineno_width
		mov	ecx, lineno_format
		sub	esp, 0Ch
		push	esi
		push	edx
		push	eax
		push	ebx
		push	ecx		; format
		call	printf
		add	esp, 20h
		mov	ecx, dword ptr ds:line_no
		mov	ebx, dword ptr ds:line_no+4
		mov	eax, dword ptr page_incr
		mov	edx, dword ptr page_incr+4
		add	eax, ecx
		adc	edx, ebx
		mov	dword ptr [ebp+next_line_no], eax
		mov	dword ptr [ebp+next_line_no+4],	edx
		mov	eax, dword ptr ds:line_no
		mov	edx, dword ptr ds:line_no+4
		cmp	dword ptr [ebp+next_line_no+4],	edx
		jg	short loc_8000435
		cmp	dword ptr [ebp+next_line_no+4],	edx
		jl	short loc_8000415
		cmp	dword ptr [ebp+next_line_no], eax
		jnb	short loc_8000435

loc_8000415:				; CODE XREF: print_lineno+69j
		sub	esp, 0Ch
		push	offset aLineNumberOver ; "line number overflow"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_8000435:				; CODE XREF: print_lineno+64j
					; print_lineno+6Ej
		mov	eax, dword ptr [ebp+next_line_no]
		mov	edx, dword ptr [ebp+next_line_no+4]
		mov	dword ptr ds:line_no, eax
		mov	dword ptr ds:line_no+4,	edx
		nop
		lea	esp, [ebp-8]
		pop	ebx
		pop	esi
		pop	ebp
		retn
print_lineno	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void proc_header()
proc_header	proc near		; CODE XREF: process_file:loc_80007D9p
		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	eax, header_type
		mov	ds:current_type, eax
		mov	ds:current_regex, offset header_regex
		movzx	eax, reset_numbers
		test	al, al
		jz	short loc_8000489
		mov	eax, dword ptr starting_line_number
		mov	edx, dword ptr starting_line_number+4
		mov	dword ptr ds:line_no, eax
		mov	dword ptr ds:line_no+4,	edx

loc_8000489:				; CODE XREF: proc_header+23j
		sub	esp, 0Ch
		push	0Ah		; c
		call	putchar_unlocked
		add	esp, 10h
		nop
		leave
		retn
proc_header	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void proc_body()
proc_body	proc near		; CODE XREF: process_file:loc_80007E0p
		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	eax, body_type
		mov	ds:current_type, eax
		mov	ds:current_regex, offset body_regex
		sub	esp, 0Ch
		push	0Ah		; c
		call	putchar_unlocked
		add	esp, 10h
		nop
		leave
		retn
proc_body	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void proc_footer()
proc_footer	proc near		; CODE XREF: process_file:loc_80007E7p
		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	eax, footer_type
		mov	ds:current_type, eax
		mov	ds:current_regex, offset footer_regex
		sub	esp, 0Ch
		push	0Ah		; c
		call	putchar_unlocked
		add	esp, 10h
		nop
		leave
		retn
proc_footer	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void proc_text()
proc_text	proc near		; CODE XREF: process_file:loc_80007EEp
		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		mov	eax, ds:current_type
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		cmp	eax, 6Eh
		jz	loc_800060B
		cmp	eax, 6Eh
		jg	short loc_8000515
		cmp	eax, 61h
		jz	short loc_800052C
		jmp	loc_80006AE
; ---------------------------------------------------------------------------

loc_8000515:				; CODE XREF: proc_text+1Cj
		cmp	eax, 70h
		jz	loc_8000628
		cmp	eax, 74h
		jz	loc_80005DA
		jmp	loc_80006AE
; ---------------------------------------------------------------------------

loc_800052C:				; CODE XREF: proc_text+21j
		mov	eax, dword ptr blank_join
		mov	edx, dword ptr blank_join+4
		test	edx, edx
		js	loc_80005D0
		test	edx, edx
		jg	short loc_800054C
		cmp	eax, 1
		jbe	loc_80005D0

loc_800054C:				; CODE XREF: proc_text+54j
		mov	eax, ds:line_buf.length
		cmp	eax, 1
		ja	short loc_8000595
		mov	eax, ds:blank_lines_5320
		mov	edx, ds:dword_8001524
		add	eax, 1
		adc	edx, 0
		mov	ds:blank_lines_5320, eax
		mov	ds:dword_8001524, edx
		mov	ecx, ds:blank_lines_5320
		mov	ebx, ds:dword_8001524
		mov	eax, dword ptr blank_join
		mov	edx, dword ptr blank_join+4
		mov	esi, ebx
		xor	esi, edx
		xor	eax, ecx
		or	eax, esi
		test	eax, eax
		jnz	short loc_80005B3

loc_8000595:				; CODE XREF: proc_text+67j
		call	print_lineno
		mov	ds:blank_lines_5320, 0
		mov	ds:dword_8001524, 0
		jmp	loc_80006AE
; ---------------------------------------------------------------------------

loc_80005B3:				; CODE XREF: proc_text+A6j
		mov	edx, ds:stdout
		mov	eax, ds:print_no_line_fmt
		sub	esp, 8
		push	edx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		jmp	loc_80006AE
; ---------------------------------------------------------------------------

loc_80005D0:				; CODE XREF: proc_text+4Cj
					; proc_text+59j
		call	print_lineno
		jmp	loc_80006AE
; ---------------------------------------------------------------------------

loc_80005DA:				; CODE XREF: proc_text+34j
		mov	eax, ds:line_buf.length
		cmp	eax, 1
		jbe	short loc_80005EE
		call	print_lineno
		jmp	loc_80006AE
; ---------------------------------------------------------------------------

loc_80005EE:				; CODE XREF: proc_text+F5j
		mov	edx, ds:stdout
		mov	eax, ds:print_no_line_fmt
		sub	esp, 8
		push	edx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		jmp	loc_80006AE
; ---------------------------------------------------------------------------

loc_800060B:				; CODE XREF: proc_text+13j
		mov	edx, ds:stdout
		mov	eax, ds:print_no_line_fmt
		sub	esp, 8
		push	edx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		jmp	loc_80006AE
; ---------------------------------------------------------------------------

loc_8000628:				; CODE XREF: proc_text+2Bj
		mov	eax, ds:line_buf.length
		sub	eax, 1
		mov	ebx, eax
		mov	eax, ds:line_buf.length
		sub	eax, 1
		mov	ecx, eax
		mov	edx, ds:line_buf.buffer
		mov	eax, ds:current_regex
		sub	esp, 8
		push	0		; regs
		push	ebx		; range
		push	0		; start
		push	ecx		; length
		push	edx		; string
		push	eax		; buffer
		call	re_search
		add	esp, 20h
		cmp	eax, 0FFFFFFFEh
		jz	short loc_8000666
		cmp	eax, 0FFFFFFFFh
		jz	short loc_800068E
		jmp	short loc_80006A8
; ---------------------------------------------------------------------------

loc_8000666:				; CODE XREF: proc_text+170j
		sub	esp, 0Ch
		push	offset aErrorInRegular ; "error	in regular expression search"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		sub	esp, 4
		push	ebx		; format
		push	eax		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_800068E:				; CODE XREF: proc_text+175j
		mov	edx, ds:stdout
		mov	eax, ds:print_no_line_fmt
		sub	esp, 8
		push	edx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		jmp	short loc_80006AE
; ---------------------------------------------------------------------------

loc_80006A8:				; CODE XREF: proc_text+177j
		call	print_lineno
		nop

loc_80006AE:				; CODE XREF: proc_text+23j
					; proc_text+3Aj ...
		mov	ecx, ds:stdout
		mov	edx, ds:line_buf.length
		mov	eax, ds:line_buf.buffer
		push	ecx		; stream
		push	edx		; n
		push	1		; size
		push	eax		; ptr
		call	fwrite_unlocked
		add	esp, 10h
		nop
		lea	esp, [ebp-8]
		pop	ebx
		pop	esi
		pop	ebp
		retn
proc_text	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; section check_section()
check_section	proc near		; CODE XREF: process_file:loc_80007BEp

len		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, ds:line_buf.length
		sub	eax, 1
		mov	[ebp+len], eax
		cmp	[ebp+len], 1
		jbe	short loc_8000709
		mov	edx, section_del
		mov	eax, ds:line_buf.buffer
		sub	esp, 4
		push	2		; n
		push	edx		; s2
		push	eax		; s1
		call	memcmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_8000713

loc_8000709:				; CODE XREF: check_section+15j
		mov	eax, 3
		jmp	locret_80007B4
; ---------------------------------------------------------------------------

loc_8000713:				; CODE XREF: check_section+33j
		mov	eax, ds:header_del_len
		cmp	[ebp+len], eax
		jnz	short loc_8000747
		mov	ecx, ds:header_del_len
		mov	edx, ds:header_del
		mov	eax, ds:line_buf.buffer
		sub	esp, 4
		push	ecx		; n
		push	edx		; s2
		push	eax		; s1
		call	memcmp
		add	esp, 10h
		test	eax, eax
		jnz	short loc_8000747
		mov	eax, 0
		jmp	short locret_80007B4
; ---------------------------------------------------------------------------

loc_8000747:				; CODE XREF: check_section+47j
					; check_section+6Aj
		mov	eax, ds:body_del_len
		cmp	[ebp+len], eax
		jnz	short loc_800077B
		mov	ecx, ds:body_del_len
		mov	edx, ds:body_del
		mov	eax, ds:line_buf.buffer
		sub	esp, 4
		push	ecx		; n
		push	edx		; s2
		push	eax		; s1
		call	memcmp
		add	esp, 10h
		test	eax, eax
		jnz	short loc_800077B
		mov	eax, 1
		jmp	short locret_80007B4
; ---------------------------------------------------------------------------

loc_800077B:				; CODE XREF: check_section+7Bj
					; check_section+9Ej
		mov	eax, ds:footer_del_len
		cmp	[ebp+len], eax
		jnz	short loc_80007AF
		mov	ecx, ds:footer_del_len
		mov	edx, ds:footer_del
		mov	eax, ds:line_buf.buffer
		sub	esp, 4
		push	ecx		; n
		push	edx		; s2
		push	eax		; s1
		call	memcmp
		add	esp, 10h
		test	eax, eax
		jnz	short loc_80007AF
		mov	eax, 2
		jmp	short locret_80007B4
; ---------------------------------------------------------------------------

loc_80007AF:				; CODE XREF: check_section+AFj
					; check_section+D2j
		mov	eax, 3

locret_80007B4:				; CODE XREF: check_section+3Aj
					; check_section+71j ...
		leave
		retn
check_section	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl process_file(FILE *fp)
process_file	proc near		; CODE XREF: nl_file+74p

fp		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		jmp	short loc_80007F4
; ---------------------------------------------------------------------------

loc_80007BE:				; CODE XREF: process_file+53j
		call	check_section
		cmp	eax, 1
		jz	short loc_80007E0
		cmp	eax, 1
		jb	short loc_80007D9
		cmp	eax, 2
		jz	short loc_80007E7
		cmp	eax, 3
		jz	short loc_80007EE
		jmp	short loc_80007F4
; ---------------------------------------------------------------------------

loc_80007D9:				; CODE XREF: process_file+15j
		call	proc_header
		jmp	short loc_80007F4
; ---------------------------------------------------------------------------

loc_80007E0:				; CODE XREF: process_file+10j
		call	proc_body
		jmp	short loc_80007F4
; ---------------------------------------------------------------------------

loc_80007E7:				; CODE XREF: process_file+1Aj
		call	proc_footer
		jmp	short loc_80007F4
; ---------------------------------------------------------------------------

loc_80007EE:				; CODE XREF: process_file+1Fj
		call	proc_text
		nop

loc_80007F4:				; CODE XREF: process_file+6j
					; process_file+21j ...
		sub	esp, 8
		push	[ebp+fp]
		push	offset line_buf
		call	readlinebuffer
		add	esp, 10h
		test	eax, eax
		jnz	short loc_80007BE
		nop
		leave
		retn
process_file	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; _Bool	__cdecl	nl_file(const char *file)
nl_file		proc near		; CODE XREF: main+74Ep	main+772p

stream		= dword	ptr -0Ch
file		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		sub	esp, 8
		push	offset file	; "-"
		push	[ebp+file]	; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		jnz	short loc_800083C
		mov	ds:have_read_stdin, 1
		mov	eax, ds:stdin
		mov	[ebp+stream], eax
		jmp	short loc_800087C
; ---------------------------------------------------------------------------

loc_800083C:				; CODE XREF: nl_file+1Bj
		sub	esp, 8
		push	offset aR	; "r"
		push	[ebp+file]
		call	fopen64
		add	esp, 10h
		mov	[ebp+stream], eax
		cmp	[ebp+stream], 0
		jnz	short loc_800087C
		call	__errno_location
		mov	eax, [eax]
		push	[ebp+file]
		push	offset format	; "%s"
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	eax, 0
		jmp	locret_800091D
; ---------------------------------------------------------------------------

loc_800087C:				; CODE XREF: nl_file+2Cj nl_file+48j
		sub	esp, 0Ch
		push	[ebp+stream]	; fp
		call	process_file
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+stream]	; stream
		call	ferror_unlocked
		add	esp, 10h
		test	eax, eax
		jz	short loc_80008BD
		call	__errno_location
		mov	eax, [eax]
		push	[ebp+file]
		push	offset format	; "%s"
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	eax, 0
		jmp	short locret_800091D
; ---------------------------------------------------------------------------

loc_80008BD:				; CODE XREF: nl_file+8Cj
		sub	esp, 8
		push	offset file	; "-"
		push	[ebp+file]	; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		jnz	short loc_80008E4
		sub	esp, 0Ch
		push	[ebp+stream]	; stream
		call	clearerr_unlocked
		add	esp, 10h
		jmp	short loc_8000918
; ---------------------------------------------------------------------------

loc_80008E4:				; CODE XREF: nl_file+C4j
		sub	esp, 0Ch
		push	[ebp+stream]	; stream
		call	fclose
		add	esp, 10h
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_8000918
		call	__errno_location
		mov	eax, [eax]
		push	[ebp+file]
		push	offset format	; "%s"
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	eax, 0
		jmp	short locret_800091D
; ---------------------------------------------------------------------------

loc_8000918:				; CODE XREF: nl_file+D4j nl_file+E7j
		mov	eax, 1

locret_800091D:				; CODE XREF: nl_file+69j nl_file+ADj ...
		leave
		retn
nl_file		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public main
main		proc near

argv		= dword	ptr -3Ch
ok		= byte ptr -29h
tmp_long	= dword	ptr -28h
c		= dword	ptr -24h
len		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
argc		= dword	ptr  0Ch
envp		= dword	ptr  14h

		lea	ecx, [esp+4]
		and	esp, 0FFFFFFF0h
		push	dword ptr [ecx-4]
		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		push	ecx
		sub	esp, 38h
		mov	ebx, ecx
		mov	eax, [ebx+4]
		mov	[ebp+argv], eax
		mov	eax, large gs:14h
		mov	[ebp+var_1C], eax
		xor	eax, eax
		mov	[ebp+ok], 1
		mov	eax, [ebp+argv]
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	set_program_name
		add	esp, 10h
		sub	esp, 8
		push	offset locale	; locale
		push	6		; category
		call	setlocale
		add	esp, 10h
		sub	esp, 8
		push	offset dirname	; "/usr/local/share/locale"
		push	offset domainname ; "coreutils"
		call	bindtextdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset domainname ; "coreutils"
		call	textdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset close_stdout ; func
		call	atexit
		add	esp, 10h
		mov	ds:have_read_stdin, 0
		jmp	loc_8000E79
; ---------------------------------------------------------------------------

loc_80009AE:				; CODE XREF: main+57Dj
		mov	eax, [ebp+c]
		cmp	eax, 69h
		jz	loc_8000BF2
		cmp	eax, 69h
		jg	short loc_8000A04
		cmp	eax, 62h
		jz	loc_8000AB3
		cmp	eax, 62h
		jg	short loc_80009E8
		cmp	eax, 0FFFFFF7Dh
		jz	loc_8000E3C
		cmp	eax, 0FFFFFF7Eh
		jz	loc_8000E32
		jmp	loc_8000E74
; ---------------------------------------------------------------------------

loc_80009E8:				; CODE XREF: main+ACj
		cmp	eax, 66h
		jz	loc_8000B12
		cmp	eax, 68h
		jz	short loc_8000A54
		cmp	eax, 64h
		jz	loc_8000E26
		jmp	loc_8000E74
; ---------------------------------------------------------------------------

loc_8000A04:				; CODE XREF: main+9Ej
		cmp	eax, 73h
		jz	loc_8000CF8
		cmp	eax, 73h
		jg	short loc_8000A32
		cmp	eax, 6Eh
		jz	loc_8000D74
		cmp	eax, 70h
		jz	loc_8000C6F
		cmp	eax, 6Ch
		jz	loc_8000C7B
		jmp	loc_8000E74
; ---------------------------------------------------------------------------

loc_8000A32:				; CODE XREF: main+F1j
		cmp	eax, 77h
		jz	loc_8000D07
		cmp	eax, 80h
		jz	loc_8000BD2
		cmp	eax, 76h
		jz	loc_8000B71
		jmp	loc_8000E74
; ---------------------------------------------------------------------------

loc_8000A54:				; CODE XREF: main+D5j
		sub	esp, 4
		push	offset header_fastmap ;	fastmap
		push	offset header_regex ; regexp
		push	offset header_type ; typep
		call	build_type_arg
		add	esp, 10h
		xor	eax, 1
		test	al, al
		jz	loc_8000E79
		mov	eax, ds:optarg
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aInvalidHeaderN ; "invalid header numbering style: %s"
		call	gettext
		add	esp, 10h
		push	esi
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	[ebp+ok], 0
		jmp	loc_8000E79
; ---------------------------------------------------------------------------

loc_8000AB3:				; CODE XREF: main+A3j
		sub	esp, 4
		push	offset body_fastmap ; fastmap
		push	offset body_regex ; regexp
		push	offset body_type ; typep
		call	build_type_arg
		add	esp, 10h
		xor	eax, 1
		test	al, al
		jz	loc_8000E79
		mov	eax, ds:optarg
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aInvalidBodyNum ; "invalid body numbering style:	%s"
		call	gettext
		add	esp, 10h
		push	esi
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	[ebp+ok], 0
		jmp	loc_8000E79
; ---------------------------------------------------------------------------

loc_8000B12:				; CODE XREF: main+CCj
		sub	esp, 4
		push	offset footer_fastmap ;	fastmap
		push	offset footer_regex ; regexp
		push	offset footer_type ; typep
		call	build_type_arg
		add	esp, 10h
		xor	eax, 1
		test	al, al
		jz	loc_8000E79
		mov	eax, ds:optarg
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aInvalidFooterN ; "invalid footer numbering style: %s"
		call	gettext
		add	esp, 10h
		push	esi
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	[ebp+ok], 0
		jmp	loc_8000E79
; ---------------------------------------------------------------------------

loc_8000B71:				; CODE XREF: main+12Aj
		mov	eax, ds:optarg
		sub	esp, 0Ch
		push	offset locale
		push	offset starting_line_number
		push	0Ah
		push	0
		push	eax
		call	xstrtoimax
		add	esp, 20h
		test	eax, eax
		jz	loc_8000E79
		mov	eax, ds:optarg
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aInvalidStartin ; "invalid starting line	number:	%s"
		call	gettext
		add	esp, 10h
		push	esi
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	[ebp+ok], 0
		jmp	loc_8000E79
; ---------------------------------------------------------------------------

loc_8000BD2:				; CODE XREF: main+121j
		sub	esp, 0Ch
		push	offset aWarningPageInc ; "WARNING: --page-increment is deprecated"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h

loc_8000BF2:				; CODE XREF: main+95j
		mov	eax, ds:optarg
		sub	esp, 0Ch
		push	offset locale
		push	offset page_incr
		push	0Ah
		push	0
		push	eax
		call	xstrtoimax
		add	esp, 20h
		test	eax, eax
		jnz	short loc_8000C35
		mov	eax, dword ptr page_incr
		mov	edx, dword ptr page_incr+4
		test	edx, edx
		jg	loc_8000E79
		test	edx, edx
		js	short loc_8000C35
		cmp	eax, 0
		ja	loc_8000E79

loc_8000C35:				; CODE XREF: main+2F4j	main+30Bj
		mov	eax, ds:optarg
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aInvalidLineNum ; "invalid line number increment: %s"
		call	gettext
		add	esp, 10h
		push	esi
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	[ebp+ok], 0
		jmp	loc_8000E79
; ---------------------------------------------------------------------------

loc_8000C6F:				; CODE XREF: main+FFj
		mov	reset_numbers, 0
		jmp	loc_8000E79
; ---------------------------------------------------------------------------

loc_8000C7B:				; CODE XREF: main+108j
		mov	eax, ds:optarg
		sub	esp, 0Ch
		push	offset locale
		push	offset blank_join
		push	0Ah
		push	0
		push	eax
		call	xstrtoimax
		add	esp, 20h
		test	eax, eax
		jnz	short loc_8000CBE
		mov	eax, dword ptr blank_join
		mov	edx, dword ptr blank_join+4
		test	edx, edx
		jg	loc_8000E79
		test	edx, edx
		js	short loc_8000CBE
		cmp	eax, 0
		ja	loc_8000E79

loc_8000CBE:				; CODE XREF: main+37Dj	main+394j
		mov	eax, ds:optarg
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aInvalidNumberO ; "invalid number of blank lines: %s"
		call	gettext
		add	esp, 10h
		push	esi
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	[ebp+ok], 0
		jmp	loc_8000E79
; ---------------------------------------------------------------------------

loc_8000CF8:				; CODE XREF: main+E8j
		mov	eax, ds:optarg
		mov	separator_str, eax
		jmp	loc_8000E79
; ---------------------------------------------------------------------------

loc_8000D07:				; CODE XREF: main+116j
		mov	eax, ds:optarg
		sub	esp, 0Ch
		push	offset locale
		lea	edx, [ebp+tmp_long]
		push	edx
		push	0Ah
		push	0
		push	eax
		call	xstrtol
		add	esp, 20h
		test	eax, eax
		jnz	short loc_8000D30
		mov	eax, [ebp+tmp_long]
		test	eax, eax
		jg	short loc_8000D67

loc_8000D30:				; CODE XREF: main+408j
		mov	eax, ds:optarg
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aInvalidLineN_0 ; "invalid line number field width: %s"
		call	gettext
		add	esp, 10h
		push	esi
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	[ebp+ok], 0
		jmp	short loc_8000D6F
; ---------------------------------------------------------------------------

loc_8000D67:				; CODE XREF: main+40Fj
		mov	eax, [ebp+tmp_long]
		mov	lineno_width, eax

loc_8000D6F:				; CODE XREF: main+446j
		jmp	loc_8000E79
; ---------------------------------------------------------------------------

loc_8000D74:				; CODE XREF: main+F6j
		mov	eax, ds:optarg
		sub	esp, 8
		push	offset aLn	; "ln"
		push	eax		; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		jnz	short loc_8000D9D
		mov	lineno_format, offset FORMAT_LEFT ; "%-*lld%s"
		jmp	loc_8000E79
; ---------------------------------------------------------------------------

loc_8000D9D:				; CODE XREF: main+46Dj
		mov	eax, ds:optarg
		sub	esp, 8
		push	offset aRn	; "rn"
		push	eax		; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		jnz	short loc_8000DC6
		mov	lineno_format, offset FORMAT_RIGHT_NOLZ	; "%*lld%s"
		jmp	loc_8000E79
; ---------------------------------------------------------------------------

loc_8000DC6:				; CODE XREF: main+496j
		mov	eax, ds:optarg
		sub	esp, 8
		push	offset aRz	; "rz"
		push	eax		; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		jnz	short loc_8000DEF
		mov	lineno_format, offset FORMAT_RIGHT_LZ ;	"%0*lld%s"
		jmp	loc_8000E79
; ---------------------------------------------------------------------------

loc_8000DEF:				; CODE XREF: main+4BFj
		mov	eax, ds:optarg
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aInvalidLineN_1 ; "invalid line numbering format: %s"
		call	gettext
		add	esp, 10h
		push	esi
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	[ebp+ok], 0
		jmp	short loc_8000E79
; ---------------------------------------------------------------------------

loc_8000E26:				; CODE XREF: main+DAj
		mov	eax, ds:optarg
		mov	section_del, eax
		jmp	short loc_8000E79
; ---------------------------------------------------------------------------

loc_8000E32:				; CODE XREF: main+BEj
		sub	esp, 0Ch
		push	0		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8000E3C:				; CODE XREF: main+B3j
		mov	edx, ds:Version
		mov	eax, ds:stdout
		sub	esp, 4
		push	0
		push	offset aDavidMackenzie ; "David	MacKenzie"
		push	offset aScottBartram ; "Scott Bartram"
		push	edx
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	offset aNl	; "nl"
		push	eax
		call	version_etc
		add	esp, 20h
		sub	esp, 0Ch
		push	0		; status
		call	exit
; ---------------------------------------------------------------------------

loc_8000E74:				; CODE XREF: main+C4j main+E0j ...
		mov	[ebp+ok], 0
		nop

loc_8000E79:				; CODE XREF: main+8Aj main+154j ...
		sub	esp, 0Ch
		push	0		; longind
		push	offset longopts	; longopts
		push	offset shortopts ; "h:b:f:v:i:pl:s:w:n:d:"
		push	[ebp+argv]	; argv
		push	dword ptr [ebx]	; argc
		call	getopt_long
		add	esp, 20h
		mov	[ebp+c], eax
		cmp	[ebp+c], 0FFFFFFFFh
		jnz	loc_80009AE
		movzx	eax, [ebp+ok]
		xor	eax, 1
		test	al, al
		jz	short loc_8000EB7
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8000EB7:				; CODE XREF: main+58Cj
		mov	eax, section_del
		sub	esp, 0Ch
		push	eax		; s
		call	strlen
		add	esp, 10h
		mov	[ebp+len], eax
		mov	edx, [ebp+len]
		mov	eax, edx
		add	eax, eax
		add	eax, edx
		mov	ds:header_del_len, eax
		mov	eax, ds:header_del_len
		add	eax, 1
		sub	esp, 0Ch
		push	eax		; size_t
		call	xmalloc
		add	esp, 10h
		mov	ds:header_del, eax
		mov	esi, section_del
		mov	edi, section_del
		mov	edx, section_del
		mov	eax, ds:header_del
		sub	esp, 8
		push	edx
		push	eax
		call	stpcpy
		add	esp, 10h
		sub	esp, 8
		push	edi
		push	eax
		call	stpcpy
		add	esp, 10h
		sub	esp, 8
		push	esi		; src
		push	eax		; dest
		call	strcpy
		add	esp, 10h
		mov	eax, [ebp+len]
		add	eax, eax
		mov	ds:body_del_len, eax
		mov	eax, ds:body_del_len
		add	eax, 1
		sub	esp, 0Ch
		push	eax		; size_t
		call	xmalloc
		add	esp, 10h
		mov	ds:body_del, eax
		mov	esi, section_del
		mov	edx, section_del
		mov	eax, ds:body_del
		sub	esp, 8
		push	edx
		push	eax
		call	stpcpy
		add	esp, 10h
		sub	esp, 8
		push	esi		; src
		push	eax		; dest
		call	strcpy
		add	esp, 10h
		mov	eax, [ebp+len]
		mov	ds:footer_del_len, eax
		mov	eax, ds:footer_del_len
		add	eax, 1
		sub	esp, 0Ch
		push	eax		; size_t
		call	xmalloc
		add	esp, 10h
		mov	ds:footer_del, eax
		mov	edx, section_del
		mov	eax, ds:footer_del
		sub	esp, 8
		push	edx		; src
		push	eax		; dest
		call	strcpy
		add	esp, 10h
		sub	esp, 0Ch
		push	offset line_buf
		call	initbuffer
		add	esp, 10h
		mov	eax, separator_str
		sub	esp, 0Ch
		push	eax		; s
		call	strlen
		add	esp, 10h
		mov	[ebp+len], eax
		mov	eax, lineno_width
		mov	edx, eax
		mov	eax, [ebp+len]
		add	eax, edx
		add	eax, 1
		sub	esp, 0Ch
		push	eax		; size_t
		call	xmalloc
		add	esp, 10h
		mov	ds:print_no_line_fmt, eax
		mov	eax, lineno_width
		mov	edx, eax
		mov	eax, [ebp+len]
		add	edx, eax
		mov	eax, ds:print_no_line_fmt
		sub	esp, 4
		push	edx		; n
		push	20h		; c
		push	eax		; s
		call	memset
		add	esp, 10h
		mov	eax, ds:print_no_line_fmt
		mov	edx, lineno_width
		mov	ecx, edx
		mov	edx, [ebp+len]
		add	edx, ecx
		add	eax, edx
		mov	byte ptr [eax],	0
		mov	eax, dword ptr starting_line_number
		mov	edx, dword ptr starting_line_number+4
		mov	dword ptr ds:line_no, eax
		mov	dword ptr ds:line_no+4,	edx
		mov	eax, body_type
		mov	ds:current_type, eax
		mov	ds:current_regex, offset body_regex
		mov	eax, ds:optind
		cmp	eax, [ebx]
		jnz	short loc_80010B7
		sub	esp, 0Ch
		push	offset file	; "-"
		call	nl_file
		add	esp, 10h
		mov	[ebp+ok], al
		jmp	short loc_80010C0
; ---------------------------------------------------------------------------

loc_800107A:				; CODE XREF: main+79Fj
		mov	eax, ds:optind
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax		; file
		call	nl_file
		add	esp, 10h
		movzx	edx, [ebp+ok]
		movzx	eax, al
		and	eax, edx
		test	eax, eax
		setnz	al
		mov	[ebp+ok], al
		mov	eax, ds:optind
		add	eax, 1
		mov	ds:optind, eax

loc_80010B7:				; CODE XREF: main+744j
		mov	eax, ds:optind
		cmp	eax, [ebx]
		jl	short loc_800107A

loc_80010C0:				; CODE XREF: main+759j
		movzx	eax, ds:have_read_stdin
		test	al, al
		jz	short loc_80010FB
		mov	eax, ds:stdin
		sub	esp, 0Ch
		push	eax		; stream
		call	fclose
		add	esp, 10h
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_80010FB
		call	__errno_location
		mov	eax, [eax]
		sub	esp, 4
		push	offset file	; "-"
		push	eax		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_80010FB:				; CODE XREF: main+7AAj	main+7C0j
		cmp	[ebp+ok], 0
		jz	short loc_8001108
		mov	eax, 0
		jmp	short loc_800110D
; ---------------------------------------------------------------------------

loc_8001108:				; CODE XREF: main+7E0j
		mov	eax, 1

loc_800110D:				; CODE XREF: main+7E7j
		sub	esp, 0Ch
		push	eax		; status

loc_8001111:				; DATA XREF: .eh_frame:0800214Co
					; .eh_frame:08002170o ...
		call	exit
main		endp

_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 8001118h
; const	char *body_type
body_type	dd offset aTn		; DATA XREF: proc_body+6r main+1A1o ...
					; "tn\t"
; const	char *header_type
header_type	dd offset aTn+2		; DATA XREF: proc_header+6r main+142o
					; "n\t"
; const	char *footer_type
footer_type	dd offset aTn+2		; DATA XREF: proc_footer+6r main+200o
					; "n\t"
; const	char *separator_str
separator_str	dd offset aTn+4		; DATA XREF: print_lineno+8r main+3DEw ...
					; "\t"
; const	char *section_del
section_del	dd offset DEFAULT_SECTION_DELIMITERS ; DATA XREF: check_section+17r
					; main+50Cw ...
					; "\\:"
		align 10h
; intmax_t starting_line_number
starting_line_number dq	1		; DATA XREF: proc_header+25r main+25Fo ...
; intmax_t page_incr
page_incr	dq 1			; DATA XREF: print_lineno+41r
					; main+2E0o ...
; _Bool	reset_numbers
reset_numbers	db 1			; DATA XREF: proc_header+1Ar
					; main:loc_8000C6Fw
		align 8
; intmax_t blank_join
blank_join	dq 1			; DATA XREF: proc_text:loc_800052Cr
					; proc_text+91r ...
; int lineno_width
lineno_width	dd 6			; DATA XREF: print_lineno+19r
					; main+44Bw ...
; const	char *lineno_format
lineno_format	dd offset FORMAT_RIGHT_NOLZ ; DATA XREF: print_lineno+1Fr
					; main+46Fw ...
_data		ends			; "%*lld%s"

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
; Segment alignment '32byte' can not be represented in assembly
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 8001160h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
; const	char *current_type
current_type	dd ?			; DATA XREF: proc_header+Bw
					; proc_body+Bw	...
		align 20h
; re_pattern_buffer body_regex
body_regex	re_pattern_buffer <?>	; DATA XREF: proc_body+10o main+19Co ...
; re_pattern_buffer header_regex
header_regex	re_pattern_buffer <?>	; DATA XREF: proc_header+10o main+13Do
; re_pattern_buffer footer_regex
footer_regex	re_pattern_buffer <?>	; DATA XREF: proc_footer+10o main+1FBo
; char body_fastmap[256]
body_fastmap	db 100h	dup(?)		; DATA XREF: main+197o
; char header_fastmap[256]
header_fastmap	db 100h	dup(?)		; DATA XREF: main+138o
; char footer_fastmap[256]
footer_fastmap	db 100h	dup(?)		; DATA XREF: main+1F6o
; re_pattern_buffer *current_regex
current_regex	dd ?			; DATA XREF: proc_header+10w
					; proc_body+10w ...
; char *header_del
header_del	dd ?			; DATA XREF: check_section+4Fr
					; main+5CEw ...
; size_t header_del_len
header_del_len	dd ?			; DATA XREF: check_section:loc_8000713r
					; check_section+49r ...
; char *body_del
body_del	dd ?			; DATA XREF: check_section+83r
					; main+62Fw ...
; size_t body_del_len
body_del_len	dd ?			; DATA XREF: check_section:loc_8000747r
					; check_section+7Dr ...
; char *footer_del
footer_del	dd ?			; DATA XREF: check_section+B7r
					; main+67Bw ...
; size_t footer_del_len
footer_del_len	dd ?			; DATA XREF: check_section:loc_800077Br
					; check_section+B1r ...
; linebuffer line_buf
line_buf	linebuffer <?>		; DATA XREF: process_file+44o
					; main+69Bo ...
; char *print_no_line_fmt
print_no_line_fmt dd ?			; DATA XREF: proc_text+CCr
					; proc_text+107r ...
		align 10h
; intmax_t line_no
line_no		dq ?			; DATA XREF: print_lineno+Er
					; print_lineno+35r ...
; _Bool	have_read_stdin
have_read_stdin	db ?			; DATA XREF: nl_file+1Dw main+83w ...
		align 10h
; Function-local static	variable
; intmax_t blank_lines_5320
blank_lines_5320 dd ?			; DATA XREF: proc_text+69r
					; proc_text+7Aw ...
dword_8001524	dd ?			; DATA XREF: proc_text+6Er
					; proc_text+7Fw ...
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment '32byte' can not be represented in assembly
_rodata		segment	para public 'CONST' use32
		assume cs:_rodata
		;org 8001540h
; char msgid[]
msgid		db 0Ah			; DATA XREF: emit_ancillary_info+1Do
		db 'Report %s bugs to %s',0Ah,0
aBugCoreutils@g	db 'bug-coreutils@gnu.org',0 ; DATA XREF: emit_ancillary_info+2Do
		align 10h
; char aSHomePageHttpW[]
aSHomePageHttpW	db '%s home page: <http://www.gnu.org/software/%s/>',0Ah,0
					; DATA XREF: emit_ancillary_info+3Fo
; char domainname[]
domainname	db 'coreutils',0        ; DATA XREF: emit_ancillary_info+4Fo
					; main+56o ...
aGnuCoreutils	db 'GNU coreutils',0    ; DATA XREF: emit_ancillary_info+54o
					; main+538o
		align 4
; char aGeneralHelpUsi[]
aGeneralHelpUsi	db 'General help using GNU software: <http://www.gnu.org/gethelp/>',0Ah,0
					; DATA XREF: emit_ancillary_info+6Bo
; char s2[]
s2		db 'en_',0              ; DATA XREF: emit_ancillary_info+A2o
; char aReportSTransla[]
aReportSTransla	db 'Report %s translation bugs to <http://translationproject.org/team'
					; DATA XREF: emit_ancillary_info+CCo
		db '/>',0Ah,0
		align 4
; char aForCompleteDoc[]
aForCompleteDoc	db 'For complete documentation, run: info coreutils ',27h,'%s invocation'
					; DATA XREF: emit_ancillary_info+FCo
		db 27h,0Ah,0
		align 4
; char FORMAT_RIGHT_NOLZ[8]
FORMAT_RIGHT_NOLZ db '%*lld%s',0        ; DATA XREF: main+498o
					; .data:lineno_formato
; char FORMAT_RIGHT_LZ[9]
FORMAT_RIGHT_LZ	db '%0*lld%s',0         ; DATA XREF: main+4C1o
		align 10h
; char FORMAT_LEFT[9]
FORMAT_LEFT	db '%-*lld%s',0         ; DATA XREF: main+46Fo
; char DEFAULT_SECTION_DELIMITERS[3]
DEFAULT_SECTION_DELIMITERS db '\:',0    ; DATA XREF: .data:section_delo
aTn:					; DATA XREF: .data:body_typeo
					; .data:header_typeo ...
		unicode	0, <tn>
		dw 9
aHeaderNumberin	db 'header-numbering',0 ; DATA XREF: .rodata:longoptso
aBodyNumbering	db 'body-numbering',0   ; DATA XREF: .rodata:longoptso
aFooterNumberin	db 'footer-numbering',0 ; DATA XREF: .rodata:longoptso
aStartingLineNu	db 'starting-line-number',0 ; DATA XREF: .rodata:longoptso
aLineIncrement	db 'line-increment',0   ; DATA XREF: .rodata:longoptso
aPageIncrement	db 'page-increment',0   ; DATA XREF: .rodata:longoptso
aNoRenumber	db 'no-renumber',0      ; DATA XREF: .rodata:longoptso
aJoinBlankLines	db 'join-blank-lines',0 ; DATA XREF: .rodata:longoptso
aNumberSeparato	db 'number-separator',0 ; DATA XREF: .rodata:longoptso
aNumberWidth	db 'number-width',0     ; DATA XREF: .rodata:longoptso
aNumberFormat	db 'number-format',0    ; DATA XREF: .rodata:longoptso
aSectionDelimit	db 'section-delimiter',0 ; DATA XREF: .rodata:longoptso
aHelp		db 'help',0             ; DATA XREF: .rodata:longoptso
aVersion	db 'version',0          ; DATA XREF: .rodata:longoptso
		align 10h
; const	option longopts[15]
longopts	option <offset aHeaderNumberin,	1, 0, 68h> ; DATA XREF:	main+55Fo
		option <offset aBodyNumbering, 1, 0, 62h> ; "header-numbering"
		option <offset aFooterNumberin,	1, 0, 66h>
		option <offset aStartingLineNu,	1, 0, 76h>
		option <offset aLineIncrement, 1, 0, 69h>
		option <offset aPageIncrement, 1, 0, 80h>
		option <offset aNoRenumber, 0, 0, 70h>
		option <offset aJoinBlankLines,	1, 0, 6Ch>
		option <offset aNumberSeparato,	1, 0, 73h>
		option <offset aNumberWidth, 1,	0, 77h>
		option <offset aNumberFormat, 1, 0, 6Eh>
		option <offset aSectionDelimit,	1, 0, 64h>
		option <offset aHelp, 0, 0, 0FFFFFF7Eh>
		option <offset aVersion, 0, 0, 0FFFFFF7Dh>
		option	<0>
; char aTrySHelpForMor[]
aTrySHelpForMor	db 'Try `%s --help',27h,' for more information.',0Ah,0
					; DATA XREF: usage+16o
		align 4
; char aUsageSOption__[]
aUsageSOption__	db 'Usage: %s [OPTION]... [FILE]...',0Ah,0 ; DATA XREF: usage+46o
		align 4
; char aWriteEachFileT[]
aWriteEachFileT	db 'Write each FILE to standard output, with line numbers added.',0Ah
					; DATA XREF: usage+69o
		db 'With no FILE, or when FILE is -, read standard input.',0Ah
		db 0Ah,0
		align 4
; char aMandatoryArgum[]
aMandatoryArgum	db 'Mandatory arguments to long options are mandatory for short optio'
					; DATA XREF: usage+8Co
		db 'ns too.',0Ah,0
		align 10h
; char aBBodyNumbering[]
aBBodyNumbering	db '  -b, --body-numbering=STYLE      use STYLE for numbering body li'
					; DATA XREF: usage+AFo
		db 'nes',0Ah
		db '  -d, --section-delimiter=CC      use CC for separating logical p'
		db 'ages',0Ah
		db '  -f, --footer-numbering=STYLE    use STYLE for numbering footer '
		db 'lines',0Ah,0
		align 4
; char aHHeaderNumberi[]
aHHeaderNumberi	db '  -h, --header-numbering=STYLE    use STYLE for numbering header '
					; DATA XREF: usage+D2o
		db 'lines',0Ah
		db '  -i, --line-increment=NUMBER     line number increment at each l'
		db 'ine',0Ah
		db '  -l, --join-blank-lines=NUMBER   group of NUMBER empty lines cou'
		db 'nted as one',0Ah
		db '  -n, --number-format=FORMAT      insert line numbers according t'
		db 'o FORMAT',0Ah
		db '  -p, --no-renumber               do not reset line numbers at lo'
		db 'gical pages',0Ah
		db '  -s, --number-separator=STRING   add STRING after (possible) lin'
		db 'e number',0Ah,0
		align 10h
; char aVStartingLineN[]
aVStartingLineN	db '  -v, --starting-line-number=NUMBER  first line number on each lo'
					; DATA XREF: usage+F5o
		db 'gical page',0Ah
		db '  -w, --number-width=NUMBER       use NUMBER columns for line num'
		db 'bers',0Ah,0
		align 4
; char aHelpDisplayThi[]
aHelpDisplayThi	db '      --help     display this help and exit',0Ah,0
					; DATA XREF: usage+118o
		align 4
; char aVersionOutputV[]
aVersionOutputV	db '      --version  output version information and exit',0Ah,0
					; DATA XREF: usage+13Bo
		align 4
; char aByDefaultSelec[]
aByDefaultSelec	db 0Ah			; DATA XREF: usage+15Eo
		db 'By default, selects -v1 -i1 -l1 -sTAB -w6 -nrn -hn -bt -fn.  CC a'
		db 're',0Ah
		db 'two delimiter characters for separating logical pages, a missing',0Ah
		db 'second character implies :.  Type \\ for \.  STYLE is one of:',0Ah,0
		align 4
; char aANumberAllLine[]
aANumberAllLine	db 0Ah			; DATA XREF: usage+181o
		db '  a         number all lines',0Ah
		db '  t         number only nonempty lines',0Ah
		db '  n         number no lines',0Ah
		db '  pBRE      number only lines that contain a match for the basic '
		db 'regular',0Ah
		db '            expression, BRE',0Ah
		db 0Ah
		db 'FORMAT is one of:',0Ah
		db 0Ah
		db '  ln   left justified, no leading zeros',0Ah
		db '  rn   right justified, no leading zeros',0Ah
		db '  rz   right justified, leading zeros',0Ah
		db 0Ah,0
; char format[]
format		db '%s',0               ; DATA XREF: build_type_arg+BEo
					; nl_file+54o ...
; char aLineNumberOver[]
aLineNumberOver	db 'line number overflow',0 ; DATA XREF: print_lineno+73o
		align 10h
; char aErrorInRegular[]
aErrorInRegular	db 'error in regular expression search',0 ; DATA XREF: proc_text+17Co
; char file[]
file		db '-',0                ; DATA XREF: nl_file+9o nl_file+B2o ...
aR		db 'r',0                ; DATA XREF: nl_file+31o
; char locale
locale		db 0			; DATA XREF: main+3Fo main+25Ao ...
; char dirname[]
dirname		db '/usr/local/share/locale',0 ; DATA XREF: main+51o
; char aInvalidHeaderN[]
aInvalidHeaderN	db 'invalid header numbering style: %s',0 ; DATA XREF: main+170o
		align 4
; char aInvalidBodyNum[]
aInvalidBodyNum	db 'invalid body numbering style: %s',0 ; DATA XREF: main+1CFo
		align 4
; char aInvalidFooterN[]
aInvalidFooterN	db 'invalid footer numbering style: %s',0 ; DATA XREF: main+22Eo
		align 4
; char aInvalidStartin[]
aInvalidStartin	db 'invalid starting line number: %s',0 ; DATA XREF: main+28Fo
		align 10h
; char aWarningPageInc[]
aWarningPageInc	db 'WARNING: --page-increment is deprecated; use --line-increment ins'
					; DATA XREF: main+2B6o
		db 'tead',0
		align 4
; char aInvalidLineNum[]
aInvalidLineNum	db 'invalid line number increment: %s',0 ; DATA XREF: main+32Co
		align 4
; char aInvalidNumberO[]
aInvalidNumberO	db 'invalid number of blank lines: %s',0 ; DATA XREF: main+3B5o
		align 10h
; char aInvalidLineN_0[]
aInvalidLineN_0	db 'invalid line number field width: %s',0 ; DATA XREF: main+427o
; char aLn[]
aLn		db 'ln',0               ; DATA XREF: main+45Do
; char aRn[]
aRn		db 'rn',0               ; DATA XREF: main+486o
; char aRz[]
aRz		db 'rz',0               ; DATA XREF: main+4AFo
		align 10h
; char aInvalidLineN_1[]
aInvalidLineN_1	db 'invalid line numbering format: %s',0 ; DATA XREF: main+4E6o
aDavidMackenzie	db 'David MacKenzie',0  ; DATA XREF: main+52Do
aScottBartram	db 'Scott Bartram',0    ; DATA XREF: main+532o
aNl		db 'nl',0               ; DATA XREF: main+53Do
; char shortopts[]
shortopts	db 'h:b:f:v:i:pl:s:w:n:d:',0 ; DATA XREF: main+564o
_rodata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_eh_frame	segment	dword public 'CONST' use32
		assume cs:_eh_frame
		;org 800212Ch
		dd 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 20h, 1Ch
		dd offset loc_8001111-800325Dh
		dd 11Ch, 80E4100h, 0D420285h, 3834405h,	0C5011403h, 4040CC3h
		dd 18h,	40h
		dd offset loc_8001111-8003165h
		dd 1ABh, 80E4100h, 0D420285h, 3834405h,	1Ch, 5Ch
		dd offset loc_8001111-8002FD6h
		dd 0DEh, 80E4100h, 0D420285h, 0C5DA0205h, 4040Ch, 24h
		dd 7Ch
		dd offset loc_8001111-8002F18h
		dd 0A9h, 80E4100h, 0D420285h, 3864505h,	9E020483h, 41C641C3h
		dd 4040CC5h, 1Ch, 0A4h
		dd offset loc_8001111-8002E97h
		dd 4Bh,	80E4100h, 0D420285h, 0C5470205h, 4040Ch, 1Ch, 0C4h
		dd offset loc_8001111-8002E6Ch
		dd 2Ah,	80E4100h, 0D420285h, 0CC56605h,	404h, 1Ch, 0E4h
		dd offset loc_8001111-8002E62h
		dd 2Ah,	80E4100h, 0D420285h, 0CC56605h,	404h, 28h, 104h
		dd offset loc_8001111-8002E58h
		dd 1E7h, 80E4100h, 0D420285h, 3864205h,	0DF030483h, 0C641C301h
		dd 40CC541h, 4,	1Ch, 130h
		dd offset loc_8001111-8002C9Dh
		dd 0E2h, 80E4100h, 0D420285h, 0C5DE0205h, 4040Ch, 1Ch
		dd 150h
		dd offset loc_8001111-8002BDBh
		dd 58h,	80E4100h, 0D420285h, 0C5540205h, 4040Ch, 1Ch, 170h
		dd offset loc_8001111-8002BA3h
		dd 111h, 80E4100h, 0D420285h, 10D0305h,	4040CC5h, 2Ch
		dd 190h
		dd offset loc_8001111-8002AB2h
		dd 7F7h, 10C4400h, 5104700h, 46007502h,	7075030Fh, 2071006h
		dd 6107C75h, 10787502h,	74750203h
_eh_frame	ends

; ===========================================================================

; Segment type:	Externs
; extern
		extrn program_name:dword ; DATA	XREF: emit_ancillary_info+7r
					; emit_ancillary_info+B6r ...
		extrn last_component:near ; CODE XREF: emit_ancillary_info+10p
					; emit_ancillary_info+BFp ...
; char *gettext(const char *msgid)
		extrn gettext:near	; CODE XREF: emit_ancillary_info+22p
					; emit_ancillary_info+44p ...
; int printf(const char	*format, ...)
		extrn printf:near	; CODE XREF: emit_ancillary_info+34p
					; emit_ancillary_info+5Ap ...
; struct _IO_FILE *stdout
		extrn stdout:dword	; DATA XREF: emit_ancillary_info+62r
					; usage+60r ...
		extrn fputs_unlocked:near ; CODE XREF: emit_ancillary_info+7Dp
					; usage+7Bp ...
; char *setlocale(int category,	const char *locale)
		extrn setlocale:near	; CODE XREF: emit_ancillary_info+8Cp
					; main+46p
; int strncmp(const char *s1, const char *s2, size_t n)
		extrn strncmp:near	; CODE XREF: emit_ancillary_info+AAp
; struct _IO_FILE *stderr
		extrn stderr:dword	; DATA XREF: usage+25r
; int fprintf(FILE *stream, const char *format,	...)
		extrn fprintf:near	; CODE XREF: usage+30p
; void exit(int	status)
		extrn exit:near		; CODE XREF: usage+1A6p main+550p ...
; char *optarg
		extrn optarg:dword	; DATA XREF: build_type_arg+Ar
					; build_type_arg:loc_80002FEr ...
; reg_syntax_t re_syntax_options
		extrn re_syntax_options:dword ;	DATA XREF: build_type_arg+80w
; size_t strlen(const char *s)
		extrn strlen:near	; CODE XREF: build_type_arg+93p
					; main+5A1p ...
; const	char *re_compile_pattern(const char *pattern, size_t length, struct re_pattern_buffer *buffer)
		extrn re_compile_pattern:near ;	CODE XREF: build_type_arg+AAp
; void error(int status, int errnum, const char	*format, ...)
		extrn error:near	; CODE XREF: build_type_arg+C7p
					; print_lineno+88p ...
; int putchar_unlocked(int c)
		extrn putchar_unlocked:near ; CODE XREF: proc_header+40p
					; proc_body+1Fp ...
; int re_search(struct re_pattern_buffer *buffer, const	char *string, int length, int start, int range,	struct re_registers *regs)
		extrn re_search:near	; CODE XREF: proc_text+165p
; int *_errno_location(void)
		extrn __errno_location:near ; CODE XREF: proc_text+18Bp
					; nl_file+4Ap ...
; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
		extrn fwrite_unlocked:near ; CODE XREF:	proc_text+1D7p
; int memcmp(const void	*s1, const void	*s2, size_t n)
		extrn memcmp:near	; CODE XREF: check_section+29p
					; check_section+60p ...
		extrn readlinebuffer:near ; CODE XREF: process_file+49p
; int strcmp(const char	*s1, const char	*s2)
		extrn strcmp:near	; CODE XREF: nl_file+11p nl_file+BAp ...
; struct _IO_FILE *stdin
		extrn stdin:dword	; DATA XREF: nl_file+24r main+7ACr
		extrn fopen64:near	; CODE XREF: nl_file+39p
; int ferror_unlocked(FILE *stream)
		extrn ferror_unlocked:near ; CODE XREF:	nl_file+82p
; void clearerr_unlocked(FILE *stream)
		extrn clearerr_unlocked:near ; CODE XREF: nl_file+CCp
; int fclose(FILE *stream)
		extrn fclose:near	; CODE XREF: nl_file+DCp main+7B5p
		extrn set_program_name:near ; CODE XREF: main+34p
; char *bindtextdomain(const char *domainname, const char *dirname)
		extrn bindtextdomain:near ; CODE XREF: main+5Bp
; char *textdomain(const char *domainname)
		extrn textdomain:near	; CODE XREF: main+6Bp
; void close_stdout(void)
		extrn close_stdout	; DATA XREF: main+76o
; int atexit(void (*func)(void))
		extrn atexit:near	; CODE XREF: main+7Bp
		extrn quote:near	; CODE XREF: main+163p	main+1C2p ...
		extrn xstrtoimax:near	; CODE XREF: main+269p	main+2EAp ...
		extrn xstrtol:near	; CODE XREF: main+3FEp
		extrn Version:dword	; DATA XREF: main:loc_8000E3Cr
		extrn version_etc:near	; CODE XREF: main+543p
; int getopt_long(int argc, char *const	*argv, const char *shortopts, const struct option *longopts, int *longind)
		extrn getopt_long:near	; CODE XREF: main+56Ep
; void *xmalloc(size_t)
		extrn xmalloc:near	; CODE XREF: main+5C6p	main+627p ...
		extrn stpcpy:near	; CODE XREF: main+5EFp	main+5FCp ...
; char *strcpy(char *dest, const char *src)
		extrn strcpy:near	; CODE XREF: main+609p	main+657p ...
		extrn initbuffer:near	; CODE XREF: main+6A0p
; void *memset(void *s,	int c, size_t n)
		extrn memset:near	; CODE XREF: main+6F4p
; int optind
		extrn optind:dword	; DATA XREF: main+73Dr
					; main:loc_800107Ar ...


		end
