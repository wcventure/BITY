;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B611-7234-BB			    |
; |		Doskey Lee, Kingsoft Internet Security Software		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	6089F8521BDAD1B617CEF4F5EF50F057
; Input	CRC32 :	8F3C5E5B

; File Name   :	D:\coreutils-o\pathchk.o
; Format      :	ELF for	Intel 386 (Relocatable)
;
; Source File :	'pathchk.c'

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	byte public 'CODE' use32
		assume cs:_text
		;org 8000000h
		assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void emit_ancillary_info()
emit_ancillary_info proc near		; CODE XREF: usage+C9p

lc_messages	= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset msgid	; "\nReport %s bugs to %s\n"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset aBugCoreutils@g ; "bug-coreutils@gnu.org"
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	offset aSHomePageHttpW ; "%s home page:	<http://www.gnu.org/softw"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset domainname ; "coreutils"
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aGeneralHelpUsi ; "General help using GNU software: <http:"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		sub	esp, 8
		push	0		; locale
		push	5		; category
		call	setlocale
		add	esp, 10h
		mov	[ebp+lc_messages], eax
		cmp	[ebp+lc_messages], 0
		jz	short loc_80000E6
		sub	esp, 4
		push	3		; n
		push	offset s2	; "en_"
		push	[ebp+lc_messages] ; s1
		call	strncmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_80000E6
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aReportSTransla ; "Report %s translation	bugs to	<http://t"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h

loc_80000E6:				; CODE XREF: emit_ancillary_info+9Bj
					; emit_ancillary_info+B4j
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aForCompleteDoc ; "For complete documentation, run: info	c"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		nop
		mov	ebx, [ebp+var_4]
		leave
		retn
emit_ancillary_info endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; void __cdecl usage(int status)
		public usage
usage		proc near		; CODE XREF: main+C2p main+106p ...

status		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 4
		cmp	[ebp+status], 0
		jz	short loc_8000159
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, ds:stderr
		sub	esp, 4
		push	ebx
		push	edx		; format
		push	eax		; stream
		call	fprintf
		add	esp, 10h
		jmp	loc_80001EA
; ---------------------------------------------------------------------------

loc_8000159:				; CODE XREF: usage+Bj
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aUsageSOption__ ; "Usage: %s [OPTION]...	NAME...\n"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aDiagnoseInvali ; "Diagnose invalid or unportable file nam"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aHelpDisplayThi ; "	--help	   display this	help and "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aVersionOutputV ; "	--version  output version informa"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		call	emit_ancillary_info

loc_80001EA:				; CODE XREF: usage+38j
		sub	esp, 0Ch
		push	[ebp+status]	; status
		call	exit
usage		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public main
main		proc near

ok		= byte ptr -1Fh
check_basic_portability= byte ptr -1Eh
check_extra_portability= byte ptr -1Dh
optc		= dword	ptr -1Ch
argc		= dword	ptr  0Ch
argv		= dword	ptr  10h
envp		= dword	ptr  14h

		lea	ecx, [esp+4]
		and	esp, 0FFFFFFF0h
		push	dword ptr [ecx-4]
		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		push	ecx
		sub	esp, 1Ch
		mov	ebx, ecx
		mov	[ebp+ok], 1
		mov	[ebp+check_basic_portability], 0
		mov	[ebp+check_extra_portability], 0
		mov	eax, [ebx+4]
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	set_program_name
		add	esp, 10h
		sub	esp, 8
		push	offset locale	; locale
		push	6		; category
		call	setlocale
		add	esp, 10h
		sub	esp, 8
		push	offset dirname	; "/usr/local/share/locale"
		push	offset domainname ; "coreutils"
		call	bindtextdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset domainname ; "coreutils"
		call	textdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset close_stdout ; func
		call	atexit
		add	esp, 10h
		jmp	loc_8000300
; ---------------------------------------------------------------------------

loc_8000273:				; CODE XREF: main+12Ej
		mov	eax, [ebp+optc]
		cmp	eax, 50h
		jz	short loc_80002AC
		cmp	eax, 50h
		jg	short loc_8000290
		cmp	eax, 0FFFFFF7Dh
		jz	short loc_80002BC
		cmp	eax, 0FFFFFF7Eh
		jz	short loc_80002B2
		jmp	short loc_80002F6
; ---------------------------------------------------------------------------

loc_8000290:				; CODE XREF: main+89j
		cmp	eax, 70h
		jz	short loc_80002A6
		cmp	eax, 80h
		jnz	short loc_80002F6
		mov	[ebp+check_basic_portability], 1
		mov	[ebp+check_extra_portability], 1
		jmp	short loc_8000300
; ---------------------------------------------------------------------------

loc_80002A6:				; CODE XREF: main+9Ej
		mov	[ebp+check_basic_portability], 1
		jmp	short loc_8000300
; ---------------------------------------------------------------------------

loc_80002AC:				; CODE XREF: main+84j
		mov	[ebp+check_extra_portability], 1
		jmp	short loc_8000300
; ---------------------------------------------------------------------------

loc_80002B2:				; CODE XREF: main+97j
		sub	esp, 0Ch
		push	0		; status
		call	usage
; ---------------------------------------------------------------------------

loc_80002BC:				; CODE XREF: main+90j
		mov	edx, ds:Version
		mov	eax, ds:stdout
		push	0
		push	offset aJimMeyering ; "Jim Meyering"
		push	offset aDavidMackenzie ; "David	MacKenzie"
		push	offset aPaulEggert ; "Paul Eggert"
		push	edx
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	offset aPathchk	; "pathchk"
		push	eax
		call	version_etc
		add	esp, 20h
		sub	esp, 0Ch
		push	0		; status
		call	exit
; ---------------------------------------------------------------------------

loc_80002F6:				; CODE XREF: main+99j main+A5j
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8000300:				; CODE XREF: main+79j main+AFj ...
		sub	esp, 0Ch
		push	0		; longind
		push	offset longopts	; longopts
		push	offset shortopts ; "+pP"
		push	dword ptr [ebx+4] ; argv
		push	dword ptr [ebx]	; argc
		call	getopt_long
		add	esp, 20h
		mov	[ebp+optc], eax
		cmp	[ebp+optc], 0FFFFFFFFh
		jnz	loc_8000273
		mov	eax, ds:optind
		cmp	eax, [ebx]
		jnz	short loc_80003A3
		sub	esp, 0Ch
		push	offset aMissingOperand ; "missing operand"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_800035C:				; CODE XREF: main+1B5j
		movzx	ecx, [ebp+check_extra_portability]
		movzx	edx, [ebp+check_basic_portability]
		mov	eax, ds:optind
		lea	esi, ds:0[eax*4]
		mov	eax, [ebx+4]
		add	eax, esi
		mov	eax, [eax]
		sub	esp, 4
		push	ecx		; check_extra_portability
		push	edx		; check_basic_portability
		push	eax		; file
		call	validate_file_name
		add	esp, 10h
		movzx	edx, [ebp+ok]
		movzx	eax, al
		and	eax, edx
		test	eax, eax
		setnz	al
		mov	[ebp+ok], al
		mov	eax, ds:optind
		add	eax, 1
		mov	ds:optind, eax

loc_80003A3:				; CODE XREF: main+13Bj
		mov	eax, ds:optind
		cmp	eax, [ebx]
		jl	short loc_800035C
		cmp	[ebp+ok], 0
		jz	short loc_80003B9
		mov	eax, 0
		jmp	short loc_80003BE
; ---------------------------------------------------------------------------

loc_80003B9:				; CODE XREF: main+1BBj
		mov	eax, 1

loc_80003BE:				; CODE XREF: main+1C2j
		sub	esp, 0Ch
		push	eax		; status
		call	exit
main		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; _Bool	__cdecl	no_leading_hyphen(const	char *file)
no_leading_hyphen proc near		; CODE XREF: validate_file_name+60p

p		= dword	ptr -0Ch
var_4		= dword	ptr -4
file		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, [ebp+file]
		mov	[ebp+p], eax
		jmp	short loc_8000424
; ---------------------------------------------------------------------------

loc_80003D6:				; CODE XREF: no_leading_hyphen+74j
		mov	eax, [ebp+p]
		cmp	eax, [ebp+file]
		jz	short loc_80003EB
		mov	eax, [ebp+p]
		sub	eax, 1
		movzx	eax, byte ptr [eax]
		cmp	al, 2Fh
		jnz	short loc_8000420

loc_80003EB:				; CODE XREF: no_leading_hyphen+15j
		sub	esp, 0Ch
		push	[ebp+file]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aLeadingInAComp ; "leading `-' in a component of file name"...
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	eax, 0
		jmp	short loc_8000442
; ---------------------------------------------------------------------------

loc_8000420:				; CODE XREF: no_leading_hyphen+22j
		add	[ebp+p], 1

loc_8000424:				; CODE XREF: no_leading_hyphen+Dj
		sub	esp, 8
		push	2Dh		; c
		push	[ebp+p]		; s
		call	strchr
		add	esp, 10h
		mov	[ebp+p], eax
		cmp	[ebp+p], 0
		jnz	short loc_80003D6
		mov	eax, 1

loc_8000442:				; CODE XREF: no_leading_hyphen+57j
		mov	ebx, [ebp+var_4]
		leave
		retn
no_leading_hyphen endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; _Bool	__cdecl	portable_chars_only(const char *file, size_t filelen)
portable_chars_only proc near		; CODE XREF: validate_file_name+D6p

file		= dword	ptr -2Ch
validlen	= dword	ptr -20h
invalid		= dword	ptr -1Ch
charlen		= dword	ptr -18h
mbstate		= mbstate_t ptr	-14h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
filelen		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 30h
		mov	eax, [ebp+arg_0]
		mov	[ebp+file], eax
		mov	eax, large gs:14h
		mov	[ebp+var_C], eax
		xor	eax, eax
		sub	esp, 8
		push	offset accept	; "/ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijkl"...
		push	[ebp+file]	; s
		call	strspn
		add	esp, 10h
		mov	[ebp+validlen],	eax
		mov	edx, [ebp+file]
		mov	eax, [ebp+validlen]
		add	eax, edx
		mov	[ebp+invalid], eax
		mov	eax, [ebp+invalid]
		movzx	eax, byte ptr [eax]
		test	al, al
		jz	loc_8000516
		mov	[ebp+mbstate.__count], 0
		mov	dword ptr [ebp+mbstate.__value], 0
		mov	eax, [ebp+filelen]
		sub	eax, [ebp+validlen]
		sub	esp, 4
		lea	edx, [ebp+mbstate]
		push	edx		; ps
		push	eax		; n
		push	[ebp+invalid]	; s
		call	mbrlen
		add	esp, 10h
		mov	[ebp+charlen], eax
		sub	esp, 8
		push	[ebp+file]
		push	0
		call	quote_n
		add	esp, 10h
		mov	esi, eax
		cmp	[ebp+charlen], 10h
		ja	short loc_80004D6
		mov	eax, [ebp+charlen]
		jmp	short loc_80004DB
; ---------------------------------------------------------------------------

loc_80004D6:				; CODE XREF: portable_chars_only+88j
		mov	eax, 1

loc_80004DB:				; CODE XREF: portable_chars_only+8Dj
		push	eax
		push	[ebp+invalid]
		push	6
		push	1
		call	quotearg_n_style_mem
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aNonportableCha ; "nonportable character	%s in file name	%"...
		call	gettext
		add	esp, 10h
		sub	esp, 0Ch
		push	esi
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 20h
		mov	eax, 0
		jmp	short loc_800051B
; ---------------------------------------------------------------------------

loc_8000516:				; CODE XREF: portable_chars_only+42j
		mov	eax, 1

loc_800051B:				; CODE XREF: portable_chars_only+CDj
		mov	ecx, [ebp+var_C]
		xor	ecx, large gs:14h
		jz	short loc_800052C
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_800052C:				; CODE XREF: portable_chars_only+DEj
		lea	esp, [ebp-8]
		pop	ebx
		pop	esi
		pop	ebp
		retn
portable_chars_only endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; char *__cdecl	component_start(char *f)
component_start	proc near		; CODE XREF: validate_file_name+310p
					; validate_file_name+51Fp

f		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		jmp	short loc_800053C
; ---------------------------------------------------------------------------

loc_8000538:				; CODE XREF: component_start+11j
		add	[ebp+f], 1

loc_800053C:				; CODE XREF: component_start+3j
		mov	eax, [ebp+f]
		movzx	eax, byte ptr [eax]
		cmp	al, 2Fh
		jz	short loc_8000538
		mov	eax, [ebp+f]
		pop	ebp
		retn
component_start	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; size_t __cdecl component_len(const char *f)
component_len	proc near		; CODE XREF: validate_file_name+2DBp
					; validate_file_name+46Dp

len		= dword	ptr -4
f		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		mov	[ebp+len], 1
		jmp	short loc_800055E
; ---------------------------------------------------------------------------

loc_800055A:				; CODE XREF: component_len+2Fj
		add	[ebp+len], 1

loc_800055E:				; CODE XREF: component_len+Dj
		mov	edx, [ebp+f]
		mov	eax, [ebp+len]
		add	eax, edx
		movzx	eax, byte ptr [eax]
		cmp	al, 2Fh
		jz	short loc_800057C
		mov	edx, [ebp+f]
		mov	eax, [ebp+len]
		add	eax, edx
		movzx	eax, byte ptr [eax]
		test	al, al
		jnz	short loc_800055A

loc_800057C:				; CODE XREF: component_len+20j
		mov	eax, [ebp+len]
		leave
		retn
component_len	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; _Bool	__cdecl	validate_file_name(char	*file, _Bool check_basic_portability, _Bool check_extra_portability)
validate_file_name proc	near		; CODE XREF: main+188p

check_extra_portability= byte ptr -0C4h
check_basic_portability= byte ptr -0C0h
file		= dword	ptr -0BCh
check_component_lengths= byte ptr -0ACh
file_exists	= byte ptr -0ABh
c_0		= byte ptr -0AAh
c		= byte ptr -0A9h
start		= dword	ptr -0A8h
maxsize		= dword	ptr -0A4h
name_max	= dword	ptr -0A0h
known_name_max	= dword	ptr -9Ch
filelen		= dword	ptr -98h
dir		= dword	ptr -94h
size		= dword	ptr -90h
len		= dword	ptr -8Ch
maxlen		= dword	ptr -88h
length		= dword	ptr -84h
length_0	= dword	ptr -80h
len_1		= dword	ptr -7Ch
maxlen_0	= dword	ptr -78h
dir_0		= dword	ptr -74h
len_0		= dword	ptr -70h
st		= stat ptr -6Ch
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 0C4h
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_8]
		mov	ecx, [ebp+arg_0]
		mov	[ebp+file], ecx
		mov	[ebp+check_basic_portability], dl
		mov	[ebp+check_extra_portability], al
		mov	eax, large gs:14h
		mov	[ebp+var_C], eax
		xor	eax, eax
		sub	esp, 0Ch
		push	[ebp+file]	; s
		call	strlen
		add	esp, 10h
		mov	[ebp+filelen], eax
		mov	[ebp+file_exists], 0
		cmp	[ebp+check_extra_portability], 0
		jz	short loc_80005FA
		sub	esp, 0Ch
		push	[ebp+file]	; file
		call	no_leading_hyphen
		add	esp, 10h
		xor	eax, 1
		test	al, al
		jz	short loc_80005FA
		mov	eax, 0
		jmp	loc_8000AC4
; ---------------------------------------------------------------------------

loc_80005FA:				; CODE XREF: validate_file_name+55j
					; validate_file_name+6Dj
		cmp	[ebp+check_basic_portability], 0
		jnz	short loc_800060C
		cmp	[ebp+check_extra_portability], 0
		jz	short loc_800063F

loc_800060C:				; CODE XREF: validate_file_name+80j
		cmp	[ebp+filelen], 0
		jnz	short loc_800063F
		sub	esp, 0Ch
		push	offset aEmptyFileName ;	"empty file name"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	eax, 0
		jmp	loc_8000AC4
; ---------------------------------------------------------------------------

loc_800063F:				; CODE XREF: validate_file_name+89j
					; validate_file_name+92j
		cmp	[ebp+check_basic_portability], 0
		jz	short loc_8000670
		sub	esp, 8
		push	[ebp+filelen]	; filelen
		push	[ebp+file]	; file
		call	portable_chars_only
		add	esp, 10h
		xor	eax, 1
		test	al, al
		jz	short loc_80006CE
		mov	eax, 0
		jmp	loc_8000AC4
; ---------------------------------------------------------------------------

loc_8000670:				; CODE XREF: validate_file_name+C5j
		sub	esp, 8
		lea	eax, [ebp+st]
		push	eax
		push	[ebp+file]
		call	lstat64
		add	esp, 10h
		test	eax, eax
		jnz	short loc_8000692
		mov	[ebp+file_exists], 1
		jmp	short loc_80006CE
; ---------------------------------------------------------------------------

loc_8000692:				; CODE XREF: validate_file_name+106j
		call	__errno_location
		mov	eax, [eax]
		cmp	eax, 2
		jnz	short loc_80006A7
		cmp	[ebp+filelen], 0
		jnz	short loc_80006CE

loc_80006A7:				; CODE XREF: validate_file_name+11Bj
		call	__errno_location
		mov	eax, [eax]
		push	[ebp+file]
		push	offset format	; "%s"
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	eax, 0
		jmp	loc_8000AC4
; ---------------------------------------------------------------------------

loc_80006CE:				; CODE XREF: validate_file_name+E3j
					; validate_file_name+10Fj ...
		cmp	[ebp+check_basic_portability], 0
		jnz	short loc_80006F9
		movzx	eax, [ebp+file_exists]
		xor	eax, 1
		test	al, al
		jz	loc_800081C
		cmp	[ebp+filelen], 0FFh
		jbe	loc_800081C

loc_80006F9:				; CODE XREF: validate_file_name+154j
		cmp	[ebp+check_basic_portability], 0
		jz	short loc_8000711
		mov	[ebp+maxsize], 100h
		jmp	loc_80007A9
; ---------------------------------------------------------------------------

loc_8000711:				; CODE XREF: validate_file_name+17Fj
		mov	eax, [ebp+file]
		movzx	eax, byte ptr [eax]
		cmp	al, 2Fh
		jnz	short loc_8000725
		mov	eax, offset asc_8000F3C	; "/"
		jmp	short loc_800072A
; ---------------------------------------------------------------------------

loc_8000725:				; CODE XREF: validate_file_name+19Bj
		mov	eax, offset a_	; "."

loc_800072A:				; CODE XREF: validate_file_name+1A2j
		mov	[ebp+dir], eax
		call	__errno_location
		mov	dword ptr [eax], 0
		sub	esp, 8
		push	4		; name
		push	[ebp+dir]	; path
		call	pathconf
		add	esp, 10h
		mov	[ebp+size], eax
		cmp	[ebp+size], 0
		jns	short loc_800079D
		call	__errno_location
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_800079D
		sub	esp, 0Ch
		push	offset aSUnableToDeter ; "%s: unable to	determine maximum file na"...
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		push	[ebp+dir]
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	eax, 0
		jmp	loc_8000AC4
; ---------------------------------------------------------------------------

loc_800079D:				; CODE XREF: validate_file_name+1DAj
					; validate_file_name+1E5j
		mov	eax, [ebp+size]
		mov	[ebp+maxsize], eax

loc_80007A9:				; CODE XREF: validate_file_name+18Bj
		mov	eax, [ebp+maxsize]
		cmp	eax, [ebp+filelen]
		ja	short loc_800081C
		mov	eax, [ebp+filelen]
		mov	[ebp+len], eax
		mov	eax, [ebp+maxsize]
		sub	eax, 1
		mov	[ebp+maxlen], eax
		sub	esp, 0Ch
		push	[ebp+file]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aLimitLuExceede ; "limit	%lu exceeded by	length %lu of fil"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	[ebp+len]
		push	[ebp+maxlen]
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 20h
		mov	eax, 0
		jmp	loc_8000AC4
; ---------------------------------------------------------------------------

loc_800081C:				; CODE XREF: validate_file_name+162j
					; validate_file_name+172j ...
		movzx	eax, [ebp+check_basic_portability]
		mov	[ebp+check_component_lengths], al
		movzx	eax, [ebp+check_component_lengths]
		xor	eax, 1
		test	al, al
		jz	short loc_80008AC
		movzx	eax, [ebp+file_exists]
		xor	eax, 1
		test	al, al
		jz	short loc_80008AC
		mov	eax, [ebp+file]
		mov	[ebp+start], eax
		jmp	short loc_8000888
; ---------------------------------------------------------------------------

loc_8000853:				; CODE XREF: validate_file_name+329j
		sub	esp, 0Ch
		push	[ebp+start]	; f
		call	component_len
		add	esp, 10h
		mov	[ebp+length], eax
		cmp	[ebp+length], 0Eh
		jbe	short loc_800087C
		mov	[ebp+check_component_lengths], 1
		jmp	short loc_80008AC
; ---------------------------------------------------------------------------

loc_800087C:				; CODE XREF: validate_file_name+2F0j
		mov	eax, [ebp+length]
		add	[ebp+start], eax

loc_8000888:				; CODE XREF: validate_file_name+2D0j
		sub	esp, 0Ch
		push	[ebp+start]	; f
		call	component_start
		add	esp, 10h
		mov	[ebp+start], eax
		mov	eax, [ebp+start]
		movzx	eax, byte ptr [eax]
		test	al, al
		jnz	short loc_8000853

loc_80008AC:				; CODE XREF: validate_file_name+2B4j
					; validate_file_name+2C2j ...
		cmp	[ebp+check_component_lengths], 0
		jz	loc_8000ABF
		mov	[ebp+name_max],	0Eh
		cmp	[ebp+check_basic_portability], 0
		jz	short loc_80008D3
		mov	eax, 0Eh
		jmp	short loc_80008D8
; ---------------------------------------------------------------------------

loc_80008D3:				; CODE XREF: validate_file_name+349j
		mov	eax, 0

loc_80008D8:				; CODE XREF: validate_file_name+350j
		mov	[ebp+known_name_max], eax
		mov	eax, [ebp+file]
		mov	[ebp+start], eax
		jmp	loc_8000A97
; ---------------------------------------------------------------------------

loc_80008EF:				; CODE XREF: validate_file_name+538j
		cmp	[ebp+known_name_max], 0
		jz	short loc_8000909
		mov	eax, [ebp+known_name_max]
		mov	[ebp+name_max],	eax
		jmp	loc_80009E5
; ---------------------------------------------------------------------------

loc_8000909:				; CODE XREF: validate_file_name+375j
		mov	eax, [ebp+start]
		cmp	eax, [ebp+file]
		jz	short loc_800091F
		mov	eax, [ebp+file]
		jmp	short loc_8000924
; ---------------------------------------------------------------------------

loc_800091F:				; CODE XREF: validate_file_name+394j
		mov	eax, offset a_	; "."

loc_8000924:				; CODE XREF: validate_file_name+39Cj
		mov	[ebp+dir_0], eax
		mov	eax, [ebp+start]
		movzx	eax, byte ptr [eax]
		mov	[ebp+c], al
		call	__errno_location
		mov	dword ptr [eax], 0
		mov	eax, [ebp+start]
		mov	byte ptr [eax],	0
		sub	esp, 8
		push	3		; name
		push	[ebp+dir_0]	; path
		call	pathconf
		add	esp, 10h
		mov	[ebp+len_0], eax
		mov	eax, [ebp+start]
		movzx	edx, [ebp+c]
		mov	[eax], dl
		cmp	[ebp+len_0], 0
		js	short loc_800097D
		mov	eax, [ebp+len_0]
		mov	[ebp+name_max],	eax
		jmp	short loc_80009E5
; ---------------------------------------------------------------------------

loc_800097D:				; CODE XREF: validate_file_name+3EFj
		call	__errno_location
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_800098F
		cmp	eax, 2
		jz	short loc_800099B
		jmp	short loc_80009A9
; ---------------------------------------------------------------------------

loc_800098F:				; CODE XREF: validate_file_name+405j
		mov	[ebp+name_max],	0FFFFFFFFh
		jmp	short loc_80009E5
; ---------------------------------------------------------------------------

loc_800099B:				; CODE XREF: validate_file_name+40Aj
		mov	eax, [ebp+name_max]
		mov	[ebp+known_name_max], eax
		jmp	short loc_80009E5
; ---------------------------------------------------------------------------

loc_80009A9:				; CODE XREF: validate_file_name+40Cj
		mov	eax, [ebp+start]
		mov	byte ptr [eax],	0
		call	__errno_location
		mov	eax, [eax]
		push	[ebp+dir_0]
		push	offset format	; "%s"
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	eax, [ebp+start]
		movzx	edx, [ebp+c]
		mov	[eax], dl
		mov	eax, 0
		jmp	loc_8000AC4
; ---------------------------------------------------------------------------

loc_80009E5:				; CODE XREF: validate_file_name+383j
					; validate_file_name+3FAj ...
		sub	esp, 0Ch
		push	[ebp+start]	; f
		call	component_len
		add	esp, 10h
		mov	[ebp+length_0],	eax
		mov	eax, [ebp+name_max]
		cmp	eax, [ebp+length_0]
		jnb	loc_8000A8E
		mov	eax, [ebp+length_0]
		mov	[ebp+len_1], eax
		mov	eax, [ebp+name_max]
		mov	[ebp+maxlen_0],	eax
		mov	edx, [ebp+start]
		mov	eax, [ebp+len_1]
		add	eax, edx
		movzx	eax, byte ptr [eax]
		mov	[ebp+c_0], al
		mov	edx, [ebp+start]
		mov	eax, [ebp+len_1]
		add	eax, edx
		mov	byte ptr [eax],	0
		sub	esp, 0Ch
		push	[ebp+start]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aLimitLuExcee_0 ; "limit	%lu exceeded by	length %lu of fil"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	[ebp+len_1]
		push	[ebp+maxlen_0]
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 20h
		mov	edx, [ebp+start]
		mov	eax, [ebp+len_1]
		add	edx, eax
		movzx	eax, [ebp+c_0]
		mov	[edx], al
		mov	eax, 0
		jmp	short loc_8000AC4
; ---------------------------------------------------------------------------

loc_8000A8E:				; CODE XREF: validate_file_name+481j
		mov	eax, [ebp+length_0]
		add	[ebp+start], eax

loc_8000A97:				; CODE XREF: validate_file_name+369j
		sub	esp, 0Ch
		push	[ebp+start]	; f
		call	component_start
		add	esp, 10h
		mov	[ebp+start], eax
		mov	eax, [ebp+start]
		movzx	eax, byte ptr [eax]
		test	al, al
		jnz	loc_80008EF

loc_8000ABF:				; CODE XREF: validate_file_name+332j
		mov	eax, 1

loc_8000AC4:				; CODE XREF: validate_file_name+74j
					; validate_file_name+B9j ...
		mov	ecx, [ebp+var_C]
		xor	ecx, large gs:14h
		jz	short loc_8000AD5
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_8000AD5:				; CODE XREF: validate_file_name+54Dj
		mov	ebx, [ebp+var_4]
		leave

locret_8000AD9:				; DATA XREF: .eh_frame:08001004o
					; .eh_frame:08001028o ...
		retn
validate_file_name endp

_text		ends

; ===========================================================================

; Segment type:	Zero-length
; Segment permissions: Read/Write
_data		segment	byte public 'DATA' use32
_data		ends

; ===========================================================================

; Segment type:	Zero-length
; Segment permissions: Read/Write
_bss		segment	byte public 'BSS' use32
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment '32byte' can not be represented in assembly
_rodata		segment	para public 'CONST' use32
		assume cs:_rodata
		;org 8000AE0h
; char msgid[]
msgid		db 0Ah			; DATA XREF: emit_ancillary_info+1Do
		db 'Report %s bugs to %s',0Ah,0
aBugCoreutils@g	db 'bug-coreutils@gnu.org',0 ; DATA XREF: emit_ancillary_info+2Do
		align 10h
; char aSHomePageHttpW[]
aSHomePageHttpW	db '%s home page: <http://www.gnu.org/software/%s/>',0Ah,0
					; DATA XREF: emit_ancillary_info+3Fo
; char domainname[]
domainname	db 'coreutils',0        ; DATA XREF: emit_ancillary_info+4Fo
					; main+4Co ...
aGnuCoreutils	db 'GNU coreutils',0    ; DATA XREF: emit_ancillary_info+54o
					; main+E4o
		align 4
; char aGeneralHelpUsi[]
aGeneralHelpUsi	db 'General help using GNU software: <http://www.gnu.org/gethelp/>',0Ah,0
					; DATA XREF: emit_ancillary_info+6Bo
; char s2[]
s2		db 'en_',0              ; DATA XREF: emit_ancillary_info+A2o
; char aReportSTransla[]
aReportSTransla	db 'Report %s translation bugs to <http://translationproject.org/team'
					; DATA XREF: emit_ancillary_info+CCo
		db '/>',0Ah,0
		align 4
; char aForCompleteDoc[]
aForCompleteDoc	db 'For complete documentation, run: info coreutils ',27h,'%s invocation'
					; DATA XREF: emit_ancillary_info+FCo
		db 27h,0Ah,0
aPortability	db 'portability',0      ; DATA XREF: .rodata:longoptso
aHelp		db 'help',0             ; DATA XREF: .rodata:longoptso
aVersion	db 'version',0          ; DATA XREF: .rodata:longoptso
		align 20h
; const	option longopts[4]
longopts	option <offset aPortability, 0,	0, 80h>	; DATA XREF: main+110o
		option <offset aHelp, 0, 0, 0FFFFFF7Eh>	; "portability"
		option <offset aVersion, 0, 0, 0FFFFFF7Dh>
		option	<0>
; char aTrySHelpForMor[]
aTrySHelpForMor	db 'Try `%s --help',27h,' for more information.',0Ah,0
					; DATA XREF: usage+16o
		align 4
; char aUsageSOption__[]
aUsageSOption__	db 'Usage: %s [OPTION]... NAME...',0Ah,0 ; DATA XREF: usage+46o
		align 4
; char aDiagnoseInvali[]
aDiagnoseInvali	db 'Diagnose invalid or unportable file names.',0Ah ; DATA XREF: usage+69o
		db 0Ah
		db '  -p                  check for most POSIX systems',0Ah
		db '  -P                  check for empty names and leading "-"',0Ah
		db '      --portability   check for all POSIX systems (equivalent to '
		db '-p -P)',0Ah,0
; char aHelpDisplayThi[]
aHelpDisplayThi	db '      --help     display this help and exit',0Ah,0
					; DATA XREF: usage+8Co
		align 4
; char aVersionOutputV[]
aVersionOutputV	db '      --version  output version information and exit',0Ah,0
					; DATA XREF: usage+AFo
; char locale
locale		db 0			; DATA XREF: main+35o
; char dirname[]
dirname		db '/usr/local/share/locale',0 ; DATA XREF: main+47o
aJimMeyering	db 'Jim Meyering',0     ; DATA XREF: main+D4o
aDavidMackenzie	db 'David MacKenzie',0  ; DATA XREF: main+D9o
aPaulEggert	db 'Paul Eggert',0      ; DATA XREF: main+DEo
aPathchk	db 'pathchk',0          ; DATA XREF: main+E9o
; char shortopts[]
shortopts	db '+pP',0              ; DATA XREF: main+115o
; char aMissingOperand[]
aMissingOperand	db 'missing operand',0  ; DATA XREF: main+140o
; char aLeadingInAComp[]
aLeadingInAComp	db 'leading `-',27h,' in a component of file name %s',0
					; DATA XREF: no_leading_hyphen+37o
		align 4
; char accept[]
accept		db '/ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789._'
					; DATA XREF: portable_chars_only+1Co
		db '-',0
		align 10h
; char aNonportableCha[]
aNonportableCha	db 'nonportable character %s in file name %s',0
					; DATA XREF: portable_chars_only+A9o
; char aEmptyFileName[]
aEmptyFileName	db 'empty file name',0  ; DATA XREF: validate_file_name+97o
; char format[]
format		db '%s',0               ; DATA XREF: validate_file_name+133o
					; validate_file_name+43Bo
asc_8000F3C	db '/',0                ; DATA XREF: validate_file_name+19Do
a_		db '.',0                ; DATA XREF: validate_file_name:loc_8000725o
					; validate_file_name:loc_800091Fo
; char aSUnableToDeter[]
aSUnableToDeter	db '%s: unable to determine maximum file name length',0
					; DATA XREF: validate_file_name+1EAo
		align 4
; char aLimitLuExceede[]
aLimitLuExceede	db 'limit %lu exceeded by length %lu of file name %s',0
					; DATA XREF: validate_file_name+267o
		align 4
; char aLimitLuExcee_0[]
aLimitLuExcee_0	db 'limit %lu exceeded by length %lu of file name component %s',0
					; DATA XREF: validate_file_name+4CEo
_rodata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_eh_frame	segment	dword public 'CONST' use32
		assume cs:_eh_frame
		;org 8000FE4h
		dd 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 20h, 1Ch
		dd offset locret_8000AD9-8001ADDh
		dd 11Ch, 80E4100h, 0D420285h, 3834405h,	0C5011403h, 4040CC3h
		dd 18h,	40h
		dd offset locret_8000AD9-80019E5h
		dd 0D9h, 80E4100h, 0D420285h, 3834405h,	28h, 5Ch
		dd offset locret_8000AD9-8001928h
		dd 1D2h, 10C4400h, 5104700h, 45007502h,	7475030Fh, 2061006h
		dd 3107C75h, 787502h, 20h, 88h
		dd offset locret_8000AD9-8001782h
		dd 80h,	80E4100h, 0D420285h, 3834405h, 0C3C57802h, 4040Ch
		dd 24h,	0ACh
		dd offset locret_8000AD9-8001726h
		dd 0ECh, 80E4100h, 0D420285h, 3864505h,	0E1020483h, 41C641C3h
		dd 4040CC5h, 1Ch, 0D4h
		dd offset locret_8000AD9-8001662h
		dd 18h,	80E4100h, 0D420285h, 0CC55405h,	404h, 1Ch, 0F4h
		dd offset locret_8000AD9-800166Ah
		dd 36h,	80E4100h, 0D420285h, 0CC57205h,	404h, 20h, 114h
		dd offset locret_8000AD9-8001654h
		dd 559h, 80E4100h, 0D420285h, 3834705h,	0C5054E03h, 4040CC3h
_eh_frame	ends

; ===========================================================================

; Segment type:	Externs
; extern
		extrn program_name:dword ; DATA	XREF: emit_ancillary_info+7r
					; emit_ancillary_info+B6r ...
		extrn last_component:near ; CODE XREF: emit_ancillary_info+10p
					; emit_ancillary_info+BFp ...
; char *gettext(const char *msgid)
		extrn gettext:near	; CODE XREF: emit_ancillary_info+22p
					; emit_ancillary_info+44p ...
; int printf(const char	*format, ...)
		extrn printf:near	; CODE XREF: emit_ancillary_info+34p
					; emit_ancillary_info+5Ap ...
; struct _IO_FILE *stdout
		extrn stdout:dword	; DATA XREF: emit_ancillary_info+62r
					; usage+60r ...
		extrn fputs_unlocked:near ; CODE XREF: emit_ancillary_info+7Dp
					; usage+7Bp ...
; char *setlocale(int category,	const char *locale)
		extrn setlocale:near	; CODE XREF: emit_ancillary_info+8Cp
					; main+3Cp
; int strncmp(const char *s1, const char *s2, size_t n)
		extrn strncmp:near	; CODE XREF: emit_ancillary_info+AAp
; struct _IO_FILE *stderr
		extrn stderr:dword	; DATA XREF: usage+25r
; int fprintf(FILE *stream, const char *format,	...)
		extrn fprintf:near	; CODE XREF: usage+30p
; void exit(int	status)
		extrn exit:near		; CODE XREF: usage+D4p	main+FCp ...
		extrn set_program_name:near ; CODE XREF: main+2Ap
; char *bindtextdomain(const char *domainname, const char *dirname)
		extrn bindtextdomain:near ; CODE XREF: main+51p
; char *textdomain(const char *domainname)
		extrn textdomain:near	; CODE XREF: main+61p
; void close_stdout(void)
		extrn close_stdout	; DATA XREF: main+6Co
; int atexit(void (*func)(void))
		extrn atexit:near	; CODE XREF: main+71p
		extrn Version:dword	; DATA XREF: main:loc_80002BCr
		extrn version_etc:near	; CODE XREF: main+EFp
; int getopt_long(int argc, char *const	*argv, const char *shortopts, const struct option *longopts, int *longind)
		extrn getopt_long:near	; CODE XREF: main+11Fp
; int optind
		extrn optind:dword	; DATA XREF: main+134r	main+16Fr ...
; void error(int status, int errnum, const char	*format, ...)
		extrn error:near	; CODE XREF: main+155p
					; no_leading_hyphen+4Ap ...
		extrn quote:near	; CODE XREF: no_leading_hyphen+2Ap
					; validate_file_name+25Ap ...
; char *strchr(const char *s, int c)
		extrn strchr:near	; CODE XREF: no_leading_hyphen+65p
; size_t strspn(const char *s, const char *accept)
		extrn strspn:near	; CODE XREF: portable_chars_only+24p
; size_t mbrlen(const char *s, size_t n, mbstate_t *ps)
		extrn mbrlen:near	; CODE XREF: portable_chars_only+67p
		extrn quote_n:near	; CODE XREF: portable_chars_only+7Ap
		extrn quotearg_n_style_mem:near	; CODE XREF: portable_chars_only+9Cp
		extrn __stack_chk_fail:near ; CODE XREF: portable_chars_only+E0p
					; validate_file_name+54Fp
; size_t strlen(const char *s)
		extrn strlen:near	; CODE XREF: validate_file_name+39p
		extrn lstat64:near	; CODE XREF: validate_file_name+FCp
; int *_errno_location(void)
		extrn __errno_location:near ; CODE XREF: validate_file_name:loc_8000692p
					; validate_file_name:loc_80006A7p ...
; __int32 pathconf(const char *path, int name)
		extrn pathconf:near	; CODE XREF: validate_file_name+1C5p
					; validate_file_name+3D1p


		end
