;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B611-7234-BB			    |
; |		Doskey Lee, Kingsoft Internet Security Software		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	BA62AE516250B7EC5CCE899644EC7440
; Input	CRC32 :	056F3254

; File Name   :	D:\coreutils-o\who.o
; Format      :	ELF for	Intel 386 (Relocatable)
;
; Source File :	'who.c'

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	byte public 'CODE' use32
		assume cs:_text
		;org 8000000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void emit_ancillary_info()
emit_ancillary_info proc near		; CODE XREF: usage+19Ep

lc_messages	= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset msgid	; "\nReport %s bugs to %s\n"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset aBugCoreutils@g ; "bug-coreutils@gnu.org"
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	offset aSHomePageHttpW ; "%s home page:	<http://www.gnu.org/softw"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset domainname ; "coreutils"
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aGeneralHelpUsi ; "General help using GNU software: <http:"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		sub	esp, 8
		push	0		; locale
		push	5		; category
		call	setlocale
		add	esp, 10h
		mov	[ebp+lc_messages], eax
		cmp	[ebp+lc_messages], 0
		jz	short loc_80000E6
		sub	esp, 4
		push	3		; n
		push	offset s2	; "en_"
		push	[ebp+lc_messages] ; s1
		call	strncmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_80000E6
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aReportSTransla ; "Report %s translation	bugs to	<http://t"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h

loc_80000E6:				; CODE XREF: emit_ancillary_info+9Bj
					; emit_ancillary_info+B4j
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aForCompleteDoc ; "For complete documentation, run: info	c"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		nop
		mov	ebx, [ebp+var_4]
		leave
		retn
emit_ancillary_info endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; char *__cdecl	timetostr(time_t t, char *buf)
timetostr	proc near		; CODE XREF: time_string+66p

t		= dword	ptr  8
buf		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	eax, [ebp+t]
		cdq
		sub	esp, 4
		push	[ebp+buf]
		push	edx
		push	eax
		call	imaxtostr
		add	esp, 10h
		leave
		retn
timetostr	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; const	char *__cdecl idle_string(time_t when, time_t boottime)
idle_string	proc near		; CODE XREF: print_user+120p

seconds_idle	= dword	ptr -0Ch
var_4		= dword	ptr -4
when		= dword	ptr  8
boottime	= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, now_5252
		cmp	eax, 80000000h
		jnz	short loc_800015B
		sub	esp, 0Ch
		push	offset now_5252	; timer
		call	time
		add	esp, 10h

loc_800015B:				; CODE XREF: idle_string+11j
		mov	eax, [ebp+boottime]
		cmp	eax, [ebp+when]
		jge	loc_800021C
		mov	eax, now_5252
		sub	eax, 15180h
		cmp	eax, [ebp+when]
		jge	loc_800021C
		mov	eax, now_5252
		cmp	[ebp+when], eax
		jg	loc_800021C
		mov	eax, now_5252
		sub	eax, [ebp+when]
		mov	[ebp+seconds_idle], eax
		cmp	[ebp+seconds_idle], 3Bh
		jg	short loc_80001A3
		mov	eax, offset a_	; "  .	"
		jmp	loc_800022C
; ---------------------------------------------------------------------------

loc_80001A3:				; CODE XREF: idle_string+5Fj
		mov	ebx, [ebp+seconds_idle]
		mov	edx, 91A2B3C5h
		mov	eax, ebx
		imul	edx
		lea	eax, [edx+ebx]
		sar	eax, 0Bh
		mov	edx, eax
		mov	eax, ebx
		sar	eax, 1Fh
		mov	ecx, edx
		sub	ecx, eax
		imul	eax, ecx, 0E10h
		sub	ebx, eax
		mov	ecx, ebx
		mov	edx, 88888889h
		mov	eax, ecx
		imul	edx
		lea	eax, [edx+ecx]
		sar	eax, 5
		mov	edx, eax
		mov	eax, ecx
		sar	eax, 1Fh
		mov	ebx, edx
		sub	ebx, eax
		mov	ecx, [ebp+seconds_idle]
		mov	edx, 91A2B3C5h
		mov	eax, ecx
		imul	edx
		lea	eax, [edx+ecx]
		sar	eax, 0Bh
		mov	edx, eax
		mov	eax, ecx
		sar	eax, 1Fh
		sub	edx, eax
		mov	eax, edx
		push	ebx
		push	eax
		push	offset format	; "%02d:%02d"
		push	offset idle_hhmm_5254 ;	s
		call	sprintf
		add	esp, 10h
		mov	eax, offset idle_hhmm_5254
		jmp	short loc_800022C
; ---------------------------------------------------------------------------

loc_800021C:				; CODE XREF: idle_string+29j
					; idle_string+3Cj ...
		sub	esp, 0Ch
		push	offset aOld	; " old	"
		call	gettext
		add	esp, 10h

loc_800022C:				; CODE XREF: idle_string+66j
					; idle_string+E2j
		mov	ebx, [ebp+var_4]
		leave
		retn
idle_string	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; const	char *__cdecl time_string(const	STRUCT_UTMP *utmp_ent)
time_string	proc near		; CODE XREF: print_user+3A2p
					; print_boottime+Dp ...

utmp_ent	= dword	ptr -1Ch
t		= dword	ptr -14h
tmp		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, [ebp+arg_0]
		mov	[ebp+utmp_ent],	eax
		mov	eax, large gs:14h
		mov	[ebp+var_C], eax
		xor	eax, eax
		mov	eax, [ebp+utmp_ent]
		mov	eax, [eax+154h]
		mov	[ebp+t], eax
		sub	esp, 0Ch
		lea	eax, [ebp+t]
		push	eax		; timer
		call	localtime
		add	esp, 10h
		mov	[ebp+tmp], eax
		cmp	[ebp+tmp], 0
		jz	short loc_800028B
		mov	eax, ds:time_format
		push	[ebp+tmp]	; tp
		push	eax		; format
		push	21h		; maxsize
		push	offset buf_5258	; s
		call	strftime
		add	esp, 10h
		mov	eax, offset buf_5258
		jmp	short loc_800029F
; ---------------------------------------------------------------------------

loc_800028B:				; CODE XREF: time_string+39j
		mov	eax, [ebp+t]
		sub	esp, 8
		push	offset buf_5258	; buf
		push	eax		; t
		call	timetostr
		add	esp, 10h

loc_800029F:				; CODE XREF: time_string+58j
		mov	edx, [ebp+var_C]
		xor	edx, large gs:14h
		jz	short locret_80002B0
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

locret_80002B0:				; CODE XREF: time_string+78j
		leave
		retn
time_string	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl print_line(int userlen, const char *user, const char state, int linelen,	const char *line, const	char *time_str,	const char *idle, const	char *pid, const char *comment,	const char *exitstr)
print_line	proc near		; CODE XREF: print_user+3E4p
					; print_boottime+4Bp ...

exitstr		= dword	ptr -58h
comment		= dword	ptr -54h
pid		= dword	ptr -50h
idle		= dword	ptr -4Ch
time_str	= dword	ptr -48h
line		= dword	ptr -44h
state		= byte ptr -40h
user		= dword	ptr -3Ch
buf		= dword	ptr -34h
p		= dword	ptr -30h
x_exitstr	= dword	ptr -2Ch
err		= dword	ptr -28h
x_idle		= byte ptr -21h
x_pid		= byte ptr -19h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
userlen		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
linelen		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h
arg_1C		= dword	ptr  24h
arg_20		= dword	ptr  28h
arg_24		= dword	ptr  2Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 54h
		mov	eax, [ebp+arg_8]
		mov	edx, [ebp+arg_4]
		mov	[ebp+user], edx
		mov	[ebp+state], al
		mov	eax, [ebp+arg_10]
		mov	[ebp+line], eax
		mov	eax, [ebp+arg_14]
		mov	[ebp+time_str],	eax
		mov	eax, [ebp+arg_18]
		mov	[ebp+idle], eax
		mov	eax, [ebp+arg_1C]
		mov	[ebp+pid], eax
		mov	eax, [ebp+arg_20]
		mov	[ebp+comment], eax
		mov	eax, [ebp+arg_24]
		mov	[ebp+exitstr], eax
		mov	eax, large gs:14h
		mov	[ebp+var_C], eax
		xor	eax, eax
		movzx	eax, [ebp+state]
		mov	mesg_5273+1, al
		movzx	eax, ds:include_idle
		test	al, al
		jz	short loc_8000342
		movzx	eax, ds:short_output
		xor	eax, 1
		test	al, al
		jz	short loc_8000342
		sub	esp, 0Ch
		push	[ebp+idle]	; s
		call	strlen
		add	esp, 10h
		cmp	eax, 6
		ja	short loc_8000342
		sub	esp, 4
		push	[ebp+idle]
		push	offset a6s	; " %-6s"
		lea	eax, [ebp+x_idle]
		push	eax		; s
		call	sprintf
		add	esp, 10h
		jmp	short loc_8000346
; ---------------------------------------------------------------------------

loc_8000342:				; CODE XREF: print_line+54j
					; print_line+62j ...
		mov	[ebp+x_idle], 0

loc_8000346:				; CODE XREF: print_line+8Ej
		movzx	eax, ds:short_output
		xor	eax, 1
		test	al, al
		jz	short loc_8000380
		sub	esp, 0Ch
		push	[ebp+pid]	; s
		call	strlen
		add	esp, 10h
		cmp	eax, 0Bh
		ja	short loc_8000380
		sub	esp, 4
		push	[ebp+pid]
		push	offset a10s	; " %10s"
		lea	eax, [ebp+x_pid]
		push	eax		; s
		call	sprintf
		add	esp, 10h
		jmp	short loc_8000384
; ---------------------------------------------------------------------------

loc_8000380:				; CODE XREF: print_line+A0j
					; print_line+B3j
		mov	[ebp+x_pid], 0

loc_8000384:				; CODE XREF: print_line+CCj
		movzx	eax, ds:include_exit
		test	al, al
		jz	short loc_80003BC
		sub	esp, 0Ch
		push	[ebp+exitstr]	; s
		call	strlen
		add	esp, 10h
		cmp	eax, 0Bh
		jbe	short loc_80003B5
		sub	esp, 0Ch
		push	[ebp+exitstr]	; s
		call	strlen
		add	esp, 10h
		add	eax, 2
		jmp	short loc_80003C1
; ---------------------------------------------------------------------------

loc_80003B5:				; CODE XREF: print_line+EEj
		mov	eax, 0Eh
		jmp	short loc_80003C1
; ---------------------------------------------------------------------------

loc_80003BC:				; CODE XREF: print_line+DBj
		mov	eax, 1

loc_80003C1:				; CODE XREF: print_line+101j
					; print_line+108j
		sub	esp, 0Ch
		push	eax		; size_t
		call	xmalloc
		add	esp, 10h
		mov	[ebp+x_exitstr], eax
		movzx	eax, ds:include_exit
		test	al, al
		jz	short loc_80003F3
		sub	esp, 4
		push	[ebp+exitstr]
		push	offset a12s	; " %-12s"
		push	[ebp+x_exitstr]	; s
		call	sprintf
		add	esp, 10h
		jmp	short loc_80003F9
; ---------------------------------------------------------------------------

loc_80003F3:				; CODE XREF: print_line+127j
		mov	eax, [ebp+x_exitstr]
		mov	byte ptr [eax],	0

loc_80003F9:				; CODE XREF: print_line+13Fj
		mov	edx, ds:time_format_width
		movzx	eax, ds:include_mesg
		test	al, al
		jz	short loc_8000411
		mov	ebx, offset mesg_5273
		jmp	short loc_8000416
; ---------------------------------------------------------------------------

loc_8000411:				; CODE XREF: print_line+156j
		mov	ebx, offset locale

loc_8000416:				; CODE XREF: print_line+15Dj
		cmp	[ebp+user], 0
		jz	short loc_8000421
		mov	eax, [ebp+user]
		jmp	short loc_8000426
; ---------------------------------------------------------------------------

loc_8000421:				; CODE XREF: print_line+168j
		mov	eax, offset a__0 ; "   ."

loc_8000426:				; CODE XREF: print_line+16Dj
		sub	esp, 0Ch
		push	[ebp+x_exitstr]
		push	[ebp+comment]
		lea	ecx, [ebp+x_pid]
		push	ecx
		lea	ecx, [ebp+x_idle]
		push	ecx
		push	[ebp+time_str]
		push	edx
		push	[ebp+line]
		push	[ebp+linelen]
		push	ebx
		push	eax
		push	[ebp+userlen]
		push	offset a8_SS12_SSSS8sS ; "%-8.*s%s %-12.*s %-*s%s%s %-8s%s"
		lea	eax, [ebp+buf]
		push	eax
		call	rpl_asprintf
		add	esp, 40h
		mov	[ebp+err], eax
		cmp	[ebp+err], 0FFFFFFFFh
		jnz	short loc_8000465
		call	xalloc_die

loc_8000465:				; CODE XREF: print_line+1ACj
		mov	ebx, [ebp+buf]
		mov	eax, [ebp+buf]
		sub	esp, 0Ch
		push	eax		; s
		call	strlen
		add	esp, 10h
		add	eax, ebx
		mov	[ebp+p], eax

loc_800047C:				; CODE XREF: print_line+1D6j
		sub	[ebp+p], 1
		mov	eax, [ebp+p]
		movzx	eax, byte ptr [eax]
		cmp	al, 20h
		jz	short loc_800047C
		mov	eax, [ebp+p]
		add	eax, 1
		mov	byte ptr [eax],	0
		mov	eax, [ebp+buf]
		sub	esp, 0Ch
		push	eax		; s
		call	puts
		add	esp, 10h
		mov	eax, [ebp+buf]
		sub	esp, 0Ch
		push	eax		; ptr
		call	free
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+x_exitstr]	; ptr
		call	free
		add	esp, 10h
		nop
		mov	eax, [ebp+var_C]
		xor	eax, large gs:14h
		jz	short loc_80004D1
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_80004D1:				; CODE XREF: print_line+218j
		mov	ebx, [ebp+var_4]
		leave
		retn
print_line	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl print_user(const	STRUCT_UTMP *utmp_ent, time_t boottime)
print_user	proc near		; CODE XREF: scan_entries+C4p

utmp_ent	= dword	ptr -1CCh
mesg		= byte ptr -1C5h
last_change	= dword	ptr -1C4h
host		= dword	ptr -1C0h
display		= dword	ptr -1BCh
stats		= stat ptr -1B8h
idlestr		= byte ptr -156h
pidstr		= byte ptr -14Fh
line		= byte ptr -143h
ut_host		= byte ptr -11Dh
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
boottime	= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1CCh
		mov	eax, [ebp+arg_0]
		mov	[ebp+utmp_ent],	eax
		mov	eax, large gs:14h
		mov	[ebp+var_1C], eax
		xor	eax, eax
		mov	eax, [ebp+utmp_ent]
		mov	eax, [eax+4]
		sub	esp, 4
		push	eax
		push	offset aLd	; "%ld"
		lea	eax, [ebp+pidstr]
		push	eax		; s
		call	sprintf
		add	esp, 10h
		mov	eax, [ebp+utmp_ent]
		movzx	eax, byte ptr [eax+8]
		cmp	al, 2Fh
		jnz	short loc_800054C
		mov	eax, [ebp+utmp_ent]
		add	eax, 8
		sub	esp, 4
		push	20h		; n
		push	eax		; src
		lea	eax, [ebp+line]
		push	eax		; dest
		call	strncpy
		add	esp, 10h
		mov	[ebp+line+20h],	0
		jmp	short loc_8000586
; ---------------------------------------------------------------------------

loc_800054C:				; CODE XREF: print_user+4Dj
		lea	eax, [ebp+line]
		mov	dword ptr [eax], 7665642Fh
		mov	word ptr [eax+4], 2Fh
		mov	eax, [ebp+utmp_ent]
		lea	edx, [eax+8]
		lea	eax, [ebp+line]
		add	eax, 5
		sub	esp, 4
		push	20h		; n
		push	edx		; src
		push	eax		; dest
		call	strncpy
		add	esp, 10h
		mov	[ebp+line+25h],	0

loc_8000586:				; CODE XREF: print_user+74j
		sub	esp, 8
		lea	eax, [ebp+stats]
		push	eax
		lea	eax, [ebp+line]
		push	eax
		call	stat64
		add	esp, 10h
		test	eax, eax
		jnz	short loc_80005D0
		mov	eax, [ebp+stats.st_mode]
		and	eax, 10h
		test	eax, eax
		jz	short loc_80005B7
		mov	eax, 2Bh
		jmp	short loc_80005BC
; ---------------------------------------------------------------------------

loc_80005B7:				; CODE XREF: print_user+D8j
		mov	eax, 2Dh

loc_80005BC:				; CODE XREF: print_user+DFj
		mov	[ebp+mesg], al
		mov	eax, [ebp+stats.st_atim.tv_sec]
		mov	[ebp+last_change], eax
		jmp	short loc_80005E1
; ---------------------------------------------------------------------------

loc_80005D0:				; CODE XREF: print_user+CBj
		mov	[ebp+mesg], 3Fh
		mov	[ebp+last_change], 0

loc_80005E1:				; CODE XREF: print_user+F8j
		cmp	[ebp+last_change], 0
		jz	short loc_8000617
		sub	esp, 8
		push	[ebp+boottime]	; boottime
		push	[ebp+last_change] ; when
		call	idle_string
		add	esp, 10h
		push	eax
		push	6
		push	offset a_S	; "%.*s"
		lea	eax, [ebp+idlestr]
		push	eax		; s
		call	sprintf
		add	esp, 10h
		jmp	short loc_8000623
; ---------------------------------------------------------------------------

loc_8000617:				; CODE XREF: print_user+112j
		lea	eax, [ebp+idlestr]
		mov	dword ptr [eax], 3F2020h

loc_8000623:				; CODE XREF: print_user+13Fj
		mov	eax, [ebp+utmp_ent]
		movzx	eax, byte ptr [eax+4Ch]
		test	al, al
		jz	loc_8000821
		mov	[ebp+host], 0
		mov	[ebp+display], 0
		mov	eax, [ebp+utmp_ent]
		add	eax, 4Ch
		sub	esp, 4
		push	100h		; n
		push	eax		; src
		lea	eax, [ebp+ut_host]
		push	eax		; dest
		call	strncpy
		add	esp, 10h
		mov	[ebp+ut_host+100h], 0
		sub	esp, 8
		push	3Ah		; c
		lea	eax, [ebp+ut_host]
		push	eax		; s
		call	strchr
		add	esp, 10h
		mov	[ebp+display], eax
		cmp	[ebp+display], 0
		jz	short loc_80006A3
		mov	eax, [ebp+display]
		lea	edx, [eax+1]
		mov	[ebp+display], edx
		mov	byte ptr [eax],	0

loc_80006A3:				; CODE XREF: print_user+1B9j
		movzx	eax, [ebp+ut_host]
		test	al, al
		jz	short loc_80006D1
		movzx	eax, ds:do_lookup
		test	al, al
		jz	short loc_80006D1
		sub	esp, 0Ch
		lea	eax, [ebp+ut_host]
		push	eax
		call	canon_host
		add	esp, 10h
		mov	[ebp+host], eax

loc_80006D1:				; CODE XREF: print_user+1D6j
					; print_user+1E1j
		cmp	[ebp+host], 0
		jnz	short loc_80006E6
		lea	eax, [ebp+ut_host]
		mov	[ebp+host], eax

loc_80006E6:				; CODE XREF: print_user+202j
		cmp	[ebp+display], 0
		jz	loc_8000791
		sub	esp, 0Ch
		push	[ebp+host]	; s
		call	strlen
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	[ebp+display]	; s
		call	strlen
		add	esp, 10h
		add	eax, ebx
		lea	edx, [eax+4]
		mov	eax, ds:hostlen_5292
		cmp	edx, eax
		jbe	short loc_8000770
		sub	esp, 0Ch
		push	[ebp+host]	; s
		call	strlen
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	[ebp+display]	; s
		call	strlen
		add	esp, 10h
		add	eax, ebx
		add	eax, 4
		mov	ds:hostlen_5292, eax
		mov	edx, ds:hostlen_5292
		mov	eax, ds:hoststr_5291
		sub	esp, 8
		push	edx		; size_t
		push	eax		; void *
		call	xrealloc
		add	esp, 10h
		mov	ds:hoststr_5291, eax

loc_8000770:				; CODE XREF: print_user+24Dj
		mov	eax, ds:hoststr_5291
		push	[ebp+display]
		push	[ebp+host]
		push	offset aSS	; "(%s:%s)"
		push	eax		; s
		call	sprintf
		add	esp, 10h
		jmp	short loc_8000800
; ---------------------------------------------------------------------------

loc_8000791:				; CODE XREF: print_user+217j
		sub	esp, 0Ch
		push	[ebp+host]	; s
		call	strlen
		add	esp, 10h
		lea	edx, [eax+3]
		mov	eax, ds:hostlen_5292
		cmp	edx, eax
		jbe	short loc_80007E4
		sub	esp, 0Ch
		push	[ebp+host]	; s
		call	strlen
		add	esp, 10h
		add	eax, 3
		mov	ds:hostlen_5292, eax
		mov	edx, ds:hostlen_5292
		mov	eax, ds:hoststr_5291
		sub	esp, 8
		push	edx		; size_t
		push	eax		; void *
		call	xrealloc
		add	esp, 10h
		mov	ds:hoststr_5291, eax

loc_80007E4:				; CODE XREF: print_user+2D6j
		mov	eax, ds:hoststr_5291
		sub	esp, 4
		push	[ebp+host]
		push	offset aS	; "(%s)"
		push	eax		; s
		call	sprintf
		add	esp, 10h

loc_8000800:				; CODE XREF: print_user+2B9j
		lea	eax, [ebp+ut_host]
		cmp	[ebp+host], eax
		jz	short loc_8000859
		sub	esp, 0Ch
		push	[ebp+host]	; ptr
		call	free
		add	esp, 10h
		jmp	short loc_8000859
; ---------------------------------------------------------------------------

loc_8000821:				; CODE XREF: print_user+159j
		mov	eax, ds:hostlen_5292
		test	eax, eax
		jnz	short loc_8000851
		mov	ds:hostlen_5292, 1
		mov	edx, ds:hostlen_5292
		mov	eax, ds:hoststr_5291
		sub	esp, 8
		push	edx		; size_t
		push	eax		; void *
		call	xrealloc
		add	esp, 10h
		mov	ds:hoststr_5291, eax

loc_8000851:				; CODE XREF: print_user+352j
		mov	eax, ds:hoststr_5291
		mov	byte ptr [eax],	0

loc_8000859:				; CODE XREF: print_user+336j
					; print_user+349j
		mov	eax, ds:hoststr_5291
		test	eax, eax
		jz	short loc_800086A
		mov	ebx, ds:hoststr_5291
		jmp	short loc_800086F
; ---------------------------------------------------------------------------

loc_800086A:				; CODE XREF: print_user+38Aj
		mov	ebx, offset locale

loc_800086F:				; CODE XREF: print_user+392j
		sub	esp, 0Ch
		push	[ebp+utmp_ent]	; utmp_ent
		call	time_string
		add	esp, 10h
		mov	edi, eax
		mov	eax, [ebp+utmp_ent]
		lea	esi, [eax+8]
		movsx	eax, [ebp+mesg]
		mov	edx, [ebp+utmp_ent]
		lea	ecx, [edx+2Ch]
		sub	esp, 8
		push	offset locale	; exitstr
		push	ebx		; comment
		lea	edx, [ebp+pidstr]
		push	edx		; pid
		lea	edx, [ebp+idlestr]
		push	edx		; idle
		push	edi		; time_str
		push	esi		; line
		push	20h		; linelen
		push	eax		; state
		push	ecx		; user
		push	20h		; userlen
		call	print_line
		add	esp, 30h
		nop
		mov	eax, [ebp+var_1C]
		xor	eax, large gs:14h
		jz	short loc_80008D4
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_80008D4:				; CODE XREF: print_user+3F7j
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
print_user	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl print_boottime(const STRUCT_UTMP	*utmp_ent)
print_boottime	proc near		; CODE XREF: scan_entries+118p

var_4		= dword	ptr -4
utmp_ent	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 4
		sub	esp, 0Ch
		push	[ebp+utmp_ent]	; utmp_ent
		call	time_string
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aSystemBoot ; "system boot"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	offset locale	; exitstr
		push	offset locale	; comment
		push	offset locale	; pid
		push	offset locale	; idle
		push	ebx		; time_str
		push	eax		; line
		push	0FFFFFFFFh	; linelen
		push	20h		; state
		push	offset locale	; user
		push	0FFFFFFFFh	; userlen
		call	print_line
		add	esp, 30h
		nop
		mov	ebx, [ebp+var_4]
		leave
		retn
print_boottime	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; char *__cdecl	make_id_equals_comment(const STRUCT_UTMP *utmp_ent)
make_id_equals_comment proc near	; CODE XREF: print_deadprocs+20p
					; print_login+1Fp ...

comment		= dword	ptr -0Ch
utmp_ent	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		sub	esp, 0Ch
		push	offset aId	; "id="
		call	gettext
		add	esp, 10h
		sub	esp, 0Ch
		push	eax		; s
		call	strlen
		add	esp, 10h
		add	eax, 5
		sub	esp, 0Ch
		push	eax		; size_t
		call	xmalloc
		add	esp, 10h
		mov	[ebp+comment], eax
		sub	esp, 0Ch
		push	offset aId	; "id="
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	eax		; src
		push	[ebp+comment]	; dest
		call	strcpy
		add	esp, 10h
		mov	eax, [ebp+utmp_ent]
		add	eax, 28h
		sub	esp, 4
		push	4		; n
		push	eax		; src
		push	[ebp+comment]	; dest
		call	strncat
		add	esp, 10h
		mov	eax, [ebp+comment]
		leave
		retn
make_id_equals_comment endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl print_deadprocs(const STRUCT_UTMP *utmp_ent)
print_deadprocs	proc near		; CODE XREF: scan_entries+1B7p

utmp_ent	= dword	ptr -3Ch
comment		= dword	ptr -2Ch
pidstr		= byte ptr -28h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	eax, [ebp+arg_0]
		mov	[ebp+utmp_ent],	eax
		mov	eax, large gs:14h
		mov	[ebp+var_1C], eax
		xor	eax, eax
		sub	esp, 0Ch
		push	[ebp+utmp_ent]	; utmp_ent
		call	make_id_equals_comment
		add	esp, 10h
		mov	[ebp+comment], eax
		mov	eax, [ebp+utmp_ent]
		mov	eax, [eax+4]
		sub	esp, 4
		push	eax
		push	offset aLd	; "%ld"
		lea	eax, [ebp+pidstr]
		push	eax		; s
		call	sprintf
		add	esp, 10h
		mov	eax, ds:exitstr_5308
		test	eax, eax
		jnz	short loc_8000A43
		sub	esp, 0Ch
		push	offset aTerm	; "term="
		call	gettext
		add	esp, 10h
		sub	esp, 0Ch
		push	eax		; s
		call	strlen
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aExit	; "exit="
		call	gettext
		add	esp, 10h
		sub	esp, 0Ch
		push	eax		; s
		call	strlen
		add	esp, 10h
		add	eax, ebx
		add	eax, 0Eh
		sub	esp, 0Ch
		push	eax		; size_t
		call	xmalloc
		add	esp, 10h
		mov	ds:exitstr_5308, eax

loc_8000A43:				; CODE XREF: print_deadprocs+4Dj
		mov	eax, [ebp+utmp_ent]
		movzx	eax, word ptr [eax+14Eh]
		movsx	esi, ax
		sub	esp, 0Ch
		push	offset aExit	; "exit="
		call	gettext
		add	esp, 10h
		mov	edi, eax
		mov	eax, [ebp+utmp_ent]
		movzx	eax, word ptr [eax+14Ch]
		movsx	ebx, ax
		sub	esp, 0Ch
		push	offset aTerm	; "term="
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, ds:exitstr_5308
		sub	esp, 8
		push	esi
		push	edi
		push	ebx
		push	edx
		push	offset aSDSD	; "%s%d	%s%d"
		push	eax		; s
		call	sprintf
		add	esp, 20h
		mov	ebx, ds:exitstr_5308
		sub	esp, 0Ch
		push	[ebp+utmp_ent]	; utmp_ent
		call	time_string
		add	esp, 10h
		mov	ecx, eax
		mov	eax, [ebp+utmp_ent]
		lea	edx, [eax+8]
		sub	esp, 8
		push	ebx		; exitstr
		push	[ebp+comment]	; comment
		lea	eax, [ebp+pidstr]
		push	eax		; pid
		push	offset locale	; idle
		push	ecx		; time_str
		push	edx		; line
		push	20h		; linelen
		push	20h		; state
		push	offset locale	; user
		push	0FFFFFFFFh	; userlen
		call	print_line
		add	esp, 30h
		sub	esp, 0Ch
		push	[ebp+comment]	; ptr
		call	free
		add	esp, 10h
		nop
		mov	eax, [ebp+var_1C]
		xor	eax, large gs:14h
		jz	short loc_8000AFC
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_8000AFC:				; CODE XREF: print_deadprocs+151j
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
print_deadprocs	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl print_login(const STRUCT_UTMP *utmp_ent)
print_login	proc near		; CODE XREF: scan_entries+190p

utmp_ent	= dword	ptr -2Ch
comment		= dword	ptr -1Ch
pidstr		= byte ptr -18h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 30h
		mov	eax, [ebp+arg_0]
		mov	[ebp+utmp_ent],	eax
		mov	eax, large gs:14h
		mov	[ebp+var_C], eax
		xor	eax, eax
		sub	esp, 0Ch
		push	[ebp+utmp_ent]	; utmp_ent
		call	make_id_equals_comment
		add	esp, 10h
		mov	[ebp+comment], eax
		mov	eax, [ebp+utmp_ent]
		mov	eax, [eax+4]
		sub	esp, 4
		push	eax
		push	offset aLd	; "%ld"
		lea	eax, [ebp+pidstr]
		push	eax		; s
		call	sprintf
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+utmp_ent]	; utmp_ent
		call	time_string
		add	esp, 10h
		mov	esi, eax
		mov	eax, [ebp+utmp_ent]
		lea	ebx, [eax+8]
		sub	esp, 0Ch
		push	offset aLogin	; "LOGIN"
		call	gettext
		add	esp, 10h
		mov	edx, eax
		sub	esp, 8
		push	offset locale	; exitstr
		push	[ebp+comment]	; comment
		lea	eax, [ebp+pidstr]
		push	eax		; pid
		push	offset locale	; idle
		push	esi		; time_str
		push	ebx		; line
		push	20h		; linelen
		push	20h		; state
		push	edx		; user
		push	0FFFFFFFFh	; userlen
		call	print_line
		add	esp, 30h
		sub	esp, 0Ch
		push	[ebp+comment]	; ptr
		call	free
		add	esp, 10h
		nop
		mov	eax, [ebp+var_C]
		xor	eax, large gs:14h
		jz	short loc_8000BB6
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_8000BB6:				; CODE XREF: print_login+ABj
		lea	esp, [ebp-8]
		pop	ebx
		pop	esi
		pop	ebp
		retn
print_login	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl print_initspawn(const STRUCT_UTMP *utmp_ent)
print_initspawn	proc near		; CODE XREF: scan_entries+169p

utmp_ent	= dword	ptr -2Ch
comment		= dword	ptr -1Ch
pidstr		= byte ptr -18h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		mov	eax, [ebp+arg_0]
		mov	[ebp+utmp_ent],	eax
		mov	eax, large gs:14h
		mov	[ebp+var_C], eax
		xor	eax, eax
		sub	esp, 0Ch
		push	[ebp+utmp_ent]	; utmp_ent
		call	make_id_equals_comment
		add	esp, 10h
		mov	[ebp+comment], eax
		mov	eax, [ebp+utmp_ent]
		mov	eax, [eax+4]
		sub	esp, 4
		push	eax
		push	offset aLd	; "%ld"
		lea	eax, [ebp+pidstr]
		push	eax		; s
		call	sprintf
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+utmp_ent]	; utmp_ent
		call	time_string
		add	esp, 10h
		mov	ecx, eax
		mov	eax, [ebp+utmp_ent]
		lea	edx, [eax+8]
		sub	esp, 8
		push	offset locale	; exitstr
		push	[ebp+comment]	; comment
		lea	eax, [ebp+pidstr]
		push	eax		; pid
		push	offset locale	; idle
		push	ecx		; time_str
		push	edx		; line
		push	20h		; linelen
		push	20h		; state
		push	offset locale	; user
		push	0FFFFFFFFh	; userlen
		call	print_line
		add	esp, 30h
		sub	esp, 0Ch
		push	[ebp+comment]	; ptr
		call	free
		add	esp, 10h
		nop
		mov	eax, [ebp+var_C]
		xor	eax, large gs:14h
		jz	short locret_8000C5F
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

locret_8000C5F:				; CODE XREF: print_initspawn+9Bj
		leave
		retn
print_initspawn	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl print_clockchange(const STRUCT_UTMP *utmp_ent)
print_clockchange proc near		; CODE XREF: scan_entries+142p

var_4		= dword	ptr -4
utmp_ent	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 4
		sub	esp, 0Ch
		push	[ebp+utmp_ent]	; utmp_ent
		call	time_string
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aClockChange ; "clock change"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	offset locale	; exitstr
		push	offset locale	; comment
		push	offset locale	; pid
		push	offset locale	; idle
		push	ebx		; time_str
		push	eax		; line
		push	0FFFFFFFFh	; linelen
		push	20h		; state
		push	offset locale	; user
		push	0FFFFFFFFh	; userlen
		call	print_line
		add	esp, 30h
		nop
		mov	ebx, [ebp+var_4]
		leave
		retn
print_clockchange endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl print_runlevel(const STRUCT_UTMP	*utmp_ent)
print_runlevel	proc near		; CODE XREF: scan_entries+EEp

last		= byte ptr -0Ah
curr		= byte ptr -9
var_4		= dword	ptr -4
utmp_ent	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, [ebp+utmp_ent]
		mov	eax, [eax+4]
		lea	edx, [eax+0FFh]
		test	eax, eax
		cmovs	eax, edx
		sar	eax, 8
		mov	[ebp+last], al
		mov	eax, [ebp+utmp_ent]
		mov	eax, [eax+4]
		cdq
		shr	edx, 18h
		add	eax, edx
		movzx	eax, al
		sub	eax, edx
		mov	[ebp+curr], al
		mov	eax, ds:runlevline_5327
		test	eax, eax
		jnz	short loc_8000D25
		sub	esp, 0Ch
		push	offset aRunLevel ; "run-level"
		call	gettext
		add	esp, 10h
		sub	esp, 0Ch
		push	eax		; s
		call	strlen
		add	esp, 10h
		add	eax, 3
		sub	esp, 0Ch
		push	eax		; size_t
		call	xmalloc
		add	esp, 10h
		mov	ds:runlevline_5327, eax

loc_8000D25:				; CODE XREF: print_runlevel+39j
		movzx	ebx, [ebp+curr]
		sub	esp, 0Ch
		push	offset aRunLevel ; "run-level"
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, ds:runlevline_5327
		push	ebx
		push	edx
		push	offset aSC	; "%s %c"
		push	eax		; s
		call	sprintf
		add	esp, 10h
		mov	eax, ds:comment_5328
		test	eax, eax
		jnz	short loc_8000D89
		sub	esp, 0Ch
		push	offset aLast	; "last="
		call	gettext
		add	esp, 10h
		sub	esp, 0Ch
		push	eax		; s
		call	strlen
		add	esp, 10h
		add	eax, 2
		sub	esp, 0Ch
		push	eax		; size_t
		call	xmalloc
		add	esp, 10h
		mov	ds:comment_5328, eax

loc_8000D89:				; CODE XREF: print_runlevel+9Dj
		cmp	[ebp+last], 4Eh
		jz	short loc_8000D95
		movzx	ebx, [ebp+last]
		jmp	short loc_8000D9A
; ---------------------------------------------------------------------------

loc_8000D95:				; CODE XREF: print_runlevel+D3j
		mov	ebx, 53h

loc_8000D9A:				; CODE XREF: print_runlevel+D9j
		sub	esp, 0Ch
		push	offset aLast	; "last="
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, ds:comment_5328
		push	ebx
		push	edx
		push	offset aSC_0	; "%s%c"
		push	eax		; s
		call	sprintf
		add	esp, 10h
		movzx	eax, [ebp+last]
		sub	esp, 0Ch
		push	eax
		call	c_isprint
		add	esp, 10h
		test	al, al
		jz	short loc_8000DDD
		mov	ebx, ds:comment_5328
		jmp	short loc_8000DE2
; ---------------------------------------------------------------------------

loc_8000DDD:				; CODE XREF: print_runlevel+119j
		mov	ebx, offset locale

loc_8000DE2:				; CODE XREF: print_runlevel+121j
		sub	esp, 0Ch
		push	[ebp+utmp_ent]	; utmp_ent
		call	time_string
		add	esp, 10h
		mov	edx, eax
		mov	eax, ds:runlevline_5327
		sub	esp, 8
		push	offset locale	; exitstr
		push	ebx		; comment
		push	offset locale	; pid
		push	offset locale	; idle
		push	edx		; time_str
		push	eax		; line
		push	0FFFFFFFFh	; linelen
		push	20h		; state
		push	offset locale	; user
		push	0FFFFFFFFh	; userlen
		call	print_line
		add	esp, 30h
		nop
		mov	ebx, [ebp+var_4]
		leave
		retn
print_runlevel	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl list_entries_who(size_t n, const	STRUCT_UTMP *utmp_buf)
list_entries_who proc near		; CODE XREF: who+61p

entries		= dword	ptr -14h
separator	= dword	ptr -10h
trimmed_name	= dword	ptr -0Ch
n		= dword	ptr  8
utmp_buf	= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+entries], 0
		mov	[ebp+separator], offset	locale
		jmp	short loc_8000E99
; ---------------------------------------------------------------------------

loc_8000E3B:				; CODE XREF: list_entries_who+7Fj
		mov	eax, [ebp+utmp_buf]
		movzx	eax, byte ptr [eax+2Ch]
		test	al, al
		jz	short loc_8000E92
		mov	eax, [ebp+utmp_buf]
		movzx	eax, word ptr [eax]
		cmp	ax, 7
		jnz	short loc_8000E92
		sub	esp, 0Ch
		push	[ebp+utmp_buf]
		call	extract_trimmed_name
		add	esp, 10h
		mov	[ebp+trimmed_name], eax
		sub	esp, 4
		push	[ebp+trimmed_name]
		push	[ebp+separator]
		push	offset aSS_0	; "%s%s"
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+trimmed_name] ; ptr
		call	free
		add	esp, 10h
		mov	[ebp+separator], offset	asc_8001BC0 ; "	"
		add	[ebp+entries], 1

loc_8000E92:				; CODE XREF: list_entries_who+1Fj
					; list_entries_who+2Bj
		add	[ebp+utmp_buf],	180h

loc_8000E99:				; CODE XREF: list_entries_who+14j
		mov	eax, [ebp+n]
		lea	edx, [eax-1]
		mov	[ebp+n], edx
		test	eax, eax
		jnz	short loc_8000E3B
		sub	esp, 0Ch
		push	offset aUsersLu	; "\n# users=%lu\n"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	[ebp+entries]
		push	eax		; format
		call	printf
		add	esp, 10h
		nop
		leave
		retn
list_entries_who endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void print_heading()
print_heading	proc near		; CODE XREF: scan_entries+18p

pid		= dword	ptr -24h
comment		= dword	ptr -20h
exitstr		= dword	ptr -1Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		sub	esp, 0Ch
		push	offset aExit_0	; "EXIT"
		call	gettext
		add	esp, 10h
		mov	[ebp+exitstr], eax
		sub	esp, 0Ch
		push	offset aComment	; "COMMENT"
		call	gettext
		add	esp, 10h
		mov	[ebp+comment], eax
		sub	esp, 0Ch
		push	offset aPid	; "PID"
		call	gettext
		add	esp, 10h
		mov	[ebp+pid], eax
		sub	esp, 0Ch
		push	offset aIdle	; "IDLE"
		call	gettext
		add	esp, 10h
		mov	edi, eax
		sub	esp, 0Ch
		push	offset aTime	; "TIME"
		call	gettext
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aLine	; "LINE"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aName	; "NAME"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	[ebp+exitstr]	; exitstr
		push	[ebp+comment]	; comment
		push	[ebp+pid]	; pid
		push	edi		; idle
		push	esi		; time_str
		push	ebx		; line
		push	0FFFFFFFFh	; linelen
		push	20h		; state
		push	eax		; user
		push	0FFFFFFFFh	; userlen
		call	print_line
		add	esp, 30h
		nop
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
print_heading	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl scan_entries(size_t n, const STRUCT_UTMP	*utmp_buf)
scan_entries	proc near		; CODE XREF: who+76p

ttyname_b	= dword	ptr -10h
boottime	= dword	ptr -0Ch
n		= dword	ptr  8
utmp_buf	= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+boottime],	80000000h
		movzx	eax, ds:include_heading
		test	al, al
		jz	short loc_8000F94
		call	print_heading

loc_8000F94:				; CODE XREF: scan_entries+16j
		movzx	eax, ds:my_line_only
		test	al, al
		jz	loc_8001155
		sub	esp, 0Ch
		push	0		; fd
		call	ttyname
		add	esp, 10h
		mov	[ebp+ttyname_b], eax
		cmp	[ebp+ttyname_b], 0
		jz	loc_8001168
		sub	esp, 4
		push	5		; n
		push	offset aDev	; "/dev/"
		push	[ebp+ttyname_b]	; s1
		call	strncmp
		add	esp, 10h
		test	eax, eax
		jnz	loc_8001155
		add	[ebp+ttyname_b], 5
		jmp	loc_8001155
; ---------------------------------------------------------------------------

loc_8000FE3:				; CODE XREF: scan_entries+1E9j
		movzx	eax, ds:my_line_only
		xor	eax, 1
		test	al, al
		jnz	short loc_8001010
		mov	eax, [ebp+utmp_buf]
		add	eax, 8
		sub	esp, 4
		push	20h		; n
		push	eax		; s2
		push	[ebp+ttyname_b]	; s1
		call	strncmp
		add	esp, 10h
		test	eax, eax
		jnz	loc_8001136

loc_8001010:				; CODE XREF: scan_entries+78j
		movzx	eax, ds:need_users
		test	al, al
		jz	short loc_8001048
		mov	eax, [ebp+utmp_buf]
		movzx	eax, byte ptr [eax+2Ch]
		test	al, al
		jz	short loc_8001048
		mov	eax, [ebp+utmp_buf]
		movzx	eax, word ptr [eax]
		cmp	ax, 7
		jnz	short loc_8001048
		sub	esp, 8
		push	[ebp+boottime]	; boottime
		push	[ebp+utmp_buf]	; utmp_ent
		call	print_user
		add	esp, 10h
		jmp	loc_8001136
; ---------------------------------------------------------------------------

loc_8001048:				; CODE XREF: scan_entries+A2j
					; scan_entries+ADj ...
		movzx	eax, ds:need_runlevel
		test	al, al
		jz	short loc_8001072
		mov	eax, [ebp+utmp_buf]
		movzx	eax, word ptr [eax]
		cmp	ax, 1
		jnz	short loc_8001072
		sub	esp, 0Ch
		push	[ebp+utmp_buf]	; utmp_ent
		call	print_runlevel
		add	esp, 10h
		jmp	loc_8001136
; ---------------------------------------------------------------------------

loc_8001072:				; CODE XREF: scan_entries+DAj
					; scan_entries+E6j
		movzx	eax, ds:need_boottime
		test	al, al
		jz	short loc_800109C
		mov	eax, [ebp+utmp_buf]
		movzx	eax, word ptr [eax]
		cmp	ax, 2
		jnz	short loc_800109C
		sub	esp, 0Ch
		push	[ebp+utmp_buf]	; utmp_ent
		call	print_boottime
		add	esp, 10h
		jmp	loc_8001136
; ---------------------------------------------------------------------------

loc_800109C:				; CODE XREF: scan_entries+104j
					; scan_entries+110j
		movzx	eax, ds:need_clockchange
		test	al, al
		jz	short loc_80010C3
		mov	eax, [ebp+utmp_buf]
		movzx	eax, word ptr [eax]
		cmp	ax, 3
		jnz	short loc_80010C3
		sub	esp, 0Ch
		push	[ebp+utmp_buf]	; utmp_ent
		call	print_clockchange
		add	esp, 10h
		jmp	short loc_8001136
; ---------------------------------------------------------------------------

loc_80010C3:				; CODE XREF: scan_entries+12Ej
					; scan_entries+13Aj
		movzx	eax, ds:need_initspawn
		test	al, al
		jz	short loc_80010EA
		mov	eax, [ebp+utmp_buf]
		movzx	eax, word ptr [eax]
		cmp	ax, 5
		jnz	short loc_80010EA
		sub	esp, 0Ch
		push	[ebp+utmp_buf]	; utmp_ent
		call	print_initspawn
		add	esp, 10h
		jmp	short loc_8001136
; ---------------------------------------------------------------------------

loc_80010EA:				; CODE XREF: scan_entries+155j
					; scan_entries+161j
		movzx	eax, ds:need_login
		test	al, al
		jz	short loc_8001111
		mov	eax, [ebp+utmp_buf]
		movzx	eax, word ptr [eax]
		cmp	ax, 6
		jnz	short loc_8001111
		sub	esp, 0Ch
		push	[ebp+utmp_buf]	; utmp_ent
		call	print_login
		add	esp, 10h
		jmp	short loc_8001136
; ---------------------------------------------------------------------------

loc_8001111:				; CODE XREF: scan_entries+17Cj
					; scan_entries+188j
		movzx	eax, ds:need_deadprocs
		test	al, al
		jz	short loc_8001136
		mov	eax, [ebp+utmp_buf]
		movzx	eax, word ptr [eax]
		cmp	ax, 8
		jnz	short loc_8001136
		sub	esp, 0Ch
		push	[ebp+utmp_buf]	; utmp_ent
		call	print_deadprocs
		add	esp, 10h

loc_8001136:				; CODE XREF: scan_entries+93j
					; scan_entries+CCj ...
		mov	eax, [ebp+utmp_buf]
		movzx	eax, word ptr [eax]
		cmp	ax, 2
		jnz	short loc_800114E
		mov	eax, [ebp+utmp_buf]
		mov	eax, [eax+154h]
		mov	[ebp+boottime],	eax

loc_800114E:				; CODE XREF: scan_entries+1C9j
		add	[ebp+utmp_buf],	180h

loc_8001155:				; CODE XREF: scan_entries+26j
					; scan_entries+5Dj ...
		mov	eax, [ebp+n]
		lea	edx, [eax-1]
		mov	[ebp+n], edx
		test	eax, eax
		jnz	loc_8000FE3
		jmp	short locret_8001169
; ---------------------------------------------------------------------------

loc_8001168:				; CODE XREF: scan_entries+40j
		nop

locret_8001169:				; CODE XREF: scan_entries+1EFj
		leave
		retn
scan_entries	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl who(const char *filename, int options)
who		proc near		; CODE XREF: main+368p	main+38Bp

filename	= dword	ptr -1Ch
n_users		= dword	ptr -14h
utmp_buf	= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
options		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, [ebp+arg_0]
		mov	[ebp+filename],	eax
		mov	eax, large gs:14h
		mov	[ebp+var_C], eax
		xor	eax, eax
		push	[ebp+options]
		lea	eax, [ebp+utmp_buf]
		push	eax
		lea	eax, [ebp+n_users]
		push	eax
		push	[ebp+filename]
		call	read_utmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_80011B6
		call	__errno_location
		mov	eax, [eax]
		push	[ebp+filename]
		push	offset aS_0	; "%s"
		push	eax		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_80011B6:				; CODE XREF: who+2Fj
		movzx	eax, ds:short_list
		test	al, al
		jz	short loc_80011D6
		mov	edx, [ebp+utmp_buf]
		mov	eax, [ebp+n_users]
		sub	esp, 8
		push	edx		; utmp_buf
		push	eax		; n
		call	list_entries_who
		add	esp, 10h
		jmp	short loc_80011E9
; ---------------------------------------------------------------------------

loc_80011D6:				; CODE XREF: who+54j
		mov	edx, [ebp+utmp_buf]
		mov	eax, [ebp+n_users]
		sub	esp, 8
		push	edx		; utmp_buf
		push	eax		; n
		call	scan_entries
		add	esp, 10h

loc_80011E9:				; CODE XREF: who+69j
		mov	eax, [ebp+utmp_buf]
		sub	esp, 0Ch
		push	eax		; ptr
		call	free
		add	esp, 10h
		nop
		mov	eax, [ebp+var_C]
		xor	eax, large gs:14h
		jz	short locret_800120A
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

locret_800120A:				; CODE XREF: who+98j
		leave
		retn
who		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; void __cdecl usage(int status)
		public usage
usage		proc near		; CODE XREF: main+263p	main+2A7p ...

status		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 4
		cmp	[ebp+status], 0
		jz	short loc_8001249
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, ds:stderr
		sub	esp, 4
		push	ebx
		push	edx		; format
		push	eax		; stream
		call	fprintf
		add	esp, 10h
		jmp	loc_80013AF
; ---------------------------------------------------------------------------

loc_8001249:				; CODE XREF: usage+Bj
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aUsageSOption__ ; "Usage: %s [OPTION]...	[ FILE | ARG1 ARG"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aPrintInformati ; "Print	information about users	who are	c"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aAAllSameAsBDLo ; "\n  -a, --all		same as	-b -d --l"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aLLoginPrintSys ; "  -l,	--login	      print system login "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aLookupAttemptT ; "	--lookup      attempt to canonica"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aQCountAllLogin ; "  -q,	--count	      all login	names and"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aTWMesgAddUserS ; "  -T,	-w, --mesg    add user's message "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aHelpDisplayThi ; "	--help	   display this	help and "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aVersionOutputV ; "	--version  output version informa"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		sub	esp, 0Ch
		push	offset aIfFileIsNotSpe ; "\nIf FILE is not specified, use %s.  %s"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset aVarLogWtmp ; "/var/log/wtmp"
		push	offset filename	; "/var/run/utmp"
		push	eax		; format
		call	printf
		add	esp, 10h
		call	emit_ancillary_info

loc_80013AF:				; CODE XREF: usage+38j
		sub	esp, 0Ch
		push	[ebp+status]	; status
		call	exit
usage		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public main
main		proc near

assumptions	= byte ptr -0Dh
optc		= dword	ptr -0Ch
argc		= dword	ptr  0Ch
argv		= dword	ptr  10h
envp		= dword	ptr  14h

		lea	ecx, [esp+4]
		and	esp, 0FFFFFFF0h
		push	dword ptr [ecx-4]
		push	ebp
		mov	ebp, esp
		push	ebx
		push	ecx
		sub	esp, 10h
		mov	ebx, ecx
		mov	[ebp+assumptions], 1
		mov	eax, [ebx+4]
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	set_program_name
		add	esp, 10h
		sub	esp, 8
		push	offset locale	; locale
		push	6		; category
		call	setlocale
		add	esp, 10h
		sub	esp, 8
		push	offset dirname	; "/usr/local/share/locale"
		push	offset domainname ; "coreutils"
		call	bindtextdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset domainname ; "coreutils"
		call	textdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset close_stdout ; func
		call	atexit
		add	esp, 10h
		jmp	loc_8001666
; ---------------------------------------------------------------------------

loc_800142F:				; CODE XREF: main+2CFj
		mov	eax, [ebp+optc]
		cmp	eax, 6Dh
		jz	loc_800159A
		cmp	eax, 6Dh
		jg	short loc_80014A1
		cmp	eax, 54h
		jz	loc_80015F2
		cmp	eax, 54h
		jg	short loc_8001472
		cmp	eax, 0FFFFFF7Eh
		jz	loc_8001618
		cmp	eax, 48h
		jz	loc_8001577
		cmp	eax, 0FFFFFF7Dh
		jz	loc_8001622
		jmp	loc_800165C
; ---------------------------------------------------------------------------

loc_8001472:				; CODE XREF: main+92j
		cmp	eax, 62h
		jz	loc_8001549
		cmp	eax, 62h
		jg	short loc_800148A
		cmp	eax, 61h
		jz	short loc_80014FA
		jmp	loc_800165C
; ---------------------------------------------------------------------------

loc_800148A:				; CODE XREF: main+C4j
		cmp	eax, 64h
		jz	loc_8001559
		cmp	eax, 6Ch
		jz	loc_8001583
		jmp	loc_800165C
; ---------------------------------------------------------------------------

loc_80014A1:				; CODE XREF: main+84j
		cmp	eax, 73h
		jz	loc_80015D9
		cmp	eax, 73h
		jg	short loc_80014CF
		cmp	eax, 71h
		jz	loc_80015B6
		cmp	eax, 71h
		jg	loc_80015C2
		cmp	eax, 70h
		jz	loc_80015A6
		jmp	loc_800165C
; ---------------------------------------------------------------------------

loc_80014CF:				; CODE XREF: main+F3j
		cmp	eax, 75h
		jz	loc_80015FB
		cmp	eax, 75h
		jl	loc_80015E5
		cmp	eax, 77h
		jz	loc_80015F2
		cmp	eax, 80h
		jz	loc_800160F
		jmp	loc_800165C
; ---------------------------------------------------------------------------

loc_80014FA:				; CODE XREF: main+C9j
		mov	ds:need_boottime, 1
		mov	ds:need_deadprocs, 1
		mov	ds:need_login, 1
		mov	ds:need_initspawn, 1
		mov	ds:need_runlevel, 1
		mov	ds:need_clockchange, 1
		mov	ds:need_users, 1
		mov	ds:include_mesg, 1
		mov	ds:include_idle, 1
		mov	ds:include_exit, 1
		mov	[ebp+assumptions], 0
		jmp	loc_8001666
; ---------------------------------------------------------------------------

loc_8001549:				; CODE XREF: main+BBj
		mov	ds:need_boottime, 1
		mov	[ebp+assumptions], 0
		jmp	loc_8001666
; ---------------------------------------------------------------------------

loc_8001559:				; CODE XREF: main+D3j
		mov	ds:need_deadprocs, 1
		mov	ds:include_idle, 1
		mov	ds:include_exit, 1
		mov	[ebp+assumptions], 0
		jmp	loc_8001666
; ---------------------------------------------------------------------------

loc_8001577:				; CODE XREF: main+A2j
		mov	ds:include_heading, 1
		jmp	loc_8001666
; ---------------------------------------------------------------------------

loc_8001583:				; CODE XREF: main+DCj
		mov	ds:need_login, 1
		mov	ds:include_idle, 1
		mov	[ebp+assumptions], 0
		jmp	loc_8001666
; ---------------------------------------------------------------------------

loc_800159A:				; CODE XREF: main+7Bj
		mov	ds:my_line_only, 1
		jmp	loc_8001666
; ---------------------------------------------------------------------------

loc_80015A6:				; CODE XREF: main+10Aj
		mov	ds:need_initspawn, 1
		mov	[ebp+assumptions], 0
		jmp	loc_8001666
; ---------------------------------------------------------------------------

loc_80015B6:				; CODE XREF: main+F8j
		mov	ds:short_list, 1
		jmp	loc_8001666
; ---------------------------------------------------------------------------

loc_80015C2:				; CODE XREF: main+101j
		mov	ds:need_runlevel, 1
		mov	ds:include_idle, 1
		mov	[ebp+assumptions], 0
		jmp	loc_8001666
; ---------------------------------------------------------------------------

loc_80015D9:				; CODE XREF: main+EAj
		mov	ds:short_output, 1
		jmp	loc_8001666
; ---------------------------------------------------------------------------

loc_80015E5:				; CODE XREF: main+121j
		mov	ds:need_clockchange, 1
		mov	[ebp+assumptions], 0
		jmp	short loc_8001666
; ---------------------------------------------------------------------------

loc_80015F2:				; CODE XREF: main+89j main+12Aj
		mov	ds:include_mesg, 1
		jmp	short loc_8001666
; ---------------------------------------------------------------------------

loc_80015FB:				; CODE XREF: main+118j
		mov	ds:need_users, 1
		mov	ds:include_idle, 1
		mov	[ebp+assumptions], 0
		jmp	short loc_8001666
; ---------------------------------------------------------------------------

loc_800160F:				; CODE XREF: main+135j
		mov	ds:do_lookup, 1
		jmp	short loc_8001666
; ---------------------------------------------------------------------------

loc_8001618:				; CODE XREF: main+99j
		sub	esp, 0Ch
		push	0		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8001622:				; CODE XREF: main+ADj
		mov	edx, ds:Version
		mov	eax, ds:stdout
		push	0
		push	offset aMichaelStone ; "Michael	Stone"
		push	offset aDavidMackenzie ; "David	MacKenzie"
		push	offset aJosephArceneau ; "Joseph Arceneaux"
		push	edx
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	offset aWho	; "who"
		push	eax
		call	version_etc
		add	esp, 20h
		sub	esp, 0Ch
		push	0		; status
		call	exit
; ---------------------------------------------------------------------------

loc_800165C:				; CODE XREF: main+B3j main+CBj ...
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8001666:				; CODE XREF: main+70j main+18Aj ...
		sub	esp, 0Ch
		push	0		; longind
		push	offset longopts	; longopts
		push	offset shortopts ; "abdlmpqrstuwHT"
		push	dword ptr [ebx+4] ; argv
		push	dword ptr [ebx]	; argc
		call	getopt_long
		add	esp, 20h
		mov	[ebp+optc], eax
		cmp	[ebp+optc], 0FFFFFFFFh
		jnz	loc_800142F
		cmp	[ebp+assumptions], 0
		jz	short loc_80016A3
		mov	ds:need_users, 1
		mov	ds:short_output, 1

loc_80016A3:				; CODE XREF: main+2D9j
		movzx	eax, ds:include_exit
		test	al, al
		jz	short loc_80016B5
		mov	ds:short_output, 0

loc_80016B5:				; CODE XREF: main+2F2j
		sub	esp, 0Ch
		push	2
		call	hard_locale
		add	esp, 10h
		test	al, al
		jz	short loc_80016DC
		mov	ds:time_format,	offset aYMDHM ;	"%Y-%m-%d %H:%M"
		mov	ds:time_format_width, 10h
		jmp	short loc_80016F0
; ---------------------------------------------------------------------------

loc_80016DC:				; CODE XREF: main+30Aj
		mov	ds:time_format,	offset aBEHM ; "%b %e %H:%M"
		mov	ds:time_format_width, 0Ch

loc_80016F0:				; CODE XREF: main+320j
		mov	eax, ds:optind
		mov	edx, [ebx]
		sub	edx, eax
		mov	eax, edx
		cmp	eax, 1
		jz	short loc_800172C
		cmp	eax, 1
		jg	short loc_800170C
		cmp	eax, 0FFFFFFFFh
		jl	short loc_800174F
		jmp	short loc_8001718
; ---------------------------------------------------------------------------

loc_800170C:				; CODE XREF: main+349j
		cmp	eax, 2
		jnz	short loc_800174F
		mov	ds:my_line_only, 1

loc_8001718:				; CODE XREF: main+350j
		sub	esp, 8
		push	1		; options
		push	offset filename	; "/var/run/utmp"
		call	who
		add	esp, 10h
		jmp	short loc_800179B
; ---------------------------------------------------------------------------

loc_800172C:				; CODE XREF: main+344j
		mov	eax, ds:optind
		lea	edx, ds:0[eax*4]
		mov	eax, [ebx+4]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 8
		push	0		; options
		push	eax		; filename
		call	who
		add	esp, 10h
		jmp	short loc_800179B
; ---------------------------------------------------------------------------

loc_800174F:				; CODE XREF: main+34Ej	main+355j
		mov	eax, ds:optind
		add	eax, 2
		lea	edx, ds:0[eax*4]
		mov	eax, [ebx+4]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aExtraOperandS ;	"extra operand %s"
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_800179B:				; CODE XREF: main+370j	main+393j
		sub	esp, 0Ch
		push	0		; status

loc_80017A0:				; DATA XREF: .eh_frame:08002170o
					; .eh_frame:08002194o ...
		call	exit
main		endp

_text		ends

; Function-local static	variable
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 80017A8h
; time_t now_5252
now_5252	dd 80000000h		; DATA XREF: idle_string+7r
					; idle_string+16o ...
; Function-local static	variable
; char mesg_5273[3]
mesg_5273	db 20h,	78h, 0		; DATA XREF: print_line+158o
					; print_line+46w
_data		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
; Segment alignment '32byte' can not be represented in assembly
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 80017C0h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
; _Bool	do_lookup
do_lookup	db ?			; DATA XREF: print_user+1D8r
					; main:loc_800160Fw
; _Bool	short_list
short_list	db ?			; DATA XREF: who:loc_80011B6r
					; main:loc_80015B6w
; _Bool	short_output
short_output	db ?			; DATA XREF: print_line+56r
					; print_line:loc_8000346r ...
; _Bool	include_idle
include_idle	db ?			; DATA XREF: print_line+4Br main+178w	...
; _Bool	include_heading
include_heading	db ?			; DATA XREF: scan_entries+Dr
					; main:loc_8001577w
; _Bool	include_mesg
include_mesg	db ?			; DATA XREF: print_line+14Dr main+171w ...
; _Bool	include_exit
include_exit	db ?			; DATA XREF: print_line:loc_8000384r
					; print_line+11Er ...
; _Bool	need_boottime
need_boottime	db ?			; DATA XREF: scan_entries:loc_8001072r
					; main:loc_80014FAw ...
; _Bool	need_deadprocs
need_deadprocs	db ?			; DATA XREF: scan_entries:loc_8001111r
					; main+147w ...
; _Bool	need_login
need_login	db ?			; DATA XREF: scan_entries:loc_80010EAr
					; main+14Ew ...
; _Bool	need_initspawn
need_initspawn	db ?			; DATA XREF: scan_entries:loc_80010C3r
					; main+155w ...
; _Bool	need_clockchange
need_clockchange db ?			; DATA XREF: scan_entries:loc_800109Cr
					; main+163w ...
; _Bool	need_runlevel
need_runlevel	db ?			; DATA XREF: scan_entries:loc_8001048r
					; main+15Cw ...
; _Bool	need_users
need_users	db ?			; DATA XREF: scan_entries:loc_8001010r
					; main+16Aw ...
; _Bool	my_line_only
my_line_only	db ?			; DATA XREF: scan_entries:loc_8000F94r
					; scan_entries:loc_8000FE3r ...
		align 10h
; const	char *time_format
time_format	dd ?			; DATA XREF: time_string+3Br main+30Cw ...
; int time_format_width
time_format_width dd ?			; DATA XREF: print_line:loc_80003F9r
					; main+316w ...
; Function-local static	variable
; char idle_hhmm_5254[6]
idle_hhmm_5254	db 6 dup(?)		; DATA XREF: idle_string+D0o
					; idle_string+DDo
		align 10h
; Function-local static	variable
; char buf_5258[33]
buf_5258	db 21h dup(?)		; DATA XREF: time_string+46o
					; time_string+53o ...
		align 4
; Function-local static	variable
; size_t hostlen_5292
hostlen_5292	dd ?			; DATA XREF: print_user+246r
					; print_user+278w ...
; Function-local static	variable
; char *hoststr_5291
hoststr_5291	dd ?			; DATA XREF: print_user+283r
					; print_user+295w ...
; Function-local static	variable
; char *exitstr_5308
exitstr_5308	dd ?			; DATA XREF: print_deadprocs+46r
					; print_deadprocs+9Aw ...
; Function-local static	variable
; char *runlevline_5327
runlevline_5327	dd ?			; DATA XREF: print_runlevel+32r
					; print_runlevel+66w ...
; Function-local static	variable
; char *comment_5328
comment_5328	dd ?			; DATA XREF: print_runlevel+96r
					; print_runlevel+CAw ...
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment '32byte' can not be represented in assembly
_rodata		segment	para public 'CONST' use32
		assume cs:_rodata
		;org 8001820h
; char msgid[]
msgid		db 0Ah			; DATA XREF: emit_ancillary_info+1Do
		db 'Report %s bugs to %s',0Ah,0
aBugCoreutils@g	db 'bug-coreutils@gnu.org',0 ; DATA XREF: emit_ancillary_info+2Do
		align 10h
; char aSHomePageHttpW[]
aSHomePageHttpW	db '%s home page: <http://www.gnu.org/software/%s/>',0Ah,0
					; DATA XREF: emit_ancillary_info+3Fo
; char domainname[]
domainname	db 'coreutils',0        ; DATA XREF: emit_ancillary_info+4Fo
					; main+43o ...
aGnuCoreutils	db 'GNU coreutils',0    ; DATA XREF: emit_ancillary_info+54o
					; main+285o
		align 4
; char aGeneralHelpUsi[]
aGeneralHelpUsi	db 'General help using GNU software: <http://www.gnu.org/gethelp/>',0Ah,0
					; DATA XREF: emit_ancillary_info+6Bo
; char s2[]
s2		db 'en_',0              ; DATA XREF: emit_ancillary_info+A2o
; char aReportSTransla[]
aReportSTransla	db 'Report %s translation bugs to <http://translationproject.org/team'
					; DATA XREF: emit_ancillary_info+CCo
		db '/>',0Ah,0
		align 4
; char aForCompleteDoc[]
aForCompleteDoc	db 'For complete documentation, run: info coreutils ',27h,'%s invocation'
					; DATA XREF: emit_ancillary_info+FCo
		db 27h,0Ah,0
aAll		db 'all',0              ; DATA XREF: .rodata:longoptso
aBoot		db 'boot',0             ; DATA XREF: .rodata:longoptso
aCount		db 'count',0            ; DATA XREF: .rodata:longoptso
aDead		db 'dead',0             ; DATA XREF: .rodata:longoptso
aHeading	db 'heading',0          ; DATA XREF: .rodata:longoptso
aLogin_0	db 'login',0            ; DATA XREF: .rodata:longoptso
aLookup		db 'lookup',0           ; DATA XREF: .rodata:longoptso
aMessage	db 'message',0          ; DATA XREF: .rodata:longoptso
aMesg		db 'mesg',0             ; DATA XREF: .rodata:longoptso
aProcess	db 'process',0          ; DATA XREF: .rodata:longoptso
aRunlevel	db 'runlevel',0         ; DATA XREF: .rodata:longoptso
aShort		db 'short',0            ; DATA XREF: .rodata:longoptso
aTime_0		db 'time',0             ; DATA XREF: .rodata:longoptso
aUsers		db 'users',0            ; DATA XREF: .rodata:longoptso
aWritable	db 'writable',0         ; DATA XREF: .rodata:longoptso
aHelp		db 'help',0             ; DATA XREF: .rodata:longoptso
aVersion	db 'version',0          ; DATA XREF: .rodata:longoptso
		align 10h
; const	option longopts[18]
longopts	option <offset aAll, 0,	0, 61h>	; DATA XREF: main+2B1o
		option <offset aBoot, 0, 0, 62h> ; "all"
		option <offset aCount, 0, 0, 71h>
		option <offset aDead, 0, 0, 64h>
		option <offset aHeading, 0, 0, 48h>
		option <offset aLogin_0, 0, 0, 6Ch>
		option <offset aLookup,	0, 0, 80h>
		option <offset aMessage, 0, 0, 54h>
		option <offset aMesg, 0, 0, 54h>
		option <offset aProcess, 0, 0, 70h>
		option <offset aRunlevel, 0, 0,	72h>
		option <offset aShort, 0, 0, 73h>
		option <offset aTime_0,	0, 0, 74h>
		option <offset aUsers, 0, 0, 75h>
		option <offset aWritable, 0, 0,	54h>
		option <offset aHelp, 0, 0, 0FFFFFF7Eh>
		option <offset aVersion, 0, 0, 0FFFFFF7Dh>
		option	<0>
a_		db '  .  ',0            ; DATA XREF: idle_string+61o
; char format[]
format		db '%02d:%02d',0        ; DATA XREF: idle_string+CBo
; char aOld[]
aOld		db ' old ',0            ; DATA XREF: idle_string+E7o
; char a6s[]
a6s		db ' %-6s',0            ; DATA XREF: print_line+7Do
; char a10s[]
a10s		db ' %10s',0            ; DATA XREF: print_line+BBo
; char a12s[]
a12s		db ' %-12s',0           ; DATA XREF: print_line+12Fo
; char locale
locale		db 0			; DATA XREF: print_line:loc_8000411o
					; print_user:loc_800086Ao ...
a__0		db '   .',0             ; DATA XREF: print_line:loc_8000421o
		align 10h
a8_SS12_SSSS8sS	db '%-8.*s%s %-12.*s %-*s%s%s %-8s%s',0 ; DATA XREF: print_line+194o
; char aLd[]
aLd		db '%ld',0              ; DATA XREF: print_user+2Do
					; print_deadprocs+35o ...
; char a_S[]
a_S		db '%.*s',0             ; DATA XREF: print_user+12Bo
; char aSS[]
aSS		db '(%s:%s)',0          ; DATA XREF: print_user+2ABo
; char aS[]
aS		db '(%s)',0             ; DATA XREF: print_user+31Co
; char aSystemBoot[]
aSystemBoot	db 'system boot',0      ; DATA XREF: print_boottime+1Ao
; char aId[]
aId		db 'id=',0              ; DATA XREF: make_id_equals_comment+9o
					; make_id_equals_comment+37o
; char aTerm[]
aTerm		db 'term=',0            ; DATA XREF: print_deadprocs+52o
					; print_deadprocs+CEo
; char aExit[]
aExit		db 'exit=',0            ; DATA XREF: print_deadprocs+70o
					; print_deadprocs+AFo
; char aSDSD[]
aSDSD		db '%s%d %s%d',0        ; DATA XREF: print_deadprocs+E9o
; char aLogin[]
aLogin		db 'LOGIN',0            ; DATA XREF: print_login+5Eo
; char aClockChange[]
aClockChange	db 'clock change',0     ; DATA XREF: print_clockchange+1Ao
; char aRunLevel[]
aRunLevel	db 'run-level',0        ; DATA XREF: print_runlevel+3Eo
					; print_runlevel+72o
; char aSC[]
aSC		db '%s %c',0            ; DATA XREF: print_runlevel+88o
; char aLast[]
aLast		db 'last=',0            ; DATA XREF: print_runlevel+A2o
					; print_runlevel+E3o
; char aSC_0[]
aSC_0		db '%s%c',0             ; DATA XREF: print_runlevel+F9o
; char aSS_0[]
aSS_0		db '%s%s',0             ; DATA XREF: list_entries_who+47o
asc_8001BC0	db ' ',0                ; DATA XREF: list_entries_who+62o
; char aUsersLu[]
aUsersLu	db 0Ah			; DATA XREF: list_entries_who+84o
		db '# users=%lu',0Ah,0
; char aExit_0[]
aExit_0		db 'EXIT',0             ; DATA XREF: print_heading+Co
; char aComment[]
aComment	db 'COMMENT',0          ; DATA XREF: print_heading+1Fo
; char aPid[]
aPid		db 'PID',0              ; DATA XREF: print_heading+32o
; char aIdle[]
aIdle		db 'IDLE',0             ; DATA XREF: print_heading+45o
; char aTime[]
aTime		db 'TIME',0             ; DATA XREF: print_heading+57o
; char aLine[]
aLine		db 'LINE',0             ; DATA XREF: print_heading+69o
; char aName[]
aName		db 'NAME',0             ; DATA XREF: print_heading+7Bo
; char aDev[]
aDev		db '/dev/',0            ; DATA XREF: scan_entries+4Bo
; char aS_0[]
aS_0		db '%s',0               ; DATA XREF: who+3Bo
		align 10h
; char aTrySHelpForMor[]
aTrySHelpForMor	db 'Try `%s --help',27h,' for more information.',0Ah,0
					; DATA XREF: usage+16o
		align 4
; char aUsageSOption__[]
aUsageSOption__	db 'Usage: %s [OPTION]... [ FILE | ARG1 ARG2 ]',0Ah,0 ; DATA XREF: usage+46o
; char aPrintInformati[]
aPrintInformati	db 'Print information about users who are currently logged in.',0Ah,0
					; DATA XREF: usage+69o
; char aAAllSameAsBDLo[]
aAAllSameAsBDLo	db 0Ah			; DATA XREF: usage+8Co
		db '  -a, --all         same as -b -d --login -p -r -t -T -u',0Ah
		db '  -b, --boot        time of last system boot',0Ah
		db '  -d, --dead        print dead processes',0Ah
		db '  -H, --heading     print line of column headings',0Ah,0
		align 4
; char aLLoginPrintSys[]
aLLoginPrintSys	db '  -l, --login       print system login processes',0Ah,0
					; DATA XREF: usage+AFo
		align 4
; char aLookupAttemptT[]
aLookupAttemptT	db '      --lookup      attempt to canonicalize hostnames via DNS',0Ah
					; DATA XREF: usage+D2o
		db '  -m                only hostname and user associated with stdin',0Ah
		db '  -p, --process     print active processes spawned by init',0Ah,0
		align 4
; char aQCountAllLogin[]
aQCountAllLogin	db '  -q, --count       all login names and number of users logged on'
					; DATA XREF: usage+F5o
		db 0Ah
		db '  -r, --runlevel    print current runlevel',0Ah
		db '  -s, --short       print only name, line, and time (default)',0Ah
		db '  -t, --time        print last system clock change',0Ah,0
		align 4
; char aTWMesgAddUserS[]
aTWMesgAddUserS	db '  -T, -w, --mesg    add user',27h,'s message status as +, - or ?',0Ah
					; DATA XREF: usage+118o
		db '  -u, --users       list users logged in',0Ah
		db '      --message     same as -T',0Ah
		db '      --writable    same as -T',0Ah,0
		align 4
; char aHelpDisplayThi[]
aHelpDisplayThi	db '      --help     display this help and exit',0Ah,0
					; DATA XREF: usage+13Bo
		align 4
; char aVersionOutputV[]
aVersionOutputV	db '      --version  output version information and exit',0Ah,0
					; DATA XREF: usage+15Eo
		align 10h
; char aIfFileIsNotSpe[]
aIfFileIsNotSpe	db 0Ah			; DATA XREF: usage+17Bo
		db 'If FILE is not specified, use %s.  %s as FILE is common.',0Ah
		db 'If ARG1 ARG2 given, -m presumed: `am i',27h,' or `mom likes',27h,' are '
		db 'usual.',0Ah,0
aVarLogWtmp	db '/var/log/wtmp',0    ; DATA XREF: usage+18Bo
; char filename[]
filename	db '/var/run/utmp',0    ; DATA XREF: usage+190o main+363o
; char dirname[]
dirname		db '/usr/local/share/locale',0 ; DATA XREF: main+3Eo
aMichaelStone	db 'Michael Stone',0    ; DATA XREF: main+275o
aDavidMackenzie	db 'David MacKenzie',0  ; DATA XREF: main+27Ao
aJosephArceneau	db 'Joseph Arceneaux',0 ; DATA XREF: main+27Fo
aWho		db 'who',0              ; DATA XREF: main+28Ao
; char shortopts[]
shortopts	db 'abdlmpqrstuwHT',0   ; DATA XREF: main+2B6o
aYMDHM		db '%Y-%m-%d %H:%M',0   ; DATA XREF: main+30Co
aBEHM		db '%b %e %H:%M',0      ; DATA XREF: main:loc_80016DCo
; char aExtraOperandS[]
aExtraOperandS	db 'extra operand %s',0 ; DATA XREF: main+3BCo
_rodata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_eh_frame	segment	dword public 'CONST' use32
		assume cs:_eh_frame
		;org 8002150h
		dd 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 20h, 1Ch
		dd offset loc_80017A0-8003910h
		dd 11Ch, 80E4100h, 0D420285h, 3834405h,	0C5011403h, 4040CC3h
		dd 1Ch,	40h
		dd offset loc_80017A0-8003818h
		dd 1Ch,	80E4100h, 0D420285h, 0CC55805h,	404h, 20h, 60h
		dd offset loc_80017A0-800381Ch
		dd 0F9h, 80E4100h, 0D420285h, 3834405h,	0C3C5F102h, 4040Ch
		dd 1Ch,	84h
		dd offset loc_80017A0-8003747h
		dd 81h,	80E4100h, 0D420285h, 0C57D0205h, 4040Ch, 20h, 0A4h
		dd offset loc_80017A0-80036E6h
		dd 224h, 80E4100h, 0D420285h, 3834405h,	0C5021C03h, 4040CC3h
		dd 2Ch,	0C8h
		dd offset loc_80017A0-80034E6h
		dd 406h, 80E4100h, 0D420285h, 3874905h,	5830486h, 0C303F603h
		dd 0C741C641h, 40CC541h, 4, 20h, 0F8h
		dd offset loc_80017A0-8003110h
		dd 59h,	80E4100h, 0D420285h, 3834405h, 0C3C55102h, 4040Ch
		dd 1Ch,	11Ch
		dd offset loc_80017A0-80030DBh
		dd 6Fh,	80E4100h, 0D420285h, 0C56B0205h, 4040Ch, 2Ch, 13Ch
		dd offset loc_80017A0-800308Ch
		dd 160h, 80E4100h, 0D420285h, 3874605h,	5830486h, 0C3015303h
		dd 0C741C641h, 40CC541h, 4, 24h, 16Ch
		dd offset loc_80017A0-8002F5Ch
		dd 0B9h, 80E4100h, 0D420285h, 3864505h,	0AE020483h, 41C641C3h
		dd 4040CC5h, 1Ch, 194h
		dd offset loc_80017A0-8002ECBh
		dd 0A4h, 80E4100h, 0D420285h, 0C5A00205h, 4040Ch, 20h
		dd 1B4h
		dd offset loc_80017A0-8002E47h
		dd 59h,	80E4100h, 0D420285h, 3834405h, 0C3C55102h, 4040Ch
		dd 20h,	1D8h
		dd offset loc_80017A0-8002E12h
		dd 16Bh, 80E4100h, 0D420285h, 3834405h,	0C5016303h, 4040CC3h
		dd 1Ch,	1FCh
		dd offset loc_80017A0-8002CCBh
		dd 0A3h, 80E4100h, 0D420285h, 0C59F0205h, 4040Ch, 28h
		dd 21Ch
		dd offset loc_80017A0-8002C48h
		dd 0AFh, 80E4100h, 0D420285h, 3874605h,	5830486h, 41C3A202h
		dd 41C741C6h, 4040CC5h,	1Ch, 248h
		dd offset loc_80017A0-8002BC5h
		dd 1F4h, 80E4100h, 0D420285h, 1F00305h,	4040CC5h, 1Ch
		dd 268h
		dd offset loc_80017A0-80029F1h
		dd 0A1h, 80E4100h, 0D420285h, 0C59D0205h, 4040Ch, 18h
		dd 288h
		dd offset loc_80017A0-8002970h
		dd 1AEh, 80E4100h, 0D420285h, 3834405h,	24h, 2A4h
		dd offset loc_80017A0-80027DEh
		dd 3EBh, 10C4400h, 5104700h, 44007502h,	7875030Fh, 2031006h
		dd 7C75h
_eh_frame	ends

; ===========================================================================

; Segment type:	Externs
; extern
		extrn program_name:dword ; DATA	XREF: emit_ancillary_info+7r
					; emit_ancillary_info+B6r ...
		extrn last_component:near ; CODE XREF: emit_ancillary_info+10p
					; emit_ancillary_info+BFp ...
; char *gettext(const char *msgid)
		extrn gettext:near	; CODE XREF: emit_ancillary_info+22p
					; emit_ancillary_info+44p ...
; int printf(const char	*format, ...)
		extrn printf:near	; CODE XREF: emit_ancillary_info+34p
					; emit_ancillary_info+5Ap ...
; struct _IO_FILE *stdout
		extrn stdout:dword	; DATA XREF: emit_ancillary_info+62r
					; usage+60r ...
		extrn fputs_unlocked:near ; CODE XREF: emit_ancillary_info+7Dp
					; usage+7Bp ...
; char *setlocale(int category,	const char *locale)
		extrn setlocale:near	; CODE XREF: emit_ancillary_info+8Cp
					; main+33p
; int strncmp(const char *s1, const char *s2, size_t n)
		extrn strncmp:near	; CODE XREF: emit_ancillary_info+AAp
					; scan_entries+53p ...
		extrn imaxtostr:near	; CODE XREF: timetostr+12p
; time_t time(time_t *timer)
		extrn time:near		; CODE XREF: idle_string+1Bp
; int sprintf(char *s, const char *format, ...)
		extrn sprintf:near	; CODE XREF: idle_string+D5p
					; print_line+86p ...
; struct tm *localtime(const time_t *timer)
		extrn localtime:near	; CODE XREF: time_string+2Ap
; size_t strftime(char *s, size_t maxsize, const char *format, const struct tm *tp)
		extrn strftime:near	; CODE XREF: time_string+4Bp
		extrn __stack_chk_fail:near ; CODE XREF: time_string+7Ap
					; print_line+21Ap ...
; size_t strlen(const char *s)
		extrn strlen:near	; CODE XREF: print_line+6Ap
					; print_line+A8p ...
; void *xmalloc(size_t)
		extrn xmalloc:near	; CODE XREF: print_line+113p
					; make_id_equals_comment+29p ...
		extrn rpl_asprintf:near	; CODE XREF: print_line+19Dp
		extrn xalloc_die:near	; CODE XREF: print_line+1AEp
; int puts(const char *s)
		extrn puts:near		; CODE XREF: print_line+1E8p
; void free(void *ptr)
		extrn free:near		; CODE XREF: print_line+1F7p
					; print_line+205p ...
; char *strncpy(char *dest, const char *src, size_t n)
		extrn strncpy:near	; CODE XREF: print_user+65p
					; print_user+A1p ...
		extrn stat64:near	; CODE XREF: print_user+C1p
; char *strchr(const char *s, int c)
		extrn strchr:near	; CODE XREF: print_user+1A4p
		extrn canon_host:near	; CODE XREF: print_user+1EDp
; void *xrealloc(void *, size_t)
		extrn xrealloc:near	; CODE XREF: print_user+28Dp
					; print_user+301p ...
; char *strcpy(char *dest, const char *src)
		extrn strcpy:near	; CODE XREF: make_id_equals_comment+4Bp
; char *strncat(char *dest, const char *src, size_t n)
		extrn strncat:near	; CODE XREF: make_id_equals_comment+62p
		extrn c_isprint:near	; CODE XREF: print_runlevel+10Fp
		extrn extract_trimmed_name:near	; CODE XREF: list_entries_who+33p
; char *ttyname(int fd)
		extrn ttyname:near	; CODE XREF: scan_entries+31p
		extrn read_utmp:near	; CODE XREF: who+25p
; int *_errno_location(void)
		extrn __errno_location:near ; CODE XREF: who+31p
; void error(int status, int errnum, const char	*format, ...)
		extrn error:near	; CODE XREF: who+43p main+3CFp
; struct _IO_FILE *stderr
		extrn stderr:dword	; DATA XREF: usage+25r
; int fprintf(FILE *stream, const char *format,	...)
		extrn fprintf:near	; CODE XREF: usage+30p
; void exit(int	status)
		extrn exit:near		; CODE XREF: usage+1A9p main+29Dp ...
		extrn set_program_name:near ; CODE XREF: main+21p
; char *bindtextdomain(const char *domainname, const char *dirname)
		extrn bindtextdomain:near ; CODE XREF: main+48p
; char *textdomain(const char *domainname)
		extrn textdomain:near	; CODE XREF: main+58p
; void close_stdout(void)
		extrn close_stdout	; DATA XREF: main+63o
; int atexit(void (*func)(void))
		extrn atexit:near	; CODE XREF: main+68p
		extrn Version:dword	; DATA XREF: main:loc_8001622r
		extrn version_etc:near	; CODE XREF: main+290p
; int getopt_long(int argc, char *const	*argv, const char *shortopts, const struct option *longopts, int *longind)
		extrn getopt_long:near	; CODE XREF: main+2C0p
		extrn hard_locale:near	; CODE XREF: main+300p
; int optind
		extrn optind:dword	; DATA XREF: main:loc_80016F0r
					; main:loc_800172Cr ...
		extrn quote:near	; CODE XREF: main+3AFp


		end
