;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B611-7234-BB			    |
; |		Doskey Lee, Kingsoft Internet Security Software		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	7FB7CE9BA9CBE2623A10CE6557513355
; Input	CRC32 :	6307BF81

; File Name   :	D:\coreutils-o\printenv.o
; Format      :	ELF for	Intel 386 (Relocatable)
;
; Source File :	'printenv.c'

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	byte public 'CODE' use32
		assume cs:_text
		;org 8000000h
		assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl initialize_exit_failure(int status)
initialize_exit_failure	proc near	; CODE XREF: main+65p

status		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		cmp	[ebp+status], 1
		jz	short loc_8000011
		mov	eax, [ebp+status]
		mov	ds:exit_failure, eax

loc_8000011:				; CODE XREF: initialize_exit_failure+7j
		nop
		pop	ebp
		retn
initialize_exit_failure	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void emit_ancillary_info()
emit_ancillary_info proc near		; CODE XREF: usage+EAp

lc_messages	= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset msgid	; "\nReport %s bugs to %s\n"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset aBugCoreutils@g ; "bug-coreutils@gnu.org"
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	offset aSHomePageHttpW ; "%s home page:	<http://www.gnu.org/softw"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset domainname ; "coreutils"
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aGeneralHelpUsi ; "General help using GNU software: <http:"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		sub	esp, 8
		push	0		; locale
		push	5		; category
		call	setlocale
		add	esp, 10h
		mov	[ebp+lc_messages], eax
		cmp	[ebp+lc_messages], 0
		jz	short loc_80000FA
		sub	esp, 4
		push	3		; n
		push	offset s2	; "en_"
		push	[ebp+lc_messages] ; s1
		call	strncmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_80000FA
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aReportSTransla ; "Report %s translation	bugs to	<http://t"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h

loc_80000FA:				; CODE XREF: emit_ancillary_info+9Bj
					; emit_ancillary_info+B4j
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aForCompleteDoc ; "For complete documentation, run: info	c"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		nop
		mov	ebx, [ebp+var_4]
		leave
		retn
emit_ancillary_info endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; void __cdecl usage(int status)
		public usage
usage		proc near		; CODE XREF: main+A2p main+E4p

status		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 4
		cmp	[ebp+status], 0
		jz	short loc_800016D
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, ds:stderr
		sub	esp, 4
		push	ebx
		push	edx		; format
		push	eax		; stream
		call	fprintf
		add	esp, 10h
		jmp	loc_800021F
; ---------------------------------------------------------------------------

loc_800016D:				; CODE XREF: usage+Bj
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aUsageSOption__ ; "Usage: %s [OPTION]...	[VARIABLE]...\nPr"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset a0NullEndEachOu ; "  -0,	--null	   end each output line	w"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aHelpDisplayThi ; "	--help	   display this	help and "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aVersionOutputV ; "	--version  output version informa"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		sub	esp, 0Ch
		push	offset aNoteYourShellM ; "\nNOTE: your shell may have its own ver"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	offset aPrintenv ; "printenv"
		push	eax		; format
		call	printf
		add	esp, 10h
		call	emit_ancillary_info

loc_800021F:				; CODE XREF: usage+38j
		sub	esp, 0Ch
		push	[ebp+status]	; status
		call	exit
usage		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public main
main		proc near

ok		= byte ptr -23h
opt_nul_terminate_output= byte ptr -22h
matched		= byte ptr -21h
env		= dword	ptr -20h
ep		= dword	ptr -1Ch
ap		= dword	ptr -18h
i		= dword	ptr -14h
matches		= dword	ptr -10h
optc		= dword	ptr -0Ch
argc		= dword	ptr  0Ch
argv		= dword	ptr  10h
envp		= dword	ptr  14h

		lea	ecx, [esp+4]
		and	esp, 0FFFFFFF0h
		push	dword ptr [ecx-4]
		push	ebp
		mov	ebp, esp
		push	ebx
		push	ecx
		sub	esp, 20h
		mov	ebx, ecx
		mov	[ebp+opt_nul_terminate_output],	0
		mov	eax, [ebx+4]
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	set_program_name
		add	esp, 10h
		sub	esp, 8
		push	offset locale	; locale
		push	6		; category
		call	setlocale
		add	esp, 10h
		sub	esp, 8
		push	offset dirname	; "/usr/local/share/locale"
		push	offset domainname ; "coreutils"
		call	bindtextdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset domainname ; "coreutils"
		call	textdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	2		; status
		call	initialize_exit_failure
		add	esp, 10h
		sub	esp, 0Ch
		push	offset close_stdout ; func
		call	atexit
		add	esp, 10h
		jmp	short loc_8000313
; ---------------------------------------------------------------------------

loc_80002A9:				; CODE XREF: main+10Cj
		mov	eax, [ebp+optc]
		cmp	eax, 0FFFFFF7Eh
		jz	short loc_80002C7
		cmp	eax, 30h
		jz	short loc_80002C1
		cmp	eax, 0FFFFFF7Dh
		jz	short loc_80002D1
		jmp	short loc_8000309
; ---------------------------------------------------------------------------

loc_80002C1:				; CODE XREF: main+8Cj
		mov	[ebp+opt_nul_terminate_output],	1
		jmp	short loc_8000313
; ---------------------------------------------------------------------------

loc_80002C7:				; CODE XREF: main+87j
		sub	esp, 0Ch
		push	0		; status
		call	usage
; ---------------------------------------------------------------------------

loc_80002D1:				; CODE XREF: main+93j
		mov	edx, ds:Version
		mov	eax, ds:stdout
		sub	esp, 4
		push	0
		push	offset aRichardMlynari ; "Richard Mlynarik"
		push	offset aDavidMackenzie ; "David	MacKenzie"
		push	edx
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	offset aPrintenv ; "printenv"
		push	eax
		call	version_etc
		add	esp, 20h
		sub	esp, 0Ch
		push	0		; status
		call	exit
; ---------------------------------------------------------------------------

loc_8000309:				; CODE XREF: main+95j
		sub	esp, 0Ch
		push	2		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8000313:				; CODE XREF: main+7Dj main+9Bj
		sub	esp, 0Ch
		push	0		; longind
		push	offset longopts	; longopts
		push	offset shortopts ; "+iu:0"
		push	dword ptr [ebx+4] ; argv
		push	dword ptr [ebx]	; argc
		call	getopt_long
		add	esp, 20h
		mov	[ebp+optc], eax
		cmp	[ebp+optc], 0FFFFFFFFh
		jnz	loc_80002A9
		mov	eax, ds:optind
		cmp	eax, [ebx]
		jl	short loc_800038E
		mov	eax, ds:environ
		mov	[ebp+env], eax
		jmp	short loc_800037C
; ---------------------------------------------------------------------------

loc_800034F:				; CODE XREF: main+159j
		cmp	[ebp+opt_nul_terminate_output],	0
		jz	short loc_800035C
		mov	edx, 0
		jmp	short loc_8000361
; ---------------------------------------------------------------------------

loc_800035C:				; CODE XREF: main+129j
		mov	edx, 0Ah

loc_8000361:				; CODE XREF: main+130j
		mov	eax, [ebp+env]
		mov	eax, [eax]
		sub	esp, 4
		push	edx
		push	eax
		push	offset format	; "%s%c"
		call	printf
		add	esp, 10h
		add	[ebp+env], 4

loc_800037C:				; CODE XREF: main+123j
		mov	eax, [ebp+env]
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_800034F
		mov	[ebp+ok], 1
		jmp	loc_80004AA
; ---------------------------------------------------------------------------

loc_800038E:				; CODE XREF: main+119j
		mov	[ebp+matches], 0
		mov	eax, ds:optind
		mov	[ebp+i], eax
		jmp	loc_800048B
; ---------------------------------------------------------------------------

loc_80003A2:				; CODE XREF: main+266j
		mov	[ebp+matched], 0
		mov	eax, [ebp+i]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebx+4]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 8
		push	3Dh		; c
		push	eax		; s
		call	strchr
		add	esp, 10h
		test	eax, eax
		jnz	loc_8000486
		mov	eax, ds:environ
		mov	[ebp+env], eax
		jmp	loc_8000470
; ---------------------------------------------------------------------------

loc_80003DA:				; CODE XREF: main+24Dj
		mov	eax, [ebp+env]
		mov	eax, [eax]
		mov	[ebp+ep], eax
		mov	eax, [ebp+i]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebx+4]
		add	eax, edx
		mov	eax, [eax]
		mov	[ebp+ap], eax
		jmp	short loc_800043C
; ---------------------------------------------------------------------------

loc_80003F8:				; CODE XREF: main+240j
		mov	eax, [ebp+ep]
		movzx	eax, byte ptr [eax]
		cmp	al, 3Dh
		jnz	short loc_800043C
		mov	eax, [ebp+ap]
		movzx	eax, byte ptr [eax]
		test	al, al
		jnz	short loc_800043C
		cmp	[ebp+opt_nul_terminate_output],	0
		jz	short loc_8000419
		mov	edx, 0
		jmp	short loc_800041E
; ---------------------------------------------------------------------------

loc_8000419:				; CODE XREF: main+1E6j
		mov	edx, 0Ah

loc_800041E:				; CODE XREF: main+1EDj
		mov	eax, [ebp+ep]
		add	eax, 1
		sub	esp, 4
		push	edx
		push	eax
		push	offset format	; "%s%c"
		call	printf
		add	esp, 10h
		mov	[ebp+matched], 1
		jmp	short loc_800046C
; ---------------------------------------------------------------------------

loc_800043C:				; CODE XREF: main+1CCj	main+1D6j ...
		mov	eax, [ebp+ep]
		movzx	eax, byte ptr [eax]
		test	al, al
		jz	short loc_800046C
		mov	eax, [ebp+ap]
		movzx	eax, byte ptr [eax]
		test	al, al
		jz	short loc_800046C
		mov	eax, [ebp+ep]
		lea	edx, [eax+1]
		mov	[ebp+ep], edx
		movzx	ecx, byte ptr [eax]
		mov	eax, [ebp+ap]
		lea	edx, [eax+1]
		mov	[ebp+ap], edx
		movzx	eax, byte ptr [eax]
		cmp	cl, al
		jz	short loc_80003F8

loc_800046C:				; CODE XREF: main+210j	main+21Aj ...
		add	[ebp+env], 4

loc_8000470:				; CODE XREF: main+1ABj
		mov	eax, [ebp+env]
		mov	eax, [eax]
		test	eax, eax
		jnz	loc_80003DA
		movzx	eax, [ebp+matched]
		add	[ebp+matches], eax
		jmp	short loc_8000487
; ---------------------------------------------------------------------------

loc_8000486:				; CODE XREF: main+19Dj
		nop

loc_8000487:				; CODE XREF: main+25Aj
		add	[ebp+i], 1

loc_800048B:				; CODE XREF: main+173j
		mov	eax, [ebp+i]
		cmp	eax, [ebx]
		jl	loc_80003A2
		mov	eax, ds:optind
		mov	edx, [ebx]
		sub	edx, eax
		mov	eax, edx
		cmp	eax, [ebp+matches]
		setz	al
		mov	[ebp+ok], al

loc_80004AA:				; CODE XREF: main+15Fj
		cmp	[ebp+ok], 0
		jz	short loc_80004B7
		mov	eax, 0
		jmp	short loc_80004BC
; ---------------------------------------------------------------------------

loc_80004B7:				; CODE XREF: main+284j
		mov	eax, 1

loc_80004BC:				; CODE XREF: main+28Bj
		sub	esp, 0Ch
		push	eax		; status

loc_80004C0:				; DATA XREF: .eh_frame:08000930o
					; .eh_frame:08000950o ...
		call	exit
main		endp

_text		ends

; ===========================================================================

; Segment type:	Zero-length
; Segment permissions: Read/Write
_data		segment	byte public 'DATA' use32
_data		ends

; ===========================================================================

; Segment type:	Zero-length
; Segment permissions: Read/Write
_bss		segment	byte public 'BSS' use32
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment '32byte' can not be represented in assembly
_rodata		segment	para public 'CONST' use32
		assume cs:_rodata
		;org 80004E0h
; char msgid[]
msgid		db 0Ah			; DATA XREF: emit_ancillary_info+1Do
		db 'Report %s bugs to %s',0Ah,0
aBugCoreutils@g	db 'bug-coreutils@gnu.org',0 ; DATA XREF: emit_ancillary_info+2Do
		align 10h
; char aSHomePageHttpW[]
aSHomePageHttpW	db '%s home page: <http://www.gnu.org/software/%s/>',0Ah,0
					; DATA XREF: emit_ancillary_info+3Fo
; char domainname[]
domainname	db 'coreutils',0        ; DATA XREF: emit_ancillary_info+4Fo
					; main+43o ...
aGnuCoreutils	db 'GNU coreutils',0    ; DATA XREF: emit_ancillary_info+54o
					; main+C2o
		align 4
; char aGeneralHelpUsi[]
aGeneralHelpUsi	db 'General help using GNU software: <http://www.gnu.org/gethelp/>',0Ah,0
					; DATA XREF: emit_ancillary_info+6Bo
; char s2[]
s2		db 'en_',0              ; DATA XREF: emit_ancillary_info+A2o
; char aReportSTransla[]
aReportSTransla	db 'Report %s translation bugs to <http://translationproject.org/team'
					; DATA XREF: emit_ancillary_info+CCo
		db '/>',0Ah,0
		align 4
; char aForCompleteDoc[]
aForCompleteDoc	db 'For complete documentation, run: info coreutils ',27h,'%s invocation'
					; DATA XREF: emit_ancillary_info+FCo
		db 27h,0Ah,0
aNull		db 'null',0             ; DATA XREF: .rodata:longoptso
aHelp		db 'help',0             ; DATA XREF: .rodata:longoptso
aVersion	db 'version',0          ; DATA XREF: .rodata:longoptso
		align 10h
; const	option longopts[4]
longopts	option <offset aNull, 0, 0, 30h> ; DATA	XREF: main+EEo
		option <offset aHelp, 0, 0, 0FFFFFF7Eh>	; "null"
		option <offset aVersion, 0, 0, 0FFFFFF7Dh>
		option	<0>
; char aTrySHelpForMor[]
aTrySHelpForMor	db 'Try `%s --help',27h,' for more information.',0Ah,0
					; DATA XREF: usage+16o
		align 4
; char aUsageSOption__[]
aUsageSOption__	db 'Usage: %s [OPTION]... [VARIABLE]...',0Ah ; DATA XREF: usage+46o
		db 'Print the values of the specified environment VARIABLE(s).',0Ah
		db 'If no VARIABLE is specified, print name and value pairs for them '
		db 'all.',0Ah
		db 0Ah,0
		align 10h
; char a0NullEndEachOu[]
a0NullEndEachOu	db '  -0, --null     end each output line with 0 byte rather than new'
					; DATA XREF: usage+69o
		db 'line',0Ah,0
		align 4
; char aHelpDisplayThi[]
aHelpDisplayThi	db '      --help     display this help and exit',0Ah,0
					; DATA XREF: usage+8Co
		align 4
; char aVersionOutputV[]
aVersionOutputV	db '      --version  output version information and exit',0Ah,0
					; DATA XREF: usage+AFo
		align 10h
; char aNoteYourShellM[]
aNoteYourShellM	db 0Ah			; DATA XREF: usage+CCo
		db 'NOTE: your shell may have its own version of %s, which usually su'
		db 'persedes',0Ah
		db 'the version described here.  Please refer to your shell',27h,'s docu'
		db 'mentation',0Ah
		db 'for details about the options it supports.',0Ah,0
aPrintenv	db 'printenv',0         ; DATA XREF: usage+DCo main+C7o
; char locale
locale		db 0			; DATA XREF: main+2Co
; char dirname[]
dirname		db '/usr/local/share/locale',0 ; DATA XREF: main+3Eo
aRichardMlynari	db 'Richard Mlynarik',0 ; DATA XREF: main+B7o
aDavidMackenzie	db 'David MacKenzie',0  ; DATA XREF: main+BCo
; char shortopts[]
shortopts	db '+iu:0',0            ; DATA XREF: main+F3o
; char format[]
format		db '%s%c',0             ; DATA XREF: main+141o main+1FFo
_rodata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_eh_frame	segment	dword public 'CONST' use32
		assume cs:_eh_frame
		;org 8000910h
		dd 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 2	dup(1Ch)
		dd offset loc_80004C0-8000DF0h
		dd 14h,	80E4100h, 0D420285h, 0CC55005h,	404h, 20h, 3Ch
		dd offset loc_80004C0-8000DFCh
		dd 11Ch, 80E4100h, 0D420285h, 3834405h,	0C5011403h, 4040CC3h
		dd 18h,	60h
		dd offset loc_80004C0-8000D04h
		dd 0FAh, 80E4100h, 0D420285h, 3834405h,	24h, 7Ch
		dd offset loc_80004C0-8000C26h
		dd 29Bh, 10C4400h, 5104700h, 44007502h,	7875030Fh, 2031006h
		dd 7C75h
_eh_frame	ends

; ===========================================================================

; Segment type:	Externs
; extern
		extrn exit_failure:dword ; DATA	XREF: initialize_exit_failure+Cw
		extrn program_name:dword ; DATA	XREF: emit_ancillary_info+7r
					; emit_ancillary_info+B6r ...
		extrn last_component:near ; CODE XREF: emit_ancillary_info+10p
					; emit_ancillary_info+BFp ...
; char *gettext(const char *msgid)
		extrn gettext:near	; CODE XREF: emit_ancillary_info+22p
					; emit_ancillary_info+44p ...
; int printf(const char	*format, ...)
		extrn printf:near	; CODE XREF: emit_ancillary_info+34p
					; emit_ancillary_info+5Ap ...
; struct _IO_FILE *stdout
		extrn stdout:dword	; DATA XREF: emit_ancillary_info+62r
					; usage+60r ...
		extrn fputs_unlocked:near ; CODE XREF: emit_ancillary_info+7Dp
					; usage+7Bp ...
; char *setlocale(int category,	const char *locale)
		extrn setlocale:near	; CODE XREF: emit_ancillary_info+8Cp
					; main+33p
; int strncmp(const char *s1, const char *s2, size_t n)
		extrn strncmp:near	; CODE XREF: emit_ancillary_info+AAp
; struct _IO_FILE *stderr
		extrn stderr:dword	; DATA XREF: usage+25r
; int fprintf(FILE *stream, const char *format,	...)
		extrn fprintf:near	; CODE XREF: usage+30p
; void exit(int	status)
		extrn exit:near		; CODE XREF: usage+F5p	main+DAp ...
		extrn set_program_name:near ; CODE XREF: main+21p
; char *bindtextdomain(const char *domainname, const char *dirname)
		extrn bindtextdomain:near ; CODE XREF: main+48p
; char *textdomain(const char *domainname)
		extrn textdomain:near	; CODE XREF: main+58p
; void close_stdout(void)
		extrn close_stdout	; DATA XREF: main+70o
; int atexit(void (*func)(void))
		extrn atexit:near	; CODE XREF: main+75p
		extrn Version:dword	; DATA XREF: main:loc_80002D1r
		extrn version_etc:near	; CODE XREF: main+CDp
; int getopt_long(int argc, char *const	*argv, const char *shortopts, const struct option *longopts, int *longind)
		extrn getopt_long:near	; CODE XREF: main+FDp
; int optind
		extrn optind:dword	; DATA XREF: main+112r	main+16Br ...
		extrn environ:dword	; DATA XREF: main+11Br	main+1A3r
; char *strchr(const char *s, int c)
		extrn strchr:near	; CODE XREF: main+193p


		end
