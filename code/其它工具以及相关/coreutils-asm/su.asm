;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B611-7234-BB			    |
; |		Doskey Lee, Kingsoft Internet Security Software		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	28E7843795FA20A6B7BC4C45CCA79A24
; Input	CRC32 :	78357C38

; File Name   :	D:\coreutils-o\su.o
; Format      :	ELF for	Intel 386 (Relocatable)
;
; Source File :	'su.c'

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	byte public 'CODE' use32
		assume cs:_text
		;org 8000000h
		assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl initialize_exit_failure(int status)
initialize_exit_failure	proc near	; CODE XREF: main+89p

status		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		cmp	[ebp+status], 1
		jz	short loc_8000011
		mov	eax, [ebp+status]
		mov	ds:exit_failure, eax

loc_8000011:				; CODE XREF: initialize_exit_failure+7j
		nop
		pop	ebp
		retn
initialize_exit_failure	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void emit_ancillary_info()
emit_ancillary_info proc near		; CODE XREF: usage+ECp

lc_messages	= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset msgid	; "\nReport %s bugs to %s\n"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset aBugCoreutils@g ; "bug-coreutils@gnu.org"
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	offset aSHomePageHttpW ; "%s home page:	<http://www.gnu.org/softw"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset domainname ; "coreutils"
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aGeneralHelpUsi ; "General help using GNU software: <http:"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		sub	esp, 8
		push	0		; locale
		push	5		; category
		call	setlocale
		add	esp, 10h
		mov	[ebp+lc_messages], eax
		cmp	[ebp+lc_messages], 0
		jz	short loc_80000FA
		sub	esp, 4
		push	3		; n
		push	offset s2	; "en_"
		push	[ebp+lc_messages] ; s1
		call	strncmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_80000FA
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aReportSTransla ; "Report %s translation	bugs to	<http://t"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h

loc_80000FA:				; CODE XREF: emit_ancillary_info+9Bj
					; emit_ancillary_info+B4j
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aForCompleteDoc ; "For complete documentation, run: info	c"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		nop
		mov	ebx, [ebp+var_4]
		leave
		retn
emit_ancillary_info endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl xsetenv(const char *name, const char *val)
xsetenv		proc near		; CODE XREF: modify_environment+7Ep
					; modify_environment+95p ...

namelen		= dword	ptr -14h
vallen		= dword	ptr -10h
string		= dword	ptr -0Ch
name		= dword	ptr  8
val		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		sub	esp, 0Ch
		push	[ebp+name]	; s
		call	strlen
		add	esp, 10h
		mov	[ebp+namelen], eax
		sub	esp, 0Ch
		push	[ebp+val]	; s
		call	strlen
		add	esp, 10h
		mov	[ebp+vallen], eax
		mov	edx, [ebp+namelen]
		mov	eax, [ebp+vallen]
		add	eax, edx
		add	eax, 2
		sub	esp, 0Ch
		push	eax		; size_t
		call	xmalloc
		add	esp, 10h
		mov	[ebp+string], eax
		sub	esp, 8
		push	[ebp+name]	; src
		push	[ebp+string]	; dest
		call	strcpy
		add	esp, 10h
		mov	edx, [ebp+string]
		mov	eax, [ebp+namelen]
		add	eax, edx
		mov	byte ptr [eax],	3Dh
		mov	eax, [ebp+namelen]
		lea	edx, [eax+1]
		mov	eax, [ebp+string]
		add	eax, edx
		sub	esp, 8
		push	[ebp+val]	; src
		push	eax		; dest
		call	strcpy
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+string]	; string
		call	putenv
		add	esp, 10h
		test	eax, eax
		jz	short loc_80001BF
		call	xalloc_die

loc_80001BF:				; CODE XREF: xsetenv+88j
		nop
		leave
		retn
xsetenv		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; _Bool	__cdecl	correct_password(const passwd *pw)
correct_password proc near		; CODE XREF: main+337p

correct		= dword	ptr -18h
sp_0		= dword	ptr -14h
unencrypted	= dword	ptr -10h
encrypted	= dword	ptr -0Ch
pw		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+pw]
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax		; name
		call	getspnam
		add	esp, 10h
		mov	[ebp+sp_0], eax
		call	endspent
		cmp	[ebp+sp_0], 0
		jz	short loc_80001F2
		mov	eax, [ebp+sp_0]
		mov	eax, [eax+4]
		mov	[ebp+correct], eax
		jmp	short loc_80001FB
; ---------------------------------------------------------------------------

loc_80001F2:				; CODE XREF: correct_password+23j
		mov	eax, [ebp+pw]
		mov	eax, [eax+4]
		mov	[ebp+correct], eax

loc_80001FB:				; CODE XREF: correct_password+2Ej
		call	getuid
		test	eax, eax
		jz	short loc_8000214
		cmp	[ebp+correct], 0
		jz	short loc_8000214
		mov	eax, [ebp+correct]
		movzx	eax, byte ptr [eax]
		test	al, al
		jnz	short loc_800021E

loc_8000214:				; CODE XREF: correct_password+40j
					; correct_password+46j
		mov	eax, 1
		jmp	locret_80002B3
; ---------------------------------------------------------------------------

loc_800021E:				; CODE XREF: correct_password+50j
		sub	esp, 0Ch
		push	offset aPassword ; "Password:"
		call	gettext
		add	esp, 10h
		sub	esp, 0Ch
		push	eax
		call	gnu_getpass
		add	esp, 10h
		mov	[ebp+unencrypted], eax
		cmp	[ebp+unencrypted], 0
		jnz	short loc_800026A
		sub	esp, 0Ch
		push	offset aGetpassCannotO ; "getpass: cannot open /dev/tty"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	eax, 0
		jmp	short locret_80002B3
; ---------------------------------------------------------------------------

loc_800026A:				; CODE XREF: correct_password+7Fj
		sub	esp, 8
		push	[ebp+correct]	; salt
		push	[ebp+unencrypted] ; key
		call	crypt
		add	esp, 10h
		mov	[ebp+encrypted], eax
		sub	esp, 0Ch
		push	[ebp+unencrypted] ; s
		call	strlen
		add	esp, 10h
		sub	esp, 4
		push	eax		; n
		push	0		; c
		push	[ebp+unencrypted] ; s
		call	memset
		add	esp, 10h
		sub	esp, 8
		push	[ebp+correct]	; s2
		push	[ebp+encrypted]	; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		setz	al

locret_80002B3:				; CODE XREF: correct_password+57j
					; correct_password+A6j
		leave
		retn
correct_password endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl modify_environment(const	passwd *pw, const char *shell)
modify_environment proc	near		; CODE XREF: main+406p

term		= dword	ptr -0Ch
pw		= dword	ptr  8
shell		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		movzx	eax, ds:simulate_login
		test	al, al
		jz	loc_80003BA
		sub	esp, 0Ch
		push	offset name	; "TERM"
		call	getenv
		add	esp, 10h
		mov	[ebp+term], eax
		cmp	[ebp+term], 0
		jz	short loc_80002F4
		sub	esp, 0Ch
		push	[ebp+term]	; char *
		call	xstrdup
		add	esp, 10h
		mov	[ebp+term], eax

loc_80002F4:				; CODE XREF: modify_environment+2Cj
		cmp	[ebp+term], 0
		jz	short loc_8000301
		mov	eax, 1Ch
		jmp	short loc_8000306
; ---------------------------------------------------------------------------

loc_8000301:				; CODE XREF: modify_environment+43j
		mov	eax, 18h

loc_8000306:				; CODE XREF: modify_environment+4Aj
		sub	esp, 0Ch
		push	eax		; size_t
		call	xmalloc
		add	esp, 10h
		mov	ds:environ, eax
		mov	eax, ds:environ
		mov	dword ptr [eax], 0
		cmp	[ebp+term], 0
		jz	short loc_800033B
		sub	esp, 8
		push	[ebp+term]	; val
		push	offset name	; "TERM"
		call	xsetenv
		add	esp, 10h

loc_800033B:				; CODE XREF: modify_environment+71j
		mov	eax, [ebp+pw]
		mov	eax, [eax+14h]
		sub	esp, 8
		push	eax		; val
		push	offset aHome	; "HOME"
		call	xsetenv
		add	esp, 10h
		sub	esp, 8
		push	[ebp+shell]	; val
		push	offset aShell	; "SHELL"
		call	xsetenv
		add	esp, 10h
		mov	eax, [ebp+pw]
		mov	eax, [eax]
		sub	esp, 8
		push	eax		; val
		push	offset aUser	; "USER"
		call	xsetenv
		add	esp, 10h
		mov	eax, [ebp+pw]
		mov	eax, [eax]
		sub	esp, 8
		push	eax		; val
		push	offset aLogname	; "LOGNAME"
		call	xsetenv
		add	esp, 10h
		mov	eax, [ebp+pw]
		mov	eax, [eax+8]
		test	eax, eax
		jz	short loc_80003A2
		mov	eax, offset val	; "/usr/bin:/bin"
		jmp	short loc_80003A7
; ---------------------------------------------------------------------------

loc_80003A2:				; CODE XREF: modify_environment+E4j
		mov	eax, offset aUsrUcbBinUsrBi ; "/usr/ucb:/bin:/usr/bin:/etc"

loc_80003A7:				; CODE XREF: modify_environment+EBj
		sub	esp, 8
		push	eax		; val
		push	offset aPath	; "PATH"
		call	xsetenv
		add	esp, 10h
		jmp	short loc_8000425
; ---------------------------------------------------------------------------

loc_80003BA:				; CODE XREF: modify_environment+Fj
		movzx	eax, ds:change_environment
		test	al, al
		jz	short loc_8000425
		mov	eax, [ebp+pw]
		mov	eax, [eax+14h]
		sub	esp, 8
		push	eax		; val
		push	offset aHome	; "HOME"
		call	xsetenv
		add	esp, 10h
		sub	esp, 8
		push	[ebp+shell]	; val
		push	offset aShell	; "SHELL"
		call	xsetenv
		add	esp, 10h
		mov	eax, [ebp+pw]
		mov	eax, [eax+8]
		test	eax, eax
		jz	short loc_8000425
		mov	eax, [ebp+pw]
		mov	eax, [eax]
		sub	esp, 8
		push	eax		; val
		push	offset aUser	; "USER"
		call	xsetenv
		add	esp, 10h
		mov	eax, [ebp+pw]
		mov	eax, [eax]
		sub	esp, 8
		push	eax		; val
		push	offset aLogname	; "LOGNAME"
		call	xsetenv
		add	esp, 10h

loc_8000425:				; CODE XREF: modify_environment+103j
					; modify_environment+10Ej ...
		nop
		leave
		retn
modify_environment endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl change_identity(const passwd *pw)
change_identity	proc near		; CODE XREF: main+414p

var_4		= dword	ptr -4
pw		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 4
		call	__errno_location
		mov	dword ptr [eax], 0
		mov	eax, [ebp+pw]
		mov	edx, [eax+0Ch]
		mov	eax, [ebp+pw]
		mov	eax, [eax]
		sub	esp, 8
		push	edx		; group
		push	eax		; char *
		call	initgroups
		add	esp, 10h
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_800047F
		sub	esp, 0Ch
		push	offset aCannotSetGroup ; "cannot set groups"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		sub	esp, 4
		push	ebx		; format
		push	eax		; errnum
		push	7Dh		; status
		call	error
		add	esp, 10h

loc_800047F:				; CODE XREF: change_identity+2Dj
		call	endgrent
		mov	eax, [ebp+pw]
		mov	eax, [eax+0Ch]
		sub	esp, 0Ch
		push	eax		; gid
		call	setgid
		add	esp, 10h
		test	eax, eax
		jz	short loc_80004C2
		sub	esp, 0Ch
		push	offset aCannotSetGro_0 ; "cannot set group id"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		sub	esp, 4
		push	ebx		; format
		push	eax		; errnum
		push	7Dh		; status
		call	error
		add	esp, 10h

loc_80004C2:				; CODE XREF: change_identity+70j
		mov	eax, [ebp+pw]
		mov	eax, [eax+8]
		sub	esp, 0Ch
		push	eax		; uid
		call	setuid
		add	esp, 10h
		test	eax, eax
		jz	short loc_8000500
		sub	esp, 0Ch
		push	offset aCannotSetUserI ; "cannot set user id"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		sub	esp, 4
		push	ebx		; format
		push	eax		; errnum
		push	7Dh		; status
		call	error
		add	esp, 10h

loc_8000500:				; CODE XREF: change_identity+AEj
		nop
		mov	ebx, [ebp+var_4]
		leave
		retn
change_identity	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn static bp-based frame

; void __cdecl run_shell(const char *shell, const char *command, char **additional_args, size_t	n_additional_args)
run_shell	proc near		; CODE XREF: main:loc_8000CC5p

argno		= dword	ptr -20h
n_args		= dword	ptr -1Ch
args		= dword	ptr -18h
shell_basename	= dword	ptr -14h
arg0		= dword	ptr -10h
exit_status	= dword	ptr -0Ch
shell		= dword	ptr  8
command		= dword	ptr  0Ch
additional_args	= dword	ptr  10h
n_additional_args= dword ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		movzx	eax, ds:fast_startup
		movzx	eax, al
		add	eax, 1
		cmp	[ebp+command], 0
		jz	short loc_8000526
		mov	edx, 2
		jmp	short loc_800052B
; ---------------------------------------------------------------------------

loc_8000526:				; CODE XREF: run_shell+17j
		mov	edx, 0

loc_800052B:				; CODE XREF: run_shell+1Ej
		add	eax, edx
		mov	edx, eax
		mov	eax, [ebp+n_additional_args]
		add	eax, edx
		add	eax, 1
		mov	[ebp+n_args], eax
		sub	esp, 8
		push	4
		push	[ebp+n_args]
		call	xnmalloc
		add	esp, 10h
		mov	[ebp+args], eax
		mov	[ebp+argno], 1
		movzx	eax, ds:simulate_login
		test	al, al
		jz	short loc_80005B5
		sub	esp, 0Ch
		push	[ebp+shell]
		call	last_component
		add	esp, 10h
		mov	[ebp+shell_basename], eax
		sub	esp, 0Ch
		push	[ebp+shell_basename] ; s
		call	strlen
		add	esp, 10h
		add	eax, 2
		sub	esp, 0Ch
		push	eax		; size_t
		call	xmalloc
		add	esp, 10h
		mov	[ebp+arg0], eax
		mov	eax, [ebp+arg0]
		mov	byte ptr [eax],	2Dh
		mov	eax, [ebp+arg0]
		add	eax, 1
		sub	esp, 8
		push	[ebp+shell_basename] ; src
		push	eax		; dest
		call	strcpy
		add	esp, 10h
		mov	eax, [ebp+args]
		mov	edx, [ebp+arg0]
		mov	[eax], edx
		jmp	short loc_80005CA
; ---------------------------------------------------------------------------

loc_80005B5:				; CODE XREF: run_shell+57j
		sub	esp, 0Ch
		push	[ebp+shell]
		call	last_component
		add	esp, 10h
		mov	edx, eax
		mov	eax, [ebp+args]
		mov	[eax], edx

loc_80005CA:				; CODE XREF: run_shell+ADj
		movzx	eax, ds:fast_startup
		test	al, al
		jz	short loc_80005F0
		mov	eax, [ebp+argno]
		lea	edx, [eax+1]
		mov	[ebp+argno], edx
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+args]
		add	eax, edx
		mov	dword ptr [eax], offset	asc_8000FAD ; "-f"

loc_80005F0:				; CODE XREF: run_shell+CDj
		cmp	[ebp+command], 0
		jz	short loc_800062B
		mov	eax, [ebp+argno]
		lea	edx, [eax+1]
		mov	[ebp+argno], edx
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+args]
		add	eax, edx
		mov	dword ptr [eax], offset	aC ; "-c"
		mov	eax, [ebp+argno]
		lea	edx, [eax+1]
		mov	[ebp+argno], edx
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+args]
		add	edx, eax
		mov	eax, [ebp+command]
		mov	[edx], eax

loc_800062B:				; CODE XREF: run_shell+EEj
		mov	eax, [ebp+n_additional_args]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argno]
		lea	ecx, ds:0[eax*4]
		mov	eax, [ebp+args]
		add	eax, ecx
		sub	esp, 4
		push	edx		; n
		push	[ebp+additional_args] ;	src
		push	eax		; dest
		call	memcpy
		add	esp, 10h
		mov	edx, [ebp+argno]
		mov	eax, [ebp+n_additional_args]
		add	eax, edx
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+args]
		add	eax, edx
		mov	dword ptr [eax], 0
		sub	esp, 8
		push	[ebp+args]	; argv
		push	[ebp+shell]	; path
		call	execv
		add	esp, 10h
		call	__errno_location
		mov	eax, [eax]
		cmp	eax, 2
		jnz	short loc_8000692
		mov	eax, 7Fh
		jmp	short loc_8000697
; ---------------------------------------------------------------------------

loc_8000692:				; CODE XREF: run_shell+183j
		mov	eax, 7Eh

loc_8000697:				; CODE XREF: run_shell+18Aj
		mov	[ebp+exit_status], eax
		call	__errno_location
		mov	eax, [eax]
		push	[ebp+shell]
		push	offset format	; "%s"
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+exit_status] ; status
		call	exit
run_shell	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; _Bool	__cdecl	restricted_shell(const char *shell)
restricted_shell proc near		; CODE XREF: main+3A6p

line		= dword	ptr -0Ch
shell		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		call	setusershell
		jmp	short loc_80006F7
; ---------------------------------------------------------------------------

loc_80006CC:				; CODE XREF: restricted_shell+44j
		mov	eax, [ebp+line]
		movzx	eax, byte ptr [eax]
		cmp	al, 23h
		jz	short loc_80006F7
		sub	esp, 8
		push	[ebp+shell]	; s2
		push	[ebp+line]	; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		jnz	short loc_80006F7
		call	endusershell
		mov	eax, 0
		jmp	short locret_800070F
; ---------------------------------------------------------------------------

loc_80006F7:				; CODE XREF: restricted_shell+Bj
					; restricted_shell+15j	...
		call	getusershell
		mov	[ebp+line], eax
		cmp	[ebp+line], 0
		jnz	short loc_80006CC
		call	endusershell
		mov	eax, 1

locret_800070F:				; CODE XREF: restricted_shell+36j
		leave
		retn
restricted_shell endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; void __cdecl usage(int status)
		public usage
usage		proc near		; CODE XREF: main+131p	main+16Ep

status		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 4
		cmp	[ebp+status], 0
		jz	short loc_800074E
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, ds:stderr
		sub	esp, 4
		push	ebx
		push	edx		; format
		push	eax		; stream
		call	fprintf
		add	esp, 10h
		jmp	loc_8000802
; ---------------------------------------------------------------------------

loc_800074E:				; CODE XREF: usage+Bj
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aUsageSOption__ ; "Usage: %s [OPTION]...	[-] [USER [ARG].."...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aChangeTheEffec ; "Change the effective user id and group "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aHelpDisplayThi ; "	--help	   display this	help and "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aVersionOutputV ; "	--version  output version informa"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aAMereImpliesL_ ; "\nA mere - implies -l.   If USER not gi"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		call	emit_ancillary_info

loc_8000802:				; CODE XREF: usage+38j
		sub	esp, 0Ch
		push	[ebp+status]	; status
		call	exit
usage		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public main
main		proc near

argv		= dword	ptr -5Ch
new_user	= dword	ptr -4Ch
command		= dword	ptr -48h
shell		= dword	ptr -44h
optc		= dword	ptr -40h
pw		= dword	ptr -3Ch
pw_copy		= passwd ptr -38h
var_1C		= dword	ptr -1Ch
argc		= dword	ptr  0Ch
envp		= dword	ptr  14h

		lea	ecx, [esp+4]
		and	esp, 0FFFFFFF0h
		push	dword ptr [ecx-4]
		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		push	ecx
		sub	esp, 58h
		mov	ebx, ecx
		mov	eax, [ebx+4]
		mov	[ebp+argv], eax
		mov	eax, large gs:14h
		mov	[ebp+var_1C], eax
		xor	eax, eax
		mov	[ebp+new_user],	offset aRoot ; "root"
		mov	[ebp+command], 0
		mov	[ebp+shell], 0
		mov	eax, [ebp+argv]
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	set_program_name
		add	esp, 10h
		sub	esp, 8
		push	offset locale	; locale
		push	6		; category
		call	setlocale
		add	esp, 10h
		sub	esp, 8
		push	offset dirname	; "/usr/local/share/locale"
		push	offset domainname ; "coreutils"
		call	bindtextdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset domainname ; "coreutils"
		call	textdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	7Dh		; status
		call	initialize_exit_failure
		add	esp, 10h
		sub	esp, 0Ch
		push	offset close_stdout ; func
		call	atexit
		add	esp, 10h
		mov	ds:fast_startup, 0
		mov	ds:simulate_login, 0
		mov	ds:change_environment, 1
		jmp	loc_8000980
; ---------------------------------------------------------------------------

loc_80008C8:				; CODE XREF: main+196j
		mov	eax, [ebp+optc]
		cmp	eax, 66h
		jz	short loc_8000914
		cmp	eax, 66h
		jg	short loc_80008ED
		cmp	eax, 0FFFFFF7Eh
		jz	short loc_8000939
		cmp	eax, 63h
		jz	short loc_800090A
		cmp	eax, 0FFFFFF7Dh
		jz	short loc_8000943
		jmp	loc_8000976
; ---------------------------------------------------------------------------

loc_80008ED:				; CODE XREF: main+C6j
		cmp	eax, 6Dh
		jz	short loc_8000926
		cmp	eax, 6Dh
		jg	short loc_80008FE
		cmp	eax, 6Ch
		jz	short loc_800091D
		jmp	short loc_8000976
; ---------------------------------------------------------------------------

loc_80008FE:				; CODE XREF: main+E8j
		cmp	eax, 70h
		jz	short loc_8000926
		cmp	eax, 73h
		jz	short loc_800092F
		jmp	short loc_8000976
; ---------------------------------------------------------------------------

loc_800090A:				; CODE XREF: main+D2j
		mov	eax, ds:optarg
		mov	[ebp+command], eax
		jmp	short loc_8000980
; ---------------------------------------------------------------------------

loc_8000914:				; CODE XREF: main+C1j
		mov	ds:fast_startup, 1
		jmp	short loc_8000980
; ---------------------------------------------------------------------------

loc_800091D:				; CODE XREF: main+EDj
		mov	ds:simulate_login, 1
		jmp	short loc_8000980
; ---------------------------------------------------------------------------

loc_8000926:				; CODE XREF: main+E3j main+F4j
		mov	ds:change_environment, 0
		jmp	short loc_8000980
; ---------------------------------------------------------------------------

loc_800092F:				; CODE XREF: main+F9j
		mov	eax, ds:optarg
		mov	[ebp+shell], eax
		jmp	short loc_8000980
; ---------------------------------------------------------------------------

loc_8000939:				; CODE XREF: main+CDj
		sub	esp, 0Ch
		push	0		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8000943:				; CODE XREF: main+D9j
		mov	edx, ds:Version
		mov	eax, ds:stdout
		sub	esp, 8
		push	0
		push	offset aDavidMackenzie ; "David	MacKenzie"
		push	edx
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	offset aSu	; "su"
		push	eax
		call	version_etc
		add	esp, 20h
		sub	esp, 0Ch
		push	0		; status
		call	exit
; ---------------------------------------------------------------------------

loc_8000976:				; CODE XREF: main+DBj main+EFj ...
		sub	esp, 0Ch
		push	7Dh		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8000980:				; CODE XREF: main+B6j main+105j ...
		sub	esp, 0Ch
		push	0		; longind
		push	offset longopts	; longopts
		push	offset shortopts ; "c:flmps:"
		push	[ebp+argv]	; argv
		push	dword ptr [ebx]	; argc
		call	getopt_long
		add	esp, 20h
		mov	[ebp+optc], eax
		cmp	[ebp+optc], 0FFFFFFFFh
		jnz	loc_80008C8
		mov	eax, ds:optind
		cmp	eax, [ebx]
		jge	short loc_80009EE
		mov	eax, ds:optind
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 8
		push	offset asc_800129F ; "-"
		push	eax		; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		jnz	short loc_80009EE
		mov	ds:simulate_login, 1
		mov	eax, ds:optind
		add	eax, 1
		mov	ds:optind, eax

loc_80009EE:				; CODE XREF: main+1A3j	main+1CBj
		mov	eax, ds:optind
		cmp	eax, [ebx]
		jge	short loc_8000A16
		mov	eax, ds:optind
		lea	edx, [eax+1]
		mov	ds:optind, edx
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		mov	eax, [eax]
		mov	[ebp+new_user],	eax

loc_8000A16:				; CODE XREF: main+1E8j
		sub	esp, 0Ch
		push	[ebp+new_user]	; name
		call	getpwnam
		add	esp, 10h
		mov	[ebp+pw], eax
		cmp	[ebp+pw], 0
		jz	short loc_8000A63
		mov	eax, [ebp+pw]
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_8000A63
		mov	eax, [ebp+pw]
		mov	eax, [eax]
		movzx	eax, byte ptr [eax]
		test	al, al
		jz	short loc_8000A63
		mov	eax, [ebp+pw]
		mov	eax, [eax+14h]
		test	eax, eax
		jz	short loc_8000A63
		mov	eax, [ebp+pw]
		mov	eax, [eax+14h]
		movzx	eax, byte ptr [eax]
		test	al, al
		jz	short loc_8000A63
		mov	eax, [ebp+pw]
		mov	eax, [eax+4]
		test	eax, eax
		jnz	short loc_8000A83

loc_8000A63:				; CODE XREF: main+21Ej	main+227j ...
		sub	esp, 0Ch
		push	offset aUserSDoesNotEx ; "user %s does not exist"
		call	gettext
		add	esp, 10h
		push	[ebp+new_user]
		push	eax		; format
		push	0		; errnum
		push	7Dh		; status
		call	error
		add	esp, 10h

loc_8000A83:				; CODE XREF: main+254j
		mov	eax, [ebp+pw]
		mov	edx, [eax]
		mov	[ebp+pw_copy.pw_name], edx
		mov	edx, [eax+4]
		mov	[ebp+pw_copy.pw_passwd], edx
		mov	edx, [eax+8]
		mov	[ebp+pw_copy.pw_uid], edx
		mov	edx, [eax+0Ch]
		mov	[ebp+pw_copy.pw_gid], edx
		mov	edx, [eax+10h]
		mov	[ebp+pw_copy.pw_gecos],	edx
		mov	edx, [eax+14h]
		mov	[ebp+pw_copy.pw_dir], edx
		mov	eax, [eax+18h]
		mov	[ebp+pw_copy.pw_shell],	eax
		lea	eax, [ebp+pw_copy]
		mov	[ebp+pw], eax
		mov	eax, [ebp+pw]
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax		; char *
		call	xstrdup
		add	esp, 10h
		mov	edx, eax
		mov	eax, [ebp+pw]
		mov	[eax], edx
		mov	eax, [ebp+pw]
		mov	eax, [eax+4]
		sub	esp, 0Ch
		push	eax		; char *
		call	xstrdup
		add	esp, 10h
		mov	edx, eax
		mov	eax, [ebp+pw]
		mov	[eax+4], edx
		mov	eax, [ebp+pw]
		mov	eax, [eax+14h]
		sub	esp, 0Ch
		push	eax		; char *
		call	xstrdup
		add	esp, 10h
		mov	edx, eax
		mov	eax, [ebp+pw]
		mov	[eax+14h], edx
		mov	eax, [ebp+pw]
		mov	eax, [eax+18h]
		test	eax, eax
		jz	short loc_8000B20
		mov	eax, [ebp+pw]
		mov	eax, [eax+18h]
		movzx	eax, byte ptr [eax]
		test	al, al
		jz	short loc_8000B20
		mov	eax, [ebp+pw]
		mov	eax, [eax+18h]
		jmp	short loc_8000B25
; ---------------------------------------------------------------------------

loc_8000B20:				; CODE XREF: main+2FCj	main+309j
		mov	eax, offset aBinSh ; "/bin/sh"

loc_8000B25:				; CODE XREF: main+311j
		sub	esp, 0Ch
		push	eax		; char *
		call	xstrdup
		add	esp, 10h
		mov	edx, eax
		mov	eax, [ebp+pw]
		mov	[eax+18h], edx
		call	endpwent
		sub	esp, 0Ch
		push	[ebp+pw]	; pw
		call	correct_password
		add	esp, 10h
		xor	eax, 1
		test	al, al
		jz	short loc_8000B73
		sub	esp, 0Ch
		push	offset aIncorrectPassw ; "incorrect password"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	7Dh		; status
		call	error
		add	esp, 10h

loc_8000B73:				; CODE XREF: main+344j
		cmp	[ebp+shell], 0
		jnz	short loc_8000B9A
		movzx	eax, ds:change_environment
		xor	eax, 1
		test	al, al
		jz	short loc_8000B9A
		sub	esp, 0Ch
		push	offset aShell	; "SHELL"
		call	getenv
		add	esp, 10h
		mov	[ebp+shell], eax

loc_8000B9A:				; CODE XREF: main+36Aj	main+378j
		cmp	[ebp+shell], 0
		jz	short loc_8000BEA
		call	getuid
		test	eax, eax
		jz	short loc_8000BEA
		mov	eax, [ebp+pw]
		mov	eax, [eax+18h]
		sub	esp, 0Ch
		push	eax		; shell
		call	restricted_shell
		add	esp, 10h
		test	al, al
		jz	short loc_8000BEA
		mov	eax, [ebp+pw]
		mov	esi, [eax+18h]
		sub	esp, 0Ch
		push	offset aUsingRestricte ; "using	restricted shell %s"
		call	gettext
		add	esp, 10h
		push	esi
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	[ebp+shell], 0

loc_8000BEA:				; CODE XREF: main+391j	main+39Aj ...
		cmp	[ebp+shell], 0
		jnz	short loc_8000BF8
		mov	eax, [ebp+pw]
		mov	eax, [eax+18h]
		jmp	short loc_8000BFB
; ---------------------------------------------------------------------------

loc_8000BF8:				; CODE XREF: main+3E1j
		mov	eax, [ebp+shell]

loc_8000BFB:				; CODE XREF: main+3E9j
		sub	esp, 0Ch
		push	eax		; char *
		call	xstrdup
		add	esp, 10h
		mov	[ebp+shell], eax
		sub	esp, 8
		push	[ebp+shell]	; shell
		push	[ebp+pw]	; pw
		call	modify_environment
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+pw]	; pw
		call	change_identity
		add	esp, 10h
		movzx	eax, ds:simulate_login
		test	al, al
		jz	short loc_8000C76
		mov	eax, [ebp+pw]
		mov	eax, [eax+14h]
		sub	esp, 0Ch
		push	eax		; path
		call	chdir
		add	esp, 10h
		test	eax, eax
		jz	short loc_8000C76
		mov	eax, [ebp+pw]
		mov	esi, [eax+14h]
		sub	esp, 0Ch
		push	offset aWarningCannotC ; "warning: cannot change directory to %s"
		call	gettext
		add	esp, 10h
		mov	edi, eax
		call	__errno_location
		mov	eax, [eax]
		push	esi
		push	edi		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h

loc_8000C76:				; CODE XREF: main+425j	main+43Bj
		mov	eax, ds:stderr
		sub	esp, 0Ch
		push	eax		; stream
		call	ferror_unlocked
		add	esp, 10h
		test	eax, eax
		jz	short loc_8000C95
		sub	esp, 0Ch
		push	7Dh		; status
		call	exit
; ---------------------------------------------------------------------------

loc_8000C95:				; CODE XREF: main+47Cj
		mov	eax, ds:optind
		mov	edx, [ebx]
		sub	edx, eax
		mov	eax, edx
		mov	edx, 0
		test	eax, eax
		cmovs	eax, edx
		mov	ecx, eax
		mov	eax, ds:optind
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		push	ecx		; n_additional_args
		push	eax		; additional_args
		push	[ebp+command]	; command
		push	[ebp+shell]	; shell

loc_8000CC5:				; DATA XREF: .eh_frame:08001338o
					; .eh_frame:08001358o ...
		call	run_shell
main		endp

_text		ends

; ===========================================================================

; Segment type:	Zero-length
; Segment permissions: Read/Write
_data		segment	byte public 'DATA' use32
_data		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	byte public 'BSS' use32
		assume cs:_bss
		;org 8000CCBh
		assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing
; _Bool	fast_startup
fast_startup	db ?			; DATA XREF: run_shell+6r
					; run_shell:loc_80005CAr ...
; _Bool	simulate_login
simulate_login	db ?			; DATA XREF: modify_environment+6r
					; run_shell+4Er ...
; _Bool	change_environment
change_environment db ?			; DATA XREF: modify_environment:loc_80003BAr
					; main+AFw ...
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment '32byte' can not be represented in assembly
_rodata		segment	para public 'CONST' use32
		assume cs:_rodata
		;org 8000CE0h
; char msgid[]
msgid		db 0Ah			; DATA XREF: emit_ancillary_info+1Do
		db 'Report %s bugs to %s',0Ah,0
aBugCoreutils@g	db 'bug-coreutils@gnu.org',0 ; DATA XREF: emit_ancillary_info+2Do
		align 10h
; char aSHomePageHttpW[]
aSHomePageHttpW	db '%s home page: <http://www.gnu.org/software/%s/>',0Ah,0
					; DATA XREF: emit_ancillary_info+3Fo
; char domainname[]
domainname	db 'coreutils',0        ; DATA XREF: emit_ancillary_info+4Fo
					; main+67o ...
aGnuCoreutils	db 'GNU coreutils',0    ; DATA XREF: emit_ancillary_info+54o
					; main+14Co
		align 4
; char aGeneralHelpUsi[]
aGeneralHelpUsi	db 'General help using GNU software: <http://www.gnu.org/gethelp/>',0Ah,0
					; DATA XREF: emit_ancillary_info+6Bo
; char s2[]
s2		db 'en_',0              ; DATA XREF: emit_ancillary_info+A2o
; char aReportSTransla[]
aReportSTransla	db 'Report %s translation bugs to <http://translationproject.org/team'
					; DATA XREF: emit_ancillary_info+CCo
		db '/>',0Ah,0
		align 4
; char aForCompleteDoc[]
aForCompleteDoc	db 'For complete documentation, run: info coreutils ',27h,'%s invocation'
					; DATA XREF: emit_ancillary_info+FCo
		db 27h,0Ah,0
aCommand	db 'command',0          ; DATA XREF: .rodata:longoptso
aFast		db 'fast',0             ; DATA XREF: .rodata:longoptso
aLogin		db 'login',0            ; DATA XREF: .rodata:longoptso
aPreserveEnviro	db 'preserve-environment',0 ; DATA XREF: .rodata:longoptso
aShell_0	db 'shell',0            ; DATA XREF: .rodata:longoptso
aHelp		db 'help',0             ; DATA XREF: .rodata:longoptso
aVersion	db 'version',0          ; DATA XREF: .rodata:longoptso
		align 20h
; const	option longopts[8]
longopts	option <offset aCommand, 1, 0, 63h> ; DATA XREF: main+178o
		option <offset aFast, 0, 0, 66h> ; "command"
		option <offset aLogin, 0, 0, 6Ch>
		option <offset aPreserveEnviro,	0, 0, 70h>
		option <offset aShell_0, 1, 0, 73h>
		option <offset aHelp, 0, 0, 0FFFFFF7Eh>
		option <offset aVersion, 0, 0, 0FFFFFF7Dh>
		option	<0>
; char aPassword[]
aPassword	db 'Password:',0        ; DATA XREF: correct_password+5Fo
; char aGetpassCannotO[]
aGetpassCannotO	db 'getpass: cannot open /dev/tty',0 ; DATA XREF: correct_password+84o
; char name[]
name		db 'TERM',0             ; DATA XREF: modify_environment+18o
					; modify_environment+79o
; char aHome[]
aHome		db 'HOME',0             ; DATA XREF: modify_environment+90o
					; modify_environment+11Ao
; char aShell[]
aShell		db 'SHELL',0            ; DATA XREF: modify_environment+A3o
					; modify_environment+12Do ...
; char aUser[]
aUser		db 'USER',0             ; DATA XREF: modify_environment+B9o
					; modify_environment+14Do
; char aLogname[]
aLogname	db 'LOGNAME',0          ; DATA XREF: modify_environment+CFo
					; modify_environment+163o
; char val[]
val		db '/usr/bin:/bin',0    ; DATA XREF: modify_environment+E6o
aUsrUcbBinUsrBi	db '/usr/ucb:/bin:/usr/bin:/etc',0
					; DATA XREF: modify_environment:loc_80003A2o
; char aPath[]
aPath		db 'PATH',0             ; DATA XREF: modify_environment+F6o
; char aCannotSetGroup[]
aCannotSetGroup	db 'cannot set groups',0 ; DATA XREF: change_identity+32o
; char aCannotSetGro_0[]
aCannotSetGro_0	db 'cannot set group id',0 ; DATA XREF: change_identity+75o
; char aCannotSetUserI[]
aCannotSetUserI	db 'cannot set user id',0 ; DATA XREF: change_identity+B3o
asc_8000FAD	db '-f',0               ; DATA XREF: run_shell+E4o
aC		db '-c',0               ; DATA XREF: run_shell+105o
; char format[]
format		db '%s',0               ; DATA XREF: run_shell+19Eo
		align 4
; char aTrySHelpForMor[]
aTrySHelpForMor	db 'Try `%s --help',27h,' for more information.',0Ah,0
					; DATA XREF: usage+16o
		align 10h
; char aUsageSOption__[]
aUsageSOption__	db 'Usage: %s [OPTION]... [-] [USER [ARG]...]',0Ah,0 ; DATA XREF: usage+46o
		align 4
; char aChangeTheEffec[]
aChangeTheEffec	db 'Change the effective user id and group id to that of USER.',0Ah
					; DATA XREF: usage+69o
		db 0Ah
		db '  -, -l, --login               make the shell a login shell',0Ah
		db '  -c, --command=COMMAND        pass a single COMMAND to the shell'
		db ' with -c',0Ah
		db '  -f, --fast                   pass -f to the shell (for csh or t'
		db 'csh)',0Ah
		db '  -m, --preserve-environment   do not reset environment variables'
		db 0Ah
		db '  -p                           same as -m',0Ah
		db '  -s, --shell=SHELL            run SHELL if /etc/shells allows it'
		db 0Ah,0
		align 4
; char aHelpDisplayThi[]
aHelpDisplayThi	db '      --help     display this help and exit',0Ah,0
					; DATA XREF: usage+8Co
		align 4
; char aVersionOutputV[]
aVersionOutputV	db '      --version  output version information and exit',0Ah,0
					; DATA XREF: usage+AFo
		align 4
; char aAMereImpliesL_[]
aAMereImpliesL_	db 0Ah			; DATA XREF: usage+D2o
		db 'A mere - implies -l.   If USER not given, assume root.',0Ah,0
aRoot		db 'root',0             ; DATA XREF: main+27o
; char locale
locale		db 0			; DATA XREF: main+50o
; char dirname[]
dirname		db '/usr/local/share/locale',0 ; DATA XREF: main+62o
aDavidMackenzie	db 'David MacKenzie',0  ; DATA XREF: main+146o
aSu		db 'su',0               ; DATA XREF: main+151o
; char shortopts[]
shortopts	db 'c:flmps:',0         ; DATA XREF: main+17Do
; char asc_800129F[]
asc_800129F	db '-',0                ; DATA XREF: main+1BBo
; char aUserSDoesNotEx[]
aUserSDoesNotEx	db 'user %s does not exist',0 ; DATA XREF: main+259o
aBinSh		db '/bin/sh',0          ; DATA XREF: main:loc_8000B20o
; char aIncorrectPassw[]
aIncorrectPassw	db 'incorrect password',0 ; DATA XREF: main+349o
; char aUsingRestricte[]
aUsingRestricte	db 'using restricted shell %s',0 ; DATA XREF: main+3BBo
		align 10h
; char aWarningCannotC[]
aWarningCannotC	db 'warning: cannot change directory to %s',0 ; DATA XREF: main+446o
_rodata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_eh_frame	segment	dword public 'CONST' use32
		assume cs:_eh_frame
		;org 8001318h
		dd 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 2	dup(1Ch)
		dd offset loc_8000CC5-8001FFDh
		dd 14h,	80E4100h, 0D420285h, 0CC55005h,	404h, 20h, 3Ch
		dd offset loc_8000CC5-8002009h
		dd 11Ch, 80E4100h, 0D420285h, 3834405h,	0C5011403h, 4040CC3h
		dd 1Ch,	60h
		dd offset loc_8000CC5-8001F11h
		dd 92h,	80E4100h, 0D420285h, 0C58E0205h, 4040Ch, 1Ch, 80h
		dd offset loc_8000CC5-8001E9Fh
		dd 0F3h, 80E4100h, 0D420285h, 0C5EF0205h, 4040Ch, 1Ch
		dd 0A0h
		dd offset loc_8000CC5-8001DCCh
		dd 173h, 80E4100h, 0D420285h, 16F0305h,	4040CC5h, 20h
		dd 0C0h
		dd offset loc_8000CC5-8001C79h
		dd 0DEh, 80E4100h, 0D420285h, 3834405h,	0C3C5D602h, 4040Ch
		dd 18h,	0E4h
		dd offset loc_8000CC5-8001BBFh
		dd 1B9h, 80E4100h, 0D420285h, 5, 1Ch, 100h
		dd offset loc_8000CC5-8001A22h
		dd 52h,	80E4100h, 0D420285h, 0C54E0205h, 4040Ch, 18h, 120h
		dd offset loc_8000CC5-80019F0h
		dd 0FCh, 80E4100h, 0D420285h, 3834405h,	2Ch, 13Ch
		dd offset loc_8000CC5-8001910h
		dd 4BDh, 10C4400h, 5104700h, 46007502h,	7075030Fh, 2071006h
		dd 6107C75h, 10787502h,	74750203h
_eh_frame	ends

; ===========================================================================

; Segment type:	Externs
; extern
		extrn exit_failure:dword ; DATA	XREF: initialize_exit_failure+Cw
		extrn program_name:dword ; DATA	XREF: emit_ancillary_info+7r
					; emit_ancillary_info+B6r ...
		extrn last_component:near ; CODE XREF: emit_ancillary_info+10p
					; emit_ancillary_info+BFp ...
; char *gettext(const char *msgid)
		extrn gettext:near	; CODE XREF: emit_ancillary_info+22p
					; emit_ancillary_info+44p ...
; int printf(const char	*format, ...)
		extrn printf:near	; CODE XREF: emit_ancillary_info+34p
					; emit_ancillary_info+5Ap ...
; struct _IO_FILE *stdout
		extrn stdout:dword	; DATA XREF: emit_ancillary_info+62r
					; usage+60r ...
		extrn fputs_unlocked:near ; CODE XREF: emit_ancillary_info+7Dp
					; usage+7Bp ...
; char *setlocale(int category,	const char *locale)
		extrn setlocale:near	; CODE XREF: emit_ancillary_info+8Cp
					; main+57p
; int strncmp(const char *s1, const char *s2, size_t n)
		extrn strncmp:near	; CODE XREF: emit_ancillary_info+AAp
; size_t strlen(const char *s)
		extrn strlen:near	; CODE XREF: xsetenv+Cp xsetenv+1Dp ...
; void *xmalloc(size_t)
		extrn xmalloc:near	; CODE XREF: xsetenv+37p
					; modify_environment+55p ...
; char *strcpy(char *dest, const char *src)
		extrn strcpy:near	; CODE XREF: xsetenv+4Bp xsetenv+70p ...
; int putenv(char *string)
		extrn putenv:near	; CODE XREF: xsetenv+7Ep
		extrn xalloc_die:near	; CODE XREF: xsetenv+8Ap
; struct spwd *getspnam(const char *name)
		extrn getspnam:near	; CODE XREF: correct_password+Fp
; void endspent(void)
		extrn endspent:near	; CODE XREF: correct_password+1Ap
; __uid_t getuid(void)
		extrn getuid:near	; CODE XREF: correct_password:loc_80001FBp
					; main+393p
		extrn gnu_getpass:near	; CODE XREF: correct_password+70p
; void error(int status, int errnum, const char	*format, ...)
		extrn error:near	; CODE XREF: correct_password+99p
					; change_identity+4Fp ...
; char *crypt(const char *key, const char *salt)
		extrn crypt:near	; CODE XREF: correct_password+B1p
; void *memset(void *s,	int c, size_t n)
		extrn memset:near	; CODE XREF: correct_password+D3p
; int strcmp(const char	*s1, const char	*s2)
		extrn strcmp:near	; CODE XREF: correct_password+E4p
					; restricted_shell+20p	...
; char *getenv(const char *name)
		extrn getenv:near	; CODE XREF: modify_environment+1Dp
					; main+382p
; char *xstrdup(const char *)
		extrn xstrdup:near	; CODE XREF: modify_environment+34p
					; main+2B1p ...
		extrn environ:dword	; DATA XREF: modify_environment+5Dw
					; modify_environment+62r
; int *_errno_location(void)
		extrn __errno_location:near ; CODE XREF: change_identity+7p
					; change_identity+41p ...
; int initgroups(const char *, __gid_t group)
		extrn initgroups:near	; CODE XREF: change_identity+22p
; void endgrent(void)
		extrn endgrent:near	; CODE XREF: change_identity:loc_800047Fp
; int setgid(__gid_t gid)
		extrn setgid:near	; CODE XREF: change_identity+66p
; int setuid(__uid_t uid)
		extrn setuid:near	; CODE XREF: change_identity+A4p
		extrn xnmalloc:near	; CODE XREF: run_shell+3Cp
; void *memcpy(void *dest, const void *src, size_t n)
		extrn memcpy:near	; CODE XREF: run_shell+146p
; int execv(const char *path, char *const *argv)
		extrn execv:near	; CODE XREF: run_shell+171p
; void exit(int	status)
		extrn exit:near		; CODE XREF: run_shell+1B4p usage+F7p	...
; void setusershell(void)
		extrn setusershell:near	; CODE XREF: restricted_shell+6p
; void endusershell(void)
		extrn endusershell:near	; CODE XREF: restricted_shell+2Cp
					; restricted_shell+46p
; char *getusershell(void)
		extrn getusershell:near	; CODE XREF: restricted_shell:loc_80006F7p
; struct _IO_FILE *stderr
		extrn stderr:dword	; DATA XREF: usage+25r
					; main:loc_8000C76r
; int fprintf(FILE *stream, const char *format,	...)
		extrn fprintf:near	; CODE XREF: usage+30p
		extrn set_program_name:near ; CODE XREF: main+45p
; char *bindtextdomain(const char *domainname, const char *dirname)
		extrn bindtextdomain:near ; CODE XREF: main+6Cp
; char *textdomain(const char *domainname)
		extrn textdomain:near	; CODE XREF: main+7Cp
; void close_stdout(void)
		extrn close_stdout	; DATA XREF: main+94o
; int atexit(void (*func)(void))
		extrn atexit:near	; CODE XREF: main+99p
; char *optarg
		extrn optarg:dword	; DATA XREF: main:loc_800090Ar
					; main:loc_800092Fr
		extrn Version:dword	; DATA XREF: main:loc_8000943r
		extrn version_etc:near	; CODE XREF: main+157p
; int getopt_long(int argc, char *const	*argv, const char *shortopts, const struct option *longopts, int *longind)
		extrn getopt_long:near	; CODE XREF: main+187p
; int optind
		extrn optind:dword	; DATA XREF: main+19Cr	main+1A5r ...
; struct passwd	*getpwnam(const	char *name)
		extrn getpwnam:near	; CODE XREF: main+20Fp
; void endpwent(void)
		extrn endpwent:near	; CODE XREF: main+32Cp
; int chdir(const char *path)
		extrn chdir:near	; CODE XREF: main+431p
; int ferror_unlocked(FILE *stream)
		extrn ferror_unlocked:near ; CODE XREF:	main+472p


		end
