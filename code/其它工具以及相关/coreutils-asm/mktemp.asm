;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B611-7234-BB			    |
; |		Doskey Lee, Kingsoft Internet Security Software		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	D4D81579364CB4E60DDF3E2E6A0EE57F
; Input	CRC32 :	1DCF9965

; File Name   :	D:\coreutils-o\mktemp.o
; Format      :	ELF for	Intel 386 (Relocatable)
;
; Source File :	'mktemp.c'

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	byte public 'CODE' use32
		assume cs:_text
		;org 8000000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void emit_ancillary_info()
emit_ancillary_info proc near		; CODE XREF: usage+18Ep

lc_messages	= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset msgid	; "\nReport %s bugs to %s\n"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset aBugCoreutils@g ; "bug-coreutils@gnu.org"
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	offset aSHomePageHttpW ; "%s home page:	<http://www.gnu.org/softw"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset domainname ; "coreutils"
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aGeneralHelpUsi ; "General help using GNU software: <http:"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		sub	esp, 8
		push	0		; locale
		push	5		; category
		call	setlocale
		add	esp, 10h
		mov	[ebp+lc_messages], eax
		cmp	[ebp+lc_messages], 0
		jz	short loc_80000E6
		sub	esp, 4
		push	3		; n
		push	offset s2	; "en_"
		push	[ebp+lc_messages] ; s1
		call	strncmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_80000E6
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aReportSTransla ; "Report %s translation	bugs to	<http://t"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h

loc_80000E6:				; CODE XREF: emit_ancillary_info+9Bj
					; emit_ancillary_info+B4j
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aForCompleteDoc ; "For complete documentation, run: info	c"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		nop
		mov	ebx, [ebp+var_4]
		leave
		retn
emit_ancillary_info endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; void __cdecl usage(int status)
		public usage
usage		proc near		; CODE XREF: main+153p	main+195p ...

status		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 4
		cmp	[ebp+status], 0
		jz	short loc_8000159
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, ds:stderr
		sub	esp, 4
		push	ebx
		push	edx		; format
		push	eax		; stream
		call	fprintf
		add	esp, 10h
		jmp	loc_80002AF
; ---------------------------------------------------------------------------

loc_8000159:				; CODE XREF: usage+Bj
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aUsageSOption__ ; "Usage: %s [OPTION]...	[TEMPLATE]\n"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aCreateATempora ; "Create a temporary file or directory,	s"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	eax, ds:stdout
		sub	esp, 8
		push	eax		; stream
		push	0Ah		; c
		call	fputc_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aDDirectoryCrea ; "  -d,	--directory	create a director"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aSuffixSuffAppe ; "	--suffix=SUFF	append SUFF to TE"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aTmpdirDirInter ; "	--tmpdir[=DIR]	interpret TEMPLAT"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	eax, ds:stdout
		sub	esp, 8
		push	eax		; stream
		push	0Ah		; c
		call	fputc_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aPDirUseDirAsAP ; "  -p DIR		use DIR	as a pref"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	eax, ds:stdout
		sub	esp, 8
		push	eax		; stream
		push	0Ah		; c
		call	fputc_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aHelpDisplayThi ; "	--help	   display this	help and "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aVersionOutputV ; "	--version  output version informa"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		call	emit_ancillary_info

loc_80002AF:				; CODE XREF: usage+38j
		sub	esp, 0Ch
		push	[ebp+status]	; status
		call	exit
usage		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; size_t __cdecl count_consecutive_X_s(const char *s, size_t len)
count_consecutive_X_s proc near		; CODE XREF: main+3F5p

n		= dword	ptr -4
s		= dword	ptr  8
len		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		mov	[ebp+n], 0
		jmp	short loc_80002D1
; ---------------------------------------------------------------------------

loc_80002C9:				; CODE XREF: count_consecutive_X_s+2Dj
		add	[ebp+n], 1
		sub	[ebp+len], 1

loc_80002D1:				; CODE XREF: count_consecutive_X_s+Dj
		cmp	[ebp+len], 0
		jz	short loc_80002E9
		mov	eax, [ebp+len]
		lea	edx, [eax-1]
		mov	eax, [ebp+s]
		add	eax, edx
		movzx	eax, byte ptr [eax]
		cmp	al, 58h
		jz	short loc_80002C9

loc_80002E9:				; CODE XREF: count_consecutive_X_s+1Bj
		mov	eax, [ebp+n]
		leave
		retn
count_consecutive_X_s endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; int __cdecl mkstemp_len(char *tmpl, size_t suff_len, size_t x_len, _Bool dry_run)
mkstemp_len	proc near		; CODE XREF: main+5FEp

dry_run		= byte ptr -0Ch
tmpl		= dword	ptr  8
suff_len	= dword	ptr  0Ch
x_len		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_C]
		mov	[ebp+dry_run], al
		cmp	[ebp+dry_run], 0
		jz	short loc_8000307
		mov	edx, 2
		jmp	short loc_800030C
; ---------------------------------------------------------------------------

loc_8000307:				; CODE XREF: mkstemp_len+10j
		mov	edx, 0

loc_800030C:				; CODE XREF: mkstemp_len+17j
		mov	eax, [ebp+suff_len]
		sub	esp, 0Ch
		push	[ebp+x_len]
		push	edx
		push	0
		push	eax
		push	[ebp+tmpl]
		call	gen_tempname_len
		add	esp, 20h
		leave
		retn
mkstemp_len	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; int __cdecl mkdtemp_len(char *tmpl, size_t suff_len, size_t x_len, _Bool dry_run)
mkdtemp_len	proc near		; CODE XREF: main+59Cp

dry_run		= byte ptr -0Ch
tmpl		= dword	ptr  8
suff_len	= dword	ptr  0Ch
x_len		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_C]
		mov	[ebp+dry_run], al
		cmp	[ebp+dry_run], 0
		jz	short loc_800033F
		mov	edx, 2
		jmp	short loc_8000344
; ---------------------------------------------------------------------------

loc_800033F:				; CODE XREF: mkdtemp_len+10j
		mov	edx, 1

loc_8000344:				; CODE XREF: mkdtemp_len+17j
		mov	eax, [ebp+suff_len]
		sub	esp, 0Ch
		push	[ebp+x_len]
		push	edx
		push	0
		push	eax
		push	[ebp+tmpl]
		call	gen_tempname_len
		add	esp, 20h
		leave
		retn
mkdtemp_len	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void maybe_close_stdout()
maybe_close_stdout proc	near		; DATA XREF: main+89o
		push	ebp
		mov	ebp, esp
		sub	esp, 8
		movzx	eax, ds:stdout_closed
		xor	eax, 1
		test	al, al
		jz	short loc_8000379
		call	close_stdout
		jmp	short loc_8000398
; ---------------------------------------------------------------------------

loc_8000379:				; CODE XREF: maybe_close_stdout+12j
		mov	eax, ds:stderr
		sub	esp, 0Ch
		push	eax
		call	close_stream
		add	esp, 10h
		test	eax, eax
		jz	short loc_8000398
		sub	esp, 0Ch
		push	1		; status
		call	_exit
; ---------------------------------------------------------------------------

loc_8000398:				; CODE XREF: maybe_close_stdout+19j
					; maybe_close_stdout+2Ej
		nop
		leave
		retn
maybe_close_stdout endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public main
main		proc near

suppress_stderr	= byte ptr -5Dh
use_dest_dir	= byte ptr -5Ch
deprecated_t_option= byte ptr -5Bh
create_directory= byte ptr -5Ah
dry_run		= byte ptr -59h
dest_dir	= dword	ptr -58h
dest_dir_arg	= dword	ptr -54h
template	= dword	ptr -50h
suffix		= dword	ptr -4Ch
status		= dword	ptr -48h
suffix_len	= dword	ptr -44h
c		= dword	ptr -40h
n_args		= dword	ptr -3Ch
len		= dword	ptr -38h
dest_name	= dword	ptr -34h
x_count		= dword	ptr -30h
env		= dword	ptr -2Ch
env_0		= dword	ptr -28h
err		= dword	ptr -24h
fd		= dword	ptr -20h
saved_errno	= dword	ptr -1Ch
argc		= dword	ptr  0Ch
argv		= dword	ptr  10h
envp		= dword	ptr  14h

		lea	ecx, [esp+4]
		and	esp, 0FFFFFFF0h
		push	dword ptr [ecx-4]
		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		push	ecx
		sub	esp, 5Ch
		mov	ebx, ecx
		mov	[ebp+dest_dir_arg], 0
		mov	[ebp+suppress_stderr], 0
		mov	[ebp+suffix], 0
		mov	[ebp+use_dest_dir], 0
		mov	[ebp+deprecated_t_option], 0
		mov	[ebp+create_directory],	0
		mov	[ebp+dry_run], 0
		mov	[ebp+status], 0
		mov	eax, [ebx+4]
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	set_program_name
		add	esp, 10h
		sub	esp, 8
		push	offset locale	; locale
		push	6		; category
		call	setlocale
		add	esp, 10h
		sub	esp, 8
		push	offset dirname	; "/usr/local/share/locale"
		push	offset domainname ; "coreutils"
		call	bindtextdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset domainname ; "coreutils"
		call	textdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset maybe_close_stdout ; func
		call	atexit
		add	esp, 10h
		jmp	loc_8000535
; ---------------------------------------------------------------------------

loc_8000436:				; CODE XREF: main+1BDj
		mov	eax, [ebp+c]
		cmp	eax, 70h
		jz	short loc_80004AD
		cmp	eax, 70h
		jg	short loc_8000478
		cmp	eax, 0FFFFFF7Eh
		jz	loc_80004E9
		cmp	eax, 0FFFFFF7Eh
		jg	short loc_8000465
		cmp	eax, 0FFFFFF7Dh
		jz	loc_80004F3
		jmp	loc_800052B
; ---------------------------------------------------------------------------

loc_8000465:				; CODE XREF: main+B8j
		cmp	eax, 56h
		jz	loc_80004F3
		cmp	eax, 64h
		jz	short loc_80004A4
		jmp	loc_800052B
; ---------------------------------------------------------------------------

loc_8000478:				; CODE XREF: main+A6j
		cmp	eax, 75h
		jz	short loc_80004CB
		cmp	eax, 75h
		jg	short loc_8000491
		cmp	eax, 71h
		jz	short loc_80004BB
		cmp	eax, 74h
		jz	short loc_80004C1
		jmp	loc_800052B
; ---------------------------------------------------------------------------

loc_8000491:				; CODE XREF: main+E5j
		cmp	eax, 80h
		jz	short loc_80004DF
		cmp	eax, 81h
		jz	short loc_80004D1
		jmp	loc_800052B
; ---------------------------------------------------------------------------

loc_80004A4:				; CODE XREF: main+D6j
		mov	[ebp+create_directory],	1
		jmp	loc_8000535
; ---------------------------------------------------------------------------

loc_80004AD:				; CODE XREF: main+A1j
		mov	eax, ds:optarg
		mov	[ebp+dest_dir_arg], eax
		mov	[ebp+use_dest_dir], 1
		jmp	short loc_8000535
; ---------------------------------------------------------------------------

loc_80004BB:				; CODE XREF: main+EAj
		mov	[ebp+suppress_stderr], 1
		jmp	short loc_8000535
; ---------------------------------------------------------------------------

loc_80004C1:				; CODE XREF: main+EFj
		mov	[ebp+use_dest_dir], 1
		mov	[ebp+deprecated_t_option], 1
		jmp	short loc_8000535
; ---------------------------------------------------------------------------

loc_80004CB:				; CODE XREF: main+E0j
		mov	[ebp+dry_run], 1
		jmp	short loc_8000535
; ---------------------------------------------------------------------------

loc_80004D1:				; CODE XREF: main+102j
		mov	[ebp+use_dest_dir], 1
		mov	eax, ds:optarg
		mov	[ebp+dest_dir_arg], eax
		jmp	short loc_8000535
; ---------------------------------------------------------------------------

loc_80004DF:				; CODE XREF: main+FBj
		mov	eax, ds:optarg
		mov	[ebp+suffix], eax
		jmp	short loc_8000535
; ---------------------------------------------------------------------------

loc_80004E9:				; CODE XREF: main+ADj
		sub	esp, 0Ch
		push	0		; status
		call	usage
; ---------------------------------------------------------------------------

loc_80004F3:				; CODE XREF: main+BFj main+CDj
		mov	edx, ds:Version
		mov	eax, ds:stdout
		sub	esp, 4
		push	0
		push	offset aEricBlake ; "Eric Blake"
		push	offset aJimMeyering ; "Jim Meyering"
		push	edx
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	offset aMktemp	; "mktemp"
		push	eax
		call	version_etc
		add	esp, 20h
		sub	esp, 0Ch
		push	0		; status
		call	exit
; ---------------------------------------------------------------------------

loc_800052B:				; CODE XREF: main+C5j main+D8j ...
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8000535:				; CODE XREF: main+96j main+10Dj ...
		sub	esp, 0Ch
		push	0		; longind
		push	offset longopts	; longopts
		push	offset shortopts ; "dp:qtuV"
		push	dword ptr [ebx+4] ; argv
		push	dword ptr [ebx]	; argc
		call	getopt_long
		add	esp, 20h
		mov	[ebp+c], eax
		cmp	[ebp+c], 0FFFFFFFFh
		jnz	loc_8000436
		cmp	[ebp+suppress_stderr], 0
		jz	short loc_80005AB
		mov	eax, ds:stderr
		sub	esp, 4
		push	eax
		push	offset aWb	; "wb"
		push	offset aDevNull	; "/dev/null"
		call	freopen_safer
		add	esp, 10h
		test	eax, eax
		jnz	short loc_80005AB
		sub	esp, 0Ch
		push	offset aFailedToRedire ; "failed to redirect stderr to /dev/null"
		call	gettext
		add	esp, 10h
		mov	esi, eax
		call	__errno_location
		mov	eax, [eax]
		sub	esp, 4
		push	esi		; format
		push	eax		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_80005AB:				; CODE XREF: main+1C7j	main+1E6j
		mov	eax, ds:optind
		mov	edx, [ebx]
		sub	edx, eax
		mov	eax, edx
		mov	[ebp+n_args], eax
		cmp	[ebp+n_args], 1
		jbe	short loc_80005E9
		sub	esp, 0Ch
		push	offset aTooManyTemplat ; "too many templates"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_80005E9:				; CODE XREF: main+222j
		cmp	[ebp+n_args], 0
		jnz	short loc_80005FD
		mov	[ebp+use_dest_dir], 1
		mov	eax, default_template
		mov	[ebp+template],	eax
		jmp	short loc_8000613
; ---------------------------------------------------------------------------

loc_80005FD:				; CODE XREF: main+252j
		mov	eax, ds:optind
		lea	edx, ds:0[eax*4]
		mov	eax, [ebx+4]
		add	eax, edx
		mov	eax, [eax]
		mov	[ebp+template],	eax

loc_8000613:				; CODE XREF: main+260j
		cmp	[ebp+suffix], 0
		jz	loc_80006E4
		sub	esp, 0Ch
		push	[ebp+template]	; s
		call	strlen
		add	esp, 10h
		mov	[ebp+len], eax
		cmp	[ebp+len], 0
		jz	short loc_8000646
		mov	eax, [ebp+len]
		lea	edx, [eax-1]
		mov	eax, [ebp+template]
		add	eax, edx
		movzx	eax, byte ptr [eax]
		cmp	al, 58h
		jz	short loc_8000674

loc_8000646:				; CODE XREF: main+297j
		sub	esp, 0Ch
		push	[ebp+template]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aWithSuffixTemp ; "with --suffix, template %s must end in "...
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_8000674:				; CODE XREF: main+2A9j
		sub	esp, 0Ch
		push	[ebp+suffix]	; s
		call	strlen
		add	esp, 10h
		mov	[ebp+suffix_len], eax
		mov	edx, [ebp+len]
		mov	eax, [ebp+suffix_len]
		add	eax, edx
		add	eax, 1
		sub	esp, 0Ch
		push	eax
		call	xcharalloc
		add	esp, 10h
		mov	[ebp+dest_name], eax
		sub	esp, 4
		push	[ebp+len]	; n
		push	[ebp+template]	; src
		push	[ebp+dest_name]	; dest
		call	memcpy
		add	esp, 10h
		mov	eax, [ebp+suffix_len]
		lea	edx, [eax+1]
		mov	ecx, [ebp+dest_name]
		mov	eax, [ebp+len]
		add	eax, ecx
		sub	esp, 4
		push	edx		; n
		push	[ebp+suffix]	; src
		push	eax		; dest
		call	memcpy
		add	esp, 10h
		mov	eax, [ebp+dest_name]
		mov	[ebp+template],	eax
		mov	edx, [ebp+dest_name]
		mov	eax, [ebp+len]
		add	eax, edx
		mov	[ebp+suffix], eax
		jmp	short loc_8000738
; ---------------------------------------------------------------------------

loc_80006E4:				; CODE XREF: main+27Cj
		sub	esp, 0Ch
		push	[ebp+template]	; char *
		call	xstrdup
		add	esp, 10h
		mov	[ebp+template],	eax
		sub	esp, 8
		push	58h		; c
		push	[ebp+template]	; s
		call	strrchr
		add	esp, 10h
		mov	[ebp+suffix], eax
		cmp	[ebp+suffix], 0
		jnz	short loc_8000723
		sub	esp, 8
		push	0		; c
		push	[ebp+template]	; s
		call	strchr
		add	esp, 10h
		mov	[ebp+suffix], eax
		jmp	short loc_8000727
; ---------------------------------------------------------------------------

loc_8000723:				; CODE XREF: main+371j
		add	[ebp+suffix], 1

loc_8000727:				; CODE XREF: main+386j
		sub	esp, 0Ch
		push	[ebp+suffix]	; s
		call	strlen
		add	esp, 10h
		mov	[ebp+suffix_len], eax

loc_8000738:				; CODE XREF: main+347j
		cmp	[ebp+suffix_len], 0
		jz	short loc_800077F
		sub	esp, 0Ch
		push	[ebp+suffix]
		call	last_component
		add	esp, 10h
		cmp	eax, [ebp+suffix]
		jz	short loc_800077F
		sub	esp, 0Ch
		push	[ebp+suffix]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aInvalidSuffixS ; "invalid suffix %s, contains directory	s"...
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_800077F:				; CODE XREF: main+3A1j	main+3B4j
		mov	edx, [ebp+suffix]
		mov	eax, [ebp+template]
		sub	edx, eax
		mov	eax, edx
		sub	esp, 8
		push	eax		; len
		push	[ebp+template]	; s
		call	count_consecutive_X_s
		add	esp, 10h
		mov	[ebp+x_count], eax
		cmp	[ebp+x_count], 2
		ja	short loc_80007CF
		sub	esp, 0Ch
		push	[ebp+template]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aTooFewXSInTemp ; "too few X's in template %s"
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_80007CF:				; CODE XREF: main+404j
		cmp	[ebp+use_dest_dir], 0
		jz	loc_8000912
		cmp	[ebp+deprecated_t_option], 0
		jz	loc_8000868
		sub	esp, 0Ch
		push	offset name	; "TMPDIR"
		call	getenv
		add	esp, 10h
		mov	[ebp+env], eax
		cmp	[ebp+env], 0
		jz	short loc_8000806
		mov	eax, [ebp+env]
		movzx	eax, byte ptr [eax]
		test	al, al
		jnz	short loc_8000818

loc_8000806:				; CODE XREF: main+45Fj
		cmp	[ebp+dest_dir_arg], 0
		jz	short loc_8000811
		mov	eax, [ebp+dest_dir_arg]
		jmp	short loc_800081B
; ---------------------------------------------------------------------------

loc_8000811:				; CODE XREF: main+46Fj
		mov	eax, offset aTmp ; "/tmp"
		jmp	short loc_800081B
; ---------------------------------------------------------------------------

loc_8000818:				; CODE XREF: main+469j
		mov	eax, [ebp+env]

loc_800081B:				; CODE XREF: main+474j	main+47Bj
		mov	[ebp+dest_dir],	eax
		sub	esp, 0Ch
		push	[ebp+template]
		call	last_component
		add	esp, 10h
		cmp	eax, [ebp+template]
		jz	loc_80008E8
		sub	esp, 0Ch
		push	[ebp+template]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aInvalidTemplat ; "invalid template, %s,	contains director"...
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h
		jmp	loc_80008E8
; ---------------------------------------------------------------------------

loc_8000868:				; CODE XREF: main+442j
		cmp	[ebp+dest_dir_arg], 0
		jz	short loc_8000880
		mov	eax, [ebp+dest_dir_arg]
		movzx	eax, byte ptr [eax]
		test	al, al
		jz	short loc_8000880
		mov	eax, [ebp+dest_dir_arg]
		mov	[ebp+dest_dir],	eax
		jmp	short loc_80008B0
; ---------------------------------------------------------------------------

loc_8000880:				; CODE XREF: main+4D1j	main+4DBj
		sub	esp, 0Ch
		push	offset name	; "TMPDIR"
		call	getenv
		add	esp, 10h
		mov	[ebp+env_0], eax
		cmp	[ebp+env_0], 0
		jz	short loc_80008A8
		mov	eax, [ebp+env_0]
		movzx	eax, byte ptr [eax]
		test	al, al
		jz	short loc_80008A8
		mov	eax, [ebp+env_0]
		jmp	short loc_80008AD
; ---------------------------------------------------------------------------

loc_80008A8:				; CODE XREF: main+4FCj	main+506j
		mov	eax, offset aTmp ; "/tmp"

loc_80008AD:				; CODE XREF: main+50Bj
		mov	[ebp+dest_dir],	eax

loc_80008B0:				; CODE XREF: main+4E3j
		mov	eax, [ebp+template]
		movzx	eax, byte ptr [eax]
		cmp	al, 2Fh
		jnz	short loc_80008E8
		sub	esp, 0Ch
		push	[ebp+template]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aInvalidTempl_0 ; "invalid template, %s;	with --tmpdir, it"...
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_80008E8:				; CODE XREF: main+494j	main+4C8j ...
		sub	esp, 4
		push	0
		push	[ebp+template]
		push	[ebp+dest_dir]
		call	file_name_concat
		add	esp, 10h
		mov	[ebp+dest_name], eax
		sub	esp, 0Ch
		push	[ebp+template]	; ptr
		call	free
		add	esp, 10h
		mov	eax, [ebp+dest_name]
		mov	[ebp+template],	eax

loc_8000912:				; CODE XREF: main+438j
		sub	esp, 0Ch
		push	[ebp+template]	; char *
		call	xstrdup
		add	esp, 10h
		mov	[ebp+dest_name], eax
		cmp	[ebp+create_directory],	0
		jz	short loc_800098B
		movzx	eax, [ebp+dry_run]
		push	eax		; dry_run
		push	[ebp+x_count]	; x_len
		push	[ebp+suffix_len] ; suff_len
		push	[ebp+dest_name]	; tmpl
		call	mkdtemp_len
		add	esp, 10h
		mov	[ebp+err], eax
		cmp	[ebp+err], 0
		jz	loc_8000A04
		sub	esp, 0Ch
		push	[ebp+template]
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aFailedToCreate ; "failed to create directory via template"...
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		push	esi
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	[ebp+status], 1
		jmp	short loc_8000A04
; ---------------------------------------------------------------------------

loc_800098B:				; CODE XREF: main+58Cj
		movzx	eax, [ebp+dry_run]
		push	eax		; dry_run
		push	[ebp+x_count]	; x_len
		push	[ebp+suffix_len] ; suff_len
		push	[ebp+dest_name]	; tmpl
		call	mkstemp_len
		add	esp, 10h
		mov	[ebp+fd], eax
		cmp	[ebp+fd], 0
		js	short loc_80009C7
		movzx	eax, [ebp+dry_run]
		xor	eax, 1
		test	al, al
		jz	short loc_8000A04
		sub	esp, 0Ch
		push	[ebp+fd]	; fd
		call	close
		add	esp, 10h
		test	eax, eax
		jz	short loc_8000A04

loc_80009C7:				; CODE XREF: main+60Dj
		sub	esp, 0Ch
		push	[ebp+template]
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aFailedToCrea_0 ; "failed to create file	via template %s"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		push	esi
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	[ebp+status], 1

loc_8000A04:				; CODE XREF: main+5ABj	main+5EEj ...
		cmp	[ebp+status], 0
		jnz	short loc_8000A78
		sub	esp, 0Ch
		push	[ebp+dest_name]	; s
		call	puts
		add	esp, 10h
		movzx	eax, [ebp+dry_run]
		xor	eax, 1
		test	al, al
		jz	short loc_8000A78
		mov	ds:stdout_closed, 1
		mov	eax, ds:stdout
		sub	esp, 0Ch
		push	eax
		call	close_stream
		add	esp, 10h
		test	eax, eax
		jz	short loc_8000A78
		call	__errno_location
		mov	eax, [eax]
		mov	[ebp+saved_errno], eax
		sub	esp, 0Ch
		push	[ebp+dest_name]	; filename
		call	remove
		add	esp, 10h
		sub	esp, 0Ch
		push	offset aWriteError ; "write error"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	[ebp+saved_errno] ; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_8000A78:				; CODE XREF: main+66Dj	main+686j ...
		sub	esp, 0Ch
		push	[ebp+status]	; status

loc_8000A7E:				; DATA XREF: .eh_frame:0800143Co
					; .eh_frame:08001460o ...
		call	exit
main		endp

_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 8000A84h
; const	char *default_template
default_template dd offset aTmp_xxxxxxxxxx ; DATA XREF:	main+258r
_data		ends			; "tmp.XXXXXXXXXX"

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	byte public 'BSS' use32
		assume cs:_bss
		;org 8000A88h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
; _Bool	stdout_closed
stdout_closed	db ?			; DATA XREF: maybe_close_stdout+6r
					; main+688w
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment '32byte' can not be represented in assembly
_rodata		segment	para public 'CONST' use32
		assume cs:_rodata
		;org 8000AA0h
; char msgid[]
msgid		db 0Ah			; DATA XREF: emit_ancillary_info+1Do
		db 'Report %s bugs to %s',0Ah,0
aBugCoreutils@g	db 'bug-coreutils@gnu.org',0 ; DATA XREF: emit_ancillary_info+2Do
		align 10h
; char aSHomePageHttpW[]
aSHomePageHttpW	db '%s home page: <http://www.gnu.org/software/%s/>',0Ah,0
					; DATA XREF: emit_ancillary_info+3Fo
; char domainname[]
domainname	db 'coreutils',0        ; DATA XREF: emit_ancillary_info+4Fo
					; main+69o ...
aGnuCoreutils	db 'GNU coreutils',0    ; DATA XREF: emit_ancillary_info+54o
					; main+173o
		align 4
; char aGeneralHelpUsi[]
aGeneralHelpUsi	db 'General help using GNU software: <http://www.gnu.org/gethelp/>',0Ah,0
					; DATA XREF: emit_ancillary_info+6Bo
; char s2[]
s2		db 'en_',0              ; DATA XREF: emit_ancillary_info+A2o
; char aReportSTransla[]
aReportSTransla	db 'Report %s translation bugs to <http://translationproject.org/team'
					; DATA XREF: emit_ancillary_info+CCo
		db '/>',0Ah,0
		align 4
; char aForCompleteDoc[]
aForCompleteDoc	db 'For complete documentation, run: info coreutils ',27h,'%s invocation'
					; DATA XREF: emit_ancillary_info+FCo
		db 27h,0Ah,0
aTmp_xxxxxxxxxx	db 'tmp.XXXXXXXXXX',0   ; DATA XREF: .data:default_templateo
aDirectory	db 'directory',0        ; DATA XREF: .rodata:longoptso
aQuiet		db 'quiet',0            ; DATA XREF: .rodata:longoptso
aDryRun		db 'dry-run',0          ; DATA XREF: .rodata:longoptso
aSuffix		db 'suffix',0           ; DATA XREF: .rodata:longoptso
aTmpdir_0	db 'tmpdir',0           ; DATA XREF: .rodata:longoptso
aHelp		db 'help',0             ; DATA XREF: .rodata:longoptso
aVersion	db 'version',0          ; DATA XREF: .rodata:longoptso
		align 20h
; const	option longopts[8]
longopts	option <offset aDirectory, 0, 0, 64h> ;	DATA XREF: main+19Fo
		option <offset aQuiet, 0, 0, 71h> ; "directory"
		option <offset aDryRun,	0, 0, 75h>
		option <offset aSuffix,	1, 0, 80h>
		option <offset aTmpdir_0, 2, 0,	81h>
		option <offset aHelp, 0, 0, 0FFFFFF7Eh>
		option <offset aVersion, 0, 0, 0FFFFFF7Dh>
		option	<0>
; char aTrySHelpForMor[]
aTrySHelpForMor	db 'Try `%s --help',27h,' for more information.',0Ah,0
					; DATA XREF: usage+16o
		align 4
; char aUsageSOption__[]
aUsageSOption__	db 'Usage: %s [OPTION]... [TEMPLATE]',0Ah,0 ; DATA XREF: usage+46o
		align 4
; char aCreateATempora[]
aCreateATempora	db 'Create a temporary file or directory, safely, and print its name.'
					; DATA XREF: usage+69o
		db 0Ah
		db 'TEMPLATE must contain at least 3 consecutive `X',27h,'s in last comp'
		db 'onent.',0Ah
		db 'If TEMPLATE is not specified, use tmp.XXXXXXXXXX, and --tmpdir is'
		db ' implied.',0Ah,0
		align 10h
; char aDDirectoryCrea[]
aDDirectoryCrea	db '  -d, --directory     create a directory, not a file',0Ah
					; DATA XREF: usage+9Fo
		db '  -u, --dry-run       do not create anything; merely print a name'
		db ' (unsafe)',0Ah
		db '  -q, --quiet         suppress diagnostics about file/dir-creatio'
		db 'n failure',0Ah,0
; char aSuffixSuffAppe[]
aSuffixSuffAppe	db '      --suffix=SUFF   append SUFF to TEMPLATE.  SUFF must not con'
					; DATA XREF: usage+C2o
		db 'tain slash.',0Ah
		db '                        This option is implied if TEMPLATE does n'
		db 'ot end in X.',0Ah,0
; char aTmpdirDirInter[]
aTmpdirDirInter	db '      --tmpdir[=DIR]  interpret TEMPLATE relative to DIR.  If DIR'
					; DATA XREF: usage+E5o
		db ' is not',0Ah
		db '                        specified, use $TMPDIR if set, else /tmp.'
		db '  With',0Ah
		db '                        this option, TEMPLATE must not be an abso'
		db 'lute name.',0Ah
		db '                        Unlike with -t, TEMPLATE may contain slas'
		db 'hes, but',0Ah
		db '                        mktemp creates only the final component.',0Ah
		db 0
		align 4
; char aPDirUseDirAsAP[]
aPDirUseDirAsAP	db '  -p DIR              use DIR as a prefix; implies -t [deprecated'
					; DATA XREF: usage+11Bo
		db ']',0Ah
		db '  -t                  interpret TEMPLATE as a single file name co'
		db 'mponent,',0Ah
		db '                        relative to a directory: $TMPDIR, if set;'
		db ' else the',0Ah
		db '                        directory specified via -p; else /tmp [de'
		db 'precated]',0Ah,0
; char aHelpDisplayThi[]
aHelpDisplayThi	db '      --help     display this help and exit',0Ah,0
					; DATA XREF: usage+151o
		align 4
; char aVersionOutputV[]
aVersionOutputV	db '      --version  output version information and exit',0Ah,0
					; DATA XREF: usage+174o
; char locale
locale		db 0			; DATA XREF: main+52o
; char dirname[]
dirname		db '/usr/local/share/locale',0 ; DATA XREF: main+64o
aEricBlake	db 'Eric Blake',0       ; DATA XREF: main+168o
aJimMeyering	db 'Jim Meyering',0     ; DATA XREF: main+16Do
aMktemp		db 'mktemp',0           ; DATA XREF: main+178o
; char shortopts[]
shortopts	db 'dp:qtuV',0          ; DATA XREF: main+1A4o
aWb		db 'wb',0               ; DATA XREF: main+1D2o
aDevNull	db '/dev/null',0        ; DATA XREF: main+1D7o
		align 4
; char aFailedToRedire[]
aFailedToRedire	db 'failed to redirect stderr to /dev/null',0 ; DATA XREF: main+1EBo
; char aTooManyTemplat[]
aTooManyTemplat	db 'too many templates',0 ; DATA XREF: main+227o
		align 4
; char aWithSuffixTemp[]
aWithSuffixTemp	db 'with --suffix, template %s must end in X',0 ; DATA XREF: main+2BEo
		align 4
; char aInvalidSuffixS[]
aInvalidSuffixS	db 'invalid suffix %s, contains directory separator',0
					; DATA XREF: main+3C9o
; char aTooFewXSInTemp[]
aTooFewXSInTemp	db 'too few X',27h,'s in template %s',0 ; DATA XREF: main+419o
; char name[]
name		db 'TMPDIR',0           ; DATA XREF: main+44Bo main+4E8o
aTmp		db '/tmp',0             ; DATA XREF: main:loc_8000811o
					; main:loc_80008A8o
		align 4
; char aInvalidTemplat[]
aInvalidTemplat	db 'invalid template, %s, contains directory separator',0
					; DATA XREF: main+4ADo
		align 10h
; char aInvalidTempl_0[]
aInvalidTempl_0	db 'invalid template, %s; with --tmpdir, it may not be absolute',0
					; DATA XREF: main+532o
; char aFailedToCreate[]
aFailedToCreate	db 'failed to create directory via template %s',0 ; DATA XREF: main+5C4o
		align 4
; char aFailedToCrea_0[]
aFailedToCrea_0	db 'failed to create file via template %s',0 ; DATA XREF: main+63Fo
; char aWriteError[]
aWriteError	db 'write error',0      ; DATA XREF: main+6BFo
_rodata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_eh_frame	segment	dword public 'CONST' use32
		assume cs:_eh_frame
		;org 800141Ch
		dd 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 20h, 1Ch
		dd offset loc_8000A7E-8001EBAh
		dd 11Ch, 80E4100h, 0D420285h, 3834405h,	0C5011403h, 4040CC3h
		dd 18h,	40h
		dd offset loc_8000A7E-8001DC2h
		dd 19Eh, 80E4100h, 0D420285h, 3834405h,	1Ch, 5Ch
		dd offset loc_8000A7E-8001C40h
		dd 34h,	80E4100h, 0D420285h, 0CC57005h,	404h, 1Ch, 7Ch
		dd offset loc_8000A7E-8001C2Ch
		dd 38h,	80E4100h, 0D420285h, 0CC57405h,	404h, 1Ch, 9Ch
		dd offset loc_8000A7E-8001C14h
		dd 38h,	80E4100h, 0D420285h, 0CC57405h,	404h, 1Ch, 0BCh
		dd offset loc_8000A7E-8001BFCh
		dd 3Dh,	80E4100h, 0D420285h, 0CC57905h,	404h, 28h, 0DCh
		dd offset loc_8000A7E-8001BDFh
		dd 6E8h, 10C4400h, 5104700h, 45007502h,	7475030Fh, 2061006h
		dd 3107C75h, 787502h
_eh_frame	ends

; ===========================================================================

; Segment type:	Externs
; extern
		extrn program_name:dword ; DATA	XREF: emit_ancillary_info+7r
					; emit_ancillary_info+B6r ...
		extrn last_component:near ; CODE XREF: emit_ancillary_info+10p
					; emit_ancillary_info+BFp ...
; char *gettext(const char *msgid)
		extrn gettext:near	; CODE XREF: emit_ancillary_info+22p
					; emit_ancillary_info+44p ...
; int printf(const char	*format, ...)
		extrn printf:near	; CODE XREF: emit_ancillary_info+34p
					; emit_ancillary_info+5Ap ...
; struct _IO_FILE *stdout
		extrn stdout:dword	; DATA XREF: emit_ancillary_info+62r
					; usage+60r ...
		extrn fputs_unlocked:near ; CODE XREF: emit_ancillary_info+7Dp
					; usage+7Bp ...
; char *setlocale(int category,	const char *locale)
		extrn setlocale:near	; CODE XREF: emit_ancillary_info+8Cp
					; main+59p
; int strncmp(const char *s1, const char *s2, size_t n)
		extrn strncmp:near	; CODE XREF: emit_ancillary_info+AAp
; struct _IO_FILE *stderr
		extrn stderr:dword	; DATA XREF: usage+25r
					; maybe_close_stdout:loc_8000379r ...
; int fprintf(FILE *stream, const char *format,	...)
		extrn fprintf:near	; CODE XREF: usage+30p
; int fputc_unlocked(int c, FILE *stream)
		extrn fputc_unlocked:near ; CODE XREF: usage+8Ep usage+10Ap ...
; void exit(int	status)
		extrn exit:near		; CODE XREF: usage+199p main+18Bp ...
		extrn gen_tempname_len:near ; CODE XREF: mkstemp_len+2Ep
					; mkdtemp_len+2Ep
		extrn close_stdout:near	; CODE XREF: maybe_close_stdout+14p
		extrn close_stream:near	; CODE XREF: maybe_close_stdout+24p
					; main+698p
; void exit(int	status)
		extrn _exit:near	; CODE XREF: maybe_close_stdout+35p
		extrn set_program_name:near ; CODE XREF: main+47p
; char *bindtextdomain(const char *domainname, const char *dirname)
		extrn bindtextdomain:near ; CODE XREF: main+6Ep
; char *textdomain(const char *domainname)
		extrn textdomain:near	; CODE XREF: main+7Ep
; int atexit(void (*func)(void))
		extrn atexit:near	; CODE XREF: main+8Ep
; char *optarg
		extrn optarg:dword	; DATA XREF: main:loc_80004ADr
					; main+13Ar ...
		extrn Version:dword	; DATA XREF: main:loc_80004F3r
		extrn version_etc:near	; CODE XREF: main+17Ep
; int getopt_long(int argc, char *const	*argv, const char *shortopts, const struct option *longopts, int *longind)
		extrn getopt_long:near	; CODE XREF: main+1AEp
		extrn freopen_safer:near ; CODE	XREF: main+1DCp
; int *_errno_location(void)
		extrn __errno_location:near ; CODE XREF: main+1FAp main+5D3p ...
; void error(int status, int errnum, const char	*format, ...)
		extrn error:near	; CODE XREF: main+208p	main+23Cp ...
; int optind
		extrn optind:dword	; DATA XREF: main:loc_80005ABr
					; main:loc_80005FDr
; size_t strlen(const char *s)
		extrn strlen:near	; CODE XREF: main+288p	main+2DFp ...
		extrn quote:near	; CODE XREF: main+2B1p	main+3BCp ...
		extrn xcharalloc:near	; CODE XREF: main+2F9p
; void *memcpy(void *dest, const void *src, size_t n)
		extrn memcpy:near	; CODE XREF: main+310p	main+32Ep
; char *xstrdup(const char *)
		extrn xstrdup:near	; CODE XREF: main+34Fp	main+57Dp
; char *strrchr(const char *s, int c)
		extrn strrchr:near	; CODE XREF: main+362p
; char *strchr(const char *s, int c)
		extrn strchr:near	; CODE XREF: main+37Bp
; char *getenv(const char *name)
		extrn getenv:near	; CODE XREF: main+450p	main+4EDp
		extrn file_name_concat:near ; CODE XREF: main+558p
; void free(void *ptr)
		extrn free:near		; CODE XREF: main+569p
; int close(int	fd)
		extrn close:near	; CODE XREF: main+620p
; int puts(const char *s)
		extrn puts:near		; CODE XREF: main+675p
; int remove(const char	*filename)
		extrn remove:near	; CODE XREF: main+6B4p


		end
