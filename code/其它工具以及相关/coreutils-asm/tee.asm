;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B611-7234-BB			    |
; |		Doskey Lee, Kingsoft Internet Security Software		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	40695FF8FDEAD049D505393352849B13
; Input	CRC32 :	2A2C1D45

; File Name   :	D:\coreutils-o\tee.o
; Format      :	ELF for	Intel 386 (Relocatable)
;
; Source File :	'tee.c'

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	byte public 'CODE' use32
		assume cs:_text
		;org 8000000h
		assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void emit_ancillary_info()
emit_ancillary_info proc near		; CODE XREF: usage+ECp

lc_messages	= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset msgid	; "\nReport %s bugs to %s\n"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset aBugCoreutils@g ; "bug-coreutils@gnu.org"
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	offset aSHomePageHttpW ; "%s home page:	<http://www.gnu.org/softw"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset domainname ; "coreutils"
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aGeneralHelpUsi ; "General help using GNU software: <http:"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		sub	esp, 8
		push	0		; locale
		push	5		; category
		call	setlocale
		add	esp, 10h
		mov	[ebp+lc_messages], eax
		cmp	[ebp+lc_messages], 0
		jz	short loc_80000E6
		sub	esp, 4
		push	3		; n
		push	offset s2	; "en_"
		push	[ebp+lc_messages] ; s1
		call	strncmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_80000E6
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aReportSTransla ; "Report %s translation	bugs to	<http://t"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h

loc_80000E6:				; CODE XREF: emit_ancillary_info+9Bj
					; emit_ancillary_info+B4j
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aForCompleteDoc ; "For complete documentation, run: info	c"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		nop
		mov	ebx, [ebp+var_4]
		leave
		retn
emit_ancillary_info endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; void __cdecl usage(int status)
		public usage
usage		proc near		; CODE XREF: main+BCp main+100p

status		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 4
		cmp	[ebp+status], 0
		jz	short loc_8000159
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, ds:stderr
		sub	esp, 4
		push	ebx
		push	edx		; format
		push	eax		; stream
		call	fprintf
		add	esp, 10h
		jmp	loc_800020D
; ---------------------------------------------------------------------------

loc_8000159:				; CODE XREF: usage+Bj
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aUsageSOption__ ; "Usage: %s [OPTION]...	[FILE]...\n"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aCopyStandardIn ; "Copy standard	input to each FILE, and	a"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aHelpDisplayThi ; "	--help	   display this	help and "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aVersionOutputV ; "	--version  output version informa"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aIfAFileIsCopyA ; "\nIf a FILE is -, copy again to standar"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		call	emit_ancillary_info

loc_800020D:				; CODE XREF: usage+38j
		sub	esp, 0Ch
		push	[ebp+status]	; status
		call	exit
usage		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public main
main		proc near

ok		= byte ptr -0Dh
optc		= dword	ptr -0Ch
argc		= dword	ptr  0Ch
argv		= dword	ptr  10h
envp		= dword	ptr  14h

		lea	ecx, [esp+4]
		and	esp, 0FFFFFFF0h
		push	dword ptr [ecx-4]
		push	ebp
		mov	ebp, esp
		push	ebx
		push	ecx
		sub	esp, 10h
		mov	ebx, ecx
		mov	eax, [ebx+4]
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	set_program_name
		add	esp, 10h
		sub	esp, 8
		push	offset locale	; locale
		push	6		; category
		call	setlocale
		add	esp, 10h
		sub	esp, 8
		push	offset dirname	; "/usr/local/share/locale"
		push	offset domainname ; "coreutils"
		call	bindtextdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset domainname ; "coreutils"
		call	textdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset close_stdout ; func
		call	atexit
		add	esp, 10h
		mov	ds:append, 0
		mov	ds:ignore_interrupts, 0
		jmp	loc_800031D
; ---------------------------------------------------------------------------

loc_8000297:				; CODE XREF: main+128j
		mov	eax, [ebp+optc]
		cmp	eax, 0FFFFFF7Eh
		jz	short loc_80002CF
		cmp	eax, 0FFFFFF7Eh
		jg	short loc_80002B1
		cmp	eax, 0FFFFFF7Dh
		jz	short loc_80002D9
		jmp	short loc_8000313
; ---------------------------------------------------------------------------

loc_80002B1:				; CODE XREF: main+8Ej
		cmp	eax, 61h
		jz	short loc_80002BD
		cmp	eax, 69h
		jz	short loc_80002C6
		jmp	short loc_8000313
; ---------------------------------------------------------------------------

loc_80002BD:				; CODE XREF: main+9Cj
		mov	ds:append, 1
		jmp	short loc_800031D
; ---------------------------------------------------------------------------

loc_80002C6:				; CODE XREF: main+A1j
		mov	ds:ignore_interrupts, 1
		jmp	short loc_800031D
; ---------------------------------------------------------------------------

loc_80002CF:				; CODE XREF: main+87j
		sub	esp, 0Ch
		push	0		; status
		call	usage
; ---------------------------------------------------------------------------

loc_80002D9:				; CODE XREF: main+95j
		mov	edx, ds:Version
		mov	eax, ds:stdout
		push	0
		push	offset aDavidMackenzie ; "David	MacKenzie"
		push	offset aRichardM_Stall ; "Richard M. Stallman"
		push	offset aMikeParker ; "Mike Parker"
		push	edx
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	offset aTee	; "tee"
		push	eax
		call	version_etc
		add	esp, 20h
		sub	esp, 0Ch
		push	0		; status
		call	exit
; ---------------------------------------------------------------------------

loc_8000313:				; CODE XREF: main+97j main+A3j
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_800031D:				; CODE XREF: main+7Aj main+ACj ...
		sub	esp, 0Ch
		push	0		; longind
		push	offset long_options ; longopts
		push	offset shortopts ; "ai"
		push	dword ptr [ebx+4] ; argv
		push	dword ptr [ebx]	; argc
		call	getopt_long
		add	esp, 20h
		mov	[ebp+optc], eax
		cmp	[ebp+optc], 0FFFFFFFFh
		jnz	loc_8000297
		movzx	eax, ds:ignore_interrupts
		test	al, al
		jz	short loc_8000360
		sub	esp, 8
		push	1		; handler
		push	2		; sig
		call	signal
		add	esp, 10h

loc_8000360:				; CODE XREF: main+137j
		mov	eax, ds:optind
		lea	edx, ds:0[eax*4]
		mov	eax, [ebx+4]
		add	edx, eax
		mov	eax, ds:optind
		mov	ecx, [ebx]
		sub	ecx, eax
		mov	eax, ecx
		sub	esp, 8
		push	edx		; files
		push	eax		; nfiles
		call	tee_files
		add	esp, 10h
		mov	[ebp+ok], al
		sub	esp, 0Ch
		push	0		; fd
		call	close
		add	esp, 10h
		test	eax, eax
		jz	short loc_80003C5
		sub	esp, 0Ch
		push	offset aStandardInput ;	"standard input"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		sub	esp, 4
		push	ebx		; format
		push	eax		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_80003C5:				; CODE XREF: main+183j
		cmp	[ebp+ok], 0
		jz	short loc_80003D2
		mov	eax, 0
		jmp	short loc_80003D7
; ---------------------------------------------------------------------------

loc_80003D2:				; CODE XREF: main+1B1j
		mov	eax, 1

loc_80003D7:				; CODE XREF: main+1B8j
		sub	esp, 0Ch
		push	eax		; status
		call	exit
main		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; _Bool	__cdecl	tee_files(int nfiles, const char **files)
tee_files	proc near		; CODE XREF: main+169p

files		= dword	ptr -202Ch
ok		= byte ptr -201Dh
i		= dword	ptr -201Ch
mode_string	= dword	ptr -2018h
descriptors	= dword	ptr -2014h
bytes_read	= dword	ptr -2010h
buffer		= byte ptr -200Ch
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
nfiles		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 2034h
		mov	eax, [ebp+arg_4]
		mov	[ebp+files], eax
		mov	eax, large gs:14h
		mov	[ebp+var_C], eax
		xor	eax, eax
		mov	[ebp+ok], 1
		movzx	eax, ds:append
		test	al, al
		jz	short loc_8000417
		mov	eax, offset aA	; "a"
		jmp	short loc_800041C
; ---------------------------------------------------------------------------

loc_8000417:				; CODE XREF: tee_files+2Ej
		mov	eax, offset aW	; "w"

loc_800041C:				; CODE XREF: tee_files+35j
		mov	[ebp+mode_string], eax
		mov	eax, [ebp+nfiles]
		add	eax, 1
		sub	esp, 8
		push	4
		push	eax
		call	xnmalloc
		add	esp, 10h
		mov	[ebp+descriptors], eax
		mov	eax, [ebp+nfiles]
		mov	[ebp+i], eax
		jmp	short loc_8000481
; ---------------------------------------------------------------------------

loc_8000447:				; CODE XREF: tee_files+A8j
		mov	eax, [ebp+i]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+files]
		add	edx, eax
		mov	eax, [ebp+i]
		add	eax, 3FFFFFFFh
		lea	ecx, ds:0[eax*4]
		mov	eax, [ebp+files]
		add	eax, ecx
		mov	eax, [eax]
		mov	[edx], eax
		sub	[ebp+i], 1

loc_8000481:				; CODE XREF: tee_files+65j
		cmp	[ebp+i], 0
		jg	short loc_8000447
		mov	edx, ds:stdout
		mov	eax, [ebp+descriptors]
		mov	[eax], edx
		sub	esp, 0Ch
		push	offset aStandardOutput ; "standard output"
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, [ebp+files]
		mov	[eax], edx
		mov	eax, ds:stdout
		push	0		; n
		push	2		; modes
		push	0		; buf
		push	eax		; stream
		call	setvbuf
		add	esp, 10h
		mov	[ebp+i], 1
		jmp	loc_80005C9
; ---------------------------------------------------------------------------

loc_80004D5:				; CODE XREF: tee_files+1F2j
		mov	eax, [ebp+i]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+descriptors]
		lea	ebx, [edx+eax]
		mov	eax, [ebp+i]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+files]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 8
		push	offset asc_8000C28 ; "-"
		push	eax		; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_8000542
		mov	eax, [ebp+i]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+files]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 8
		push	[ebp+mode_string]
		push	eax
		call	fopen_safer
		add	esp, 10h
		jmp	short loc_8000547
; ---------------------------------------------------------------------------

loc_8000542:				; CODE XREF: tee_files+135j
		mov	eax, ds:stdout

loc_8000547:				; CODE XREF: tee_files+160j
		mov	[ebx], eax
		mov	eax, [ebp+i]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+descriptors]
		add	eax, edx
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_800059C
		mov	eax, [ebp+i]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+files]
		add	eax, edx
		mov	ebx, [eax]
		call	__errno_location
		mov	eax, [eax]
		push	ebx
		push	offset format	; "%s"
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	[ebp+ok], 0
		jmp	short loc_80005C2
; ---------------------------------------------------------------------------

loc_800059C:				; CODE XREF: tee_files+182j
		mov	eax, [ebp+i]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+descriptors]
		add	eax, edx
		mov	eax, [eax]
		push	0		; n
		push	2		; modes
		push	0		; buf
		push	eax		; stream
		call	setvbuf
		add	esp, 10h

loc_80005C2:				; CODE XREF: tee_files+1BAj
		add	[ebp+i], 1

loc_80005C9:				; CODE XREF: tee_files+F0j
		mov	eax, [ebp+i]
		cmp	eax, [ebp+nfiles]
		jle	loc_80004D5

loc_80005D8:				; CODE XREF: tee_files+307j
					; tee_files+30Dj
		sub	esp, 4
		push	2000h		; nbytes
		lea	eax, [ebp+buffer]
		push	eax		; buf
		push	0		; fd
		call	read
		add	esp, 10h
		mov	[ebp+bytes_read], eax
		cmp	[ebp+bytes_read], 0
		jns	short loc_8000610
		call	__errno_location
		mov	eax, [eax]
		cmp	eax, 4
		jz	loc_80006EC

loc_8000610:				; CODE XREF: tee_files+21Ej
		cmp	[ebp+bytes_read], 0
		jle	loc_80006F2
		mov	[ebp+i], 0
		jmp	loc_80006D8
; ---------------------------------------------------------------------------

loc_800062C:				; CODE XREF: tee_files+301j
		mov	eax, [ebp+i]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+descriptors]
		add	eax, edx
		mov	eax, [eax]
		test	eax, eax
		jz	loc_80006D1
		mov	eax, [ebp+i]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+descriptors]
		add	eax, edx
		mov	edx, [eax]
		mov	eax, [ebp+bytes_read]
		push	edx		; stream
		push	1		; n
		push	eax		; size
		lea	eax, [ebp+buffer]
		push	eax		; ptr
		call	fwrite_unlocked
		add	esp, 10h
		cmp	eax, 1
		jz	short loc_80006D1
		mov	eax, [ebp+i]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+files]
		add	eax, edx
		mov	ebx, [eax]
		call	__errno_location
		mov	eax, [eax]
		push	ebx
		push	offset format	; "%s"
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	eax, [ebp+i]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+descriptors]
		add	eax, edx
		mov	dword ptr [eax], 0
		mov	[ebp+ok], 0

loc_80006D1:				; CODE XREF: tee_files+265j
					; tee_files+29Ej
		add	[ebp+i], 1

loc_80006D8:				; CODE XREF: tee_files+247j
		mov	eax, [ebp+i]
		cmp	eax, [ebp+nfiles]
		jle	loc_800062C
		jmp	loc_80005D8
; ---------------------------------------------------------------------------

loc_80006EC:				; CODE XREF: tee_files+22Aj
		nop
		jmp	loc_80005D8
; ---------------------------------------------------------------------------

loc_80006F2:				; CODE XREF: tee_files+237j
		nop
		cmp	[ebp+bytes_read], 0FFFFFFFFh
		jnz	short loc_800072B
		sub	esp, 0Ch
		push	offset aReadError ; "read error"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		sub	esp, 4
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	[ebp+ok], 0

loc_800072B:				; CODE XREF: tee_files+31Aj
		mov	[ebp+i], 1
		jmp	loc_80007E5
; ---------------------------------------------------------------------------

loc_800073A:				; CODE XREF: tee_files+40Ej
		mov	eax, [ebp+i]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+files]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 8
		push	offset asc_8000C28 ; "-"
		push	eax		; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_80007DE
		mov	eax, [ebp+i]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+descriptors]
		add	eax, edx
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_80007DE
		mov	eax, [ebp+i]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+descriptors]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax		; stream
		call	fclose
		add	esp, 10h
		test	eax, eax
		jz	short loc_80007DE
		mov	eax, [ebp+i]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+files]
		add	eax, edx
		mov	ebx, [eax]
		call	__errno_location
		mov	eax, [eax]
		push	ebx
		push	offset format	; "%s"
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	[ebp+ok], 0

loc_80007DE:				; CODE XREF: tee_files+384j
					; tee_files+39Fj ...
		add	[ebp+i], 1

loc_80007E5:				; CODE XREF: tee_files+355j
		mov	eax, [ebp+i]
		cmp	eax, [ebp+nfiles]
		jle	loc_800073A
		sub	esp, 0Ch
		push	[ebp+descriptors] ; ptr
		call	free
		add	esp, 10h
		movzx	eax, [ebp+ok]
		mov	ecx, [ebp+var_C]
		xor	ecx, large gs:14h
		jz	short loc_800081D
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_800081D:				; CODE XREF: tee_files+436j
		mov	ebx, [ebp+var_4]
		leave

locret_8000821:				; DATA XREF: .eh_frame:08000C58o
					; .eh_frame:08000C7Co ...
		retn
tee_files	endp

_text		ends

; ===========================================================================

; Segment type:	Zero-length
; Segment permissions: Read/Write
_data		segment	byte public 'DATA' use32
_data		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	byte public 'BSS' use32
		assume cs:_bss
		;org 8000823h
		assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing
; _Bool	append
append		db ?			; DATA XREF: main+6Cw
					; main:loc_80002BDw ...
; _Bool	ignore_interrupts
ignore_interrupts db ?			; DATA XREF: main+73w
					; main:loc_80002C6w ...
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment '32byte' can not be represented in assembly
_rodata		segment	para public 'CONST' use32
		assume cs:_rodata
		;org 8000840h
; char msgid[]
msgid		db 0Ah			; DATA XREF: emit_ancillary_info+1Do
		db 'Report %s bugs to %s',0Ah,0
aBugCoreutils@g	db 'bug-coreutils@gnu.org',0 ; DATA XREF: emit_ancillary_info+2Do
		align 10h
; char aSHomePageHttpW[]
aSHomePageHttpW	db '%s home page: <http://www.gnu.org/software/%s/>',0Ah,0
					; DATA XREF: emit_ancillary_info+3Fo
; char domainname[]
domainname	db 'coreutils',0        ; DATA XREF: emit_ancillary_info+4Fo
					; main+3Fo ...
aGnuCoreutils	db 'GNU coreutils',0    ; DATA XREF: emit_ancillary_info+54o
					; main+DEo
		align 4
; char aGeneralHelpUsi[]
aGeneralHelpUsi	db 'General help using GNU software: <http://www.gnu.org/gethelp/>',0Ah,0
					; DATA XREF: emit_ancillary_info+6Bo
; char s2[]
s2		db 'en_',0              ; DATA XREF: emit_ancillary_info+A2o
; char aReportSTransla[]
aReportSTransla	db 'Report %s translation bugs to <http://translationproject.org/team'
					; DATA XREF: emit_ancillary_info+CCo
		db '/>',0Ah,0
		align 4
; char aForCompleteDoc[]
aForCompleteDoc	db 'For complete documentation, run: info coreutils ',27h,'%s invocation'
					; DATA XREF: emit_ancillary_info+FCo
		db 27h,0Ah,0
aAppend		db 'append',0           ; DATA XREF: .rodata:long_optionso
aIgnoreInterrup	db 'ignore-interrupts',0 ; DATA XREF: .rodata:long_optionso
aHelp		db 'help',0             ; DATA XREF: .rodata:long_optionso
aVersion	db 'version',0          ; DATA XREF: .rodata:long_optionso
		align 20h
; const	option long_options[5]
long_options	option <offset aAppend,	0, 0, 61h> ; DATA XREF:	main+10Ao
		option <offset aIgnoreInterrup,	0, 0, 69h> ; "append"
		option <offset aHelp, 0, 0, 0FFFFFF7Eh>
		option <offset aVersion, 0, 0, 0FFFFFF7Dh>
		option	<0>
; char aTrySHelpForMor[]
aTrySHelpForMor	db 'Try `%s --help',27h,' for more information.',0Ah,0
					; DATA XREF: usage+16o
		align 4
; char aUsageSOption__[]
aUsageSOption__	db 'Usage: %s [OPTION]... [FILE]...',0Ah,0 ; DATA XREF: usage+46o
		align 4
; char aCopyStandardIn[]
aCopyStandardIn	db 'Copy standard input to each FILE, and also to standard output.',0Ah
					; DATA XREF: usage+69o
		db 0Ah
		db '  -a, --append              append to the given FILEs, do not ove'
		db 'rwrite',0Ah
		db '  -i, --ignore-interrupts   ignore interrupt signals',0Ah,0
		align 4
; char aHelpDisplayThi[]
aHelpDisplayThi	db '      --help     display this help and exit',0Ah,0
					; DATA XREF: usage+8Co
		align 4
; char aVersionOutputV[]
aVersionOutputV	db '      --version  output version information and exit',0Ah,0
					; DATA XREF: usage+AFo
		align 4
; char aIfAFileIsCopyA[]
aIfAFileIsCopyA	db 0Ah			; DATA XREF: usage+D2o
		db 'If a FILE is -, copy again to standard output.',0Ah,0
; char locale
locale		db 0			; DATA XREF: main+28o
; char dirname[]
dirname		db '/usr/local/share/locale',0 ; DATA XREF: main+3Ao
aDavidMackenzie	db 'David MacKenzie',0  ; DATA XREF: main+CEo
aRichardM_Stall	db 'Richard M. Stallman',0 ; DATA XREF: main+D3o
aMikeParker	db 'Mike Parker',0      ; DATA XREF: main+D8o
aTee		db 'tee',0              ; DATA XREF: main+E3o
; char shortopts[]
shortopts	db 'ai',0               ; DATA XREF: main+10Fo
; char aStandardInput[]
aStandardInput	db 'standard input',0   ; DATA XREF: main+188o
aA		db 'a',0                ; DATA XREF: tee_files+30o
aW		db 'w',0                ; DATA XREF: tee_files:loc_8000417o
; char aStandardOutput[]
aStandardOutput	db 'standard output',0  ; DATA XREF: tee_files+BBo
; char asc_8000C28[]
asc_8000C28	db '-',0                ; DATA XREF: tee_files+125o
					; tee_files+374o
; char format[]
format		db '%s',0               ; DATA XREF: tee_files+1A3o
					; tee_files+2BFo ...
; char aReadError[]
aReadError	db 'read error',0       ; DATA XREF: tee_files+31Fo
_rodata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_eh_frame	segment	dword public 'CONST' use32
		assume cs:_eh_frame
		;org 8000C38h
		dd 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 20h, 1Ch
		dd offset locret_8000821-8001479h
		dd 11Ch, 80E4100h, 0D420285h, 3834405h,	0C5011403h, 4040CC3h
		dd 18h,	40h
		dd offset locret_8000821-8001381h
		dd 0FCh, 80E4100h, 0D420285h, 3834405h,	24h, 5Ch
		dd offset locret_8000821-80012A1h
		dd 1C8h, 10C4400h, 5104700h, 44007502h,	7875030Fh, 2031006h
		dd 7C75h, 20h, 84h
		dd offset locret_8000821-8001101h
		dd 442h, 80E4100h, 0D420285h, 3834705h,	0C5043703h, 4040CC3h
_eh_frame	ends

; ===========================================================================

; Segment type:	Externs
; extern
		extrn program_name:dword ; DATA	XREF: emit_ancillary_info+7r
					; emit_ancillary_info+B6r ...
		extrn last_component:near ; CODE XREF: emit_ancillary_info+10p
					; emit_ancillary_info+BFp ...
; char *gettext(const char *msgid)
		extrn gettext:near	; CODE XREF: emit_ancillary_info+22p
					; emit_ancillary_info+44p ...
; int printf(const char	*format, ...)
		extrn printf:near	; CODE XREF: emit_ancillary_info+34p
					; emit_ancillary_info+5Ap ...
; struct _IO_FILE *stdout
		extrn stdout:dword	; DATA XREF: emit_ancillary_info+62r
					; usage+60r ...
		extrn fputs_unlocked:near ; CODE XREF: emit_ancillary_info+7Dp
					; usage+7Bp ...
; char *setlocale(int category,	const char *locale)
		extrn setlocale:near	; CODE XREF: emit_ancillary_info+8Cp
					; main+2Fp
; int strncmp(const char *s1, const char *s2, size_t n)
		extrn strncmp:near	; CODE XREF: emit_ancillary_info+AAp
; struct _IO_FILE *stderr
		extrn stderr:dword	; DATA XREF: usage+25r
; int fprintf(FILE *stream, const char *format,	...)
		extrn fprintf:near	; CODE XREF: usage+30p
; void exit(int	status)
		extrn exit:near		; CODE XREF: usage+F7p	main+F6p ...
		extrn set_program_name:near ; CODE XREF: main+1Dp
; char *bindtextdomain(const char *domainname, const char *dirname)
		extrn bindtextdomain:near ; CODE XREF: main+44p
; char *textdomain(const char *domainname)
		extrn textdomain:near	; CODE XREF: main+54p
; void close_stdout(void)
		extrn close_stdout	; DATA XREF: main+5Fo
; int atexit(void (*func)(void))
		extrn atexit:near	; CODE XREF: main+64p
		extrn Version:dword	; DATA XREF: main:loc_80002D9r
		extrn version_etc:near	; CODE XREF: main+E9p
; int getopt_long(int argc, char *const	*argv, const char *shortopts, const struct option *longopts, int *longind)
		extrn getopt_long:near	; CODE XREF: main+119p
; __sighandler_t signal(int sig, __sighandler_t	handler)
		extrn signal:near	; CODE XREF: main+140p
; int optind
		extrn optind:dword	; DATA XREF: main:loc_8000360r
					; main+159r
; int close(int	fd)
		extrn close:near	; CODE XREF: main+179p
; int *_errno_location(void)
		extrn __errno_location:near ; CODE XREF: main+197p
					; tee_files+19Bp ...
; void error(int status, int errnum, const char	*format, ...)
		extrn error:near	; CODE XREF: main+1A5p	tee_files+1ABp	...
		extrn xnmalloc:near	; CODE XREF: tee_files+4Ep
; int setvbuf(FILE *stream, char *buf, int modes, size_t n)
		extrn setvbuf:near	; CODE XREF: tee_files+DEp
					; tee_files+1DAp
; int strcmp(const char	*s1, const char	*s2)
		extrn strcmp:near	; CODE XREF: tee_files+12Bp
					; tee_files+37Ap
		extrn fopen_safer:near	; CODE XREF: tee_files+158p
; ssize_t read(int fd, void *buf, size_t nbytes)
		extrn read:near		; CODE XREF: tee_files+209p
; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
		extrn fwrite_unlocked:near ; CODE XREF:	tee_files+293p
; int fclose(FILE *stream)
		extrn fclose:near	; CODE XREF: tee_files+3BCp
; void free(void *ptr)
		extrn free:near		; CODE XREF: tee_files+41Dp
		extrn __stack_chk_fail:near ; CODE XREF: tee_files+438p


		end
