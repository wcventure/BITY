;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B611-7234-BB			    |
; |		Doskey Lee, Kingsoft Internet Security Software		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	B8C325852D977E2FAF7750DC1ED1181A
; Input	CRC32 :	434626EA

; File Name   :	D:\coreutils-o\mkdir.o
; Format      :	ELF for	Intel 386 (Relocatable)
;
; Source File :	'mkdir.c'

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	byte public 'CODE' use32
		assume cs:_text
		;org 8000000h
		assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; int __cdecl setfscreatecon(char *con)
setfscreatecon	proc near		; CODE XREF: main+1C0p

con		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		call	__errno_location
		mov	dword ptr [eax], 5Fh
		mov	eax, 0FFFFFFFFh
		leave
		retn
setfscreatecon	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void emit_ancillary_info()
emit_ancillary_info proc near		; CODE XREF: usage+10Fp

lc_messages	= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset msgid	; "\nReport %s bugs to %s\n"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset aBugCoreutils@g ; "bug-coreutils@gnu.org"
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	offset aSHomePageHttpW ; "%s home page:	<http://www.gnu.org/softw"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset domainname ; "coreutils"
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aGeneralHelpUsi ; "General help using GNU software: <http:"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		sub	esp, 8
		push	0		; locale
		push	5		; category
		call	setlocale
		add	esp, 10h
		mov	[ebp+lc_messages], eax
		cmp	[ebp+lc_messages], 0
		jz	short loc_80000FE
		sub	esp, 4
		push	3		; n
		push	offset s2	; "en_"
		push	[ebp+lc_messages] ; s1
		call	strncmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_80000FE
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aReportSTransla ; "Report %s translation	bugs to	<http://t"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h

loc_80000FE:				; CODE XREF: emit_ancillary_info+9Bj
					; emit_ancillary_info+B4j
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aForCompleteDoc ; "For complete documentation, run: info	c"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		nop
		mov	ebx, [ebp+var_4]
		leave
		retn
emit_ancillary_info endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; void __cdecl usage(int status)
		public usage
usage		proc near		; CODE XREF: main+116p	main+153p ...

status		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 4
		cmp	[ebp+status], 0
		jz	short loc_8000171
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, ds:stderr
		sub	esp, 4
		push	ebx
		push	edx		; format
		push	eax		; stream
		call	fprintf
		add	esp, 10h
		jmp	loc_8000248
; ---------------------------------------------------------------------------

loc_8000171:				; CODE XREF: usage+Bj
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aUsageSOption__ ; "Usage: %s [OPTION]...	DIRECTORY...\n"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aCreateTheDirec ; "Create the DIRECTORY(ies), if	they do	n"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aMandatoryArgum ; "Mandatory arguments to long options are"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aMModeModeSetFi ; "  -m,	--mode=MODE   set file mode (as	i"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aHelpDisplayThi ; "	--help	   display this	help and "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aVersionOutputV ; "	--version  output version informa"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		call	emit_ancillary_info

loc_8000248:				; CODE XREF: usage+38j
		sub	esp, 0Ch
		push	[ebp+status]	; status
		call	exit
usage		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl announce_mkdir(const char *dir, void *options)
announce_mkdir	proc near		; CODE XREF: make_ancestor+49p
					; DATA XREF: process_dir+27o

o		= dword	ptr -0Ch
dir		= dword	ptr  8
options		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+options]
		mov	[ebp+o], eax
		mov	eax, [ebp+o]
		mov	eax, [eax+10h]
		test	eax, eax
		jz	short loc_8000292
		sub	esp, 0Ch
		push	[ebp+dir]
		call	quote
		add	esp, 10h
		mov	ecx, eax
		mov	eax, [ebp+o]
		mov	edx, [eax+10h]
		mov	eax, ds:stdout
		sub	esp, 4
		push	ecx
		push	edx
		push	eax
		call	prog_fprintf
		add	esp, 10h

loc_8000292:				; CODE XREF: announce_mkdir+14j
		nop
		leave
		retn
announce_mkdir	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; int __cdecl make_ancestor(const char *dir, const char	*component, void *options)
make_ancestor	proc near		; DATA XREF: main:loc_800041Bo

r		= dword	ptr -10h
o		= dword	ptr -0Ch
dir		= dword	ptr  8
component	= dword	ptr  0Ch
options		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+options]
		mov	[ebp+o], eax
		mov	eax, [ebp+o]
		mov	eax, [eax+4]
		sub	esp, 8
		push	eax		; mode
		push	[ebp+component]	; path
		call	mkdir
		add	esp, 10h
		mov	[ebp+r], eax
		cmp	[ebp+r], 0
		jnz	short loc_80002E6
		mov	eax, [ebp+o]
		mov	eax, [eax+4]
		and	eax, 100h
		test	eax, eax
		setz	al
		movzx	eax, al
		mov	[ebp+r], eax
		sub	esp, 8
		push	[ebp+options]	; options
		push	[ebp+dir]	; dir
		call	announce_mkdir
		add	esp, 10h

loc_80002E6:				; CODE XREF: make_ancestor+28j
		mov	eax, [ebp+r]
		leave
		retn
make_ancestor	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; int __cdecl process_dir(char *dir, savewd *wd, void *options)
process_dir	proc near		; DATA XREF: main+2DBo

o		= dword	ptr -0Ch
dir		= dword	ptr  8
wd		= dword	ptr  0Ch
options		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+options]
		mov	[ebp+o], eax
		mov	eax, [ebp+o]
		mov	ecx, [eax+0Ch]
		mov	eax, [ebp+o]
		mov	edx, [eax+8]
		mov	eax, [ebp+o]
		mov	eax, [eax]
		sub	esp, 8
		push	1
		push	0FFFFFFFFh
		push	0FFFFFFFFh
		push	ecx
		push	offset announce_mkdir
		push	edx
		push	[ebp+options]
		push	eax
		push	[ebp+wd]
		push	[ebp+dir]
		call	make_dir_parents
		add	esp, 30h
		test	al, al
		jz	short loc_8000335
		mov	eax, 0
		jmp	short locret_800033A
; ---------------------------------------------------------------------------

loc_8000335:				; CODE XREF: process_dir+41j
		mov	eax, 1

locret_800033A:				; CODE XREF: process_dir+48j
		leave
		retn
process_dir	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public main
main		proc near

argv		= dword	ptr -4Ch
specified_mode	= dword	ptr -44h
scontext	= dword	ptr -40h
optc		= dword	ptr -3Ch
umask_value	= dword	ptr -38h
change		= dword	ptr -34h
options		= mkdir_options	ptr -30h
var_1C		= dword	ptr -1Ch
argc		= dword	ptr  0Ch
envp		= dword	ptr  14h

		lea	ecx, [esp+4]
		and	esp, 0FFFFFFF0h
		push	dword ptr [ecx-4]
		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		push	ecx
		sub	esp, 48h
		mov	ebx, ecx
		mov	eax, [ebx+4]
		mov	[ebp+argv], eax
		mov	eax, large gs:14h
		mov	[ebp+var_1C], eax
		xor	eax, eax
		mov	[ebp+specified_mode], 0
		mov	[ebp+scontext],	0
		mov	[ebp+options.make_ancestor_function], 0
		mov	[ebp+options.mode], 1FFh
		mov	[ebp+options.mode_bits], 0
		mov	[ebp+options.created_directory_format],	0
		mov	eax, [ebp+argv]
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	set_program_name
		add	esp, 10h
		sub	esp, 8
		push	offset locale	; locale
		push	6		; category
		call	setlocale
		add	esp, 10h
		sub	esp, 8
		push	offset dirname	; "/usr/local/share/locale"
		push	offset domainname ; "coreutils"
		call	bindtextdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset domainname ; "coreutils"
		call	textdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset close_stdout ; func
		call	atexit
		add	esp, 10h
		jmp	loc_8000494
; ---------------------------------------------------------------------------

loc_80003EA:				; CODE XREF: main+17Bj
		mov	eax, [ebp+optc]
		cmp	eax, 5Ah
		jz	short loc_8000443
		cmp	eax, 5Ah
		jg	short loc_800040A
		cmp	eax, 0FFFFFF7Dh
		jz	short loc_8000457
		cmp	eax, 0FFFFFF7Eh
		jz	short loc_800044D
		jmp	loc_800048A
; ---------------------------------------------------------------------------

loc_800040A:				; CODE XREF: main+B9j
		cmp	eax, 70h
		jz	short loc_800041B
		cmp	eax, 76h
		jz	short loc_800042E
		cmp	eax, 6Dh
		jz	short loc_8000424
		jmp	short loc_800048A
; ---------------------------------------------------------------------------

loc_800041B:				; CODE XREF: main+D1j
		mov	[ebp+options.make_ancestor_function], offset make_ancestor
		jmp	short loc_8000494
; ---------------------------------------------------------------------------

loc_8000424:				; CODE XREF: main+DBj
		mov	eax, ds:optarg
		mov	[ebp+specified_mode], eax
		jmp	short loc_8000494
; ---------------------------------------------------------------------------

loc_800042E:				; CODE XREF: main+D6j
		sub	esp, 0Ch
		push	offset aCreatedDirecto ; "created directory %s"
		call	gettext
		add	esp, 10h
		mov	[ebp+options.created_directory_format],	eax
		jmp	short loc_8000494
; ---------------------------------------------------------------------------

loc_8000443:				; CODE XREF: main+B4j
		mov	eax, ds:optarg
		mov	[ebp+scontext],	eax
		jmp	short loc_8000494
; ---------------------------------------------------------------------------

loc_800044D:				; CODE XREF: main+C7j
		sub	esp, 0Ch
		push	0		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8000457:				; CODE XREF: main+C0j
		mov	edx, ds:Version
		mov	eax, ds:stdout
		sub	esp, 8
		push	0
		push	offset aDavidMackenzie ; "David	MacKenzie"
		push	edx
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	offset aMkdir	; "mkdir"
		push	eax
		call	version_etc
		add	esp, 20h
		sub	esp, 0Ch
		push	0		; status
		call	exit
; ---------------------------------------------------------------------------

loc_800048A:				; CODE XREF: main+C9j main+DDj
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8000494:				; CODE XREF: main+A9j main+E6j ...
		sub	esp, 0Ch
		push	0		; longind
		push	offset longopts	; longopts
		push	offset shortopts ; "pm:vZ:"
		push	[ebp+argv]	; argv
		push	dword ptr [ebx]	; argc
		call	getopt_long
		add	esp, 20h
		mov	[ebp+optc], eax
		cmp	[ebp+optc], 0FFFFFFFFh
		jnz	loc_80003EA
		mov	eax, ds:optind
		cmp	eax, [ebx]
		jnz	short loc_80004F0
		sub	esp, 0Ch
		push	offset aMissingOperand ; "missing operand"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_80004F0:				; CODE XREF: main+188j
		cmp	[ebp+scontext],	0
		jz	short loc_800053E
		sub	esp, 0Ch
		push	[ebp+scontext]	; con
		call	setfscreatecon
		add	esp, 10h
		test	eax, eax
		jns	short loc_800053E
		sub	esp, 0Ch
		push	[ebp+scontext]
		call	quote
		add	esp, 10h
		mov	edi, eax
		sub	esp, 0Ch
		push	offset aFailedToSetDef ; "failed to set	default	file creation con"...
		call	gettext
		add	esp, 10h
		mov	esi, eax
		call	__errno_location
		mov	eax, [eax]
		push	edi
		push	esi		; format
		push	eax		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_800053E:				; CODE XREF: main+1B8j	main+1CAj
		mov	eax, [ebp+options.make_ancestor_function]
		test	eax, eax
		jnz	short loc_800054F
		cmp	[ebp+specified_mode], 0
		jz	loc_80005F8

loc_800054F:				; CODE XREF: main+207j
		sub	esp, 0Ch
		push	0		; mask
		call	umask
		add	esp, 10h
		mov	[ebp+umask_value], eax
		mov	eax, [ebp+umask_value]
		not	eax
		and	eax, 13Fh
		or	al, 0C0h
		mov	[ebp+options.ancestor_mode], eax
		cmp	[ebp+specified_mode], 0
		jz	short loc_80005EB
		sub	esp, 0Ch
		push	[ebp+specified_mode]
		call	mode_compile
		add	esp, 10h
		mov	[ebp+change], eax
		cmp	[ebp+change], 0
		jnz	short loc_80005B9
		sub	esp, 0Ch
		push	[ebp+specified_mode]
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aInvalidModeS ; "invalid	mode %s"
		call	gettext
		add	esp, 10h
		push	esi
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_80005B9:				; CODE XREF: main+24Dj
		sub	esp, 0Ch
		lea	eax, [ebp+options]
		add	eax, 0Ch
		push	eax
		push	[ebp+change]
		push	[ebp+umask_value]
		push	1
		push	1FFh
		call	mode_adjust
		add	esp, 20h
		mov	[ebp+options.mode], eax
		sub	esp, 0Ch
		push	[ebp+change]	; ptr
		call	free
		add	esp, 10h
		jmp	short loc_80005F8
; ---------------------------------------------------------------------------

loc_80005EB:				; CODE XREF: main+236j
		mov	eax, [ebp+umask_value]
		not	eax
		and	eax, 1FFh
		mov	[ebp+options.mode], eax

loc_80005F8:				; CODE XREF: main+20Dj	main+2ADj
		mov	eax, ds:optind
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		lea	ecx, [edx+eax]
		mov	eax, ds:optind
		mov	edx, [ebx]
		sub	edx, eax
		lea	eax, [ebp+options]
		push	eax
		push	offset process_dir
		push	ecx
		push	edx
		call	savewd_process_files
		add	esp, 10h
		sub	esp, 0Ch
		push	eax		; status

loc_800062A:				; DATA XREF: .eh_frame:08000B68o
					; .eh_frame:08000B88o ...
		call	exit
main		endp

_text		ends

; ===========================================================================

; Segment type:	Zero-length
; Segment permissions: Read/Write
_data		segment	byte public 'DATA' use32
_data		ends

; ===========================================================================

; Segment type:	Zero-length
; Segment permissions: Read/Write
_bss		segment	byte public 'BSS' use32
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment '32byte' can not be represented in assembly
_rodata		segment	para public 'CONST' use32
		assume cs:_rodata
		;org 8000640h
; char msgid[]
msgid		db 0Ah			; DATA XREF: emit_ancillary_info+1Do
		db 'Report %s bugs to %s',0Ah,0
aBugCoreutils@g	db 'bug-coreutils@gnu.org',0 ; DATA XREF: emit_ancillary_info+2Do
		align 10h
; char aSHomePageHttpW[]
aSHomePageHttpW	db '%s home page: <http://www.gnu.org/software/%s/>',0Ah,0
					; DATA XREF: emit_ancillary_info+3Fo
; char domainname[]
domainname	db 'coreutils',0        ; DATA XREF: emit_ancillary_info+4Fo
					; main+7Co ...
aGnuCoreutils	db 'GNU coreutils',0    ; DATA XREF: emit_ancillary_info+54o
					; main+131o
		align 4
; char aGeneralHelpUsi[]
aGeneralHelpUsi	db 'General help using GNU software: <http://www.gnu.org/gethelp/>',0Ah,0
					; DATA XREF: emit_ancillary_info+6Bo
; char s2[]
s2		db 'en_',0              ; DATA XREF: emit_ancillary_info+A2o
; char aReportSTransla[]
aReportSTransla	db 'Report %s translation bugs to <http://translationproject.org/team'
					; DATA XREF: emit_ancillary_info+CCo
		db '/>',0Ah,0
		align 4
; char aForCompleteDoc[]
aForCompleteDoc	db 'For complete documentation, run: info coreutils ',27h,'%s invocation'
					; DATA XREF: emit_ancillary_info+FCo
		db 27h,0Ah,0
aContext	db 'context',0          ; DATA XREF: .rodata:longoptso
aMode		db 'mode',0             ; DATA XREF: .rodata:longoptso
aParents	db 'parents',0          ; DATA XREF: .rodata:longoptso
aVerbose	db 'verbose',0          ; DATA XREF: .rodata:longoptso
aHelp		db 'help',0             ; DATA XREF: .rodata:longoptso
aVersion	db 'version',0          ; DATA XREF: .rodata:longoptso
		align 10h
; const	option longopts[7]
longopts	option <offset aContext, 1, 0, 5Ah> ; DATA XREF: main+15Do
		option <offset aMode, 1, 0, 6Dh> ; "context"
		option <offset aParents, 0, 0, 70h>
		option <offset aVerbose, 0, 0, 76h>
		option <offset aHelp, 0, 0, 0FFFFFF7Eh>
		option <offset aVersion, 0, 0, 0FFFFFF7Dh>
		option	<0>
; char aTrySHelpForMor[]
aTrySHelpForMor	db 'Try `%s --help',27h,' for more information.',0Ah,0
					; DATA XREF: usage+16o
		align 4
; char aUsageSOption__[]
aUsageSOption__	db 'Usage: %s [OPTION]... DIRECTORY...',0Ah,0 ; DATA XREF: usage+46o
; char aCreateTheDirec[]
aCreateTheDirec	db 'Create the DIRECTORY(ies), if they do not already exist.',0Ah
					; DATA XREF: usage+69o
		db 0Ah,0
		align 4
; char aMandatoryArgum[]
aMandatoryArgum	db 'Mandatory arguments to long options are mandatory for short optio'
					; DATA XREF: usage+8Co
		db 'ns too.',0Ah,0
		align 4
; char aMModeModeSetFi[]
aMModeModeSetFi	db '  -m, --mode=MODE   set file mode (as in chmod), not a=rwx - umas'
					; DATA XREF: usage+AFo
		db 'k',0Ah
		db '  -p, --parents     no error if existing, make parent directories'
		db ' as needed',0Ah
		db '  -v, --verbose     print a message for each created directory',0Ah
		db '  -Z, --context=CTX  set the SELinux security context of each cre'
		db 'ated',0Ah
		db '                      directory to CTX',0Ah,0
; char aHelpDisplayThi[]
aHelpDisplayThi	db '      --help     display this help and exit',0Ah,0
					; DATA XREF: usage+D2o
		align 10h
; char aVersionOutputV[]
aVersionOutputV	db '      --version  output version information and exit',0Ah,0
					; DATA XREF: usage+F5o
; char locale
locale		db 0			; DATA XREF: main+65o
; char dirname[]
dirname		db '/usr/local/share/locale',0 ; DATA XREF: main+77o
; char aCreatedDirecto[]
aCreatedDirecto	db 'created directory %s',0 ; DATA XREF: main+F5o
aDavidMackenzie	db 'David MacKenzie',0  ; DATA XREF: main+12Bo
aMkdir		db 'mkdir',0            ; DATA XREF: main+136o
; char shortopts[]
shortopts	db 'pm:vZ:',0           ; DATA XREF: main+162o
; char aMissingOperand[]
aMissingOperand	db 'missing operand',0  ; DATA XREF: main+18Do
		align 4
; char aFailedToSetDef[]
aFailedToSetDef	db 'failed to set default file creation context to %s',0
					; DATA XREF: main+1DFo
; char aInvalidModeS[]
aInvalidModeS	db 'invalid mode %s',0  ; DATA XREF: main+262o
_rodata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_eh_frame	segment	dword public 'CONST' use32
		assume cs:_eh_frame
		;org 8000B48h
		dd 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 2	dup(1Ch)
		dd offset loc_800062A-8001192h
		dd 18h,	80E4100h, 0D420285h, 0CC55405h,	404h, 20h, 3Ch
		dd offset loc_800062A-800119Ah
		dd 11Ch, 80E4100h, 0D420285h, 3834405h,	0C5011403h, 4040CC3h
		dd 18h,	60h
		dd offset loc_800062A-80010A2h
		dd 11Fh, 80E4100h, 0D420285h, 3834405h,	1Ch, 7Ch
		dd offset loc_800062A-8000F9Fh
		dd 42h,	80E4100h, 0D420285h, 0CC57E05h,	404h, 1Ch, 9Ch
		dd offset loc_800062A-8000F7Dh
		dd 56h,	80E4100h, 0D420285h, 0C5520205h, 4040Ch, 1Ch, 0BCh
		dd offset loc_800062A-8000F47h
		dd 51h,	80E4100h, 0D420285h, 0C54D0205h, 4040Ch, 2Ch, 0DCh
		dd offset loc_800062A-8000F16h
		dd 2F3h, 10C4400h, 5104700h, 46007502h,	7075030Fh, 2071006h
		dd 6107C75h, 10787502h,	74750203h
_eh_frame	ends

; ===========================================================================

; Segment type:	Externs
; extern
; int *_errno_location(void)
		extrn __errno_location:near ; CODE XREF: setfscreatecon+6p
					; main+1EEp
		extrn program_name:dword ; DATA	XREF: emit_ancillary_info+7r
					; emit_ancillary_info+B6r ...
		extrn last_component:near ; CODE XREF: emit_ancillary_info+10p
					; emit_ancillary_info+BFp ...
; char *gettext(const char *msgid)
		extrn gettext:near	; CODE XREF: emit_ancillary_info+22p
					; emit_ancillary_info+44p ...
; int printf(const char	*format, ...)
		extrn printf:near	; CODE XREF: emit_ancillary_info+34p
					; emit_ancillary_info+5Ap ...
; struct _IO_FILE *stdout
		extrn stdout:dword	; DATA XREF: emit_ancillary_info+62r
					; usage+60r ...
		extrn fputs_unlocked:near ; CODE XREF: emit_ancillary_info+7Dp
					; usage+7Bp ...
; char *setlocale(int category,	const char *locale)
		extrn setlocale:near	; CODE XREF: emit_ancillary_info+8Cp
					; main+6Cp
; int strncmp(const char *s1, const char *s2, size_t n)
		extrn strncmp:near	; CODE XREF: emit_ancillary_info+AAp
; struct _IO_FILE *stderr
		extrn stderr:dword	; DATA XREF: usage+25r
; int fprintf(FILE *stream, const char *format,	...)
		extrn fprintf:near	; CODE XREF: usage+30p
; void exit(int	status)
		extrn exit:near		; CODE XREF: usage+11Ap main+149p ...
		extrn quote:near	; CODE XREF: announce_mkdir+1Cp
					; main+1D2p ...
		extrn prog_fprintf:near	; CODE XREF: announce_mkdir+37p
; int mkdir(const char *path, __mode_t mode)
		extrn mkdir:near	; CODE XREF: make_ancestor+19p
		extrn make_dir_parents:near ; CODE XREF: process_dir+37p
		extrn set_program_name:near ; CODE XREF: main+5Ap
; char *bindtextdomain(const char *domainname, const char *dirname)
		extrn bindtextdomain:near ; CODE XREF: main+81p
; char *textdomain(const char *domainname)
		extrn textdomain:near	; CODE XREF: main+91p
; void close_stdout(void)
		extrn close_stdout	; DATA XREF: main+9Co
; int atexit(void (*func)(void))
		extrn atexit:near	; CODE XREF: main+A1p
; char *optarg
		extrn optarg:dword	; DATA XREF: main:loc_8000424r
					; main:loc_8000443r
		extrn Version:dword	; DATA XREF: main:loc_8000457r
		extrn version_etc:near	; CODE XREF: main+13Cp
; int getopt_long(int argc, char *const	*argv, const char *shortopts, const struct option *longopts, int *longind)
		extrn getopt_long:near	; CODE XREF: main+16Cp
; int optind
		extrn optind:dword	; DATA XREF: main+181r
					; main:loc_80005F8r ...
; void error(int status, int errnum, const char	*format, ...)
		extrn error:near	; CODE XREF: main+1A2p	main+1FAp ...
; __mode_t umask(__mode_t mask)
		extrn umask:near	; CODE XREF: main+218p
		extrn mode_compile:near	; CODE XREF: main+23Ep
		extrn mode_adjust:near	; CODE XREF: main+294p
; void free(void *ptr)
		extrn free:near		; CODE XREF: main+2A5p
		extrn savewd_process_files:near	; CODE XREF: main+2E2p


		end
