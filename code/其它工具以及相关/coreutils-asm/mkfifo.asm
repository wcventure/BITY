;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B611-7234-BB			    |
; |		Doskey Lee, Kingsoft Internet Security Software		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	929A1931AF847CDAC6B978A1BBCA8A19
; Input	CRC32 :	2F8F3F79

; File Name   :	D:\coreutils-o\mkfifo.o
; Format      :	ELF for	Intel 386 (Relocatable)
;
; Source File :	'mkfifo.c'

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	byte public 'CODE' use32
		assume cs:_text
		;org 8000000h
		assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; int __cdecl setfscreatecon(char *con)
setfscreatecon	proc near		; CODE XREF: main+16Cp

con		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		call	__errno_location
		mov	dword ptr [eax], 5Fh
		mov	eax, 0FFFFFFFFh
		leave
		retn
setfscreatecon	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void emit_ancillary_info()
emit_ancillary_info proc near		; CODE XREF: usage+132p

lc_messages	= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset msgid	; "\nReport %s bugs to %s\n"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset aBugCoreutils@g ; "bug-coreutils@gnu.org"
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	offset aSHomePageHttpW ; "%s home page:	<http://www.gnu.org/softw"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset domainname ; "coreutils"
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aGeneralHelpUsi ; "General help using GNU software: <http:"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		sub	esp, 8
		push	0		; locale
		push	5		; category
		call	setlocale
		add	esp, 10h
		mov	[ebp+lc_messages], eax
		cmp	[ebp+lc_messages], 0
		jz	short loc_80000FE
		sub	esp, 4
		push	3		; n
		push	offset s2	; "en_"
		push	[ebp+lc_messages] ; s1
		call	strncmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_80000FE
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aReportSTransla ; "Report %s translation	bugs to	<http://t"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h

loc_80000FE:				; CODE XREF: emit_ancillary_info+9Bj
					; emit_ancillary_info+B4j
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aForCompleteDoc ; "For complete documentation, run: info	c"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		nop
		mov	ebx, [ebp+var_4]
		leave
		retn
emit_ancillary_info endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; void __cdecl usage(int status)
		public usage
usage		proc near		; CODE XREF: main+C2p main+FFp ...

status		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 4
		cmp	[ebp+status], 0
		jz	short loc_8000171
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, ds:stderr
		sub	esp, 4
		push	ebx
		push	edx		; format
		push	eax		; stream
		call	fprintf
		add	esp, 10h
		jmp	loc_800026B
; ---------------------------------------------------------------------------

loc_8000171:				; CODE XREF: usage+Bj
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aUsageSOption__ ; "Usage: %s [OPTION]...	NAME...\n"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aCreateNamedPip ; "Create named pipes (FIFOs) with the giv"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aMandatoryArgum ; "Mandatory arguments to long options are"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aMModeModeSetFi ; "  -m,	--mode=MODE    set file	permissio"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aZContextCtxSet ; "  -Z,	--context=CTX  set the SELinux se"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aHelpDisplayThi ; "	--help	   display this	help and "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aVersionOutputV ; "	--version  output version informa"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		call	emit_ancillary_info

loc_800026B:				; CODE XREF: usage+38j
		sub	esp, 0Ch
		push	[ebp+status]	; status
		call	exit
usage		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public main
main		proc near

newmode		= dword	ptr -30h
specified_mode	= dword	ptr -2Ch
exit_status	= dword	ptr -28h
scontext	= dword	ptr -24h
optc		= dword	ptr -20h
change		= dword	ptr -1Ch
argc		= dword	ptr  0Ch
argv		= dword	ptr  10h
envp		= dword	ptr  14h

		lea	ecx, [esp+4]
		and	esp, 0FFFFFFF0h
		push	dword ptr [ecx-4]
		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		push	ecx
		sub	esp, 28h
		mov	ebx, ecx
		mov	[ebp+specified_mode], 0
		mov	[ebp+exit_status], 0
		mov	[ebp+scontext],	0
		mov	eax, [ebx+4]
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	set_program_name
		add	esp, 10h
		sub	esp, 8
		push	offset locale	; locale
		push	6		; category
		call	setlocale
		add	esp, 10h
		sub	esp, 8
		push	offset dirname	; "/usr/local/share/locale"
		push	offset domainname ; "coreutils"
		call	bindtextdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset domainname ; "coreutils"
		call	textdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset close_stdout ; func
		call	atexit
		add	esp, 10h
		jmp	short loc_800037A
; ---------------------------------------------------------------------------

loc_80002FB:				; CODE XREF: main+127j
		mov	eax, [ebp+optc]
		cmp	eax, 0FFFFFF7Eh
		jz	short loc_8000333
		cmp	eax, 0FFFFFF7Eh
		jg	short loc_8000315
		cmp	eax, 0FFFFFF7Dh
		jz	short loc_800033D
		jmp	short loc_8000370
; ---------------------------------------------------------------------------

loc_8000315:				; CODE XREF: main+94j
		cmp	eax, 5Ah
		jz	short loc_8000329
		cmp	eax, 6Dh
		jnz	short loc_8000370
		mov	eax, ds:optarg
		mov	[ebp+specified_mode], eax
		jmp	short loc_800037A
; ---------------------------------------------------------------------------

loc_8000329:				; CODE XREF: main+A2j
		mov	eax, ds:optarg
		mov	[ebp+scontext],	eax
		jmp	short loc_800037A
; ---------------------------------------------------------------------------

loc_8000333:				; CODE XREF: main+8Dj
		sub	esp, 0Ch
		push	0		; status
		call	usage
; ---------------------------------------------------------------------------

loc_800033D:				; CODE XREF: main+9Bj
		mov	edx, ds:Version
		mov	eax, ds:stdout
		sub	esp, 8
		push	0
		push	offset aDavidMackenzie ; "David	MacKenzie"
		push	edx
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	offset aMkfifo	; "mkfifo"
		push	eax
		call	version_etc
		add	esp, 20h
		sub	esp, 0Ch
		push	0		; status
		call	exit
; ---------------------------------------------------------------------------

loc_8000370:				; CODE XREF: main+9Dj main+A7j
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_800037A:				; CODE XREF: main+83j main+B1j ...
		sub	esp, 0Ch
		push	0		; longind
		push	offset longopts	; longopts
		push	offset shortopts ; "m:Z:"
		push	dword ptr [ebx+4] ; argv
		push	dword ptr [ebx]	; argc
		call	getopt_long
		add	esp, 20h
		mov	[ebp+optc], eax
		cmp	[ebp+optc], 0FFFFFFFFh
		jnz	loc_80002FB
		mov	eax, ds:optind
		cmp	eax, [ebx]
		jnz	short loc_80003D6
		sub	esp, 0Ch
		push	offset aMissingOperand ; "missing operand"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_80003D6:				; CODE XREF: main+134j
		cmp	[ebp+scontext],	0
		jz	short loc_8000424
		sub	esp, 0Ch
		push	[ebp+scontext]	; con
		call	setfscreatecon
		add	esp, 10h
		test	eax, eax
		jns	short loc_8000424
		sub	esp, 0Ch
		push	[ebp+scontext]
		call	quote
		add	esp, 10h
		mov	edi, eax
		sub	esp, 0Ch
		push	offset aFailedToSetDef ; "failed to set	default	file creation con"...
		call	gettext
		add	esp, 10h
		mov	esi, eax
		call	__errno_location
		mov	eax, [eax]
		push	edi
		push	esi		; format
		push	eax		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_8000424:				; CODE XREF: main+164j	main+176j
		mov	[ebp+newmode], 1B6h
		cmp	[ebp+specified_mode], 0
		jz	loc_8000556
		sub	esp, 0Ch
		push	[ebp+specified_mode]
		call	mode_compile
		add	esp, 10h
		mov	[ebp+change], eax
		cmp	[ebp+change], 0
		jnz	short loc_800046C
		sub	esp, 0Ch
		push	offset aInvalidMode ; "invalid mode"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_800046C:				; CODE XREF: main+1D4j
		sub	esp, 0Ch
		push	0		; mask
		call	umask
		add	esp, 10h
		sub	esp, 0Ch
		push	0
		push	[ebp+change]
		push	eax
		push	0
		push	[ebp+newmode]
		call	mode_adjust
		add	esp, 20h
		mov	[ebp+newmode], eax
		sub	esp, 0Ch
		push	[ebp+change]	; ptr
		call	free
		add	esp, 10h
		mov	eax, [ebp+newmode]
		and	eax, 0FFFFFE00h
		test	eax, eax
		jz	loc_8000556
		sub	esp, 0Ch
		push	offset aModeMustSpecif ; "mode must specify only file permission "...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h
		jmp	loc_8000556
; ---------------------------------------------------------------------------

loc_80004D5:				; CODE XREF: main+2E7j
		mov	eax, ds:optind
		lea	edx, ds:0[eax*4]
		mov	eax, [ebx+4]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 8
		push	[ebp+newmode]	; mode
		push	eax		; path
		call	mkfifo
		add	esp, 10h
		test	eax, eax
		jz	short loc_8000549
		mov	eax, ds:optind
		lea	edx, ds:0[eax*4]
		mov	eax, [ebx+4]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	edi, eax
		sub	esp, 0Ch
		push	offset aCannotCreateFi ; "cannot create	fifo %s"
		call	gettext
		add	esp, 10h
		mov	esi, eax
		call	__errno_location
		mov	eax, [eax]
		push	edi
		push	esi		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	[ebp+exit_status], 1

loc_8000549:				; CODE XREF: main+283j
		mov	eax, ds:optind
		add	eax, 1
		mov	ds:optind, eax

loc_8000556:				; CODE XREF: main+1B9j	main+234j ...
		mov	eax, ds:optind
		cmp	eax, [ebx]
		jl	loc_80004D5
		sub	esp, 0Ch
		push	[ebp+exit_status] ; status

loc_8000569:				; DATA XREF: .eh_frame:08000A00o
					; .eh_frame:08000A20o ...
		call	exit
main		endp

_text		ends

; ===========================================================================

; Segment type:	Zero-length
; Segment permissions: Read/Write
_data		segment	byte public 'DATA' use32
_data		ends

; ===========================================================================

; Segment type:	Zero-length
; Segment permissions: Read/Write
_bss		segment	byte public 'BSS' use32
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment '32byte' can not be represented in assembly
_rodata		segment	para public 'CONST' use32
		assume cs:_rodata
		;org 8000580h
; char msgid[]
msgid		db 0Ah			; DATA XREF: emit_ancillary_info+1Do
		db 'Report %s bugs to %s',0Ah,0
aBugCoreutils@g	db 'bug-coreutils@gnu.org',0 ; DATA XREF: emit_ancillary_info+2Do
		align 10h
; char aSHomePageHttpW[]
aSHomePageHttpW	db '%s home page: <http://www.gnu.org/software/%s/>',0Ah,0
					; DATA XREF: emit_ancillary_info+3Fo
; char domainname[]
domainname	db 'coreutils',0        ; DATA XREF: emit_ancillary_info+4Fo
					; main+56o ...
aGnuCoreutils	db 'GNU coreutils',0    ; DATA XREF: emit_ancillary_info+54o
					; main+DDo
		align 4
; char aGeneralHelpUsi[]
aGeneralHelpUsi	db 'General help using GNU software: <http://www.gnu.org/gethelp/>',0Ah,0
					; DATA XREF: emit_ancillary_info+6Bo
; char s2[]
s2		db 'en_',0              ; DATA XREF: emit_ancillary_info+A2o
; char aReportSTransla[]
aReportSTransla	db 'Report %s translation bugs to <http://translationproject.org/team'
					; DATA XREF: emit_ancillary_info+CCo
		db '/>',0Ah,0
		align 4
; char aForCompleteDoc[]
aForCompleteDoc	db 'For complete documentation, run: info coreutils ',27h,'%s invocation'
					; DATA XREF: emit_ancillary_info+FCo
		db 27h,0Ah,0
aContext	db 'context',0          ; DATA XREF: .rodata:longoptso
aMode		db 'mode',0             ; DATA XREF: .rodata:longoptso
aHelp		db 'help',0             ; DATA XREF: .rodata:longoptso
aVersion	db 'version',0          ; DATA XREF: .rodata:longoptso
		align 20h
; const	option longopts[5]
longopts	option <offset aContext, 1, 0, 5Ah> ; DATA XREF: main+109o
		option <offset aMode, 1, 0, 6Dh> ; "context"
		option <offset aHelp, 0, 0, 0FFFFFF7Eh>
		option <offset aVersion, 0, 0, 0FFFFFF7Dh>
		option	<0>
; char aTrySHelpForMor[]
aTrySHelpForMor	db 'Try `%s --help',27h,' for more information.',0Ah,0
					; DATA XREF: usage+16o
		align 4
; char aUsageSOption__[]
aUsageSOption__	db 'Usage: %s [OPTION]... NAME...',0Ah,0 ; DATA XREF: usage+46o
		align 4
; char aCreateNamedPip[]
aCreateNamedPip	db 'Create named pipes (FIFOs) with the given NAMEs.',0Ah
					; DATA XREF: usage+69o
		db 0Ah,0
		align 4
; char aMandatoryArgum[]
aMandatoryArgum	db 'Mandatory arguments to long options are mandatory for short optio'
					; DATA XREF: usage+8Co
		db 'ns too.',0Ah,0
		align 4
; char aMModeModeSetFi[]
aMModeModeSetFi	db '  -m, --mode=MODE    set file permission bits to MODE, not a=rw -'
					; DATA XREF: usage+AFo
		db ' umask',0Ah,0
		align 4
; char aZContextCtxSet[]
aZContextCtxSet	db '  -Z, --context=CTX  set the SELinux security context of each NAM'
					; DATA XREF: usage+D2o
		db 'E to CTX',0Ah,0
		align 10h
; char aHelpDisplayThi[]
aHelpDisplayThi	db '      --help     display this help and exit',0Ah,0
					; DATA XREF: usage+F5o
		align 10h
; char aVersionOutputV[]
aVersionOutputV	db '      --version  output version information and exit',0Ah,0
					; DATA XREF: usage+118o
; char locale
locale		db 0			; DATA XREF: main+3Fo
; char dirname[]
dirname		db '/usr/local/share/locale',0 ; DATA XREF: main+51o
aDavidMackenzie	db 'David MacKenzie',0  ; DATA XREF: main+D7o
aMkfifo		db 'mkfifo',0           ; DATA XREF: main+E2o
; char shortopts[]
shortopts	db 'm:Z:',0             ; DATA XREF: main+10Eo
; char aMissingOperand[]
aMissingOperand	db 'missing operand',0  ; DATA XREF: main+139o
		align 4
; char aFailedToSetDef[]
aFailedToSetDef	db 'failed to set default file creation context to %s',0
					; DATA XREF: main+18Bo
; char aInvalidMode[]
aInvalidMode	db 'invalid mode',0     ; DATA XREF: main+1D9o
		align 4
; char aModeMustSpecif[]
aModeMustSpecif	db 'mode must specify only file permission bits',0 ; DATA XREF: main+23Do
; char aCannotCreateFi[]
aCannotCreateFi	db 'cannot create fifo %s',0 ; DATA XREF: main+2A9o
_rodata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_eh_frame	segment	dword public 'CONST' use32
		assume cs:_eh_frame
		;org 80009E0h
		dd 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 2	dup(1Ch)
		dd offset loc_8000569-8000F69h
		dd 18h,	80E4100h, 0D420285h, 0CC55405h,	404h, 20h, 3Ch
		dd offset loc_8000569-8000F71h
		dd 11Ch, 80E4100h, 0D420285h, 3834405h,	0C5011403h, 4040CC3h
		dd 18h,	60h
		dd offset loc_8000569-8000E79h
		dd 142h, 80E4100h, 0D420285h, 3834405h,	2Ch, 7Ch
		dd offset loc_8000569-8000D53h
		dd 2F8h, 10C4400h, 5104700h, 46007502h,	7075030Fh, 2071006h
		dd 6107C75h, 10787502h,	74750203h
_eh_frame	ends

; ===========================================================================

; Segment type:	Externs
; extern
; int *_errno_location(void)
		extrn __errno_location:near ; CODE XREF: setfscreatecon+6p
					; main+19Ap ...
		extrn program_name:dword ; DATA	XREF: emit_ancillary_info+7r
					; emit_ancillary_info+B6r ...
		extrn last_component:near ; CODE XREF: emit_ancillary_info+10p
					; emit_ancillary_info+BFp ...
; char *gettext(const char *msgid)
		extrn gettext:near	; CODE XREF: emit_ancillary_info+22p
					; emit_ancillary_info+44p ...
; int printf(const char	*format, ...)
		extrn printf:near	; CODE XREF: emit_ancillary_info+34p
					; emit_ancillary_info+5Ap ...
; struct _IO_FILE *stdout
		extrn stdout:dword	; DATA XREF: emit_ancillary_info+62r
					; usage+60r ...
		extrn fputs_unlocked:near ; CODE XREF: emit_ancillary_info+7Dp
					; usage+7Bp ...
; char *setlocale(int category,	const char *locale)
		extrn setlocale:near	; CODE XREF: emit_ancillary_info+8Cp
					; main+46p
; int strncmp(const char *s1, const char *s2, size_t n)
		extrn strncmp:near	; CODE XREF: emit_ancillary_info+AAp
; struct _IO_FILE *stderr
		extrn stderr:dword	; DATA XREF: usage+25r
; int fprintf(FILE *stream, const char *format,	...)
		extrn fprintf:near	; CODE XREF: usage+30p
; void exit(int	status)
		extrn exit:near		; CODE XREF: usage+13Dp main+F5p ...
		extrn set_program_name:near ; CODE XREF: main+34p
; char *bindtextdomain(const char *domainname, const char *dirname)
		extrn bindtextdomain:near ; CODE XREF: main+5Bp
; char *textdomain(const char *domainname)
		extrn textdomain:near	; CODE XREF: main+6Bp
; void close_stdout(void)
		extrn close_stdout	; DATA XREF: main+76o
; int atexit(void (*func)(void))
		extrn atexit:near	; CODE XREF: main+7Bp
; char *optarg
		extrn optarg:dword	; DATA XREF: main+A9r
					; main:loc_8000329r
		extrn Version:dword	; DATA XREF: main:loc_800033Dr
		extrn version_etc:near	; CODE XREF: main+E8p
; int getopt_long(int argc, char *const	*argv, const char *shortopts, const struct option *longopts, int *longind)
		extrn getopt_long:near	; CODE XREF: main+118p
; int optind
		extrn optind:dword	; DATA XREF: main+12Dr
					; main:loc_80004D5r ...
; void error(int status, int errnum, const char	*format, ...)
		extrn error:near	; CODE XREF: main+14Ep	main+1A6p ...
		extrn quote:near	; CODE XREF: main+17Ep	main+29Cp
		extrn mode_compile:near	; CODE XREF: main+1C5p
; __mode_t umask(__mode_t mask)
		extrn umask:near	; CODE XREF: main+1FBp
		extrn mode_adjust:near	; CODE XREF: main+211p
; void free(void *ptr)
		extrn free:near		; CODE XREF: main+222p
; int mkfifo(const char	*path, __mode_t	mode)
		extrn mkfifo:near	; CODE XREF: main+279p


		end
