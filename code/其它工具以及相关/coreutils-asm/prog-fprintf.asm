;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B611-7234-BB			    |
; |		Doskey Lee, Kingsoft Internet Security Software		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	4A0F09DD975383F40F9240266E5DCA13
; Input	CRC32 :	45F1A9DA

; File Name   :	D:\coreutils-o\prog-fprintf.o
; Format      :	ELF for	Intel 386 (Relocatable)
;
; Source File :	'prog-fprintf.c'

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	byte public 'CODE' use32
		assume cs:_text
		;org 8000000h
		assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void prog_fprintf(FILE *fp, const char *fmt, ...)
		public prog_fprintf
prog_fprintf	proc near

fmt		= dword	ptr -20h
fp		= dword	ptr -1Ch
ap		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= byte ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, [ebp+arg_0]
		mov	[ebp+fp], eax
		mov	eax, [ebp+arg_4]
		mov	[ebp+fmt], eax
		mov	eax, large gs:14h
		mov	[ebp+var_C], eax
		xor	eax, eax
		mov	eax, ds:program_name
		sub	esp, 8
		push	[ebp+fp]
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		push	[ebp+fp]	; stream
		push	2		; n
		push	1		; size
		push	offset word_8000086 ; ptr
		call	fwrite_unlocked
		add	esp, 10h
		lea	eax, [ebp+arg_8]
		mov	[ebp+ap], eax
		mov	eax, [ebp+ap]
		sub	esp, 4
		push	eax
		push	[ebp+fmt]
		push	[ebp+fp]
		call	rpl_vfprintf
		add	esp, 10h
		sub	esp, 8
		push	[ebp+fp]	; stream
		push	0Ah		; c
		call	fputc_unlocked
		add	esp, 10h
		nop
		mov	eax, [ebp+var_C]
		xor	eax, large gs:14h
		jz	short locret_8000082
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

locret_8000082:				; CODE XREF: prog_fprintf+7Bj
		leave

locret_8000083:				; DATA XREF: .eh_frame:080000ACo
		retn
prog_fprintf	endp

_text		ends

; ===========================================================================

; Segment type:	Zero-length
; Segment permissions: Read/Write
_data		segment	byte public 'DATA' use32
_data		ends

; ===========================================================================

; Segment type:	Zero-length
; Segment permissions: Read/Write
_bss		segment	byte public 'BSS' use32
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rodata		segment	byte public 'CONST' use32
		assume cs:_rodata
		;org 8000086h
word_8000086	dw 203Ah		; DATA XREF: prog_fprintf+38o
		db 0
_rodata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_eh_frame	segment	dword public 'CONST' use32
		assume cs:_eh_frame
		;org 800008Ch
		dd 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 2	dup(1Ch)
		dd offset locret_8000083-800012Fh
		dd 84h,	80E4100h, 0D420285h, 0C5800205h, 4040Ch
_eh_frame	ends

; ===========================================================================

; Segment type:	Externs
; extern
		extrn program_name:dword ; DATA	XREF: prog_fprintf+1Dr
		extrn fputs_unlocked:near ; CODE XREF: prog_fprintf+29p
; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
		extrn fwrite_unlocked:near ; CODE XREF:	prog_fprintf+3Dp
		extrn rpl_vfprintf:near	; CODE XREF: prog_fprintf+58p
; int fputc_unlocked(int c, FILE *stream)
		extrn fputc_unlocked:near ; CODE XREF: prog_fprintf+68p
		extrn __stack_chk_fail:near ; CODE XREF: prog_fprintf+7Dp


		end
