;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B611-7234-BB			    |
; |		Doskey Lee, Kingsoft Internet Security Software		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	2AAA8AEEEC19B8E4FC0C79FDFFD1CF7C
; Input	CRC32 :	DA96F283

; File Name   :	D:\coreutils-o\dircolors.o
; Format      :	ELF for	Intel 386 (Relocatable)
;
; Source File :	'dircolors.c'

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	byte public 'CODE' use32
		assume cs:_text
		;org 8000000h
		assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; unsigned __int8 __cdecl to_uchar(char	ch_0)
to_uchar	proc near		; CODE XREF: parse_line+39p
					; parse_line+93p ...

ch_0		= byte ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 4
		mov	eax, [ebp+arg_0]
		mov	[ebp+ch_0], al
		movzx	eax, [ebp+ch_0]
		leave
		retn
to_uchar	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void emit_ancillary_info()
emit_ancillary_info proc near		; CODE XREF: usage+ECp

lc_messages	= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset msgid	; "\nReport %s bugs to %s\n"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset aBugCoreutils@g ; "bug-coreutils@gnu.org"
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	offset aSHomePageHttpW ; "%s home page:	<http://www.gnu.org/softw"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset domainname ; "coreutils"
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aGeneralHelpUsi ; "General help using GNU software: <http:"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		sub	esp, 8
		push	0		; locale
		push	5		; category
		call	setlocale
		add	esp, 10h
		mov	[ebp+lc_messages], eax
		cmp	[ebp+lc_messages], 0
		jz	short loc_80000F8
		sub	esp, 4
		push	3		; n
		push	offset s2	; "en_"
		push	[ebp+lc_messages] ; s1
		call	strncmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_80000F8
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aReportSTransla ; "Report %s translation	bugs to	<http://t"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h

loc_80000F8:				; CODE XREF: emit_ancillary_info+9Bj
					; emit_ancillary_info+B4j
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aForCompleteDoc ; "For complete documentation, run: info	c"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		nop
		mov	ebx, [ebp+var_4]
		leave
		retn
emit_ancillary_info endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; void __cdecl usage(int status)
		public usage
usage		proc near		; CODE XREF: main+C6p main+103p ...

status		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 4
		cmp	[ebp+status], 0
		jz	short loc_800016B
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, ds:stderr
		sub	esp, 4
		push	ebx
		push	edx		; format
		push	eax		; stream
		call	fprintf
		add	esp, 10h
		jmp	loc_800021F
; ---------------------------------------------------------------------------

loc_800016B:				; CODE XREF: usage+Bj
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aUsageSOption__ ; "Usage: %s [OPTION]...	[FILE]\n"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aOutputCommands ; "Output commands to set the LS_COLORS en"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aHelpDisplayThi ; "	--help	   display this	help and "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aVersionOutputV ; "	--version  output version informa"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aIfFileIsSpecif ; "\nIf FILE is specified, read it to dete"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		call	emit_ancillary_info

loc_800021F:				; CODE XREF: usage+38j
		sub	esp, 0Ch
		push	[ebp+status]	; status
		call	exit
usage		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; Shell_syntax guess_shell_syntax()
guess_shell_syntax proc	near		; CODE XREF: main+24Ap

shell		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		sub	esp, 0Ch
		push	offset name	; "SHELL"
		call	getenv
		add	esp, 10h
		mov	[ebp+shell], eax
		cmp	[ebp+shell], 0
		jz	short loc_8000253
		mov	eax, [ebp+shell]
		movzx	eax, byte ptr [eax]
		test	al, al
		jnz	short loc_800025A

loc_8000253:				; CODE XREF: guess_shell_syntax+1Dj
		mov	eax, 2
		jmp	short locret_80002A5
; ---------------------------------------------------------------------------

loc_800025A:				; CODE XREF: guess_shell_syntax+27j
		sub	esp, 0Ch
		push	[ebp+shell]
		call	last_component
		add	esp, 10h
		mov	[ebp+shell], eax
		sub	esp, 8
		push	offset aCsh	; "csh"
		push	[ebp+shell]	; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_8000299
		sub	esp, 8
		push	offset aTcsh	; "tcsh"
		push	[ebp+shell]	; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		jnz	short loc_80002A0

loc_8000299:				; CODE XREF: guess_shell_syntax+56j
		mov	eax, 1
		jmp	short locret_80002A5
; ---------------------------------------------------------------------------

loc_80002A0:				; CODE XREF: guess_shell_syntax+6Dj
		mov	eax, 0

locret_80002A5:				; CODE XREF: guess_shell_syntax+2Ej
					; guess_shell_syntax+74j
		leave
		retn
guess_shell_syntax endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl parse_line(const	char *line, char **keyword, char **arg)
parse_line	proc near		; CODE XREF: dc_parse_stream+E6p

p		= dword	ptr -14h
keyword_start	= dword	ptr -10h
arg_start	= dword	ptr -0Ch
var_4		= dword	ptr -4
line		= dword	ptr  8
keyword		= dword	ptr  0Ch
arg		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, [ebp+keyword]
		mov	dword ptr [eax], 0
		mov	eax, [ebp+arg]
		mov	dword ptr [eax], 0
		mov	eax, [ebp+line]
		mov	[ebp+p], eax
		jmp	short loc_80002CC
; ---------------------------------------------------------------------------

loc_80002C8:				; CODE XREF: parse_line+55j
		add	[ebp+p], 1

loc_80002CC:				; CODE XREF: parse_line+1Fj
		call	__ctype_b_loc
		mov	ebx, [eax]
		mov	eax, [ebp+p]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; ch_0
		call	to_uchar
		add	esp, 10h
		movzx	eax, al
		add	eax, eax
		add	eax, ebx
		movzx	eax, word ptr [eax]
		movzx	eax, ax
		and	eax, 2000h
		test	eax, eax
		jnz	short loc_80002C8
		mov	eax, [ebp+p]
		movzx	eax, byte ptr [eax]
		test	al, al
		jz	loc_8000464
		mov	eax, [ebp+p]
		movzx	eax, byte ptr [eax]
		cmp	al, 23h
		jz	loc_8000464
		mov	eax, [ebp+p]
		mov	[ebp+keyword_start], eax
		jmp	short loc_8000326
; ---------------------------------------------------------------------------

loc_8000322:				; CODE XREF: parse_line+B9j
		add	[ebp+p], 1

loc_8000326:				; CODE XREF: parse_line+79j
		call	__ctype_b_loc
		mov	ebx, [eax]
		mov	eax, [ebp+p]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; ch_0
		call	to_uchar
		add	esp, 10h
		movzx	eax, al
		add	eax, eax
		add	eax, ebx
		movzx	eax, word ptr [eax]
		movzx	eax, ax
		and	eax, 2000h
		test	eax, eax
		jnz	short loc_8000362
		mov	eax, [ebp+p]
		movzx	eax, byte ptr [eax]
		test	al, al
		jnz	short loc_8000322

loc_8000362:				; CODE XREF: parse_line+AFj
		mov	edx, [ebp+p]
		mov	eax, [ebp+keyword_start]
		sub	edx, eax
		mov	eax, edx
		sub	esp, 8
		push	eax		; size_t
		push	[ebp+keyword_start] ; char *
		call	xstrndup
		add	esp, 10h
		mov	edx, eax
		mov	eax, [ebp+keyword]
		mov	[eax], edx
		mov	eax, [ebp+p]
		movzx	eax, byte ptr [eax]
		test	al, al
		jz	loc_8000467

loc_8000390:				; CODE XREF: parse_line+11Dj
		add	[ebp+p], 1
		call	__ctype_b_loc
		mov	ebx, [eax]
		mov	eax, [ebp+p]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; ch_0
		call	to_uchar
		add	esp, 10h
		movzx	eax, al
		add	eax, eax
		add	eax, ebx
		movzx	eax, word ptr [eax]
		movzx	eax, ax
		and	eax, 2000h
		test	eax, eax
		jnz	short loc_8000390
		mov	eax, [ebp+p]
		movzx	eax, byte ptr [eax]
		test	al, al
		jz	loc_800046A
		mov	eax, [ebp+p]
		movzx	eax, byte ptr [eax]
		cmp	al, 23h
		jz	loc_800046A
		mov	eax, [ebp+p]
		mov	[ebp+arg_start], eax
		jmp	short loc_80003EE
; ---------------------------------------------------------------------------

loc_80003EA:				; CODE XREF: parse_line+159j
		add	[ebp+p], 1

loc_80003EE:				; CODE XREF: parse_line+141j
		mov	eax, [ebp+p]
		movzx	eax, byte ptr [eax]
		test	al, al
		jz	short loc_8000402
		mov	eax, [ebp+p]
		movzx	eax, byte ptr [eax]
		cmp	al, 23h
		jnz	short loc_80003EA

loc_8000402:				; CODE XREF: parse_line+14Fj
		sub	[ebp+p], 1
		jmp	short loc_800040C
; ---------------------------------------------------------------------------

loc_8000408:				; CODE XREF: parse_line+195j
		sub	[ebp+p], 1

loc_800040C:				; CODE XREF: parse_line+15Fj
		call	__ctype_b_loc
		mov	ebx, [eax]
		mov	eax, [ebp+p]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; ch_0
		call	to_uchar
		add	esp, 10h
		movzx	eax, al
		add	eax, eax
		add	eax, ebx
		movzx	eax, word ptr [eax]
		movzx	eax, ax
		and	eax, 2000h
		test	eax, eax
		jnz	short loc_8000408
		add	[ebp+p], 1
		mov	edx, [ebp+p]
		mov	eax, [ebp+arg_start]
		sub	edx, eax
		mov	eax, edx
		sub	esp, 8
		push	eax		; size_t
		push	[ebp+arg_start]	; char *
		call	xstrndup
		add	esp, 10h
		mov	edx, eax
		mov	eax, [ebp+arg]
		mov	[eax], edx
		jmp	short loc_800046B
; ---------------------------------------------------------------------------

loc_8000464:				; CODE XREF: parse_line+5Fj
					; parse_line+6Dj
		nop
		jmp	short loc_800046B
; ---------------------------------------------------------------------------

loc_8000467:				; CODE XREF: parse_line+E3j
		nop
		jmp	short loc_800046B
; ---------------------------------------------------------------------------

loc_800046A:				; CODE XREF: parse_line+127j
					; parse_line+135j
		nop

loc_800046B:				; CODE XREF: parse_line+1BBj
					; parse_line+1BEj ...
		mov	ebx, [ebp+var_4]
		leave
		retn
parse_line	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl append_quoted(const char	*str)
append_quoted	proc near		; CODE XREF: dc_parse_stream+1FAp
					; dc_parse_stream+245p	...

need_backslash	= byte ptr -1Dh
__o		= dword	ptr -1Ch
__o_0		= dword	ptr -18h
__o_1		= dword	ptr -14h
__o_2		= dword	ptr -10h
__o_3		= dword	ptr -0Ch
str		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+need_backslash], 1
		jmp	loc_800061E
; ---------------------------------------------------------------------------

loc_800047F:				; CODE XREF: append_quoted+1B6j
		mov	eax, [ebp+str]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		cmp	eax, 3Dh
		jz	loc_8000592
		cmp	eax, 3Dh
		jg	short loc_80004A9
		cmp	eax, 27h
		jz	short loc_80004C0
		cmp	eax, 3Ah
		jz	loc_8000592
		jmp	loc_80005D4
; ---------------------------------------------------------------------------

loc_80004A9:				; CODE XREF: append_quoted+24j
		cmp	eax, 5Ch
		jz	loc_800057A
		cmp	eax, 5Eh
		jz	loc_800057A
		jmp	loc_80005D4
; ---------------------------------------------------------------------------

loc_80004C0:				; CODE XREF: append_quoted+29j
		mov	[ebp+__o], offset lsc_obstack
		mov	eax, [ebp+__o]
		mov	eax, [eax+0Ch]
		lea	edx, [eax+1]
		mov	eax, [ebp+__o]
		mov	eax, [eax+10h]
		cmp	edx, eax
		jbe	short loc_80004EA
		sub	esp, 8
		push	1		; int
		push	[ebp+__o]	; struct obstack *
		call	_obstack_newchunk
		add	esp, 10h

loc_80004EA:				; CODE XREF: append_quoted+68j
		mov	eax, [ebp+__o]
		mov	eax, [eax+0Ch]
		lea	ecx, [eax+1]
		mov	edx, [ebp+__o]
		mov	[edx+0Ch], ecx
		mov	byte ptr [eax],	27h
		mov	[ebp+__o_0], offset lsc_obstack
		mov	eax, [ebp+__o_0]
		mov	eax, [eax+0Ch]
		lea	edx, [eax+1]
		mov	eax, [ebp+__o_0]
		mov	eax, [eax+10h]
		cmp	edx, eax
		jbe	short loc_8000526
		sub	esp, 8
		push	1		; int
		push	[ebp+__o_0]	; struct obstack *
		call	_obstack_newchunk
		add	esp, 10h

loc_8000526:				; CODE XREF: append_quoted+A4j
		mov	eax, [ebp+__o_0]
		mov	eax, [eax+0Ch]
		lea	ecx, [eax+1]
		mov	edx, [ebp+__o_0]
		mov	[edx+0Ch], ecx
		mov	byte ptr [eax],	5Ch
		mov	[ebp+__o_1], offset lsc_obstack
		mov	eax, [ebp+__o_1]
		mov	eax, [eax+0Ch]
		lea	edx, [eax+1]
		mov	eax, [ebp+__o_1]
		mov	eax, [eax+10h]
		cmp	edx, eax
		jbe	short loc_8000562
		sub	esp, 8
		push	1		; int
		push	[ebp+__o_1]	; struct obstack *
		call	_obstack_newchunk
		add	esp, 10h

loc_8000562:				; CODE XREF: append_quoted+E0j
		mov	eax, [ebp+__o_1]
		mov	eax, [eax+0Ch]
		lea	ecx, [eax+1]
		mov	edx, [ebp+__o_1]
		mov	[edx+0Ch], ecx
		mov	byte ptr [eax],	27h
		mov	[ebp+need_backslash], 1
		jmp	short loc_80005D9
; ---------------------------------------------------------------------------

loc_800057A:				; CODE XREF: append_quoted+3Cj
					; append_quoted+45j
		movzx	eax, [ebp+need_backslash]
		test	eax, eax
		setnz	al
		xor	eax, 1
		movzx	eax, al
		mov	[ebp+need_backslash], al
		and	[ebp+need_backslash], 1
		jmp	short loc_80005D9
; ---------------------------------------------------------------------------

loc_8000592:				; CODE XREF: append_quoted+1Bj
					; append_quoted+2Ej
		cmp	[ebp+need_backslash], 0
		jz	short loc_80005D4
		mov	[ebp+__o_2], offset lsc_obstack
		mov	eax, [ebp+__o_2]
		mov	eax, [eax+0Ch]
		lea	edx, [eax+1]
		mov	eax, [ebp+__o_2]
		mov	eax, [eax+10h]
		cmp	edx, eax
		jbe	short loc_80005C2
		sub	esp, 8
		push	1		; int
		push	[ebp+__o_2]	; struct obstack *
		call	_obstack_newchunk
		add	esp, 10h

loc_80005C2:				; CODE XREF: append_quoted+140j
		mov	eax, [ebp+__o_2]
		mov	eax, [eax+0Ch]
		lea	ecx, [eax+1]
		mov	edx, [ebp+__o_2]
		mov	[edx+0Ch], ecx
		mov	byte ptr [eax],	5Ch

loc_80005D4:				; CODE XREF: append_quoted+34j
					; append_quoted+4Bj ...
		mov	[ebp+need_backslash], 1
		nop

loc_80005D9:				; CODE XREF: append_quoted+108j
					; append_quoted+120j
		mov	[ebp+__o_3], offset lsc_obstack
		mov	eax, [ebp+__o_3]
		mov	eax, [eax+0Ch]
		lea	edx, [eax+1]
		mov	eax, [ebp+__o_3]
		mov	eax, [eax+10h]
		cmp	edx, eax
		jbe	short loc_8000603
		sub	esp, 8
		push	1		; int
		push	[ebp+__o_3]	; struct obstack *
		call	_obstack_newchunk
		add	esp, 10h

loc_8000603:				; CODE XREF: append_quoted+181j
		mov	eax, [ebp+__o_3]
		mov	eax, [eax+0Ch]
		lea	ecx, [eax+1]
		mov	edx, [ebp+__o_3]
		mov	[edx+0Ch], ecx
		mov	edx, [ebp+str]
		movzx	edx, byte ptr [edx]
		mov	[eax], dl
		add	[ebp+str], 1

loc_800061E:				; CODE XREF: append_quoted+Aj
		mov	eax, [ebp+str]
		movzx	eax, byte ptr [eax]
		test	al, al
		jnz	loc_800047F
		nop
		leave
		retn
append_quoted	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; _Bool	__cdecl	dc_parse_stream(FILE *fp, const	char *filename)
dc_parse_stream	proc near		; CODE XREF: dc_parse_file+68p
					; main+2A2p

filename	= dword	ptr -70h
fp		= dword	ptr -6Ch
ok		= byte ptr -5Ah
unrecognized	= byte ptr -59h
input_line	= dword	ptr -58h
input_line_size	= dword	ptr -54h
keywd		= dword	ptr -50h
arg		= dword	ptr -4Ch
line_number	= dword	ptr -48h
next_G_line	= dword	ptr -44h
line		= dword	ptr -40h
term		= dword	ptr -3Ch
state		= dword	ptr -38h
i		= dword	ptr -34h
__o		= dword	ptr -30h
__o_0		= dword	ptr -2Ch
__o_1		= dword	ptr -28h
__o_2		= dword	ptr -24h
__o_3		= dword	ptr -20h
__o_4		= dword	ptr -1Ch
__o_5		= dword	ptr -18h
__o_6		= dword	ptr -14h
__o_7		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 70h
		mov	eax, [ebp+arg_0]
		mov	[ebp+fp], eax
		mov	eax, [ebp+arg_4]
		mov	[ebp+filename],	eax
		mov	eax, large gs:14h
		mov	[ebp+var_C], eax
		xor	eax, eax
		mov	[ebp+line_number], 0
		mov	[ebp+next_G_line], offset G_line
		mov	[ebp+input_line], 0
		mov	[ebp+input_line_size], 0
		mov	[ebp+ok], 1
		mov	[ebp+state], 3
		sub	esp, 0Ch
		push	offset aTerm	; "TERM"
		call	getenv
		add	esp, 10h
		mov	[ebp+term], eax
		cmp	[ebp+term], 0
		jz	short loc_8000698
		mov	eax, [ebp+term]
		movzx	eax, byte ptr [eax]
		test	al, al
		jnz	short loc_800069F

loc_8000698:				; CODE XREF: dc_parse_stream+5Dj
		mov	[ebp+term], offset aNone ; "none"

loc_800069F:				; CODE XREF: dc_parse_stream+67j
					; dc_parse_stream+583j	...
		add	[ebp+line_number], 1
		cmp	[ebp+fp], 0
		jz	short loc_80006DF
		sub	esp, 4
		push	[ebp+fp]
		lea	eax, [ebp+input_line_size]
		push	eax
		lea	eax, [ebp+input_line]
		push	eax
		call	getline
		add	esp, 10h
		test	eax, eax
		jg	short loc_80006D7
		mov	eax, [ebp+input_line]
		sub	esp, 0Ch
		push	eax		; ptr
		call	free
		add	esp, 10h
		jmp	loc_8000BB8
; ---------------------------------------------------------------------------

loc_80006D7:				; CODE XREF: dc_parse_stream+92j
		mov	eax, [ebp+input_line]
		mov	[ebp+line], eax
		jmp	short loc_8000707
; ---------------------------------------------------------------------------

loc_80006DF:				; CODE XREF: dc_parse_stream+78j
		mov	eax, offset aNormal ; "NORMAL"
		cmp	[ebp+next_G_line], eax
		jz	loc_8000BB7
		mov	eax, [ebp+next_G_line]
		mov	[ebp+line], eax
		sub	esp, 0Ch
		push	[ebp+next_G_line] ; s
		call	strlen
		add	esp, 10h
		add	eax, 1
		add	[ebp+next_G_line], eax

loc_8000707:				; CODE XREF: dc_parse_stream+AEj
		sub	esp, 4
		lea	eax, [ebp+arg]
		push	eax		; arg
		lea	eax, [ebp+keywd]
		push	eax		; keyword
		push	[ebp+line]	; line
		call	parse_line
		add	esp, 10h
		mov	eax, [ebp+keywd]
		test	eax, eax
		jz	loc_8000BCA
		mov	eax, [ebp+arg]
		test	eax, eax
		jnz	short loc_800076D
		sub	esp, 0Ch
		push	offset aSLuInvalidLine ; "%s:%lu: invalid line;	 missing second	t"...
		call	gettext
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+line_number]
		push	[ebp+filename]
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 20h
		mov	[ebp+ok], 0
		mov	eax, [ebp+keywd]
		sub	esp, 0Ch
		push	eax		; ptr
		call	free
		add	esp, 10h
		jmp	loc_8000BCB
; ---------------------------------------------------------------------------

loc_800076D:				; CODE XREF: dc_parse_stream+FEj
		mov	[ebp+unrecognized], 0
		mov	eax, [ebp+keywd]
		sub	esp, 8
		push	offset aTerm	; "TERM"
		push	eax
		call	c_strcasecmp
		add	esp, 10h
		test	eax, eax
		jnz	short loc_80007C1
		mov	eax, [ebp+arg]
		sub	esp, 8
		push	[ebp+term]	; s2
		push	eax		; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		jnz	short loc_80007AB
		mov	[ebp+state], 2
		jmp	loc_8000B2C
; ---------------------------------------------------------------------------

loc_80007AB:				; CODE XREF: dc_parse_stream+16Ej
		cmp	[ebp+state], 2
		jz	loc_8000B2C
		mov	[ebp+state], 0
		jmp	loc_8000B2C
; ---------------------------------------------------------------------------

loc_80007C1:				; CODE XREF: dc_parse_stream+158j
		cmp	[ebp+state], 2
		jnz	short loc_80007CE
		mov	[ebp+state], 1

loc_80007CE:				; CODE XREF: dc_parse_stream+196j
		cmp	[ebp+state], 0
		jz	loc_8000B28
		mov	eax, [ebp+keywd]
		movzx	eax, byte ptr [eax]
		cmp	al, 2Eh
		jnz	loc_80008BD
		mov	[ebp+__o], offset lsc_obstack
		mov	eax, [ebp+__o]
		mov	eax, [eax+0Ch]
		lea	edx, [eax+1]
		mov	eax, [ebp+__o]
		mov	eax, [eax+10h]
		cmp	edx, eax
		jbe	short loc_8000810
		sub	esp, 8
		push	1		; int
		push	[ebp+__o]	; struct obstack *
		call	_obstack_newchunk
		add	esp, 10h

loc_8000810:				; CODE XREF: dc_parse_stream+1CFj
		mov	eax, [ebp+__o]
		mov	eax, [eax+0Ch]
		lea	ecx, [eax+1]
		mov	edx, [ebp+__o]
		mov	[edx+0Ch], ecx
		mov	byte ptr [eax],	2Ah
		mov	eax, [ebp+keywd]
		sub	esp, 0Ch
		push	eax		; str
		call	append_quoted
		add	esp, 10h
		mov	[ebp+__o_0], offset lsc_obstack
		mov	eax, [ebp+__o_0]
		mov	eax, [eax+0Ch]
		lea	edx, [eax+1]
		mov	eax, [ebp+__o_0]
		mov	eax, [eax+10h]
		cmp	edx, eax
		jbe	short loc_800085B
		sub	esp, 8
		push	1		; int
		push	[ebp+__o_0]	; struct obstack *
		call	_obstack_newchunk
		add	esp, 10h

loc_800085B:				; CODE XREF: dc_parse_stream+21Aj
		mov	eax, [ebp+__o_0]
		mov	eax, [eax+0Ch]
		lea	ecx, [eax+1]
		mov	edx, [ebp+__o_0]
		mov	[edx+0Ch], ecx
		mov	byte ptr [eax],	3Dh
		mov	eax, [ebp+arg]
		sub	esp, 0Ch
		push	eax		; str
		call	append_quoted
		add	esp, 10h
		mov	[ebp+__o_1], offset lsc_obstack
		mov	eax, [ebp+__o_1]
		mov	eax, [eax+0Ch]
		lea	edx, [eax+1]
		mov	eax, [ebp+__o_1]
		mov	eax, [eax+10h]
		cmp	edx, eax
		jbe	short loc_80008A6
		sub	esp, 8
		push	1		; int
		push	[ebp+__o_1]	; struct obstack *
		call	_obstack_newchunk
		add	esp, 10h

loc_80008A6:				; CODE XREF: dc_parse_stream+265j
		mov	eax, [ebp+__o_1]
		mov	eax, [eax+0Ch]
		lea	ecx, [eax+1]
		mov	edx, [ebp+__o_1]
		mov	[edx+0Ch], ecx
		mov	byte ptr [eax],	3Ah
		jmp	loc_8000B2C
; ---------------------------------------------------------------------------

loc_80008BD:				; CODE XREF: dc_parse_stream+1B1j
		mov	eax, [ebp+keywd]
		movzx	eax, byte ptr [eax]
		cmp	al, 2Ah
		jnz	loc_8000966
		mov	eax, [ebp+keywd]
		sub	esp, 0Ch
		push	eax		; str
		call	append_quoted
		add	esp, 10h
		mov	[ebp+__o_2], offset lsc_obstack
		mov	eax, [ebp+__o_2]
		mov	eax, [eax+0Ch]
		lea	edx, [eax+1]
		mov	eax, [ebp+__o_2]
		mov	eax, [eax+10h]
		cmp	edx, eax
		jbe	short loc_8000904
		sub	esp, 8
		push	1		; int
		push	[ebp+__o_2]	; struct obstack *
		call	_obstack_newchunk
		add	esp, 10h

loc_8000904:				; CODE XREF: dc_parse_stream+2C3j
		mov	eax, [ebp+__o_2]
		mov	eax, [eax+0Ch]
		lea	ecx, [eax+1]
		mov	edx, [ebp+__o_2]
		mov	[edx+0Ch], ecx
		mov	byte ptr [eax],	3Dh
		mov	eax, [ebp+arg]
		sub	esp, 0Ch
		push	eax		; str
		call	append_quoted
		add	esp, 10h
		mov	[ebp+__o_3], offset lsc_obstack
		mov	eax, [ebp+__o_3]
		mov	eax, [eax+0Ch]
		lea	edx, [eax+1]
		mov	eax, [ebp+__o_3]
		mov	eax, [eax+10h]
		cmp	edx, eax
		jbe	short loc_800094F
		sub	esp, 8
		push	1		; int
		push	[ebp+__o_3]	; struct obstack *
		call	_obstack_newchunk
		add	esp, 10h

loc_800094F:				; CODE XREF: dc_parse_stream+30Ej
		mov	eax, [ebp+__o_3]
		mov	eax, [eax+0Ch]
		lea	ecx, [eax+1]
		mov	edx, [ebp+__o_3]
		mov	[edx+0Ch], ecx
		mov	byte ptr [eax],	3Ah
		jmp	loc_8000B2C
; ---------------------------------------------------------------------------

loc_8000966:				; CODE XREF: dc_parse_stream+296j
		mov	eax, [ebp+keywd]
		sub	esp, 8
		push	offset aOptions	; "OPTIONS"
		push	eax
		call	c_strcasecmp
		add	esp, 10h
		test	eax, eax
		jz	loc_8000B2C
		mov	eax, [ebp+keywd]
		sub	esp, 8
		push	offset aColor	; "COLOR"
		push	eax
		call	c_strcasecmp
		add	esp, 10h
		test	eax, eax
		jz	loc_8000B2C
		mov	eax, [ebp+keywd]
		sub	esp, 8
		push	offset aEightbit ; "EIGHTBIT"
		push	eax
		call	c_strcasecmp
		add	esp, 10h
		test	eax, eax
		jz	loc_8000B2C
		mov	[ebp+i], 0
		jmp	short loc_80009E5
; ---------------------------------------------------------------------------

loc_80009C3:				; CODE XREF: dc_parse_stream+3C2j
		mov	eax, [ebp+i]
		mov	edx, ds:slack_codes[eax*4]
		mov	eax, [ebp+keywd]
		sub	esp, 8
		push	edx
		push	eax
		call	c_strcasecmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_80009F5
		add	[ebp+i], 1

loc_80009E5:				; CODE XREF: dc_parse_stream+392j
		mov	eax, [ebp+i]
		mov	eax, ds:slack_codes[eax*4]
		test	eax, eax
		jnz	short loc_80009C3
		jmp	short loc_80009F6
; ---------------------------------------------------------------------------

loc_80009F5:				; CODE XREF: dc_parse_stream+3B0j
		nop

loc_80009F6:				; CODE XREF: dc_parse_stream+3C4j
		mov	eax, [ebp+i]
		mov	eax, ds:slack_codes[eax*4]
		test	eax, eax
		jz	loc_8000B22
		mov	[ebp+__o_4], offset lsc_obstack
		mov	eax, [ebp+__o_4]
		mov	eax, [eax+0Ch]
		lea	edx, [eax+1]
		mov	eax, [ebp+__o_4]
		mov	eax, [eax+10h]
		cmp	edx, eax
		jbe	short loc_8000A32
		sub	esp, 8
		push	1		; int
		push	[ebp+__o_4]	; struct obstack *
		call	_obstack_newchunk
		add	esp, 10h

loc_8000A32:				; CODE XREF: dc_parse_stream+3F1j
		mov	eax, [ebp+__o_4]
		mov	eax, [eax+0Ch]
		lea	ecx, [eax+1]
		mov	edx, [ebp+__o_4]
		mov	[edx+0Ch], ecx
		mov	edx, [ebp+i]
		mov	edx, ds:ls_codes[edx*4]
		movzx	edx, byte ptr [edx]
		mov	[eax], dl
		mov	[ebp+__o_5], offset lsc_obstack
		mov	eax, [ebp+__o_5]
		mov	eax, [eax+0Ch]
		lea	edx, [eax+1]
		mov	eax, [ebp+__o_5]
		mov	eax, [eax+10h]
		cmp	edx, eax
		jbe	short loc_8000A7A
		sub	esp, 8
		push	1		; int
		push	[ebp+__o_5]	; struct obstack *
		call	_obstack_newchunk
		add	esp, 10h

loc_8000A7A:				; CODE XREF: dc_parse_stream+439j
		mov	eax, [ebp+__o_5]
		mov	eax, [eax+0Ch]
		lea	ecx, [eax+1]
		mov	edx, [ebp+__o_5]
		mov	[edx+0Ch], ecx
		mov	edx, [ebp+i]
		mov	edx, ds:ls_codes[edx*4]
		movzx	edx, byte ptr [edx+1]
		mov	[eax], dl
		mov	[ebp+__o_6], offset lsc_obstack
		mov	eax, [ebp+__o_6]
		mov	eax, [eax+0Ch]
		lea	edx, [eax+1]
		mov	eax, [ebp+__o_6]
		mov	eax, [eax+10h]
		cmp	edx, eax
		jbe	short loc_8000AC3
		sub	esp, 8
		push	1		; int
		push	[ebp+__o_6]	; struct obstack *
		call	_obstack_newchunk
		add	esp, 10h

loc_8000AC3:				; CODE XREF: dc_parse_stream+482j
		mov	eax, [ebp+__o_6]
		mov	eax, [eax+0Ch]
		lea	ecx, [eax+1]
		mov	edx, [ebp+__o_6]
		mov	[edx+0Ch], ecx
		mov	byte ptr [eax],	3Dh
		mov	eax, [ebp+arg]
		sub	esp, 0Ch
		push	eax		; str
		call	append_quoted
		add	esp, 10h
		mov	[ebp+__o_7], offset lsc_obstack
		mov	eax, [ebp+__o_7]
		mov	eax, [eax+0Ch]
		lea	edx, [eax+1]
		mov	eax, [ebp+__o_7]
		mov	eax, [eax+10h]
		cmp	edx, eax
		jbe	short loc_8000B0E
		sub	esp, 8
		push	1		; int
		push	[ebp+__o_7]	; struct obstack *
		call	_obstack_newchunk
		add	esp, 10h

loc_8000B0E:				; CODE XREF: dc_parse_stream+4CDj
		mov	eax, [ebp+__o_7]
		mov	eax, [eax+0Ch]
		lea	ecx, [eax+1]
		mov	edx, [ebp+__o_7]
		mov	[edx+0Ch], ecx
		mov	byte ptr [eax],	3Ah
		jmp	short loc_8000B2C
; ---------------------------------------------------------------------------

loc_8000B22:				; CODE XREF: dc_parse_stream+3D3j
		mov	[ebp+unrecognized], 1
		jmp	short loc_8000B2C
; ---------------------------------------------------------------------------

loc_8000B28:				; CODE XREF: dc_parse_stream+1A3j
		mov	[ebp+unrecognized], 1

loc_8000B2C:				; CODE XREF: dc_parse_stream+177j
					; dc_parse_stream+180j	...
		cmp	[ebp+unrecognized], 0
		jz	short loc_8000B94
		cmp	[ebp+state], 2
		jz	short loc_8000B3E
		cmp	[ebp+state], 1
		jnz	short loc_8000B94

loc_8000B3E:				; CODE XREF: dc_parse_stream+507j
		mov	esi, [ebp+keywd]
		cmp	[ebp+filename],	0
		jz	short loc_8000B59
		sub	esp, 0Ch
		push	[ebp+filename]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		jmp	short loc_8000B6B
; ---------------------------------------------------------------------------

loc_8000B59:				; CODE XREF: dc_parse_stream+516j
		sub	esp, 0Ch
		push	offset aInternal ; "<internal>"
		call	gettext
		add	esp, 10h
		mov	ebx, eax

loc_8000B6B:				; CODE XREF: dc_parse_stream+528j
		sub	esp, 0Ch
		push	offset aSLuUnrecognize ; "%s:%lu: unrecognized keyword %s"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	esi
		push	[ebp+line_number]
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 20h
		mov	[ebp+ok], 0

loc_8000B94:				; CODE XREF: dc_parse_stream+501j
					; dc_parse_stream+50Dj
		mov	eax, [ebp+keywd]
		sub	esp, 0Ch
		push	eax		; ptr
		call	free
		add	esp, 10h
		mov	eax, [ebp+arg]
		sub	esp, 0Ch
		push	eax		; ptr
		call	free
		add	esp, 10h
		jmp	loc_800069F
; ---------------------------------------------------------------------------

loc_8000BB7:				; CODE XREF: dc_parse_stream+B8j
		nop

loc_8000BB8:				; CODE XREF: dc_parse_stream+A3j
		movzx	eax, [ebp+ok]
		mov	esi, [ebp+var_C]
		xor	esi, large gs:14h
		jz	short loc_8000BD5
		jmp	short loc_8000BD0
; ---------------------------------------------------------------------------

loc_8000BCA:				; CODE XREF: dc_parse_stream+F3j
		nop

loc_8000BCB:				; CODE XREF: dc_parse_stream+139j
		jmp	loc_800069F
; ---------------------------------------------------------------------------

loc_8000BD0:				; CODE XREF: dc_parse_stream+599j
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_8000BD5:				; CODE XREF: dc_parse_stream+597j
		lea	esp, [ebp-8]
		pop	ebx
		pop	esi
		pop	ebp
		retn
dc_parse_stream	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; _Bool	__cdecl	dc_parse_file(const char *filename)
dc_parse_file	proc near		; CODE XREF: main+2B8p

ok		= byte ptr -9
var_4		= dword	ptr -4
filename	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		sub	esp, 8
		push	offset asc_8002948 ; "-"
		push	[ebp+filename]	; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_8000C38
		mov	eax, ds:stdin
		sub	esp, 4
		push	eax
		push	offset aR	; "r"
		push	[ebp+filename]
		call	freopen_safer
		add	esp, 10h
		test	eax, eax
		jnz	short loc_8000C38
		call	__errno_location
		mov	eax, [eax]
		push	[ebp+filename]
		push	offset format	; "%s"
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	eax, 0
		jmp	short loc_8000C97
; ---------------------------------------------------------------------------

loc_8000C38:				; CODE XREF: dc_parse_file+1Cj
					; dc_parse_file+39j
		mov	eax, ds:stdin
		sub	esp, 8
		push	[ebp+filename]	; filename
		push	eax		; fp
		call	dc_parse_stream
		add	esp, 10h
		mov	[ebp+ok], al
		mov	eax, ds:stdin
		sub	esp, 0Ch
		push	eax		; stream
		call	fclose
		add	esp, 10h
		test	eax, eax
		jz	short loc_8000C93
		sub	esp, 0Ch
		push	[ebp+filename]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		push	ebx
		push	offset format	; "%s"
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	eax, 0
		jmp	short loc_8000C97
; ---------------------------------------------------------------------------

loc_8000C93:				; CODE XREF: dc_parse_file+86j
		movzx	eax, [ebp+ok]

loc_8000C97:				; CODE XREF: dc_parse_file+5Aj
					; dc_parse_file+B5j
		mov	ebx, [ebp+var_4]
		leave
		retn
dc_parse_file	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public main
main		proc near

ok		= byte ptr -32h
print_database	= byte ptr -31h
syntax		= dword	ptr -30h
p		= dword	ptr -2Ch
prefix		= dword	ptr -28h
suffix		= dword	ptr -24h
optc		= dword	ptr -20h
__o		= dword	ptr -1Ch
len		= dword	ptr -18h
__o1		= dword	ptr -14h
__value		= dword	ptr -10h
s		= dword	ptr -0Ch
argc		= dword	ptr  0Ch
argv		= dword	ptr  10h
envp		= dword	ptr  14h

		lea	ecx, [esp+4]
		and	esp, 0FFFFFFF0h
		push	dword ptr [ecx-4]
		push	ebp
		mov	ebp, esp
		push	ebx
		push	ecx
		sub	esp, 30h
		mov	ebx, ecx
		mov	[ebp+ok], 1
		mov	[ebp+syntax], 2
		mov	[ebp+print_database], 0
		mov	eax, [ebx+4]
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	set_program_name
		add	esp, 10h
		sub	esp, 8
		push	offset locale	; locale
		push	6		; category
		call	setlocale
		add	esp, 10h
		sub	esp, 8
		push	offset dirname	; "/usr/local/share/locale"
		push	offset domainname ; "coreutils"
		call	bindtextdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset domainname ; "coreutils"
		call	textdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset close_stdout ; func
		call	atexit
		add	esp, 10h
		jmp	loc_8000DA4
; ---------------------------------------------------------------------------

loc_8000D1C:				; CODE XREF: main+12Bj
		mov	eax, [ebp+optc]
		cmp	eax, 62h
		jz	short loc_8000D45
		cmp	eax, 62h
		jg	short loc_8000D39
		cmp	eax, 0FFFFFF7Dh
		jz	short loc_8000D67
		cmp	eax, 0FFFFFF7Eh
		jz	short loc_8000D5D
		jmp	short loc_8000D9A
; ---------------------------------------------------------------------------

loc_8000D39:				; CODE XREF: main+8Bj
		cmp	eax, 63h
		jz	short loc_8000D4E
		cmp	eax, 70h
		jz	short loc_8000D57
		jmp	short loc_8000D9A
; ---------------------------------------------------------------------------

loc_8000D45:				; CODE XREF: main+86j
		mov	[ebp+syntax], 0
		jmp	short loc_8000DA4
; ---------------------------------------------------------------------------

loc_8000D4E:				; CODE XREF: main+A0j
		mov	[ebp+syntax], 1
		jmp	short loc_8000DA4
; ---------------------------------------------------------------------------

loc_8000D57:				; CODE XREF: main+A5j
		mov	[ebp+print_database], 1
		jmp	short loc_8000DA4
; ---------------------------------------------------------------------------

loc_8000D5D:				; CODE XREF: main+99j
		sub	esp, 0Ch
		push	0		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8000D67:				; CODE XREF: main+92j
		mov	edx, ds:Version
		mov	eax, ds:stdout
		sub	esp, 8
		push	0
		push	offset aH_PeterAnvin ; "H. Peter Anvin"
		push	edx
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	offset aDircolors ; "dircolors"
		push	eax
		call	version_etc
		add	esp, 20h
		sub	esp, 0Ch
		push	0		; status
		call	exit
; ---------------------------------------------------------------------------

loc_8000D9A:				; CODE XREF: main+9Bj main+A7j
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8000DA4:				; CODE XREF: main+7Bj main+B0j ...
		sub	esp, 0Ch
		push	0		; longind
		push	offset long_options ; longopts
		push	offset shortopts ; "bcp"
		push	dword ptr [ebx+4] ; argv
		push	dword ptr [ebx]	; argc
		call	getopt_long
		add	esp, 20h
		mov	[ebp+optc], eax
		cmp	[ebp+optc], 0FFFFFFFFh
		jnz	loc_8000D1C
		mov	eax, ds:optind
		sub	[ebx], eax
		mov	eax, ds:optind
		shl	eax, 2
		add	[ebx+4], eax
		cmp	[ebp+print_database], 0
		jz	short loc_8000E15
		cmp	[ebp+syntax], 2
		jz	short loc_8000E15
		sub	esp, 0Ch
		push	offset aTheOptionsToOu ; "the options to output	dircolors' intern"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8000E15:				; CODE XREF: main+147j	main+14Dj
		movzx	eax, [ebp+print_database]
		xor	eax, 1
		movzx	eax, al
		cmp	eax, [ebx]
		jge	short loc_8000EA0
		movzx	eax, [ebp+print_database]
		xor	eax, 1
		movzx	eax, al
		lea	edx, ds:0[eax*4]
		mov	eax, [ebx+4]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aExtraOperandS ;	"extra operand %s"
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		cmp	[ebp+print_database], 0
		jz	short loc_8000E96
		sub	esp, 0Ch
		push	offset aFileOperandsCa ; "file operands	cannot be combined with	-"...
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, ds:stderr
		sub	esp, 4
		push	edx
		push	offset aS_0	; "%s\n"
		push	eax		; stream
		call	fprintf
		add	esp, 10h

loc_8000E96:				; CODE XREF: main+1CFj
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8000EA0:				; CODE XREF: main+185j
		cmp	[ebp+print_database], 0
		jz	short loc_8000EE0
		mov	[ebp+p], offset	G_line
		jmp	short loc_8000ED1
; ---------------------------------------------------------------------------

loc_8000EAF:				; CODE XREF: main+23Dj
		sub	esp, 0Ch
		push	[ebp+p]		; s
		call	puts
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+p]		; s
		call	strlen
		add	esp, 10h
		add	eax, 1
		add	[ebp+p], eax

loc_8000ED1:				; CODE XREF: main+211j
		mov	eax, offset aNormal ; "NORMAL"
		cmp	[ebp+p], eax
		jb	short loc_8000EAF
		jmp	loc_8001075
; ---------------------------------------------------------------------------

loc_8000EE0:				; CODE XREF: main+208j
		cmp	[ebp+syntax], 2
		jnz	short loc_8000F14
		call	guess_shell_syntax
		mov	[ebp+syntax], eax
		cmp	[ebp+syntax], 2
		jnz	short loc_8000F14
		sub	esp, 0Ch
		push	offset aNoShellEnviron ; "no SHELL environment variable, and no	s"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_8000F14:				; CODE XREF: main+248j	main+256j
		sub	esp, 0Ch
		push	offset free	; void (*)(void	*)
		push	offset malloc	; void *(*)(__int32)
		push	0		; int
		push	0		; int
		push	offset lsc_obstack ; struct obstack *
		call	_obstack_begin
		add	esp, 20h
		cmp	dword ptr [ebx], 0
		jnz	short loc_8000F4B
		sub	esp, 8
		push	0		; filename
		push	0		; fp
		call	dc_parse_stream
		add	esp, 10h
		mov	[ebp+ok], al
		jmp	short loc_8000F5F
; ---------------------------------------------------------------------------

loc_8000F4B:				; CODE XREF: main+299j
		mov	eax, [ebx+4]
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax		; filename
		call	dc_parse_file
		add	esp, 10h
		mov	[ebp+ok], al

loc_8000F5F:				; CODE XREF: main+2ADj
		cmp	[ebp+ok], 0
		jz	loc_8001075
		mov	[ebp+__o], offset lsc_obstack
		mov	eax, [ebp+__o]
		mov	eax, [eax+0Ch]
		mov	edx, eax
		mov	eax, [ebp+__o]
		mov	eax, [eax+8]
		sub	edx, eax
		mov	eax, edx
		mov	[ebp+len], eax
		mov	[ebp+__o1], offset lsc_obstack
		mov	eax, [ebp+__o1]
		mov	eax, [eax+8]
		mov	[ebp+__value], eax
		mov	eax, [ebp+__o1]
		mov	eax, [eax+0Ch]
		cmp	eax, [ebp+__value]
		jnz	short loc_8000FAD
		mov	eax, [ebp+__o1]
		movzx	edx, byte ptr [eax+28h]
		or	edx, 2
		mov	[eax+28h], dl

loc_8000FAD:				; CODE XREF: main+302j
		mov	eax, [ebp+__o1]
		mov	eax, [eax+0Ch]
		mov	edx, eax
		mov	eax, [ebp+__o1]
		mov	eax, [eax+18h]
		add	edx, eax
		mov	eax, [ebp+__o1]
		mov	eax, [eax+18h]
		not	eax
		and	eax, edx
		mov	edx, eax
		mov	eax, [ebp+__o1]
		mov	[eax+0Ch], edx
		mov	eax, [ebp+__o1]
		mov	eax, [eax+0Ch]
		mov	edx, eax
		mov	eax, [ebp+__o1]
		mov	eax, [eax+4]
		sub	edx, eax
		mov	eax, [ebp+__o1]
		mov	eax, [eax+10h]
		mov	ecx, eax
		mov	eax, [ebp+__o1]
		mov	eax, [eax+4]
		sub	ecx, eax
		mov	eax, ecx
		cmp	edx, eax
		jle	short loc_8001001
		mov	eax, [ebp+__o1]
		mov	edx, [eax+10h]
		mov	eax, [ebp+__o1]
		mov	[eax+0Ch], edx

loc_8001001:				; CODE XREF: main+357j
		mov	eax, [ebp+__o1]
		mov	edx, [eax+0Ch]
		mov	eax, [ebp+__o1]
		mov	[eax+8], edx
		mov	eax, [ebp+__value]
		mov	[ebp+s], eax
		cmp	[ebp+syntax], 0
		jnz	short loc_8001029
		mov	[ebp+prefix], offset aLs_colors	; "LS_COLORS='"
		mov	[ebp+suffix], offset aExportLs_color ; "';\nexport LS_COLORS\n"
		jmp	short loc_8001037
; ---------------------------------------------------------------------------

loc_8001029:				; CODE XREF: main+37Bj
		mov	[ebp+prefix], offset aSetenvLs_color ; "setenv LS_COLORS '"
		mov	[ebp+suffix], offset asc_8002AB2 ; "'\n"

loc_8001037:				; CODE XREF: main+38Bj
		mov	eax, ds:stdout
		sub	esp, 8
		push	eax
		push	[ebp+prefix]
		call	fputs_unlocked
		add	esp, 10h
		mov	eax, ds:stdout
		push	eax		; stream
		push	[ebp+len]	; n
		push	1		; size
		push	[ebp+s]		; ptr
		call	fwrite_unlocked
		add	esp, 10h
		mov	eax, ds:stdout
		sub	esp, 8
		push	eax
		push	[ebp+suffix]
		call	fputs_unlocked
		add	esp, 10h

loc_8001075:				; CODE XREF: main+23Fj	main+2C7j
		cmp	[ebp+ok], 0
		jz	short loc_8001082
		mov	eax, 0
		jmp	short loc_8001087
; ---------------------------------------------------------------------------

loc_8001082:				; CODE XREF: main+3DDj
		mov	eax, 1

loc_8001087:				; CODE XREF: main+3E4j
		sub	esp, 0Ch
		push	eax		; status

loc_800108B:				; DATA XREF: .eh_frame:08002AD8o
					; .eh_frame:08002AF8o ...
		call	exit
main		endp

_text		ends

; ===========================================================================

; Segment type:	Zero-length
; Segment permissions: Read/Write
_data		segment	byte public 'DATA' use32
_data		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
; Segment alignment '32byte' can not be represented in assembly
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 80010A0h
		assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing
; obstack lsc_obstack
lsc_obstack	obstack	<?>		; DATA XREF: append_quoted:loc_80004C0o
					; append_quoted+8Co ...
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment '32byte' can not be represented in assembly
_rodata		segment	para public 'CONST' use32
		assume cs:_rodata
		;org 80010E0h
; char msgid[]
msgid		db 0Ah			; DATA XREF: emit_ancillary_info+1Do
		db 'Report %s bugs to %s',0Ah,0
aBugCoreutils@g	db 'bug-coreutils@gnu.org',0 ; DATA XREF: emit_ancillary_info+2Do
		align 10h
; char aSHomePageHttpW[]
aSHomePageHttpW	db '%s home page: <http://www.gnu.org/software/%s/>',0Ah,0
					; DATA XREF: emit_ancillary_info+3Fo
; char domainname[]
domainname	db 'coreutils',0        ; DATA XREF: emit_ancillary_info+4Fo
					; main+4Eo ...
aGnuCoreutils	db 'GNU coreutils',0    ; DATA XREF: emit_ancillary_info+54o
					; main+E1o
		align 4
; char aGeneralHelpUsi[]
aGeneralHelpUsi	db 'General help using GNU software: <http://www.gnu.org/gethelp/>',0Ah,0
					; DATA XREF: emit_ancillary_info+6Bo
; char s2[]
s2		db 'en_',0              ; DATA XREF: emit_ancillary_info+A2o
; char aReportSTransla[]
aReportSTransla	db 'Report %s translation bugs to <http://translationproject.org/team'
					; DATA XREF: emit_ancillary_info+CCo
		db '/>',0Ah,0
		align 4
; char aForCompleteDoc[]
aForCompleteDoc	db 'For complete documentation, run: info coreutils ',27h,'%s invocation'
					; DATA XREF: emit_ancillary_info+FCo
		db 27h,0Ah,0
		align 20h
; char G_line[4237]
G_line		db 23h,	20h, 43h, 6Fh, 6Eh, 66h, 69h, 67h, 75h,	72h, 61h
					; DATA XREF: dc_parse_stream+26o
					; main+20Ao
		db 74h,	69h, 6Fh, 6Eh, 20h, 66h, 69h, 6Ch, 65h,	20h, 66h
		db 6Fh,	72h, 20h, 64h, 69h, 72h, 63h, 6Fh, 6Ch,	6Fh, 72h
		db 73h,	2Ch, 20h, 61h, 20h, 75h, 74h, 69h, 6Ch,	69h, 74h
		db 79h,	20h, 74h, 6Fh, 20h, 68h, 65h, 6Ch, 70h,	20h, 79h
		db 6Fh,	75h, 20h, 73h, 65h, 74h, 20h, 74h, 68h,	65h, 0
		db 23h,	20h, 4Ch, 53h, 5Fh, 43h, 4Fh, 4Ch, 4Fh,	52h, 53h
		db 20h,	65h, 6Eh, 76h, 69h, 72h, 6Fh, 6Eh, 6Dh,	65h, 6Eh
		db 74h,	20h, 76h, 61h, 72h, 69h, 61h, 62h, 6Ch,	65h, 20h
		db 75h,	73h, 65h, 64h, 20h, 62h, 79h, 20h, 47h,	4Eh, 55h
		db 20h,	6Ch, 73h, 20h, 77h, 69h, 74h, 68h, 20h,	74h, 68h
		db 65h,	20h, 2 dup(2Dh), 63h, 6Fh, 6Ch,	6Fh, 72h, 20h
		db 6Fh,	70h, 74h, 69h, 6Fh, 6Eh, 2Eh, 0, 23h, 20h, 43h
		db 6Fh,	70h, 79h, 72h, 69h, 67h, 68h, 74h, 20h,	28h, 43h
		db 29h,	20h, 31h, 2 dup(39h), 36h, 2Ch,	20h, 31h, 3 dup(39h)
		db 2Dh,	32h, 30h, 31h, 30h, 20h, 46h, 72h, 2 dup(65h)
		db 20h,	53h, 6Fh, 66h, 74h, 77h, 61h, 72h, 65h,	20h, 46h
		db 6Fh,	75h, 6Eh, 64h, 61h, 74h, 69h, 6Fh, 6Eh,	2Ch, 20h
		db 49h,	6Eh, 63h, 2Eh, 0, 23h, 20h, 43h, 6Fh, 70h, 79h
		db 69h,	6Eh, 67h, 20h, 61h, 6Eh, 64h, 20h, 64h,	69h, 73h
		db 74h,	72h, 69h, 62h, 75h, 74h, 69h, 6Fh, 6Eh,	20h, 6Fh
		db 66h,	20h, 74h, 68h, 69h, 73h, 20h, 66h, 69h,	6Ch, 65h
		db 2Ch,	20h, 77h, 69h, 74h, 68h, 20h, 6Fh, 72h,	20h, 77h
		db 69h,	74h, 68h, 6Fh, 75h, 74h, 20h, 6Dh, 6Fh,	64h, 69h
		db 66h,	69h, 63h, 61h, 74h, 69h, 6Fh, 6Eh, 2Ch,	0, 23h
		db 20h,	61h, 72h, 65h, 20h, 70h, 65h, 72h, 6Dh,	69h, 2 dup(74h)
		db 65h,	64h, 20h, 70h, 72h, 6Fh, 76h, 69h, 64h,	65h, 64h
		db 20h,	74h, 68h, 65h, 20h, 63h, 6Fh, 70h, 79h,	72h, 69h
		db 67h,	68h, 74h, 20h, 6Eh, 6Fh, 74h, 69h, 63h,	65h, 20h
		db 61h,	6Eh, 64h, 20h, 74h, 68h, 69h, 73h, 20h,	6Eh, 6Fh
		db 74h,	69h, 63h, 65h, 20h, 61h, 72h, 65h, 20h,	70h, 72h
		db 65h,	73h, 65h, 72h, 76h, 65h, 64h, 2Eh, 0, 23h, 20h
		db 54h,	68h, 65h, 20h, 6Bh, 65h, 79h, 77h, 6Fh,	72h, 64h
		db 73h,	20h, 43h, 4Fh, 4Ch, 4Fh, 52h, 2Ch, 20h,	4Fh, 50h
		db 54h,	49h, 4Fh, 4Eh, 53h, 2Ch, 20h, 61h, 6Eh,	64h, 20h
		db 45h,	49h, 47h, 48h, 54h, 42h, 49h, 54h, 20h,	28h, 68h
		db 6Fh,	6Eh, 6Fh, 72h, 65h, 64h, 20h, 62h, 79h,	20h, 74h
		db 68h,	65h, 0,	23h, 20h, 73h, 6Ch, 61h, 63h, 6Bh, 77h
		db 61h,	72h, 65h, 20h, 76h, 65h, 72h, 73h, 69h,	6Fh, 6Eh
		db 20h,	6Fh, 66h, 20h, 64h, 69h, 72h, 63h, 6Fh,	6Ch, 6Fh
		db 72h,	73h, 29h, 20h, 61h, 72h, 65h, 20h, 72h,	65h, 63h
		db 6Fh,	67h, 6Eh, 69h, 7Ah, 65h, 64h, 20h, 62h,	75h, 74h
		db 20h,	69h, 67h, 6Eh, 6Fh, 72h, 65h, 64h, 2Eh,	0, 23h
		db 20h,	42h, 65h, 6Ch, 6Fh, 77h, 2Ch, 20h, 74h,	68h, 65h
		db 72h,	65h, 20h, 73h, 68h, 6Fh, 75h, 6Ch, 64h,	20h, 62h
		db 65h,	20h, 6Fh, 6Eh, 65h, 20h, 54h, 45h, 52h,	4Dh, 20h
		db 65h,	6Eh, 74h, 72h, 79h, 20h, 66h, 6Fh, 72h,	20h, 65h
		db 61h,	63h, 68h, 20h, 74h, 65h, 72h, 6Dh, 74h,	79h, 70h
		db 65h,	20h, 74h, 68h, 61h, 74h, 20h, 69h, 73h,	20h, 63h
		db 6Fh,	6Ch, 6Fh, 72h, 69h, 7Ah, 61h, 62h, 6Ch,	65h, 0
		db 54h,	45h, 52h, 4Dh, 20h, 45h, 74h, 65h, 72h,	6Dh, 0
		db 54h,	45h, 52h, 4Dh, 20h, 61h, 6Eh, 73h, 69h,	0, 54h
		db 45h,	52h, 4Dh, 20h, 63h, 6Fh, 6Ch, 6Fh, 72h,	2Dh, 78h
		db 74h,	65h, 72h, 6Dh, 0, 54h, 45h, 52h, 4Dh, 20h, 63h
		db 6Fh,	6Eh, 31h, 33h, 32h, 78h, 32h, 35h, 0, 54h, 45h
		db 52h,	4Dh, 20h, 63h, 6Fh, 6Eh, 31h, 33h, 32h,	78h, 33h
		db 30h,	0, 54h,	45h, 52h, 4Dh, 20h, 63h, 6Fh, 6Eh, 31h
		db 33h,	32h, 78h, 34h, 33h, 0, 54h, 45h, 52h, 4Dh, 20h
		db 63h,	6Fh, 6Eh, 31h, 33h, 32h, 78h, 36h, 30h,	0, 54h
		db 45h,	52h, 4Dh, 20h, 63h, 6Fh, 6Eh, 38h, 30h,	78h, 32h
		db 35h,	0, 54h,	45h, 52h, 4Dh, 20h, 63h, 6Fh, 6Eh, 38h
		db 30h,	78h, 32h, 38h, 0, 54h, 45h, 52h, 4Dh, 20h, 63h
		db 6Fh,	6Eh, 38h, 30h, 78h, 33h, 30h, 0, 54h, 45h, 52h
		db 4Dh,	20h, 63h, 6Fh, 6Eh, 38h, 30h, 78h, 34h,	33h, 0
		db 54h,	45h, 52h, 4Dh, 20h, 63h, 6Fh, 6Eh, 38h,	30h, 78h
		db 35h,	30h, 0,	54h, 45h, 52h, 4Dh, 20h, 63h, 6Fh, 6Eh
		db 38h,	30h, 78h, 36h, 30h, 0, 54h, 45h, 52h, 4Dh, 20h
		db 63h,	6Fh, 6Eh, 73h, 32h, 35h, 0, 54h, 45h, 52h, 4Dh
		db 20h,	63h, 6Fh, 6Eh, 73h, 6Fh, 6Ch, 65h, 0, 54h, 45h
		db 52h,	4Dh, 20h, 63h, 79h, 67h, 77h, 69h, 6Eh,	0, 54h
		db 45h,	52h, 4Dh, 20h, 64h, 2 dup(74h),	65h, 72h, 6Dh
		db 0, 54h, 45h,	52h, 4Dh, 20h, 65h, 74h, 65h, 72h, 6Dh
		db 2Dh,	63h, 6Fh, 6Ch, 6Fh, 72h, 0, 54h, 45h, 52h, 4Dh
		db 20h,	67h, 6Eh, 6Fh, 6Dh, 65h, 0, 54h, 45h, 52h, 4Dh
		db 20h,	67h, 6Eh, 6Fh, 6Dh, 65h, 2Dh, 32h, 35h,	36h, 63h
		db 6Fh,	6Ch, 6Fh, 72h, 0, 54h, 45h, 52h, 4Dh, 20h, 6Ah
		db 66h,	62h, 74h, 65h, 72h, 6Dh, 0, 54h, 45h, 52h, 4Dh
		db 20h,	6Bh, 6Fh, 6Eh, 73h, 6Fh, 6Ch, 65h, 0, 54h, 45h
		db 52h,	4Dh, 20h, 6Bh, 74h, 65h, 72h, 6Dh, 0, 54h, 45h
		db 52h,	4Dh, 20h, 6Ch, 69h, 6Eh, 75h, 78h, 0, 54h, 45h
		db 52h,	4Dh, 20h, 6Ch, 69h, 6Eh, 75h, 78h, 2Dh,	63h, 0
		db 54h,	45h, 52h, 4Dh, 20h, 6Dh, 61h, 63h, 68h,	2Dh, 63h
		db 6Fh,	6Ch, 6Fh, 72h, 0, 54h, 45h, 52h, 4Dh, 20h, 6Dh
		db 6Ch,	74h, 65h, 72h, 6Dh, 0, 54h, 45h, 52h, 4Dh, 20h
		db 70h,	75h, 2 dup(74h), 79h, 0, 54h, 45h, 52h,	4Dh, 20h
		db 72h,	78h, 76h, 74h, 0, 54h, 45h, 52h, 4Dh, 20h, 72h
		db 78h,	76h, 74h, 2Dh, 63h, 79h, 67h, 77h, 69h,	6Eh, 0
		db 54h,	45h, 52h, 4Dh, 20h, 72h, 78h, 76h, 74h,	2Dh, 63h
		db 79h,	67h, 77h, 69h, 6Eh, 2Dh, 6Eh, 61h, 74h,	69h, 76h
		db 65h,	0, 54h,	45h, 52h, 4Dh, 20h, 72h, 78h, 76h, 74h
		db 2Dh,	75h, 6Eh, 69h, 63h, 6Fh, 64h, 65h, 0, 54h, 45h
		db 52h,	4Dh, 20h, 73h, 63h, 72h, 2 dup(65h), 6Eh, 0, 54h
		db 45h,	52h, 4Dh, 20h, 73h, 63h, 72h, 2	dup(65h), 6Eh
		db 2Dh,	32h, 35h, 36h, 63h, 6Fh, 6Ch, 6Fh, 72h,	0, 54h
		db 45h,	52h, 4Dh, 20h, 73h, 63h, 72h, 2	dup(65h), 6Eh
		db 2Dh,	32h, 35h, 36h, 63h, 6Fh, 6Ch, 6Fh, 72h,	2Dh, 62h
		db 63h,	65h, 0,	54h, 45h, 52h, 4Dh, 20h, 73h, 63h, 72h
		db 2 dup(65h), 6Eh, 2Dh, 62h, 63h, 65h,	0, 54h,	45h, 52h
		db 4Dh,	20h, 73h, 63h, 72h, 2 dup(65h),	6Eh, 2Dh, 77h
		db 0, 54h, 45h,	52h, 4Dh, 20h, 73h, 63h, 72h, 2	dup(65h)
		db 6Eh,	2Eh, 6Ch, 69h, 6Eh, 75h, 78h, 0, 54h, 45h, 52h
		db 4Dh,	20h, 76h, 74h, 31h, 2 dup(30h),	0, 54h,	45h, 52h
		db 4Dh,	20h, 78h, 74h, 65h, 72h, 6Dh, 0, 54h, 45h, 52h
		db 4Dh,	20h, 78h, 74h, 65h, 72h, 6Dh, 2Dh, 31h,	36h, 63h
		db 6Fh,	6Ch, 6Fh, 72h, 0, 54h, 45h, 52h, 4Dh, 20h, 78h
		db 74h,	65h, 72h, 6Dh, 2Dh, 32h, 35h, 36h, 63h,	6Fh, 6Ch
		db 6Fh,	72h, 0,	54h, 45h, 52h, 4Dh, 20h, 78h, 74h, 65h
		db 72h,	6Dh, 2Dh, 2 dup(38h), 63h, 6Fh,	6Ch, 6Fh, 72h
		db 0, 54h, 45h,	52h, 4Dh, 20h, 78h, 74h, 65h, 72h, 6Dh
		db 2Dh,	63h, 6Fh, 6Ch, 6Fh, 72h, 0, 54h, 45h, 52h, 4Dh
		db 20h,	78h, 74h, 65h, 72h, 6Dh, 2Dh, 64h, 65h,	62h, 69h
		db 61h,	6Eh, 0,	23h, 20h, 42h, 65h, 6Ch, 6Fh, 77h, 20h
		db 61h,	72h, 65h, 20h, 74h, 68h, 65h, 20h, 63h,	6Fh, 6Ch
		db 6Fh,	72h, 20h, 69h, 6Eh, 69h, 74h, 20h, 73h,	74h, 72h
		db 69h,	6Eh, 67h, 73h, 20h, 66h, 6Fh, 72h, 20h,	74h, 68h
		db 65h,	20h, 62h, 61h, 73h, 69h, 63h, 20h, 66h,	69h, 6Ch
		db 65h,	20h, 74h, 79h, 70h, 65h, 73h, 2Eh, 20h,	41h, 20h
		db 63h,	6Fh, 6Ch, 6Fh, 72h, 20h, 69h, 6Eh, 69h,	74h, 0
		db 23h,	20h, 73h, 74h, 72h, 69h, 6Eh, 67h, 20h,	63h, 6Fh
		db 6Eh,	73h, 69h, 73h, 74h, 73h, 20h, 6Fh, 66h,	20h, 6Fh
		db 6Eh,	65h, 20h, 6Fh, 72h, 20h, 6Dh, 6Fh, 72h,	65h, 20h
		db 6Fh,	66h, 20h, 74h, 68h, 65h, 20h, 66h, 6Fh,	2 dup(6Ch)
		db 6Fh,	77h, 69h, 6Eh, 67h, 20h, 6Eh, 75h, 6Dh,	65h, 72h
		db 69h,	63h, 20h, 63h, 6Fh, 64h, 65h, 73h, 3Ah,	0, 23h
		db 20h,	41h, 2 dup(74h), 72h, 69h, 62h,	75h, 74h, 65h
		db 20h,	63h, 6Fh, 64h, 65h, 73h, 3Ah, 0, 23h, 20h, 2 dup(30h)
		db 3Dh,	6Eh, 6Fh, 6Eh, 65h, 20h, 30h, 31h, 3Dh,	62h, 6Fh
		db 6Ch,	64h, 20h, 30h, 34h, 3Dh, 75h, 6Eh, 64h,	65h, 72h
		db 73h,	63h, 6Fh, 72h, 65h, 20h, 30h, 35h, 3Dh,	62h, 6Ch
		db 69h,	6Eh, 6Bh, 20h, 30h, 37h, 3Dh, 72h, 65h,	76h, 65h
		db 72h,	73h, 65h, 20h, 30h, 38h, 3Dh, 63h, 6Fh,	6Eh, 63h
		db 65h,	61h, 6Ch, 65h, 64h, 0, 23h, 20h, 54h, 65h, 78h
		db 74h,	20h, 63h, 6Fh, 6Ch, 6Fh, 72h, 20h, 63h,	6Fh, 64h
		db 65h,	73h, 3Ah, 0, 23h, 20h, 33h, 30h, 3Dh, 62h, 6Ch
		db 61h,	63h, 6Bh, 20h, 33h, 31h, 3Dh, 72h, 65h,	64h, 20h
		db 33h,	32h, 3Dh, 67h, 72h, 2 dup(65h),	6Eh, 20h, 2 dup(33h)
		db 3Dh,	79h, 65h, 2 dup(6Ch), 6Fh, 77h,	20h, 33h, 34h
		db 3Dh,	62h, 6Ch, 75h, 65h, 20h, 33h, 35h, 3Dh,	6Dh, 61h
		db 67h,	65h, 6Eh, 74h, 61h, 20h, 33h, 36h, 3Dh,	63h, 79h
		db 61h,	6Eh, 20h, 33h, 37h, 3Dh, 77h, 68h, 69h,	74h, 65h
		db 0, 23h, 20h,	42h, 61h, 63h, 6Bh, 67h, 72h, 6Fh, 75h
		db 6Eh,	64h, 20h, 63h, 6Fh, 6Ch, 6Fh, 72h, 20h,	63h, 6Fh
		db 64h,	65h, 73h, 3Ah, 0, 23h, 20h, 34h, 30h, 3Dh, 62h
		db 6Ch,	61h, 63h, 6Bh, 20h, 34h, 31h, 3Dh, 72h,	65h, 64h
		db 20h,	34h, 32h, 3Dh, 67h, 72h, 2 dup(65h), 6Eh, 20h
		db 34h,	33h, 3Dh, 79h, 65h, 2 dup(6Ch),	6Fh, 77h, 20h
		db 2 dup(34h), 3Dh, 62h, 6Ch, 75h, 65h,	20h, 34h, 35h
		db 3Dh,	6Dh, 61h, 67h, 65h, 6Eh, 74h, 61h, 20h,	34h, 36h
		db 3Dh,	63h, 79h, 61h, 6Eh, 20h, 34h, 37h, 3Dh,	77h, 68h
		db 69h,	74h, 65h, 0, 23h, 4Eh, 4Fh, 52h, 4Dh, 41h, 4Ch
		db 20h,	2 dup(30h), 20h, 23h, 20h, 6Eh,	6Fh, 20h, 63h
		db 6Fh,	6Ch, 6Fh, 72h, 20h, 63h, 6Fh, 64h, 65h,	20h, 61h
		db 74h,	20h, 61h, 2 dup(6Ch), 0, 23h, 46h, 49h,	4Ch, 45h
		db 20h,	2 dup(30h), 20h, 23h, 20h, 72h,	65h, 67h, 75h
		db 6Ch,	61h, 72h, 20h, 66h, 69h, 6Ch, 65h, 3Ah,	20h, 75h
		db 73h,	65h, 20h, 6Eh, 6Fh, 20h, 63h, 6Fh, 6Ch,	6Fh, 72h
		db 20h,	61h, 74h, 20h, 61h, 2 dup(6Ch),	0, 52h,	45h, 53h
		db 45h,	54h, 20h, 30h, 20h, 23h, 20h, 72h, 65h,	73h, 65h
		db 74h,	20h, 74h, 6Fh, 20h, 22h, 6Eh, 6Fh, 72h,	6Dh, 61h
		db 6Ch,	22h, 20h, 63h, 6Fh, 6Ch, 6Fh, 72h, 0, 44h, 49h
		db 52h,	20h, 30h, 31h, 3Bh, 33h, 34h, 20h, 23h,	20h, 64h
		db 69h,	72h, 65h, 63h, 74h, 6Fh, 72h, 79h, 0, 4Ch, 49h
		db 4Eh,	4Bh, 20h, 30h, 31h, 3Bh, 33h, 36h, 20h,	23h, 20h
		db 73h,	79h, 6Dh, 62h, 6Fh, 6Ch, 69h, 63h, 20h,	6Ch, 69h
		db 6Eh,	6Bh, 2Eh, 20h, 28h, 49h, 66h, 20h, 79h,	6Fh, 75h
		db 20h,	73h, 65h, 74h, 20h, 74h, 68h, 69h, 73h,	20h, 74h
		db 6Fh,	20h, 27h, 74h, 61h, 72h, 67h, 65h, 74h,	27h, 20h
		db 69h,	6Eh, 73h, 74h, 65h, 61h, 64h, 20h, 6Fh,	66h, 20h
		db 61h,	0, 20h,	23h, 20h, 6Eh, 75h, 6Dh, 65h, 72h, 69h
		db 63h,	61h, 6Ch, 20h, 76h, 61h, 6Ch, 75h, 65h,	2Ch, 20h
		db 74h,	68h, 65h, 20h, 63h, 6Fh, 6Ch, 6Fh, 72h,	20h, 69h
		db 73h,	20h, 61h, 73h, 20h, 66h, 6Fh, 72h, 20h,	74h, 68h
		db 65h,	20h, 66h, 69h, 6Ch, 65h, 20h, 70h, 6Fh,	69h, 6Eh
		db 74h,	65h, 64h, 20h, 74h, 6Fh, 2Eh, 29h, 0, 4Dh, 55h
		db 4Ch,	54h, 49h, 48h, 41h, 52h, 44h, 4Ch, 49h,	4Eh, 4Bh
		db 20h,	2 dup(30h), 20h, 23h, 20h, 72h,	65h, 67h, 75h
		db 6Ch,	61h, 72h, 20h, 66h, 69h, 6Ch, 65h, 20h,	77h, 69h
		db 74h,	68h, 20h, 6Dh, 6Fh, 72h, 65h, 20h, 74h,	68h, 61h
		db 6Eh,	20h, 6Fh, 6Eh, 65h, 20h, 6Ch, 69h, 6Eh,	6Bh, 0
		db 46h,	49h, 46h, 4Fh, 20h, 34h, 30h, 3Bh, 2 dup(33h)
		db 20h,	23h, 20h, 70h, 69h, 70h, 65h, 0, 53h, 4Fh, 43h
		db 4Bh,	20h, 30h, 31h, 3Bh, 33h, 35h, 20h, 23h,	20h, 73h
		db 6Fh,	63h, 6Bh, 65h, 74h, 0, 44h, 2 dup(4Fh),	52h, 20h
		db 30h,	31h, 3Bh, 33h, 35h, 20h, 23h, 20h, 64h,	2 dup(6Fh)
		db 72h,	0, 42h,	4Ch, 4Bh, 20h, 34h, 30h, 3Bh, 2	dup(33h)
		db 3Bh,	30h, 31h, 20h, 23h, 20h, 62h, 6Ch, 6Fh,	63h, 6Bh
		db 20h,	64h, 65h, 76h, 69h, 63h, 65h, 20h, 64h,	72h, 69h
		db 76h,	65h, 72h, 0, 43h, 48h, 52h, 20h, 34h, 30h, 3Bh
		db 2 dup(33h), 3Bh, 30h, 31h, 20h, 23h,	20h, 63h, 68h
		db 61h,	72h, 61h, 63h, 74h, 65h, 72h, 20h, 64h,	65h, 76h
		db 69h,	63h, 65h, 20h, 64h, 72h, 69h, 76h, 65h,	72h, 0
		db 4Fh,	52h, 50h, 48h, 41h, 4Eh, 20h, 34h, 30h,	3Bh, 33h
		db 31h,	3Bh, 30h, 31h, 20h, 23h, 20h, 73h, 79h,	6Dh, 6Ch
		db 69h,	6Eh, 6Bh, 20h, 74h, 6Fh, 20h, 6Eh, 6Fh,	6Eh, 65h
		db 78h,	69h, 73h, 74h, 65h, 6Eh, 74h, 20h, 66h,	69h, 6Ch
		db 65h,	2Ch, 20h, 6Fh, 72h, 20h, 6Eh, 6Fh, 6Eh,	2Dh, 73h
		db 74h,	61h, 74h, 27h, 61h, 62h, 6Ch, 65h, 20h,	66h, 69h
		db 6Ch,	65h, 0,	53h, 45h, 54h, 55h, 49h, 44h, 20h, 33h
		db 37h,	3Bh, 34h, 31h, 20h, 23h, 20h, 66h, 69h,	6Ch, 65h
		db 20h,	74h, 68h, 61h, 74h, 20h, 69h, 73h, 20h,	73h, 65h
		db 74h,	75h, 69h, 64h, 20h, 28h, 75h, 2Bh, 73h,	29h, 0
		db 53h,	45h, 54h, 47h, 49h, 44h, 20h, 33h, 30h,	3Bh, 34h
		db 33h,	20h, 23h, 20h, 66h, 69h, 6Ch, 65h, 20h,	74h, 68h
		db 61h,	74h, 20h, 69h, 73h, 20h, 73h, 65h, 74h,	67h, 69h
		db 64h,	20h, 28h, 67h, 2Bh, 73h, 29h, 0, 43h, 41h, 50h
		db 41h,	42h, 49h, 4Ch, 49h, 54h, 59h, 20h, 33h,	30h, 3Bh
		db 34h,	31h, 20h, 23h, 20h, 66h, 69h, 6Ch, 65h,	20h, 77h
		db 69h,	74h, 68h, 20h, 63h, 61h, 70h, 61h, 62h,	69h, 6Ch
		db 69h,	74h, 79h, 0, 53h, 54h, 49h, 43h, 4Bh, 59h, 5Fh
		db 4Fh,	54h, 48h, 45h, 52h, 5Fh, 57h, 52h, 49h,	54h, 41h
		db 42h,	4Ch, 45h, 20h, 33h, 30h, 3Bh, 34h, 32h,	20h, 23h
		db 20h,	64h, 69h, 72h, 20h, 74h, 68h, 61h, 74h,	20h, 69h
		db 73h,	20h, 73h, 74h, 69h, 63h, 6Bh, 79h, 20h,	61h, 6Eh
		db 64h,	20h, 6Fh, 74h, 68h, 65h, 72h, 2Dh, 77h,	72h, 69h
		db 74h,	61h, 62h, 6Ch, 65h, 20h, 28h, 2Bh, 74h,	2Ch, 6Fh
		db 2Bh,	77h, 29h, 0, 4Fh, 54h, 48h, 45h, 52h, 5Fh, 57h
		db 52h,	49h, 54h, 41h, 42h, 4Ch, 45h, 20h, 33h,	34h, 3Bh
		db 34h,	32h, 20h, 23h, 20h, 64h, 69h, 72h, 20h,	74h, 68h
		db 61h,	74h, 20h, 69h, 73h, 20h, 6Fh, 74h, 68h,	65h, 72h
		db 2Dh,	77h, 72h, 69h, 74h, 61h, 62h, 6Ch, 65h,	20h, 28h
		db 6Fh,	2Bh, 77h, 29h, 20h, 61h, 6Eh, 64h, 20h,	6Eh, 6Fh
		db 74h,	20h, 73h, 74h, 69h, 63h, 6Bh, 79h, 0, 53h, 54h
		db 49h,	43h, 4Bh, 59h, 20h, 33h, 37h, 3Bh, 2 dup(34h)
		db 20h,	23h, 20h, 64h, 69h, 72h, 20h, 77h, 69h,	74h, 68h
		db 20h,	74h, 68h, 65h, 20h, 73h, 74h, 69h, 63h,	6Bh, 79h
		db 20h,	62h, 69h, 74h, 20h, 73h, 65h, 74h, 20h,	28h, 2Bh
		db 74h,	29h, 20h, 61h, 6Eh, 64h, 20h, 6Eh, 6Fh,	74h, 20h
		db 6Fh,	74h, 68h, 65h, 72h, 2Dh, 77h, 72h, 69h,	74h, 61h
		db 62h,	6Ch, 65h, 0, 23h, 20h, 54h, 68h, 69h, 73h, 20h
		db 69h,	73h, 20h, 66h, 6Fh, 72h, 20h, 66h, 69h,	6Ch, 65h
		db 73h,	20h, 77h, 69h, 74h, 68h, 20h, 65h, 78h,	65h, 63h
		db 75h,	74h, 65h, 20h, 70h, 65h, 72h, 6Dh, 69h,	2 dup(73h)
		db 69h,	6Fh, 6Eh, 3Ah, 0, 45h, 58h, 45h, 43h, 20h, 30h
		db 31h,	3Bh, 33h, 32h, 0, 23h, 20h, 4Ch, 69h, 73h, 74h
		db 20h,	61h, 6Eh, 79h, 20h, 66h, 69h, 6Ch, 65h,	20h, 65h
		db 78h,	74h, 65h, 6Eh, 73h, 69h, 6Fh, 6Eh, 73h,	20h, 6Ch
		db 69h,	6Bh, 65h, 20h, 27h, 2Eh, 67h, 7Ah, 27h,	20h, 6Fh
		db 72h,	20h, 27h, 2Eh, 74h, 61h, 72h, 27h, 20h,	74h, 68h
		db 61h,	74h, 20h, 79h, 6Fh, 75h, 20h, 77h, 6Fh,	75h, 6Ch
		db 64h,	20h, 6Ch, 69h, 6Bh, 65h, 20h, 6Ch, 73h,	0, 23h
		db 20h,	74h, 6Fh, 20h, 63h, 6Fh, 6Ch, 6Fh, 72h,	69h, 7Ah
		db 65h,	20h, 62h, 65h, 6Ch, 6Fh, 77h, 2Eh, 20h,	50h, 75h
		db 74h,	20h, 74h, 68h, 65h, 20h, 65h, 78h, 74h,	65h, 6Eh
		db 73h,	69h, 6Fh, 6Eh, 2Ch, 20h, 61h, 20h, 73h,	70h, 61h
		db 63h,	65h, 2Ch, 20h, 61h, 6Eh, 64h, 20h, 74h,	68h, 65h
		db 20h,	63h, 6Fh, 6Ch, 6Fh, 72h, 20h, 69h, 6Eh,	69h, 74h
		db 20h,	73h, 74h, 72h, 69h, 6Eh, 67h, 2Eh, 0, 23h, 20h
		db 28h,	61h, 6Eh, 64h, 20h, 61h, 6Eh, 79h, 20h,	63h, 6Fh
		db 2 dup(6Dh), 65h, 6Eh, 74h, 73h, 20h,	79h, 6Fh, 75h
		db 20h,	77h, 61h, 6Eh, 74h, 20h, 74h, 6Fh, 20h,	61h, 2 dup(64h)
		db 20h,	61h, 66h, 74h, 65h, 72h, 20h, 61h, 20h,	27h, 23h
		db 27h,	29h, 0,	23h, 20h, 49h, 66h, 20h, 79h, 6Fh, 75h
		db 20h,	75h, 73h, 65h, 20h, 44h, 4Fh, 53h, 2Dh,	73h, 74h
		db 79h,	6Ch, 65h, 20h, 73h, 75h, 2 dup(66h), 69h, 78h
		db 65h,	73h, 2Ch, 20h, 79h, 6Fh, 75h, 20h, 6Dh,	61h, 79h
		db 20h,	77h, 61h, 6Eh, 74h, 20h, 74h, 6Fh, 20h,	75h, 6Eh
		db 63h,	6Fh, 2 dup(6Dh), 65h, 6Eh, 74h,	20h, 74h, 68h
		db 65h,	20h, 66h, 6Fh, 2 dup(6Ch), 6Fh,	77h, 69h, 6Eh
		db 67h,	3Ah, 0,	23h, 2Eh, 63h, 6Dh, 64h, 20h, 30h, 31h
		db 3Bh,	33h, 32h, 20h, 23h, 20h, 65h, 78h, 65h,	63h, 75h
		db 74h,	61h, 62h, 6Ch, 65h, 73h, 20h, 28h, 62h,	72h, 69h
		db 67h,	68h, 74h, 20h, 67h, 72h, 2 dup(65h), 6Eh, 29h
		db 0, 23h, 2Eh,	65h, 78h, 65h, 20h, 30h, 31h, 3Bh, 33h
		db 32h,	0, 23h,	2Eh, 63h, 6Fh, 6Dh, 20h, 30h, 31h, 3Bh
		db 33h,	32h, 0,	23h, 2Eh, 62h, 74h, 6Dh, 20h, 30h, 31h
		db 3Bh,	33h, 32h, 0, 23h, 2Eh, 62h, 61h, 74h, 20h, 30h
		db 31h,	3Bh, 33h, 32h, 0, 23h, 20h, 4Fh, 72h, 20h, 69h
		db 66h,	20h, 79h, 6Fh, 75h, 20h, 77h, 61h, 6Eh,	74h, 20h
		db 74h,	6Fh, 20h, 63h, 6Fh, 6Ch, 6Fh, 72h, 69h,	7Ah, 65h
		db 20h,	73h, 63h, 72h, 69h, 70h, 74h, 73h, 20h,	65h, 76h
		db 65h,	6Eh, 20h, 69h, 66h, 20h, 74h, 68h, 65h,	79h, 20h
		db 64h,	6Fh, 20h, 6Eh, 6Fh, 74h, 20h, 68h, 61h,	76h, 65h
		db 20h,	74h, 68h, 65h, 0, 23h, 20h, 65h, 78h, 65h, 63h
		db 75h,	74h, 61h, 62h, 6Ch, 65h, 20h, 62h, 69h,	74h, 20h
		db 61h,	63h, 74h, 75h, 61h, 2 dup(6Ch),	79h, 20h, 73h
		db 65h,	74h, 2Eh, 0, 23h, 2Eh, 73h, 68h, 20h, 30h, 31h
		db 3Bh,	33h, 32h, 0, 23h, 2Eh, 63h, 73h, 68h, 20h, 30h
		db 31h,	3Bh, 33h, 32h, 0, 20h, 23h, 20h, 61h, 72h, 63h
		db 68h,	69h, 76h, 65h, 73h, 20h, 6Fh, 72h, 20h,	63h, 6Fh
		db 6Dh,	70h, 72h, 65h, 2 dup(73h), 65h,	64h, 20h, 28h
		db 62h,	72h, 69h, 67h, 68h, 74h, 20h, 72h, 65h,	64h, 29h
		db 0, 2Eh, 74h,	61h, 72h, 20h, 30h, 31h, 3Bh, 33h, 31h
		db 0, 2Eh, 74h,	67h, 7Ah, 20h, 30h, 31h, 3Bh, 33h, 31h
		db 0, 2Eh, 61h,	72h, 6Ah, 20h, 30h, 31h, 3Bh, 33h, 31h
		db 0, 2Eh, 74h,	61h, 7Ah, 20h, 30h, 31h, 3Bh, 33h, 31h
		db 0, 2Eh, 6Ch,	7Ah, 68h, 20h, 30h, 31h, 3Bh, 33h, 31h
		db 0, 2Eh, 6Ch,	7Ah, 6Dh, 61h, 20h, 30h, 31h, 3Bh, 33h
		db 31h,	0, 2Eh,	74h, 6Ch, 7Ah, 20h, 30h, 31h, 3Bh, 33h
		db 31h,	0, 2Eh,	74h, 78h, 7Ah, 20h, 30h, 31h, 3Bh, 33h
		db 31h,	0, 2Eh,	7Ah, 69h, 70h, 20h, 30h, 31h, 3Bh, 33h
		db 31h,	0, 2Eh,	7Ah, 20h, 30h, 31h, 3Bh, 33h, 31h, 0, 2Eh
		db 5Ah,	20h, 30h, 31h, 3Bh, 33h, 31h, 0, 2Eh, 64h, 7Ah
		db 20h,	30h, 31h, 3Bh, 33h, 31h, 0, 2Eh, 67h, 7Ah, 20h
		db 30h,	31h, 3Bh, 33h, 31h, 0, 2Eh, 6Ch, 7Ah, 20h, 30h
		db 31h,	3Bh, 33h, 31h, 0, 2Eh, 78h, 7Ah, 20h, 30h, 31h
		db 3Bh,	33h, 31h, 0, 2Eh, 62h, 7Ah, 32h, 20h, 30h, 31h
		db 3Bh,	33h, 31h, 0, 2Eh, 62h, 7Ah, 20h, 30h, 31h, 3Bh
		db 33h,	31h, 0,	2Eh, 74h, 62h, 7Ah, 20h, 30h, 31h, 3Bh
		db 33h,	31h, 0,	2Eh, 74h, 62h, 7Ah, 32h, 20h, 30h, 31h
		db 3Bh,	33h, 31h, 0, 2Eh, 74h, 7Ah, 20h, 30h, 31h, 3Bh
		db 33h,	31h, 0,	2Eh, 64h, 65h, 62h, 20h, 30h, 31h, 3Bh
		db 33h,	31h, 0,	2Eh, 72h, 70h, 6Dh, 20h, 30h, 31h, 3Bh
		db 33h,	31h, 0,	2Eh, 6Ah, 61h, 72h, 20h, 30h, 31h, 3Bh
		db 33h,	31h, 0,	2Eh, 72h, 61h, 72h, 20h, 30h, 31h, 3Bh
		db 33h,	31h, 0,	2Eh, 61h, 63h, 65h, 20h, 30h, 31h, 3Bh
		db 33h,	31h, 0,	2Eh, 7Ah, 2 dup(6Fh), 20h, 30h,	31h, 3Bh
		db 33h,	31h, 0,	2Eh, 63h, 70h, 69h, 6Fh, 20h, 30h, 31h
		db 3Bh,	33h, 31h, 0, 2Eh, 37h, 7Ah, 20h, 30h, 31h, 3Bh
		db 33h,	31h, 0,	2Eh, 72h, 7Ah, 20h, 30h, 31h, 3Bh, 33h
		db 31h,	0, 23h,	20h, 69h, 6Dh, 61h, 67h, 65h, 20h, 66h
		db 6Fh,	72h, 6Dh, 61h, 74h, 73h, 0, 2Eh, 6Ah, 70h, 67h
		db 20h,	30h, 31h, 3Bh, 33h, 35h, 0, 2Eh, 6Ah, 70h, 65h
		db 67h,	20h, 30h, 31h, 3Bh, 33h, 35h, 0, 2Eh, 67h, 69h
		db 66h,	20h, 30h, 31h, 3Bh, 33h, 35h, 0, 2Eh, 62h, 6Dh
		db 70h,	20h, 30h, 31h, 3Bh, 33h, 35h, 0, 2Eh, 70h, 62h
		db 6Dh,	20h, 30h, 31h, 3Bh, 33h, 35h, 0, 2Eh, 70h, 67h
		db 6Dh,	20h, 30h, 31h, 3Bh, 33h, 35h, 0, 2Eh, 2	dup(70h)
		db 6Dh,	20h, 30h, 31h, 3Bh, 33h, 35h, 0, 2Eh, 74h, 67h
		db 61h,	20h, 30h, 31h, 3Bh, 33h, 35h, 0, 2Eh, 78h, 62h
		db 6Dh,	20h, 30h, 31h, 3Bh, 33h, 35h, 0, 2Eh, 78h, 70h
		db 6Dh,	20h, 30h, 31h, 3Bh, 33h, 35h, 0, 2Eh, 74h, 69h
		db 66h,	20h, 30h, 31h, 3Bh, 33h, 35h, 0, 2Eh, 74h, 69h
		db 2 dup(66h), 20h, 30h, 31h, 3Bh, 33h,	35h, 0,	2Eh, 70h
		db 6Eh,	67h, 20h, 30h, 31h, 3Bh, 33h, 35h, 0, 2Eh, 73h
		db 76h,	67h, 20h, 30h, 31h, 3Bh, 33h, 35h, 0, 2Eh, 73h
		db 76h,	67h, 7Ah, 20h, 30h, 31h, 3Bh, 33h, 35h,	0, 2Eh
		db 6Dh,	6Eh, 67h, 20h, 30h, 31h, 3Bh, 33h, 35h,	0, 2Eh
		db 70h,	63h, 78h, 20h, 30h, 31h, 3Bh, 33h, 35h,	0, 2Eh
		db 6Dh,	6Fh, 76h, 20h, 30h, 31h, 3Bh, 33h, 35h,	0, 2Eh
		db 6Dh,	70h, 67h, 20h, 30h, 31h, 3Bh, 33h, 35h,	0, 2Eh
		db 6Dh,	70h, 65h, 67h, 20h, 30h, 31h, 3Bh, 33h,	35h, 0
		db 2Eh,	6Dh, 32h, 76h, 20h, 30h, 31h, 3Bh, 33h,	35h, 0
		db 2Eh,	6Dh, 6Bh, 76h, 20h, 30h, 31h, 3Bh, 33h,	35h, 0
		db 2Eh,	6Fh, 67h, 6Dh, 20h, 30h, 31h, 3Bh, 33h,	35h, 0
		db 2Eh,	6Dh, 70h, 34h, 20h, 30h, 31h, 3Bh, 33h,	35h, 0
		db 2Eh,	6Dh, 34h, 76h, 20h, 30h, 31h, 3Bh, 33h,	35h, 0
		db 2Eh,	6Dh, 70h, 34h, 76h, 20h, 30h, 31h, 3Bh,	33h, 35h
		db 0, 2Eh, 76h,	6Fh, 62h, 20h, 30h, 31h, 3Bh, 33h, 35h
		db 0, 2Eh, 71h,	74h, 20h, 30h, 31h, 3Bh, 33h, 35h, 0, 2Eh
		db 6Eh,	75h, 76h, 20h, 30h, 31h, 3Bh, 33h, 35h,	0, 2Eh
		db 77h,	6Dh, 76h, 20h, 30h, 31h, 3Bh, 33h, 35h,	0, 2Eh
		db 61h,	73h, 66h, 20h, 30h, 31h, 3Bh, 33h, 35h,	0, 2Eh
		db 72h,	6Dh, 20h, 30h, 31h, 3Bh, 33h, 35h, 0, 2Eh, 72h
		db 6Dh,	76h, 62h, 20h, 30h, 31h, 3Bh, 33h, 35h,	0, 2Eh
		db 66h,	6Ch, 63h, 20h, 30h, 31h, 3Bh, 33h, 35h,	0, 2Eh
		db 61h,	76h, 69h, 20h, 30h, 31h, 3Bh, 33h, 35h,	0, 2Eh
		db 66h,	6Ch, 69h, 20h, 30h, 31h, 3Bh, 33h, 35h,	0, 2Eh
		db 66h,	6Ch, 76h, 20h, 30h, 31h, 3Bh, 33h, 35h,	0, 2Eh
		db 67h,	6Ch, 20h, 30h, 31h, 3Bh, 33h, 35h, 0, 2Eh, 64h
		db 6Ch,	20h, 30h, 31h, 3Bh, 33h, 35h, 0, 2Eh, 78h, 63h
		db 66h,	20h, 30h, 31h, 3Bh, 33h, 35h, 0, 2Eh, 78h, 77h
		db 64h,	20h, 30h, 31h, 3Bh, 33h, 35h, 0, 2Eh, 79h, 75h
		db 76h,	20h, 30h, 31h, 3Bh, 33h, 35h, 0, 2Eh, 63h, 67h
		db 6Dh,	20h, 30h, 31h, 3Bh, 33h, 35h, 0, 2Eh, 65h, 6Dh
		db 66h,	20h, 30h, 31h, 3Bh, 33h, 35h, 0, 23h, 20h, 68h
		db 2 dup(74h), 70h, 3Ah, 2 dup(2Fh), 77h, 69h, 6Bh, 69h
		db 2Eh,	78h, 69h, 70h, 68h, 2Eh, 6Fh, 72h, 67h,	2Fh, 69h
		db 6Eh,	64h, 65h, 78h, 2Eh, 70h, 68h, 70h, 2Fh,	4Dh, 49h
		db 4Dh,	45h, 5Fh, 54h, 79h, 70h, 65h, 73h, 5Fh,	61h, 6Eh
		db 64h,	5Fh, 46h, 69h, 6Ch, 65h, 5Fh, 45h, 78h,	74h, 65h
		db 6Eh,	73h, 69h, 6Fh, 6Eh, 73h, 0, 2Eh, 61h, 78h, 76h
		db 20h,	30h, 31h, 3Bh, 33h, 35h, 0, 2Eh, 61h, 6Eh, 78h
		db 20h,	30h, 31h, 3Bh, 33h, 35h, 0, 2Eh, 6Fh, 67h, 76h
		db 20h,	30h, 31h, 3Bh, 33h, 35h, 0, 2Eh, 6Fh, 67h, 78h
		db 20h,	30h, 31h, 3Bh, 33h, 35h, 0, 23h, 20h, 61h, 75h
		db 64h,	69h, 6Fh, 20h, 66h, 6Fh, 72h, 6Dh, 61h,	74h, 73h
		db 0, 2Eh, 2 dup(61h), 63h, 20h, 2 dup(30h), 3Bh, 33h
		db 36h,	0, 2Eh,	61h, 75h, 20h, 2 dup(30h), 3Bh,	33h, 36h
		db 0, 2Eh, 66h,	6Ch, 61h, 63h, 20h, 2 dup(30h),	3Bh, 33h
		db 36h,	0, 2Eh,	6Dh, 69h, 64h, 20h, 2 dup(30h),	3Bh, 33h
		db 36h,	0, 2Eh,	6Dh, 69h, 64h, 69h, 20h, 2 dup(30h), 3Bh
		db 33h,	36h, 0,	2Eh, 6Dh, 6Bh, 61h, 20h, 2 dup(30h), 3Bh
		db 33h,	36h, 0,	2Eh, 6Dh, 70h, 33h, 20h, 2 dup(30h), 3Bh
		db 33h,	36h, 0,	2Eh, 6Dh, 70h, 63h, 20h, 2 dup(30h), 3Bh
		db 33h,	36h, 0,	2Eh, 6Fh, 2 dup(67h), 20h, 2 dup(30h)
		db 3Bh,	33h, 36h, 0, 2Eh, 72h, 61h, 20h, 2 dup(30h), 3Bh
		db 33h,	36h, 0,	2Eh, 77h, 61h, 76h, 20h, 2 dup(30h), 3Bh
		db 33h,	36h, 0,	23h, 20h, 68h, 2 dup(74h), 70h,	3Ah, 2 dup(2Fh)
		db 77h,	69h, 6Bh, 69h, 2Eh, 78h, 69h, 70h, 68h,	2Eh, 6Fh
		db 72h,	67h, 2Fh, 69h, 6Eh, 64h, 65h, 78h, 2Eh,	70h, 68h
		db 70h,	2Fh, 4Dh, 49h, 4Dh, 45h, 5Fh, 54h, 79h,	70h, 65h
		db 73h,	5Fh, 61h, 6Eh, 64h, 5Fh, 46h, 69h, 6Ch,	65h, 5Fh
		db 45h,	78h, 74h, 65h, 6Eh, 73h, 69h, 6Fh, 6Eh,	73h, 0
		db 2Eh,	61h, 78h, 61h, 20h, 2 dup(30h),	3Bh, 33h, 36h
		db 0, 2Eh, 6Fh,	67h, 61h, 20h, 2 dup(30h), 3Bh,	33h, 36h
		db 0, 2Eh, 73h,	70h, 78h, 20h, 2 dup(30h), 3Bh,	33h, 36h
		db 0, 2Eh, 78h,	73h, 70h, 66h, 20h, 2 dup(30h),	3Bh, 33h
		db 36h,	0
aNormal		db 'NORMAL',0           ; DATA XREF: dc_parse_stream:loc_80006DFo
					; main:loc_8000ED1o ...
aNorm		db 'NORM',0             ; DATA XREF: .rodata:slack_codeso
aFile		db 'FILE',0             ; DATA XREF: .rodata:slack_codeso
aReset		db 'RESET',0            ; DATA XREF: .rodata:slack_codeso
aDir		db 'DIR',0              ; DATA XREF: .rodata:slack_codeso
aLnk		db 'LNK',0              ; DATA XREF: .rodata:slack_codeso
aLink		db 'LINK',0             ; DATA XREF: .rodata:slack_codeso
aSymlink	db 'SYMLINK',0          ; DATA XREF: .rodata:slack_codeso
aOrphan		db 'ORPHAN',0           ; DATA XREF: .rodata:slack_codeso
aMissing	db 'MISSING',0          ; DATA XREF: .rodata:slack_codeso
aFifo		db 'FIFO',0             ; DATA XREF: .rodata:slack_codeso
aPipe		db 'PIPE',0             ; DATA XREF: .rodata:slack_codeso
aSock		db 'SOCK',0             ; DATA XREF: .rodata:slack_codeso
aBlk		db 'BLK',0              ; DATA XREF: .rodata:slack_codeso
aBlock		db 'BLOCK',0            ; DATA XREF: .rodata:slack_codeso
aChr		db 'CHR',0              ; DATA XREF: .rodata:slack_codeso
aChar		db 'CHAR',0             ; DATA XREF: .rodata:slack_codeso
aDoor		db 'DOOR',0             ; DATA XREF: .rodata:slack_codeso
aExec		db 'EXEC',0             ; DATA XREF: .rodata:slack_codeso
aLeft		db 'LEFT',0             ; DATA XREF: .rodata:slack_codeso
aLeftcode	db 'LEFTCODE',0         ; DATA XREF: .rodata:slack_codeso
aRight		db 'RIGHT',0            ; DATA XREF: .rodata:slack_codeso
aRightcode	db 'RIGHTCODE',0        ; DATA XREF: .rodata:slack_codeso
aEnd		db 'END',0              ; DATA XREF: .rodata:slack_codeso
aEndcode	db 'ENDCODE',0          ; DATA XREF: .rodata:slack_codeso
aSuid		db 'SUID',0             ; DATA XREF: .rodata:slack_codeso
aSetuid		db 'SETUID',0           ; DATA XREF: .rodata:slack_codeso
aSgid		db 'SGID',0             ; DATA XREF: .rodata:slack_codeso
aSetgid		db 'SETGID',0           ; DATA XREF: .rodata:slack_codeso
aSticky		db 'STICKY',0           ; DATA XREF: .rodata:slack_codeso
aOther_writable	db 'OTHER_WRITABLE',0   ; DATA XREF: .rodata:slack_codeso
aOwr		db 'OWR',0              ; DATA XREF: .rodata:slack_codeso
aSticky_other_w	db 'STICKY_OTHER_WRITABLE',0 ; DATA XREF: .rodata:slack_codeso
aOwt		db 'OWT',0              ; DATA XREF: .rodata:slack_codeso
aCapability	db 'CAPABILITY',0       ; DATA XREF: .rodata:slack_codeso
aMultihardlink	db 'MULTIHARDLINK',0    ; DATA XREF: .rodata:slack_codeso
aClrtoeol	db 'CLRTOEOL',0         ; DATA XREF: .rodata:slack_codeso
		align 20h
; const	char *const slack_codes[38]
slack_codes	dd offset aNormal, offset aNorm, offset	aFile, offset aReset
					; DATA XREF: dc_parse_stream+397r
					; dc_parse_stream+3B9r	...
		dd offset aDir,	offset aLnk, offset aLink, offset aSymlink ; "NORMAL"
		dd offset aOrphan, offset aMissing, offset aFifo, offset aPipe
		dd offset aSock, offset	aBlk, offset aBlock, offset aChr
		dd offset aChar, offset	aDoor, offset aExec, offset aLeft
		dd offset aLeftcode, offset aRight, offset aRightcode
		dd offset aEnd,	offset aEndcode, offset	aSuid, offset aSetuid
		dd offset aSgid, offset	aSetgid, offset	aSticky, offset	aOther_writable
		dd offset aOwr,	offset aSticky_other_w,	offset aOwt, offset aCapability
		dd offset aMultihardlink, offset aClrtoeol, 0
byte_8002478	db 6Eh,	6Fh, 0		; DATA XREF: .rodata:ls_codeso
byte_800247B	db 66h			; DATA XREF: .rodata:ls_codeso
		db 69h,	0
word_800247E	dw 7372h		; DATA XREF: .rodata:ls_codeso
		db 0
byte_8002481	db 64h,	69h, 0		; DATA XREF: .rodata:ls_codeso
byte_8002484	db 6Ch,	6Eh, 0		; DATA XREF: .rodata:ls_codeso
byte_8002487	db 6Fh			; DATA XREF: .rodata:ls_codeso
		db 72h,	0
word_800248A	dw 696Dh		; DATA XREF: .rodata:ls_codeso
		db 0
byte_800248D	db 70h,	69h, 0		; DATA XREF: .rodata:ls_codeso
byte_8002490	db 73h,	6Fh, 0		; DATA XREF: .rodata:ls_codeso
byte_8002493	db 62h			; DATA XREF: .rodata:ls_codeso
		db 64h,	0
word_8002496	dw 6463h		; DATA XREF: .rodata:ls_codeso
		db 0
byte_8002499	db 64h,	6Fh, 0		; DATA XREF: .rodata:ls_codeso
byte_800249C	db 65h,	78h, 0		; DATA XREF: .rodata:ls_codeso
byte_800249F	db 6Ch			; DATA XREF: .rodata:ls_codeso
		db 63h,	0
word_80024A2	dw 6372h		; DATA XREF: .rodata:ls_codeso
		db 0
byte_80024A5	db 65h,	63h, 0		; DATA XREF: .rodata:ls_codeso
byte_80024A8	db 73h,	75h, 0		; DATA XREF: .rodata:ls_codeso
byte_80024AB	db 73h			; DATA XREF: .rodata:ls_codeso
		db 67h,	0
word_80024AE	dw 7473h		; DATA XREF: .rodata:ls_codeso
		db 0
byte_80024B1	db 6Fh,	77h, 0		; DATA XREF: .rodata:ls_codeso
byte_80024B4	db 74h,	77h, 0		; DATA XREF: .rodata:ls_codeso
byte_80024B7	db 63h			; DATA XREF: .rodata:ls_codeso
		db 61h,	0
word_80024BA	dw 686Dh		; DATA XREF: .rodata:ls_codeso
		db 0
byte_80024BD	db 63h,	6Ch, 0		; DATA XREF: .rodata:ls_codeso
; const	char *const ls_codes[38]
ls_codes	dd 2 dup(offset	byte_8002478), offset byte_800247B, offset word_800247E
					; DATA XREF: dc_parse_stream+415r
					; dc_parse_stream+45Dr
		dd offset byte_8002481,	3 dup(offset byte_8002484), offset byte_8002487
		dd offset word_800248A,	2 dup(offset byte_800248D), offset byte_8002490
		dd 2 dup(offset	byte_8002493), 2 dup(offset word_8002496)
		dd offset byte_8002499,	offset byte_800249C, 2 dup(offset byte_800249F)
		dd 2 dup(offset	word_80024A2), 2 dup(offset byte_80024A5)
		dd 2 dup(offset	byte_80024A8), 2 dup(offset byte_80024AB)
		dd offset word_80024AE,	2 dup(offset byte_80024B1), 2 dup(offset byte_80024B4)
		dd offset byte_80024B7,	offset word_80024BA, offset byte_80024BD
		dd 0
aBourneShell	db 'bourne-shell',0     ; DATA XREF: .rodata:long_optionso
aSh		db 'sh',0               ; DATA XREF: .rodata:long_optionso
; char aCsh[]
aCsh		db 'csh',0              ; DATA XREF: guess_shell_syntax+44o
					; .rodata:long_optionso
aCShell		db 'c-shell',0          ; DATA XREF: .rodata:long_optionso
aPrintDatabase	db 'print-database',0   ; DATA XREF: .rodata:long_optionso
aHelp		db 'help',0             ; DATA XREF: .rodata:long_optionso
aVersion	db 'version',0          ; DATA XREF: .rodata:long_optionso
		align 20h
; const	option long_options[8]
long_options	option <offset aBourneShell, 0,	0, 62h>	; DATA XREF: main+10Do
		option <offset aSh, 0, 0, 62h> ; "bourne-shell"
		option <offset aCsh, 0,	0, 63h>
		option <offset aCShell,	0, 0, 63h>
		option <offset aPrintDatabase, 0, 0, 70h>
		option <offset aHelp, 0, 0, 0FFFFFF7Eh>
		option <offset aVersion, 0, 0, 0FFFFFF7Dh>
		option	<0>
; char aTrySHelpForMor[]
aTrySHelpForMor	db 'Try `%s --help',27h,' for more information.',0Ah,0
					; DATA XREF: usage+16o
; char aUsageSOption__[]
aUsageSOption__	db 'Usage: %s [OPTION]... [FILE]',0Ah,0 ; DATA XREF: usage+46o
		align 4
; char aOutputCommands[]
aOutputCommands	db 'Output commands to set the LS_COLORS environment variable.',0Ah
					; DATA XREF: usage+69o
		db 0Ah
		db 'Determine format of output:',0Ah
		db '  -b, --sh, --bourne-shell    output Bourne shell code to set LS_'
		db 'COLORS',0Ah
		db '  -c, --csh, --c-shell        output C shell code to set LS_COLOR'
		db 'S',0Ah
		db '  -p, --print-database        output defaults',0Ah,0
		align 4
; char aHelpDisplayThi[]
aHelpDisplayThi	db '      --help     display this help and exit',0Ah,0
					; DATA XREF: usage+8Co
		align 4
; char aVersionOutputV[]
aVersionOutputV	db '      --version  output version information and exit',0Ah,0
					; DATA XREF: usage+AFo
		align 4
; char aIfFileIsSpecif[]
aIfFileIsSpecif	db 0Ah			; DATA XREF: usage+D2o
		db 'If FILE is specified, read it to determine which colors to use fo'
		db 'r which',0Ah
		db 'file types and extensions.  Otherwise, a precompiled database is '
		db 'used.',0Ah
		db 'For details on the format of these files, run `dircolors --print-'
		db 'database',27h,'.',0Ah,0
; char name[]
name		db 'SHELL',0            ; DATA XREF: guess_shell_syntax+9o
; char aTcsh[]
aTcsh		db 'tcsh',0             ; DATA XREF: guess_shell_syntax+5Bo
; char aTerm[]
aTerm		db 'TERM',0             ; DATA XREF: dc_parse_stream+49o
					; dc_parse_stream+148o
aNone		db 'none',0             ; DATA XREF: dc_parse_stream:loc_8000698o
		align 4
; char aSLuInvalidLine[]
aSLuInvalidLine	db '%s:%lu: invalid line;  missing second token',0
					; DATA XREF: dc_parse_stream+103o
aOptions	db 'OPTIONS',0          ; DATA XREF: dc_parse_stream+33Do
aColor		db 'COLOR',0            ; DATA XREF: dc_parse_stream+359o
aEightbit	db 'EIGHTBIT',0         ; DATA XREF: dc_parse_stream+375o
; char aInternal[]
aInternal	db '<internal>',0       ; DATA XREF: dc_parse_stream+52Do
		align 4
; char aSLuUnrecognize[]
aSLuUnrecognize	db '%s:%lu: unrecognized keyword %s',0 ; DATA XREF: dc_parse_stream+53Fo
; char asc_8002948[]
asc_8002948	db '-',0                ; DATA XREF: dc_parse_file+Ao
aR		db 'r',0                ; DATA XREF: dc_parse_file+27o
; char format[]
format		db '%s',0               ; DATA XREF: dc_parse_file+45o
					; dc_parse_file+A0o
; char locale
locale		db 0			; DATA XREF: main+37o
; char dirname[]
dirname		db '/usr/local/share/locale',0 ; DATA XREF: main+49o
aH_PeterAnvin	db 'H. Peter Anvin',0   ; DATA XREF: main+DBo
aDircolors	db 'dircolors',0        ; DATA XREF: main+E6o
; char shortopts[]
shortopts	db 'bcp',0              ; DATA XREF: main+112o
		align 4
; char aTheOptionsToOu[]
aTheOptionsToOu	db 'the options to output dircolors',27h,' internal database and',0Ah
					; DATA XREF: main+152o
		db 'to select a shell syntax are mutually exclusive',0
; char aExtraOperandS[]
aExtraOperandS	db 'extra operand %s',0 ; DATA XREF: main+1B0o
; char aFileOperandsCa[]
aFileOperandsCa	db 'file operands cannot be combined with --print-database (-p)',0
					; DATA XREF: main+1D4o
; char aS_0[]
aS_0		db '%s',0Ah,0           ; DATA XREF: main+1ECo
; char aNoShellEnviron[]
aNoShellEnviron	db 'no SHELL environment variable, and no shell type option given',0
					; DATA XREF: main+25Bo
aLs_colors	db 'LS_COLORS=',27h,0   ; DATA XREF: main+37Do
aExportLs_color	db 27h,';',0Ah          ; DATA XREF: main+384o
		db 'export LS_COLORS',0Ah,0
aSetenvLs_color	db 'setenv LS_COLORS ',27h,0 ; DATA XREF: main:loc_8001029o
asc_8002AB2	db 27h,0Ah,0		; DATA XREF: main+394o
_rodata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_eh_frame	segment	dword public 'CONST' use32
		assume cs:_eh_frame
		;org 8002AB8h
		dd 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 2	dup(1Ch)
		dd offset loc_800108B-8003B63h
		dd 12h,	80E4100h, 0D420285h, 0CC54E05h,	404h, 20h, 3Ch
		dd offset loc_800108B-8003B71h
		dd 11Ch, 80E4100h, 0D420285h, 3834405h,	0C5011403h, 4040CC3h
		dd 18h,	60h
		dd offset loc_800108B-8003A79h
		dd 0FCh, 80E4100h, 0D420285h, 3834405h,	1Ch, 7Ch
		dd offset loc_800108B-8003999h
		dd 7Dh,	80E4100h, 0D420285h, 0C5790205h, 4040Ch, 20h, 9Ch
		dd offset loc_800108B-800393Ch
		dd 1C9h, 80E4100h, 0D420285h, 3834405h,	0C501C103h, 4040CC3h
		dd 1Ch,	0C0h
		dd offset loc_800108B-8003797h
		dd 1BFh, 80E4100h, 0D420285h, 1BB0305h,	4040CC5h, 28h
		dd 0E0h
		dd offset loc_800108B-80035F8h
		dd 5ADh, 80E4100h, 0D420285h, 3864505h,	0A2030483h, 0C641C305h
		dd 40CC541h, 4,	20h, 10Ch
		dd offset loc_800108B-8003077h
		dd 0C0h, 80E4100h, 0D420285h, 3834405h,	0C3C5B802h, 4040Ch
		dd 24h,	130h
		dd offset loc_800108B-8002FDBh
		dd 3F4h, 10C4400h, 5104700h, 44007502h,	7875030Fh, 2031006h
		dd 7C75h
_eh_frame	ends

; ===========================================================================

; Segment type:	Externs
; extern
		extrn program_name:dword ; DATA	XREF: emit_ancillary_info+7r
					; emit_ancillary_info+B6r ...
		extrn last_component:near ; CODE XREF: emit_ancillary_info+10p
					; emit_ancillary_info+BFp ...
; char *gettext(const char *msgid)
		extrn gettext:near	; CODE XREF: emit_ancillary_info+22p
					; emit_ancillary_info+44p ...
; int printf(const char	*format, ...)
		extrn printf:near	; CODE XREF: emit_ancillary_info+34p
					; emit_ancillary_info+5Ap ...
; struct _IO_FILE *stdout
		extrn stdout:dword	; DATA XREF: emit_ancillary_info+62r
					; usage+60r ...
		extrn fputs_unlocked:near ; CODE XREF: emit_ancillary_info+7Dp
					; usage+7Bp ...
; char *setlocale(int category,	const char *locale)
		extrn setlocale:near	; CODE XREF: emit_ancillary_info+8Cp
					; main+3Ep
; int strncmp(const char *s1, const char *s2, size_t n)
		extrn strncmp:near	; CODE XREF: emit_ancillary_info+AAp
; struct _IO_FILE *stderr
		extrn stderr:dword	; DATA XREF: usage+25r	main+1E3r
; int fprintf(FILE *stream, const char *format,	...)
		extrn fprintf:near	; CODE XREF: usage+30p	main+1F2p
; void exit(int	status)
		extrn exit:near		; CODE XREF: usage+F7p	main+F9p ...
; char *getenv(const char *name)
		extrn getenv:near	; CODE XREF: guess_shell_syntax+Ep
					; dc_parse_stream+4Ep
; int strcmp(const char	*s1, const char	*s2)
		extrn strcmp:near	; CODE XREF: guess_shell_syntax+4Cp
					; guess_shell_syntax+63p ...
; const	unsigned __int16 **_ctype_b_loc(void)
		extrn __ctype_b_loc:near ; CODE	XREF: parse_line:loc_80002CCp
					; parse_line:loc_8000326p ...
; char *xstrndup(const char *, size_t)
		extrn xstrndup:near	; CODE XREF: parse_line+CCp
					; parse_line+1ACp
; void obstack_newchunk(struct obstack *, int)
		extrn _obstack_newchunk:near ; CODE XREF: append_quoted+72p
					; append_quoted+AEp ...
		extrn getline:near	; CODE XREF: dc_parse_stream+88p
; void free(void *ptr)
		extrn free:near		; CODE XREF: dc_parse_stream+9Bp
					; dc_parse_stream+131p	...
; size_t strlen(const char *s)
		extrn strlen:near	; CODE XREF: dc_parse_stream+CAp
					; main+227p
; void error(int status, int errnum, const char	*format, ...)
		extrn error:near	; CODE XREF: dc_parse_stream+11Ep
					; dc_parse_stream+559p	...
		extrn c_strcasecmp:near	; CODE XREF: dc_parse_stream+14Ep
					; dc_parse_stream+343p	...
		extrn quote:near	; CODE XREF: dc_parse_stream+51Ep
					; dc_parse_file+8Ep ...
		extrn __stack_chk_fail:near ; CODE XREF: dc_parse_stream:loc_8000BD0p
; struct _IO_FILE *stdin
		extrn stdin:dword	; DATA XREF: dc_parse_file+1Er
					; dc_parse_file:loc_8000C38r ...
		extrn freopen_safer:near ; CODE	XREF: dc_parse_file+2Fp
; int *_errno_location(void)
		extrn __errno_location:near ; CODE XREF: dc_parse_file+3Bp
					; dc_parse_file+98p
; int fclose(FILE *stream)
		extrn fclose:near	; CODE XREF: dc_parse_file+7Cp
		extrn set_program_name:near ; CODE XREF: main+2Cp
; char *bindtextdomain(const char *domainname, const char *dirname)
		extrn bindtextdomain:near ; CODE XREF: main+53p
; char *textdomain(const char *domainname)
		extrn textdomain:near	; CODE XREF: main+63p
; void close_stdout(void)
		extrn close_stdout	; DATA XREF: main+6Eo
; int atexit(void (*func)(void))
		extrn atexit:near	; CODE XREF: main+73p
		extrn Version:dword	; DATA XREF: main:loc_8000D67r
		extrn version_etc:near	; CODE XREF: main+ECp
; int getopt_long(int argc, char *const	*argv, const char *shortopts, const struct option *longopts, int *longind)
		extrn getopt_long:near	; CODE XREF: main+11Cp
; int optind
		extrn optind:dword	; DATA XREF: main+131r	main+138r
; int puts(const char *s)
		extrn puts:near		; CODE XREF: main+219p
; void *malloc(size_t size)
		extrn malloc		; DATA XREF: main+280o
; int obstack_begin(struct obstack *, int, int,	void *(*)(__int32), void (*)(void *))
		extrn _obstack_begin:near ; CODE XREF: main+28Ep
; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
		extrn fwrite_unlocked:near ; CODE XREF:	main+3BDp


		end
