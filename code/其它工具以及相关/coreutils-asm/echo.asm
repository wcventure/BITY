;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B611-7234-BB			    |
; |		Doskey Lee, Kingsoft Internet Security Software		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	0C564597E41D7337FD00736BB2BB5E83
; Input	CRC32 :	1D59C972

; File Name   :	D:\coreutils-o\echo.o
; Format      :	ELF for	Intel 386 (Relocatable)
;
; Source File :	'echo.c'

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	byte public 'CODE' use32
		assume cs:_text
		;org 8000000h
		assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void emit_ancillary_info()
emit_ancillary_info proc near		; CODE XREF: usage+17Bp

lc_messages	= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset msgid	; "\nReport %s bugs to %s\n"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset aBugCoreutils@g ; "bug-coreutils@gnu.org"
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	offset aSHomePageHttpW ; "%s home page:	<http://www.gnu.org/softw"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset domainname ; "coreutils"
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aGeneralHelpUsi ; "General help using GNU software: <http:"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		sub	esp, 8
		push	0		; locale
		push	5		; category
		call	setlocale
		add	esp, 10h
		mov	[ebp+lc_messages], eax
		cmp	[ebp+lc_messages], 0
		jz	short loc_80000E6
		sub	esp, 4
		push	3		; n
		push	offset s2	; "en_"
		push	[ebp+lc_messages] ; s1
		call	strncmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_80000E6
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aReportSTransla ; "Report %s translation	bugs to	<http://t"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h

loc_80000E6:				; CODE XREF: emit_ancillary_info+9Bj
					; emit_ancillary_info+B4j
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aForCompleteDoc ; "For complete documentation, run: info	c"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		nop
		mov	ebx, [ebp+var_4]
		leave
		retn
emit_ancillary_info endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; void __cdecl usage(int status)
		public usage
usage		proc near		; CODE XREF: main+EFp

status		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		cmp	[ebp+status], 0
		jz	short loc_8000157
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, ds:stderr
		sub	esp, 4
		push	ebx
		push	edx		; format
		push	eax		; stream
		call	fprintf
		add	esp, 10h
		jmp	loc_800029C
; ---------------------------------------------------------------------------

loc_8000157:				; CODE XREF: usage+9j
		mov	esi, ds:program_name
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aUsageSShortOpt ; "Usage: %s [SHORT-OPTION]... [STRING]..."...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	esi
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aEchoTheStringS ; "Echo the STRING(s) to	standard output.\"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aEEnableInterpr ; "  -e		   enable interpretation "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aHelpDisplayThi ; "	--help	   display this	help and "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aVersionOutputV ; "	--version  output version informa"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aIfEIsInEffectT ; "\nIf -e is in	effect,	the following seq"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aBackslashAAler ; "  \\\\      backslash\n  \\a	    alert"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset a0nnnByteWithOc ; "  \\0NNN   byte with octal value NNN (1"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		sub	esp, 0Ch
		push	offset aNoteYourShellM ; "\nNOTE: your shell may have its own ver"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	offset aEcho	; "echo"
		push	eax		; format
		call	printf
		add	esp, 10h
		call	emit_ancillary_info

loc_800029C:				; CODE XREF: usage+36j
		sub	esp, 0Ch
		push	[ebp+status]	; status
		call	exit
usage		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; int __cdecl hextobin(unsigned	__int8 c)
hextobin	proc near		; CODE XREF: main+2EDp	main+338p

c		= byte ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 4
		mov	eax, [ebp+arg_0]
		mov	[ebp+c], al
		movzx	eax, [ebp+c]
		sub	eax, 41h	; switch 38 cases
		cmp	eax, 25h
		ja	short loc_80002C8 ; jumptable 080002C6 default case
		mov	eax, ds:off_8000CF8[eax*4]
		jmp	eax		; switch jump
; ---------------------------------------------------------------------------

loc_80002C8:				; CODE XREF: hextobin+16j hextobin+1Fj
					; DATA XREF: ...
		movzx	eax, [ebp+c]	; jumptable 080002C6 default case
		sub	eax, 30h
		jmp	short locret_80002F9
; ---------------------------------------------------------------------------

loc_80002D1:				; CODE XREF: hextobin+1Fj
					; DATA XREF: .rodata:off_8000CF8o
		mov	eax, 0Ah	; jumptable 080002C6 cases 65,97
		jmp	short locret_80002F9
; ---------------------------------------------------------------------------

loc_80002D8:				; CODE XREF: hextobin+1Fj
					; DATA XREF: .rodata:off_8000CF8o
		mov	eax, 0Bh	; jumptable 080002C6 cases 66,98
		jmp	short locret_80002F9
; ---------------------------------------------------------------------------

loc_80002DF:				; CODE XREF: hextobin+1Fj
					; DATA XREF: .rodata:off_8000CF8o
		mov	eax, 0Ch	; jumptable 080002C6 cases 67,99
		jmp	short locret_80002F9
; ---------------------------------------------------------------------------

loc_80002E6:				; CODE XREF: hextobin+1Fj
					; DATA XREF: .rodata:off_8000CF8o
		mov	eax, 0Dh	; jumptable 080002C6 cases 68,100
		jmp	short locret_80002F9
; ---------------------------------------------------------------------------

loc_80002ED:				; CODE XREF: hextobin+1Fj
					; DATA XREF: .rodata:off_8000CF8o
		mov	eax, 0Eh	; jumptable 080002C6 cases 69,101
		jmp	short locret_80002F9
; ---------------------------------------------------------------------------

loc_80002F4:				; CODE XREF: hextobin+1Fj
					; DATA XREF: .rodata:off_8000CF8o
		mov	eax, 0Fh	; jumptable 080002C6 cases 70,102

locret_80002F9:				; CODE XREF: hextobin+28j hextobin+2Fj ...
		leave
		retn
hextobin	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public main
main		proc near

display_return	= byte ptr -29h
do_v9		= byte ptr -28h
c		= byte ptr -27h
allow_options	= byte ptr -26h
ch_0		= byte ptr -25h
temp		= dword	ptr -24h
i		= dword	ptr -20h
s		= dword	ptr -1Ch
argc		= dword	ptr  0Ch
argv		= dword	ptr  10h
envp		= dword	ptr  14h

		lea	ecx, [esp+4]
		and	esp, 0FFFFFFF0h
		push	dword ptr [ecx-4]
		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		push	ecx
		sub	esp, 2Ch
		mov	ebx, ecx
		mov	[ebp+display_return], 1
		sub	esp, 0Ch
		push	offset name	; "POSIXLY_CORRECT"
		call	getenv
		add	esp, 10h
		test	eax, eax
		jz	short loc_800034A
		cmp	dword ptr [ebx], 1
		jle	short loc_8000351
		mov	eax, [ebx+4]
		add	eax, 4
		mov	eax, [eax]
		sub	esp, 8
		push	offset aN	; "-n"
		push	eax		; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		jnz	short loc_8000351

loc_800034A:				; CODE XREF: main+2Bj
		mov	eax, 1
		jmp	short loc_8000356
; ---------------------------------------------------------------------------

loc_8000351:				; CODE XREF: main+30j main+4Dj
		mov	eax, 0

loc_8000356:				; CODE XREF: main+54j
		mov	[ebp+allow_options], al
		and	[ebp+allow_options], 1
		mov	[ebp+do_v9], 0
		mov	eax, [ebx+4]
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	set_program_name
		add	esp, 10h
		sub	esp, 8
		push	offset locale	; locale
		push	6		; category
		call	setlocale
		add	esp, 10h
		sub	esp, 8
		push	offset dirname	; "/usr/local/share/locale"
		push	offset domainname ; "coreutils"
		call	bindtextdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset domainname ; "coreutils"
		call	textdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset close_stdout ; func
		call	atexit
		add	esp, 10h
		cmp	[ebp+allow_options], 0
		jz	loc_8000444
		cmp	dword ptr [ebx], 2
		jnz	short loc_8000444
		mov	eax, [ebx+4]
		add	eax, 4
		mov	eax, [eax]
		sub	esp, 8
		push	offset aHelp	; "--help"
		push	eax		; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		jnz	short loc_80003EF
		sub	esp, 0Ch
		push	0		; status
		call	usage
; ---------------------------------------------------------------------------

loc_80003EF:				; CODE XREF: main+E8j
		mov	eax, [ebx+4]
		add	eax, 4
		mov	eax, [eax]
		sub	esp, 8
		push	offset aVersion	; "--version"
		push	eax		; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		jnz	short loc_8000444
		mov	edx, ds:Version
		mov	eax, ds:stdout
		sub	esp, 4
		push	0
		push	offset aChetRamey ; "Chet Ramey"
		push	offset aBrianFox ; "Brian Fox"
		push	edx
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	offset aEcho	; "echo"
		push	eax
		call	version_etc
		add	esp, 20h
		sub	esp, 0Ch
		push	0		; status
		call	exit
; ---------------------------------------------------------------------------

loc_8000444:				; CODE XREF: main+C2j main+CBj ...
		sub	dword ptr [ebx], 1
		add	dword ptr [ebx+4], 4
		cmp	[ebp+allow_options], 0
		jz	just_echo
		jmp	loc_80004EB
; ---------------------------------------------------------------------------

loc_800045A:				; CODE XREF: main+1FFj
		mov	eax, [ebx+4]
		mov	eax, [eax]
		add	eax, 1
		mov	[ebp+temp], eax
		mov	[ebp+i], 0
		jmp	short loc_8000492
; ---------------------------------------------------------------------------

loc_800046E:				; CODE XREF: main+1A4j
		mov	edx, [ebp+temp]
		mov	eax, [ebp+i]
		add	eax, edx
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		cmp	eax, 65h
		jz	short loc_800048D
		cmp	eax, 6Eh
		jz	short loc_800048D
		cmp	eax, 45h
		jz	short loc_800048D
		jmp	short just_echo
; ---------------------------------------------------------------------------

loc_800048D:				; CODE XREF: main+184j	main+189j ...
		nop
		add	[ebp+i], 1

loc_8000492:				; CODE XREF: main+171j
		mov	edx, [ebp+temp]
		mov	eax, [ebp+i]
		add	eax, edx
		movzx	eax, byte ptr [eax]
		test	al, al
		jnz	short loc_800046E
		cmp	[ebp+i], 0
		jz	short loc_8000502
		jmp	short loc_80004DA
; ---------------------------------------------------------------------------

loc_80004A9:				; CODE XREF: main+1E7j
		mov	eax, [ebp+temp]
		lea	edx, [eax+1]
		mov	[ebp+temp], edx
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		cmp	eax, 65h
		jz	short loc_80004C9
		cmp	eax, 6Eh
		jz	short loc_80004D5
		cmp	eax, 45h
		jz	short loc_80004CF
		jmp	short loc_80004DA
; ---------------------------------------------------------------------------

loc_80004C9:				; CODE XREF: main+1C0j
		mov	[ebp+do_v9], 1
		jmp	short loc_80004DA
; ---------------------------------------------------------------------------

loc_80004CF:				; CODE XREF: main+1CAj
		mov	[ebp+do_v9], 0
		jmp	short loc_80004DA
; ---------------------------------------------------------------------------

loc_80004D5:				; CODE XREF: main+1C5j
		mov	[ebp+display_return], 0
		nop

loc_80004DA:				; CODE XREF: main+1ACj	main+1CCj ...
		mov	eax, [ebp+temp]
		movzx	eax, byte ptr [eax]
		test	al, al
		jnz	short loc_80004A9
		sub	dword ptr [ebx], 1
		add	dword ptr [ebx+4], 4

loc_80004EB:				; CODE XREF: main+15Aj
		cmp	dword ptr [ebx], 0
		jle	short just_echo
		mov	eax, [ebx+4]
		mov	eax, [eax]
		movzx	eax, byte ptr [eax]
		cmp	al, 2Dh
		jz	loc_800045A
		jmp	short just_echo
; ---------------------------------------------------------------------------

loc_8000502:				; CODE XREF: main+1AAj
		nop

just_echo:				; CODE XREF: main+154j	main+190j ...
		cmp	[ebp+do_v9], 0
		jz	loc_8000775
		jmp	loc_8000739
; ---------------------------------------------------------------------------

loc_8000512:				; CODE XREF: main+441j
		mov	eax, [ebx+4]
		mov	eax, [eax]
		mov	[ebp+s], eax
		jmp	loc_8000707
; ---------------------------------------------------------------------------

loc_800051F:				; CODE XREF: main+41Fj
		cmp	[ebp+c], 5Ch
		jnz	loc_80006F7
		mov	eax, [ebp+s]
		movzx	eax, byte ptr [eax]
		test	al, al
		jz	loc_80006F7
		mov	eax, [ebp+s]
		lea	edx, [eax+1]
		mov	[ebp+s], edx
		movzx	eax, byte ptr [eax]
		mov	[ebp+c], al
		movzx	eax, [ebp+c]
		sub	eax, 30h	; switch 73 cases
		cmp	eax, 48h
		ja	not_an_escape	; jumptable 0800055D default case
		mov	eax, ds:off_8000DE4[eax*4]
		jmp	eax		; switch jump
; ---------------------------------------------------------------------------

loc_800055F:				; CODE XREF: main+262j
					; DATA XREF: .rodata:off_8000DE4o
		mov	[ebp+c], 7	; jumptable 0800055D case 97
		jmp	loc_80006F7
; ---------------------------------------------------------------------------

loc_8000568:				; CODE XREF: main+262j
					; DATA XREF: .rodata:off_8000DE4o
		mov	[ebp+c], 8	; jumptable 0800055D case 98
		jmp	loc_80006F7
; ---------------------------------------------------------------------------

loc_8000571:				; CODE XREF: main+262j
					; DATA XREF: .rodata:off_8000DE4o
		sub	esp, 0Ch	; jumptable 0800055D case 99
		push	0		; status
		call	exit
; ---------------------------------------------------------------------------

loc_800057B:				; CODE XREF: main+262j
					; DATA XREF: .rodata:off_8000DE4o
		mov	[ebp+c], 1Bh	; jumptable 0800055D case 101
		jmp	loc_80006F7
; ---------------------------------------------------------------------------

loc_8000584:				; CODE XREF: main+262j
					; DATA XREF: .rodata:off_8000DE4o
		mov	[ebp+c], 0Ch	; jumptable 0800055D case 102
		jmp	loc_80006F7
; ---------------------------------------------------------------------------

loc_800058D:				; CODE XREF: main+262j
					; DATA XREF: .rodata:off_8000DE4o
		mov	[ebp+c], 0Ah	; jumptable 0800055D case 110
		jmp	loc_80006F7
; ---------------------------------------------------------------------------

loc_8000596:				; CODE XREF: main+262j
					; DATA XREF: .rodata:off_8000DE4o
		mov	[ebp+c], 0Dh	; jumptable 0800055D case 114
		jmp	loc_80006F7
; ---------------------------------------------------------------------------

loc_800059F:				; CODE XREF: main+262j
					; DATA XREF: .rodata:off_8000DE4o
		mov	[ebp+c], 9	; jumptable 0800055D case 116
		jmp	loc_80006F7
; ---------------------------------------------------------------------------

loc_80005A8:				; CODE XREF: main+262j
					; DATA XREF: .rodata:off_8000DE4o
		mov	[ebp+c], 0Bh	; jumptable 0800055D case 118
		jmp	loc_80006F7
; ---------------------------------------------------------------------------

loc_80005B1:				; CODE XREF: main+262j
					; DATA XREF: .rodata:off_8000DE4o
		mov	eax, [ebp+s]	; jumptable 0800055D case 120
		movzx	eax, byte ptr [eax]
		mov	[ebp+ch_0], al
		call	__ctype_b_loc
		mov	eax, [eax]
		movzx	edx, [ebp+ch_0]
		add	edx, edx
		add	eax, edx
		movzx	eax, word ptr [eax]
		movzx	eax, ax
		and	eax, 1000h
		test	eax, eax
		jz	loc_80006E0
		add	[ebp+s], 1
		movzx	eax, [ebp+ch_0]
		sub	esp, 0Ch
		push	eax		; c
		call	hextobin
		add	esp, 10h
		mov	[ebp+c], al
		mov	eax, [ebp+s]
		movzx	eax, byte ptr [eax]
		mov	[ebp+ch_0], al
		call	__ctype_b_loc
		mov	eax, [eax]
		movzx	edx, [ebp+ch_0]
		add	edx, edx
		add	eax, edx
		movzx	eax, word ptr [eax]
		movzx	eax, ax
		and	eax, 1000h
		test	eax, eax
		jz	loc_80006F3
		add	[ebp+s], 1
		movzx	eax, [ebp+c]
		shl	eax, 4
		mov	esi, eax
		movzx	eax, [ebp+ch_0]
		sub	esp, 0Ch
		push	eax		; c
		call	hextobin
		add	esp, 10h
		add	eax, esi
		mov	[ebp+c], al
		jmp	loc_80006F3
; ---------------------------------------------------------------------------

loc_8000645:				; CODE XREF: main+262j
					; DATA XREF: .rodata:off_8000DE4o
		mov	[ebp+c], 0	; jumptable 0800055D case 48
		mov	eax, [ebp+s]
		movzx	eax, byte ptr [eax]
		cmp	al, 2Fh
		jle	loc_80006F7
		mov	eax, [ebp+s]
		movzx	eax, byte ptr [eax]
		cmp	al, 37h
		jg	loc_80006F7
		mov	eax, [ebp+s]
		lea	edx, [eax+1]
		mov	[ebp+s], edx
		movzx	eax, byte ptr [eax]
		mov	[ebp+c], al

loc_8000674:				; CODE XREF: main+262j
					; DATA XREF: .rodata:off_8000DE4o
		sub	[ebp+c], 30h	; jumptable 0800055D cases 49-55
		mov	eax, [ebp+s]
		movzx	eax, byte ptr [eax]
		cmp	al, 2Fh
		jle	short loc_80006AB
		mov	eax, [ebp+s]
		movzx	eax, byte ptr [eax]
		cmp	al, 37h
		jg	short loc_80006AB
		movzx	eax, [ebp+c]
		lea	ecx, ds:0[eax*8]
		mov	eax, [ebp+s]
		lea	edx, [eax+1]
		mov	[ebp+s], edx
		movzx	eax, byte ptr [eax]
		add	eax, ecx
		sub	eax, 30h
		mov	[ebp+c], al

loc_80006AB:				; CODE XREF: main+385j	main+38Fj
		mov	eax, [ebp+s]
		movzx	eax, byte ptr [eax]
		cmp	al, 2Fh
		jle	short loc_80006F6
		mov	eax, [ebp+s]
		movzx	eax, byte ptr [eax]
		cmp	al, 37h
		jg	short loc_80006F6
		movzx	eax, [ebp+c]
		lea	ecx, ds:0[eax*8]
		mov	eax, [ebp+s]
		lea	edx, [eax+1]
		mov	[ebp+s], edx
		movzx	eax, byte ptr [eax]
		add	eax, ecx
		sub	eax, 30h
		mov	[ebp+c], al
		jmp	short loc_80006F6
; ---------------------------------------------------------------------------

loc_80006E0:				; CODE XREF: main+2DBj
		nop

not_an_escape:				; CODE XREF: main+255j	main+262j
					; DATA XREF: ...
		sub	esp, 0Ch	; jumptable 0800055D default case
		push	5Ch		; c
		call	putchar_unlocked
		add	esp, 10h
		jmp	short loc_80006F7
; ---------------------------------------------------------------------------

loc_80006F0:				; CODE XREF: main+262j
					; DATA XREF: .rodata:off_8000DE4o
		nop			; jumptable 0800055D case 92
		jmp	short loc_80006F7
; ---------------------------------------------------------------------------

loc_80006F3:				; CODE XREF: main+31Dj	main+345j
		nop
		jmp	short loc_80006F7
; ---------------------------------------------------------------------------

loc_80006F6:				; CODE XREF: main+3B8j	main+3C2j ...
		nop

loc_80006F7:				; CODE XREF: main+228j	main+236j ...
		movzx	eax, [ebp+c]
		sub	esp, 0Ch
		push	eax		; c
		call	putchar_unlocked
		add	esp, 10h

loc_8000707:				; CODE XREF: main+21Fj
		mov	eax, [ebp+s]
		lea	edx, [eax+1]
		mov	[ebp+s], edx
		movzx	eax, byte ptr [eax]
		mov	[ebp+c], al
		cmp	[ebp+c], 0
		jnz	loc_800051F
		sub	dword ptr [ebx], 1
		add	dword ptr [ebx+4], 4
		cmp	dword ptr [ebx], 0
		jle	short loc_8000739
		sub	esp, 0Ch
		push	20h		; c
		call	putchar_unlocked
		add	esp, 10h

loc_8000739:				; CODE XREF: main+212j	main+42Fj
		cmp	dword ptr [ebx], 0
		jg	loc_8000512
		jmp	short loc_800077A
; ---------------------------------------------------------------------------

loc_8000744:				; CODE XREF: main+47Dj
		mov	edx, ds:stdout
		mov	eax, [ebx+4]
		mov	eax, [eax]
		sub	esp, 8
		push	edx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		sub	dword ptr [ebx], 1
		add	dword ptr [ebx+4], 4
		cmp	dword ptr [ebx], 0
		jle	short loc_8000775
		sub	esp, 0Ch
		push	20h		; c
		call	putchar_unlocked
		add	esp, 10h

loc_8000775:				; CODE XREF: main+20Cj	main+46Bj
		cmp	dword ptr [ebx], 0
		jg	short loc_8000744

loc_800077A:				; CODE XREF: main+447j
		cmp	[ebp+display_return], 0
		jz	short loc_800078D
		sub	esp, 0Ch
		push	0Ah		; c
		call	putchar_unlocked
		add	esp, 10h

loc_800078D:				; CODE XREF: main+483j
		sub	esp, 0Ch
		push	0		; status

loc_8000792:				; DATA XREF: .eh_frame:08000F28o
					; .eh_frame:08000F4Co ...
		call	exit
main		endp

_text		ends

; ===========================================================================

; Segment type:	Zero-length
; Segment permissions: Read/Write
_data		segment	byte public 'DATA' use32
_data		ends

; ===========================================================================

; Segment type:	Zero-length
; Segment permissions: Read/Write
_bss		segment	byte public 'BSS' use32
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rodata		segment	dword public 'CONST' use32
		assume cs:_rodata
		;org 800079Ch
; char msgid[]
msgid		db 0Ah			; DATA XREF: emit_ancillary_info+1Do
		db 'Report %s bugs to %s',0Ah,0
aBugCoreutils@g	db 'bug-coreutils@gnu.org',0 ; DATA XREF: emit_ancillary_info+2Do
		align 4
; char aSHomePageHttpW[]
aSHomePageHttpW	db '%s home page: <http://www.gnu.org/software/%s/>',0Ah,0
					; DATA XREF: emit_ancillary_info+3Fo
; char domainname[]
domainname	db 'coreutils',0        ; DATA XREF: emit_ancillary_info+4Fo
					; main+91o ...
aGnuCoreutils	db 'GNU coreutils',0    ; DATA XREF: emit_ancillary_info+54o
					; main+12Co
		align 4
; char aGeneralHelpUsi[]
aGeneralHelpUsi	db 'General help using GNU software: <http://www.gnu.org/gethelp/>',0Ah,0
					; DATA XREF: emit_ancillary_info+6Bo
; char s2[]
s2		db 'en_',0              ; DATA XREF: emit_ancillary_info+A2o
; char aReportSTransla[]
aReportSTransla	db 'Report %s translation bugs to <http://translationproject.org/team'
					; DATA XREF: emit_ancillary_info+CCo
		db '/>',0Ah,0
		align 4
; char aForCompleteDoc[]
aForCompleteDoc	db 'For complete documentation, run: info coreutils ',27h,'%s invocation'
					; DATA XREF: emit_ancillary_info+FCo
		db 27h,0Ah,0
		align 4
; char aTrySHelpForMor[]
aTrySHelpForMor	db 'Try `%s --help',27h,' for more information.',0Ah,0
					; DATA XREF: usage+14o
		align 10h
; char aUsageSShortOpt[]
aUsageSShortOpt	db 'Usage: %s [SHORT-OPTION]... [STRING]...',0Ah ; DATA XREF: usage+4Ao
		db '  or:  %s LONG-OPTION',0Ah,0
		align 10h
; char aEchoTheStringS[]
aEchoTheStringS	db 'Echo the STRING(s) to standard output.',0Ah ; DATA XREF: usage+6Eo
		db 0Ah
		db '  -n             do not output the trailing newline',0Ah,0
		align 10h
; char aEEnableInterpr[]
aEEnableInterpr	db '  -e             enable interpretation of backslash escapes',0Ah
					; DATA XREF: usage+91o
		db '  -E             disable interpretation of backslash escapes (def'
		db 'ault)',0Ah,0
; char aHelpDisplayThi[]
aHelpDisplayThi	db '      --help     display this help and exit',0Ah,0
					; DATA XREF: usage+B4o
		align 4
; char aVersionOutputV[]
aVersionOutputV	db '      --version  output version information and exit',0Ah,0
					; DATA XREF: usage+D7o
		align 4
; char aIfEIsInEffectT[]
aIfEIsInEffectT	db 0Ah			; DATA XREF: usage+FAo
		db 'If -e is in effect, the following sequences are recognized:',0Ah
		db 0Ah,0
		align 4
; char aBackslashAAler[]
aBackslashAAler	db '  \\      backslash',0Ah ; DATA XREF: usage+11Do
		db '  \a      alert (BEL)',0Ah
		db '  \b      backspace',0Ah
		db '  \c      produce no further output',0Ah
		db '  \e      escape',0Ah
		db '  \f      form feed',0Ah
		db '  \n      new line',0Ah
		db '  \r      carriage return',0Ah
		db '  \t      horizontal tab',0Ah
		db '  \v      vertical tab',0Ah,0
		align 4
; char a0nnnByteWithOc[]
a0nnnByteWithOc	db '  \0NNN   byte with octal value NNN (1 to 3 digits)',0Ah
					; DATA XREF: usage+140o
		db '  \xHH    byte with hexadecimal value HH (1 to 2 digits)',0Ah,0
		align 4
; char aNoteYourShellM[]
aNoteYourShellM	db 0Ah			; DATA XREF: usage+15Do
		db 'NOTE: your shell may have its own version of %s, which usually su'
		db 'persedes',0Ah
		db 'the version described here.  Please refer to your shell',27h,'s docu'
		db 'mentation',0Ah
		db 'for details about the options it supports.',0Ah,0
aEcho		db 'echo',0             ; DATA XREF: usage+16Do main+131o
off_8000CF8	dd offset loc_80002D1	; DATA XREF: hextobin+18r
		dd offset loc_80002D8	; jump table for switch	statement
		dd offset loc_80002DF
		dd offset loc_80002E6
		dd offset loc_80002ED
		dd offset loc_80002F4
		dd offset loc_80002C8
		dd offset loc_80002C8
		dd offset loc_80002C8
		dd offset loc_80002C8
		dd offset loc_80002C8
		dd offset loc_80002C8
		dd offset loc_80002C8
		dd offset loc_80002C8
		dd offset loc_80002C8
		dd offset loc_80002C8
		dd offset loc_80002C8
		dd offset loc_80002C8
		dd offset loc_80002C8
		dd offset loc_80002C8
		dd offset loc_80002C8
		dd offset loc_80002C8
		dd offset loc_80002C8
		dd offset loc_80002C8
		dd offset loc_80002C8
		dd offset loc_80002C8
		dd offset loc_80002C8
		dd offset loc_80002C8
		dd offset loc_80002C8
		dd offset loc_80002C8
		dd offset loc_80002C8
		dd offset loc_80002C8
		dd offset loc_80002D1
		dd offset loc_80002D8
		dd offset loc_80002DF
		dd offset loc_80002E6
		dd offset loc_80002ED
		dd offset loc_80002F4
; char name[]
name		db 'POSIXLY_CORRECT',0  ; DATA XREF: main+1Co
; char aN[]
aN		db '-n',0               ; DATA XREF: main+3Do
; char locale
locale		db 0			; DATA XREF: main+7Ao
; char dirname[]
dirname		db '/usr/local/share/locale',0 ; DATA XREF: main+8Co
; char aHelp[]
aHelp		db '--help',0           ; DATA XREF: main+D8o
; char aVersion[]
aVersion	db '--version',0        ; DATA XREF: main+FFo
aChetRamey	db 'Chet Ramey',0       ; DATA XREF: main+121o
aBrianFox	db 'Brian Fox',0        ; DATA XREF: main+126o
		align 4
off_8000DE4	dd offset loc_8000645, offset loc_8000674, offset loc_8000674
					; DATA XREF: main+25Br
		dd offset loc_8000674, offset loc_8000674, offset loc_8000674 ;	jump table for switch statement
		dd offset loc_8000674, offset loc_8000674, offset not_an_escape
		dd offset not_an_escape, offset	not_an_escape, offset not_an_escape
		dd offset not_an_escape, offset	not_an_escape, offset not_an_escape
		dd offset not_an_escape, offset	not_an_escape, offset not_an_escape
		dd offset not_an_escape, offset	not_an_escape, offset not_an_escape
		dd offset not_an_escape, offset	not_an_escape, offset not_an_escape
		dd offset not_an_escape, offset	not_an_escape, offset not_an_escape
		dd offset not_an_escape, offset	not_an_escape, offset not_an_escape
		dd offset not_an_escape, offset	not_an_escape, offset not_an_escape
		dd offset not_an_escape, offset	not_an_escape, offset not_an_escape
		dd offset not_an_escape, offset	not_an_escape, offset not_an_escape
		dd offset not_an_escape, offset	not_an_escape, offset not_an_escape
		dd offset not_an_escape, offset	not_an_escape, offset loc_80006F0
		dd offset not_an_escape, offset	not_an_escape, offset not_an_escape
		dd offset not_an_escape, offset	loc_800055F, offset loc_8000568
		dd offset loc_8000571, offset not_an_escape, offset loc_800057B
		dd offset loc_8000584, offset not_an_escape, offset not_an_escape
		dd offset not_an_escape, offset	not_an_escape, offset not_an_escape
		dd offset not_an_escape, offset	not_an_escape, offset loc_800058D
		dd offset not_an_escape, offset	not_an_escape, offset not_an_escape
		dd offset loc_8000596, offset not_an_escape, offset loc_800059F
		dd offset not_an_escape, offset	loc_80005A8, offset not_an_escape
		dd offset loc_80005B1
_rodata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_eh_frame	segment	dword public 'CONST' use32
		assume cs:_eh_frame
		;org 8000F08h
		dd 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 20h, 1Ch
		dd offset loc_8000792-80016BAh
		dd 11Ch, 80E4100h, 0D420285h, 3834405h,	0C5011403h, 4040CC3h
		dd 1Ch,	40h
		dd offset loc_8000792-80015C2h
		dd 18Bh, 80E4100h, 0D420285h, 3864205h,	483h, 1Ch, 60h
		dd offset loc_8000792-8001457h
		dd 54h,	80E4100h, 0D420285h, 0C5500205h, 4040Ch, 28h, 80h
		dd offset loc_8000792-8001423h
		dd 49Ch, 10C4400h, 5104700h, 45007502h,	7475030Fh, 2061006h
		dd 3107C75h, 787502h
_eh_frame	ends

; ===========================================================================

; Segment type:	Externs
; extern
		extrn program_name:dword ; DATA	XREF: emit_ancillary_info+7r
					; emit_ancillary_info+B6r ...
		extrn last_component:near ; CODE XREF: emit_ancillary_info+10p
					; emit_ancillary_info+BFp ...
; char *gettext(const char *msgid)
		extrn gettext:near	; CODE XREF: emit_ancillary_info+22p
					; emit_ancillary_info+44p ...
; int printf(const char	*format, ...)
		extrn printf:near	; CODE XREF: emit_ancillary_info+34p
					; emit_ancillary_info+5Ap ...
; struct _IO_FILE *stdout
		extrn stdout:dword	; DATA XREF: emit_ancillary_info+62r
					; usage+65r ...
		extrn fputs_unlocked:near ; CODE XREF: emit_ancillary_info+7Dp
					; usage+80p ...
; char *setlocale(int category,	const char *locale)
		extrn setlocale:near	; CODE XREF: emit_ancillary_info+8Cp
					; main+81p
; int strncmp(const char *s1, const char *s2, size_t n)
		extrn strncmp:near	; CODE XREF: emit_ancillary_info+AAp
; struct _IO_FILE *stderr
		extrn stderr:dword	; DATA XREF: usage+23r
; int fprintf(FILE *stream, const char *format,	...)
		extrn fprintf:near	; CODE XREF: usage+2Ep
; void exit(int	status)
		extrn exit:near		; CODE XREF: usage+186p main+144p ...
; char *getenv(const char *name)
		extrn getenv:near	; CODE XREF: main+21p
; int strcmp(const char	*s1, const char	*s2)
		extrn strcmp:near	; CODE XREF: main+43p main+DEp ...
		extrn set_program_name:near ; CODE XREF: main+6Fp
; char *bindtextdomain(const char *domainname, const char *dirname)
		extrn bindtextdomain:near ; CODE XREF: main+96p
; char *textdomain(const char *domainname)
		extrn textdomain:near	; CODE XREF: main+A6p
; void close_stdout(void)
		extrn close_stdout	; DATA XREF: main+B1o
; int atexit(void (*func)(void))
		extrn atexit:near	; CODE XREF: main+B6p
		extrn Version:dword	; DATA XREF: main+111r
		extrn version_etc:near	; CODE XREF: main+137p
; const	unsigned __int16 **_ctype_b_loc(void)
		extrn __ctype_b_loc:near ; CODE	XREF: main+2BFp main+301p
; int putchar_unlocked(int c)
		extrn putchar_unlocked:near ; CODE XREF: main+3EBp main+404p ...


		end
