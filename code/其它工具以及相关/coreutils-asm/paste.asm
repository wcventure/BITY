;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B611-7234-BB			    |
; |		Doskey Lee, Kingsoft Internet Security Software		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	48F6C779F7E9C78A583BC5E2ACF69BF2
; Input	CRC32 :	5A19D0E1

; File Name   :	D:\coreutils-o\paste.o
; Format      :	ELF for	Intel 386 (Relocatable)
;
; Source File :	'paste.c'

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	byte public 'CODE' use32
		assume cs:_text
		;org 8000000h
		assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void emit_ancillary_info()
emit_ancillary_info proc near		; CODE XREF: usage+10Fp

lc_messages	= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset msgid	; "\nReport %s bugs to %s\n"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset aBugCoreutils@g ; "bug-coreutils@gnu.org"
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	offset aSHomePageHttpW ; "%s home page:	<http://www.gnu.org/softw"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset domainname ; "coreutils"
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aGeneralHelpUsi ; "General help using GNU software: <http:"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		sub	esp, 8
		push	0		; locale
		push	5		; category
		call	setlocale
		add	esp, 10h
		mov	[ebp+lc_messages], eax
		cmp	[ebp+lc_messages], 0
		jz	short loc_80000E6
		sub	esp, 4
		push	3		; n
		push	offset s2	; "en_"
		push	[ebp+lc_messages] ; s1
		call	strncmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_80000E6
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aReportSTransla ; "Report %s translation	bugs to	<http://t"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h

loc_80000E6:				; CODE XREF: emit_ancillary_info+9Bj
					; emit_ancillary_info+B4j
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aForCompleteDoc ; "For complete documentation, run: info	c"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		nop
		mov	ebx, [ebp+var_4]
		leave
		retn
emit_ancillary_info endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; char *__cdecl	bad_cast(const char *s)
bad_cast	proc near		; CODE XREF: main+16Dp

s		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+s]
		pop	ebp
		retn
bad_cast	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; int __cdecl collapse_escapes(const char *strptr)
collapse_escapes proc near		; CODE XREF: main+17Dp

backslash_at_end= byte ptr -0Dh
strout		= dword	ptr -0Ch
strptr		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		sub	esp, 0Ch
		push	[ebp+strptr]	; char *
		call	xstrdup
		add	esp, 10h
		mov	[ebp+strout], eax
		mov	[ebp+backslash_at_end],	0
		mov	eax, [ebp+strout]
		mov	ds:delims, eax
		jmp	loc_800025F
; ---------------------------------------------------------------------------

loc_800014C:				; CODE XREF: collapse_escapes+143j
		mov	eax, [ebp+strptr]
		movzx	eax, byte ptr [eax]
		cmp	al, 5Ch
		jz	short loc_8000172
		mov	eax, [ebp+strout]
		lea	edx, [eax+1]
		mov	[ebp+strout], edx
		mov	edx, [ebp+strptr]
		lea	ecx, [edx+1]
		mov	[ebp+strptr], ecx
		movzx	edx, byte ptr [edx]
		mov	[eax], dl
		jmp	loc_800025F
; ---------------------------------------------------------------------------

loc_8000172:				; CODE XREF: collapse_escapes+30j
		add	[ebp+strptr], 1
		mov	eax, [ebp+strptr]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		cmp	eax, 66h
		jz	short loc_80001EF
		cmp	eax, 66h
		jg	short loc_80001B3
		cmp	eax, 30h
		jz	short loc_80001D3
		cmp	eax, 30h
		jg	short loc_80001A0
		test	eax, eax
		jz	loc_8000243
		jmp	loc_8000249
; ---------------------------------------------------------------------------

loc_80001A0:				; CODE XREF: collapse_escapes+6Dj
		cmp	eax, 5Ch
		jz	loc_8000235
		cmp	eax, 62h
		jz	short loc_80001E1
		jmp	loc_8000249
; ---------------------------------------------------------------------------

loc_80001B3:				; CODE XREF: collapse_escapes+63j
		cmp	eax, 72h
		jz	short loc_800020B
		cmp	eax, 72h
		jg	short loc_80001C7
		cmp	eax, 6Eh
		jz	short loc_80001FD
		jmp	loc_8000249
; ---------------------------------------------------------------------------

loc_80001C7:				; CODE XREF: collapse_escapes+97j
		cmp	eax, 74h
		jz	short loc_8000219
		cmp	eax, 76h
		jz	short loc_8000227
		jmp	short loc_8000249
; ---------------------------------------------------------------------------

loc_80001D3:				; CODE XREF: collapse_escapes+68j
		mov	eax, [ebp+strout]
		lea	edx, [eax+1]
		mov	[ebp+strout], edx
		mov	byte ptr [eax],	0
		jmp	short loc_800025B
; ---------------------------------------------------------------------------

loc_80001E1:				; CODE XREF: collapse_escapes+88j
		mov	eax, [ebp+strout]
		lea	edx, [eax+1]
		mov	[ebp+strout], edx
		mov	byte ptr [eax],	8
		jmp	short loc_800025B
; ---------------------------------------------------------------------------

loc_80001EF:				; CODE XREF: collapse_escapes+5Ej
		mov	eax, [ebp+strout]
		lea	edx, [eax+1]
		mov	[ebp+strout], edx
		mov	byte ptr [eax],	0Ch
		jmp	short loc_800025B
; ---------------------------------------------------------------------------

loc_80001FD:				; CODE XREF: collapse_escapes+9Cj
		mov	eax, [ebp+strout]
		lea	edx, [eax+1]
		mov	[ebp+strout], edx
		mov	byte ptr [eax],	0Ah
		jmp	short loc_800025B
; ---------------------------------------------------------------------------

loc_800020B:				; CODE XREF: collapse_escapes+92j
		mov	eax, [ebp+strout]
		lea	edx, [eax+1]
		mov	[ebp+strout], edx
		mov	byte ptr [eax],	0Dh
		jmp	short loc_800025B
; ---------------------------------------------------------------------------

loc_8000219:				; CODE XREF: collapse_escapes+A6j
		mov	eax, [ebp+strout]
		lea	edx, [eax+1]
		mov	[ebp+strout], edx
		mov	byte ptr [eax],	9
		jmp	short loc_800025B
; ---------------------------------------------------------------------------

loc_8000227:				; CODE XREF: collapse_escapes+ABj
		mov	eax, [ebp+strout]
		lea	edx, [eax+1]
		mov	[ebp+strout], edx
		mov	byte ptr [eax],	0Bh
		jmp	short loc_800025B
; ---------------------------------------------------------------------------

loc_8000235:				; CODE XREF: collapse_escapes+7Fj
		mov	eax, [ebp+strout]
		lea	edx, [eax+1]
		mov	[ebp+strout], edx
		mov	byte ptr [eax],	5Ch
		jmp	short loc_800025B
; ---------------------------------------------------------------------------

loc_8000243:				; CODE XREF: collapse_escapes+71j
		mov	[ebp+backslash_at_end],	1
		jmp	short done
; ---------------------------------------------------------------------------

loc_8000249:				; CODE XREF: collapse_escapes+77j
					; collapse_escapes+8Aj	...
		mov	eax, [ebp+strout]
		lea	edx, [eax+1]
		mov	[ebp+strout], edx
		mov	edx, [ebp+strptr]
		movzx	edx, byte ptr [edx]
		mov	[eax], dl
		nop

loc_800025B:				; CODE XREF: collapse_escapes+BBj
					; collapse_escapes+C9j	...
		add	[ebp+strptr], 1

loc_800025F:				; CODE XREF: collapse_escapes+23j
					; collapse_escapes+49j
		mov	eax, [ebp+strptr]
		movzx	eax, byte ptr [eax]
		test	al, al
		jnz	loc_800014C

done:					; CODE XREF: collapse_escapes+123j
		mov	eax, [ebp+strout]
		mov	ds:delim_end, eax
		movzx	eax, [ebp+backslash_at_end]
		leave
		retn
collapse_escapes endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn static bp-based frame

; void write_error()
write_error	proc near		; CODE XREF: xputchar+20p
					; paste_parallel+206p ...
		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 4
		sub	esp, 0Ch
		push	offset aWriteError ; "write error"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		sub	esp, 4
		push	ebx		; format
		push	eax		; errnum
		push	1		; status
		call	error
		add	esp, 10h
		call	abort
write_error	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl xputchar(char c)
xputchar	proc near		; CODE XREF: paste_parallel+228p
					; paste_parallel+3B7p ...

c		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_0]
		mov	[ebp+c], al
		movsx	eax, [ebp+c]
		sub	esp, 0Ch
		push	eax		; c
		call	putchar_unlocked
		add	esp, 10h
		test	eax, eax
		jns	short loc_80002D4
		call	write_error
; ---------------------------------------------------------------------------

loc_80002D4:				; CODE XREF: xputchar+1Ej
		nop
		leave
		retn
xputchar	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; _Bool	__cdecl	paste_parallel(size_t nfiles, char **fnamptr)
paste_parallel	proc near		; CODE XREF: main+1F6p

ok		= byte ptr -30h
opened_stdin	= byte ptr -2Fh
somedone	= byte ptr -2Eh
c		= byte ptr -2Dh
files_open	= dword	ptr -2Ch
delimptr	= dword	ptr -28h
delims_saved	= dword	ptr -24h
i		= dword	ptr -20h
chr		= dword	ptr -1Ch
err		= dword	ptr -18h
line_length	= dword	ptr -14h
delbuf		= dword	ptr -10h
fileptr		= dword	ptr -0Ch
var_4		= dword	ptr -4
nfiles		= dword	ptr  8
fnamptr		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 34h
		mov	[ebp+ok], 1
		mov	eax, [ebp+nfiles]
		add	eax, 2
		sub	esp, 0Ch
		push	eax		; size_t
		call	xmalloc
		add	esp, 10h
		mov	[ebp+delbuf], eax
		mov	eax, [ebp+nfiles]
		add	eax, 1
		sub	esp, 8
		push	4
		push	eax
		call	xnmalloc
		add	esp, 10h
		mov	[ebp+fileptr], eax
		mov	[ebp+opened_stdin], 0
		mov	[ebp+files_open], 0
		jmp	loc_8000403
; ---------------------------------------------------------------------------

loc_800031E:				; CODE XREF: paste_parallel+132j
		mov	eax, [ebp+files_open]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+fnamptr]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 8
		push	offset s	; "-"
		push	eax		; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		jnz	short loc_8000366
		mov	ds:have_read_stdin, 1
		mov	eax, [ebp+files_open]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+fileptr]
		add	edx, eax
		mov	eax, ds:stdin
		mov	[edx], eax
		jmp	loc_80003FF
; ---------------------------------------------------------------------------

loc_8000366:				; CODE XREF: paste_parallel+6Bj
		mov	eax, [ebp+files_open]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+fileptr]
		lea	ebx, [edx+eax]
		mov	eax, [ebp+files_open]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+fnamptr]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 8
		push	offset aR	; "r"
		push	eax
		call	fopen64
		add	esp, 10h
		mov	[ebx], eax
		mov	eax, [ebp+files_open]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+fileptr]
		add	eax, edx
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_80003DA
		mov	eax, [ebp+files_open]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+fnamptr]
		add	eax, edx
		mov	ebx, [eax]
		call	__errno_location
		mov	eax, [eax]
		push	ebx
		push	offset format	; "%s"
		push	eax		; errnum
		push	1		; status
		call	error
		add	esp, 10h
		jmp	short loc_80003FF
; ---------------------------------------------------------------------------

loc_80003DA:				; CODE XREF: paste_parallel+D6j
		mov	eax, [ebp+files_open]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+fileptr]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax		; stream
		call	fileno
		add	esp, 10h
		test	eax, eax
		jnz	short loc_80003FF
		mov	[ebp+opened_stdin], 1

loc_80003FF:				; CODE XREF: paste_parallel+8Aj
					; paste_parallel+101j ...
		add	[ebp+files_open], 1

loc_8000403:				; CODE XREF: paste_parallel+42j
		mov	eax, [ebp+files_open]
		cmp	eax, [ebp+nfiles]
		jb	loc_800031E
		cmp	[ebp+opened_stdin], 0
		jz	loc_800077A
		movzx	eax, ds:have_read_stdin
		test	al, al
		jz	loc_800077A
		sub	esp, 0Ch
		push	offset aStandardInputI ; "standard input is closed"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h
		jmp	loc_800077A
; ---------------------------------------------------------------------------

loc_800044D:				; CODE XREF: paste_parallel+4A7j
		mov	[ebp+somedone],	0
		mov	eax, ds:delims
		mov	[ebp+delimptr],	eax
		mov	[ebp+delims_saved], 0
		mov	[ebp+i], 0
		jmp	loc_8000768
; ---------------------------------------------------------------------------

loc_800046C:				; CODE XREF: paste_parallel+49Dj
		mov	[ebp+line_length], 0
		mov	eax, [ebp+i]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+fileptr]
		add	eax, edx
		mov	eax, [eax]
		test	eax, eax
		jz	loc_800053A
		mov	eax, [ebp+i]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+fileptr]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax		; stream
		call	getc_unlocked
		add	esp, 10h
		mov	[ebp+chr], eax
		call	__errno_location
		mov	eax, [eax]
		mov	[ebp+err], eax
		cmp	[ebp+chr], 0FFFFFFFFh
		jz	short loc_8000531
		cmp	[ebp+delims_saved], 0
		jz	short loc_8000531
		mov	eax, ds:stdout
		push	eax		; stream
		push	[ebp+delims_saved] ; n
		push	1		; size
		push	[ebp+delbuf]	; ptr
		call	fwrite_unlocked
		add	esp, 10h
		cmp	eax, [ebp+delims_saved]
		jz	short loc_80004E2
		call	write_error
; ---------------------------------------------------------------------------

loc_80004E2:				; CODE XREF: paste_parallel+204j
		mov	[ebp+delims_saved], 0
		jmp	short loc_8000531
; ---------------------------------------------------------------------------

loc_80004EB:				; CODE XREF: paste_parallel+25Ej
		add	[ebp+line_length], 1
		cmp	[ebp+chr], 0Ah
		jz	short loc_8000539
		mov	eax, [ebp+chr]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; c
		call	xputchar
		add	esp, 10h
		mov	eax, [ebp+i]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+fileptr]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax		; stream
		call	getc_unlocked
		add	esp, 10h
		mov	[ebp+chr], eax
		call	__errno_location
		mov	eax, [eax]
		mov	[ebp+err], eax

loc_8000531:				; CODE XREF: paste_parallel+1E3j
					; paste_parallel+1E9j ...
		cmp	[ebp+chr], 0FFFFFFFFh
		jnz	short loc_80004EB
		jmp	short loc_800053A
; ---------------------------------------------------------------------------

loc_8000539:				; CODE XREF: paste_parallel+21Cj
		nop

loc_800053A:				; CODE XREF: paste_parallel+1AFj
					; paste_parallel+260j
		cmp	[ebp+line_length], 0
		jnz	loc_80006DA
		mov	eax, [ebp+i]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+fileptr]
		add	eax, edx
		mov	eax, [eax]
		test	eax, eax
		jz	loc_8000647
		mov	eax, [ebp+i]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+fileptr]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax		; stream
		call	ferror_unlocked
		add	esp, 10h
		test	eax, eax
		jz	short loc_80005A6
		mov	eax, [ebp+i]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+fnamptr]
		add	eax, edx
		mov	eax, [eax]
		push	eax
		push	offset format	; "%s"
		push	[ebp+err]	; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	[ebp+ok], 0

loc_80005A6:				; CODE XREF: paste_parallel+2A5j
		mov	eax, [ebp+i]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+fileptr]
		add	eax, edx
		mov	edx, [eax]
		mov	eax, ds:stdin
		cmp	edx, eax
		jnz	short loc_80005DF
		mov	eax, [ebp+i]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+fileptr]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax		; stream
		call	clearerr_unlocked
		add	esp, 10h
		jmp	short loc_800062E
; ---------------------------------------------------------------------------

loc_80005DF:				; CODE XREF: paste_parallel+2E7j
		mov	eax, [ebp+i]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+fileptr]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax		; stream
		call	fclose
		add	esp, 10h
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_800062E
		mov	eax, [ebp+i]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+fnamptr]
		add	eax, edx
		mov	ebx, [eax]
		call	__errno_location
		mov	eax, [eax]
		push	ebx
		push	offset format	; "%s"
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	[ebp+ok], 0

loc_800062E:				; CODE XREF: paste_parallel+306j
					; paste_parallel+328j
		mov	eax, [ebp+i]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+fileptr]
		add	eax, edx
		mov	dword ptr [eax], 0
		sub	[ebp+files_open], 1

loc_8000647:				; CODE XREF: paste_parallel+280j
		mov	eax, [ebp+i]
		add	eax, 1
		cmp	eax, [ebp+nfiles]
		jnz	short loc_800069B
		cmp	[ebp+somedone],	0
		jz	loc_8000763
		cmp	[ebp+delims_saved], 0
		jz	short loc_8000689
		mov	eax, ds:stdout
		push	eax		; stream
		push	[ebp+delims_saved] ; n
		push	1		; size
		push	[ebp+delbuf]	; ptr
		call	fwrite_unlocked
		add	esp, 10h
		cmp	eax, [ebp+delims_saved]
		jz	short loc_8000682
		call	write_error
; ---------------------------------------------------------------------------

loc_8000682:				; CODE XREF: paste_parallel+3A4j
		mov	[ebp+delims_saved], 0

loc_8000689:				; CODE XREF: paste_parallel+389j
		sub	esp, 0Ch
		push	0Ah		; c
		call	xputchar
		add	esp, 10h
		jmp	loc_8000763
; ---------------------------------------------------------------------------

loc_800069B:				; CODE XREF: paste_parallel+379j
		mov	eax, [ebp+delimptr]
		movzx	eax, byte ptr [eax]
		test	al, al
		jz	short loc_80006BB
		mov	eax, [ebp+delims_saved]
		lea	edx, [eax+1]
		mov	[ebp+delims_saved], edx
		mov	edx, [ebp+delbuf]
		add	edx, eax
		mov	eax, [ebp+delimptr]
		movzx	eax, byte ptr [eax]
		mov	[edx], al

loc_80006BB:				; CODE XREF: paste_parallel+3CCj
		add	[ebp+delimptr],	1
		mov	eax, ds:delim_end
		cmp	[ebp+delimptr],	eax
		jnz	loc_8000764
		mov	eax, ds:delims
		mov	[ebp+delimptr],	eax
		jmp	loc_8000764
; ---------------------------------------------------------------------------

loc_80006DA:				; CODE XREF: paste_parallel+267j
		mov	[ebp+somedone],	1
		mov	eax, [ebp+i]
		add	eax, 1
		cmp	eax, [ebp+nfiles]
		jz	short loc_800073E
		cmp	[ebp+chr], 0Ah
		jz	short loc_8000707
		cmp	[ebp+chr], 0FFFFFFFFh
		jz	short loc_8000707
		mov	eax, [ebp+chr]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; c
		call	xputchar
		add	esp, 10h

loc_8000707:				; CODE XREF: paste_parallel+416j
					; paste_parallel+41Cj
		mov	eax, [ebp+delimptr]
		movzx	eax, byte ptr [eax]
		test	al, al
		jz	short loc_8000726
		mov	eax, [ebp+delimptr]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; c
		call	xputchar
		add	esp, 10h

loc_8000726:				; CODE XREF: paste_parallel+438j
		add	[ebp+delimptr],	1
		mov	eax, ds:delim_end
		cmp	[ebp+delimptr],	eax
		jnz	short loc_8000764
		mov	eax, ds:delims
		mov	[ebp+delimptr],	eax
		jmp	short loc_8000764
; ---------------------------------------------------------------------------

loc_800073E:				; CODE XREF: paste_parallel+410j
		cmp	[ebp+chr], 0FFFFFFFFh
		jz	short loc_8000749
		mov	eax, [ebp+chr]
		jmp	short loc_800074E
; ---------------------------------------------------------------------------

loc_8000749:				; CODE XREF: paste_parallel+46Bj
		mov	eax, 0Ah

loc_800074E:				; CODE XREF: paste_parallel+470j
		mov	[ebp+c], al
		movsx	eax, [ebp+c]
		sub	esp, 0Ch
		push	eax		; c
		call	xputchar
		add	esp, 10h
		jmp	short loc_8000764
; ---------------------------------------------------------------------------

loc_8000763:				; CODE XREF: paste_parallel+37Fj
					; paste_parallel+3BFj
		nop

loc_8000764:				; CODE XREF: paste_parallel+3F0j
					; paste_parallel+3FEj ...
		add	[ebp+i], 1

loc_8000768:				; CODE XREF: paste_parallel+190j
		mov	eax, [ebp+i]
		cmp	eax, [ebp+nfiles]
		jnb	short loc_800077A
		cmp	[ebp+files_open], 0
		jnz	loc_800046C

loc_800077A:				; CODE XREF: paste_parallel+13Cj
					; paste_parallel+14Bj ...
		cmp	[ebp+files_open], 0
		jnz	loc_800044D
		sub	esp, 0Ch
		push	[ebp+fileptr]	; ptr
		call	free
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+delbuf]	; ptr
		call	free
		add	esp, 10h
		movzx	eax, [ebp+ok]
		mov	ebx, [ebp+var_4]
		leave
		retn
paste_parallel	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; _Bool	__cdecl	paste_serial(size_t nfiles, char **fnamptr)
paste_serial	proc near		; CODE XREF: main+225p

ok		= byte ptr -1Eh
is_stdin	= byte ptr -1Dh
charold		= dword	ptr -1Ch
delimptr	= dword	ptr -18h
fileptr		= dword	ptr -14h
saved_errno	= dword	ptr -10h
charnew		= dword	ptr -0Ch
var_4		= dword	ptr -4
nfiles		= dword	ptr  8
fnamptr		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 24h
		mov	[ebp+ok], 1
		jmp	loc_800097D
; ---------------------------------------------------------------------------

loc_80007B9:				; CODE XREF: paste_serial+1D8j
		mov	eax, [ebp+fnamptr]
		mov	eax, [eax]
		sub	esp, 8
		push	offset s	; "-"
		push	eax		; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		setz	al
		mov	[ebp+is_stdin],	al
		cmp	[ebp+is_stdin],	0
		jz	short loc_80007EE
		mov	ds:have_read_stdin, 1
		mov	eax, ds:stdin
		mov	[ebp+fileptr], eax
		jmp	short loc_8000833
; ---------------------------------------------------------------------------

loc_80007EE:				; CODE XREF: paste_serial+32j
		mov	eax, [ebp+fnamptr]
		mov	eax, [eax]
		sub	esp, 8
		push	offset aR	; "r"
		push	eax
		call	fopen64
		add	esp, 10h
		mov	[ebp+fileptr], eax
		cmp	[ebp+fileptr], 0
		jnz	short loc_8000833
		mov	eax, [ebp+fnamptr]
		mov	ebx, [eax]
		call	__errno_location
		mov	eax, [eax]
		push	ebx
		push	offset format	; "%s"
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	[ebp+ok], 0
		jmp	loc_8000975
; ---------------------------------------------------------------------------

loc_8000833:				; CODE XREF: paste_serial+43j
					; paste_serial+62j
		mov	eax, ds:delims
		mov	[ebp+delimptr],	eax
		sub	esp, 0Ch
		push	[ebp+fileptr]	; stream
		call	getc_unlocked
		add	esp, 10h
		mov	[ebp+charold], eax
		call	__errno_location
		mov	eax, [eax]
		mov	[ebp+saved_errno], eax
		cmp	[ebp+charold], 0FFFFFFFFh
		jz	loc_80008EA
		jmp	short loc_80008B7
; ---------------------------------------------------------------------------

loc_8000862:				; CODE XREF: paste_serial+123j
		cmp	[ebp+charold], 0Ah
		jnz	short loc_800089F
		mov	eax, [ebp+delimptr]
		movzx	eax, byte ptr [eax]
		test	al, al
		jz	short loc_8000887
		mov	eax, [ebp+delimptr]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; c
		call	xputchar
		add	esp, 10h

loc_8000887:				; CODE XREF: paste_serial+C7j
		add	[ebp+delimptr],	1
		mov	eax, ds:delim_end
		cmp	[ebp+delimptr],	eax
		jnz	short loc_80008B1
		mov	eax, ds:delims
		mov	[ebp+delimptr],	eax
		jmp	short loc_80008B1
; ---------------------------------------------------------------------------

loc_800089F:				; CODE XREF: paste_serial+BDj
		mov	eax, [ebp+charold]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; c
		call	xputchar
		add	esp, 10h

loc_80008B1:				; CODE XREF: paste_serial+EAj
					; paste_serial+F4j
		mov	eax, [ebp+charnew]
		mov	[ebp+charold], eax

loc_80008B7:				; CODE XREF: paste_serial+B7j
		sub	esp, 0Ch
		push	[ebp+fileptr]	; stream
		call	getc_unlocked
		add	esp, 10h
		mov	[ebp+charnew], eax
		cmp	[ebp+charnew], 0FFFFFFFFh
		jnz	short loc_8000862
		call	__errno_location
		mov	eax, [eax]
		mov	[ebp+saved_errno], eax
		mov	eax, [ebp+charold]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; c
		call	xputchar
		add	esp, 10h

loc_80008EA:				; CODE XREF: paste_serial+B1j
		cmp	[ebp+charold], 0Ah
		jz	short loc_80008FD
		sub	esp, 0Ch
		push	0Ah		; c
		call	xputchar
		add	esp, 10h

loc_80008FD:				; CODE XREF: paste_serial+145j
		sub	esp, 0Ch
		push	[ebp+fileptr]	; stream
		call	ferror_unlocked
		add	esp, 10h
		test	eax, eax
		jz	short loc_800092B
		mov	eax, [ebp+fnamptr]
		mov	eax, [eax]
		push	eax
		push	offset format	; "%s"
		push	[ebp+saved_errno] ; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	[ebp+ok], 0

loc_800092B:				; CODE XREF: paste_serial+164j
		cmp	[ebp+is_stdin],	0
		jz	short loc_8000941
		sub	esp, 0Ch
		push	[ebp+fileptr]	; stream
		call	clearerr_unlocked
		add	esp, 10h
		jmp	short loc_8000975
; ---------------------------------------------------------------------------

loc_8000941:				; CODE XREF: paste_serial+186j
		sub	esp, 0Ch
		push	[ebp+fileptr]	; stream
		call	fclose
		add	esp, 10h
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_8000975
		mov	eax, [ebp+fnamptr]
		mov	ebx, [eax]
		call	__errno_location
		mov	eax, [eax]
		push	ebx
		push	offset format	; "%s"
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	[ebp+ok], 0

loc_8000975:				; CODE XREF: paste_serial+85j
					; paste_serial+196j ...
		sub	[ebp+nfiles], 1
		add	[ebp+fnamptr], 4

loc_800097D:				; CODE XREF: paste_serial+Bj
		cmp	[ebp+nfiles], 0
		jnz	loc_80007B9
		movzx	eax, [ebp+ok]
		mov	ebx, [ebp+var_4]
		leave
		retn
paste_serial	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; void __cdecl usage(int status)
		public usage
usage		proc near		; CODE XREF: main+D8p main+11Ap

status		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 4
		cmp	[ebp+status], 0
		jz	short loc_80009CD
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, ds:stderr
		sub	esp, 4
		push	ebx
		push	edx		; format
		push	eax		; stream
		call	fprintf
		add	esp, 10h
		jmp	loc_8000AA4
; ---------------------------------------------------------------------------

loc_80009CD:				; CODE XREF: usage+Bj
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aUsageSOption__ ; "Usage: %s [OPTION]...	[FILE]...\n"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aWriteLinesCons ; "Write	lines consisting of the	sequentia"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aMandatoryArgum ; "Mandatory arguments to long options are"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aDDelimitersLis ; "  -d,	--delimiters=LIST   reuse charact"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aHelpDisplayThi ; "	--help	   display this	help and "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aVersionOutputV ; "	--version  output version informa"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		call	emit_ancillary_info

loc_8000AA4:				; CODE XREF: usage+38j
		sub	esp, 0Ch
		push	[ebp+status]	; status
		call	exit
usage		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public main
main		proc near

ok		= byte ptr -21h
delim_arg	= dword	ptr -20h
optc		= dword	ptr -1Ch
argc		= dword	ptr  0Ch
argv		= dword	ptr  10h
envp		= dword	ptr  14h

		lea	ecx, [esp+4]
		and	esp, 0FFFFFFF0h
		push	dword ptr [ecx-4]
		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		push	ecx
		sub	esp, 1Ch
		mov	ebx, ecx
		mov	[ebp+delim_arg], offset	asc_800119A ; "\t"
		mov	eax, [ebx+4]
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	set_program_name
		add	esp, 10h
		sub	esp, 8
		push	offset locale	; locale
		push	6		; category
		call	setlocale
		add	esp, 10h
		sub	esp, 8
		push	offset dirname	; "/usr/local/share/locale"
		push	offset domainname ; "coreutils"
		call	bindtextdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset domainname ; "coreutils"
		call	textdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset close_stdout ; func
		call	atexit
		add	esp, 10h
		mov	ds:have_read_stdin, 0
		mov	ds:serial_merge, 0
		jmp	loc_8000BCE
; ---------------------------------------------------------------------------

loc_8000B36:				; CODE XREF: main+142j
		mov	eax, [ebp+optc]
		cmp	eax, 0FFFFFF7Eh
		jz	short loc_8000B82
		cmp	eax, 0FFFFFF7Eh
		jg	short loc_8000B50
		cmp	eax, 0FFFFFF7Dh
		jz	short loc_8000B8C
		jmp	short loc_8000BC4
; ---------------------------------------------------------------------------

loc_8000B50:				; CODE XREF: main+96j
		cmp	eax, 64h
		jz	short loc_8000B5C
		cmp	eax, 73h
		jz	short loc_8000B79
		jmp	short loc_8000BC4
; ---------------------------------------------------------------------------

loc_8000B5C:				; CODE XREF: main+A4j
		mov	eax, ds:optarg
		movzx	eax, byte ptr [eax]
		test	al, al
		jz	short loc_8000B6F
		mov	eax, ds:optarg
		jmp	short loc_8000B74
; ---------------------------------------------------------------------------

loc_8000B6F:				; CODE XREF: main+B7j
		mov	eax, offset a0	; "\\0"

loc_8000B74:				; CODE XREF: main+BEj
		mov	[ebp+delim_arg], eax
		jmp	short loc_8000BCE
; ---------------------------------------------------------------------------

loc_8000B79:				; CODE XREF: main+A9j
		mov	ds:serial_merge, 1
		jmp	short loc_8000BCE
; ---------------------------------------------------------------------------

loc_8000B82:				; CODE XREF: main+8Fj
		sub	esp, 0Ch
		push	0		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8000B8C:				; CODE XREF: main+9Dj
		mov	edx, ds:Version
		mov	eax, ds:stdout
		sub	esp, 4
		push	0
		push	offset aDavidMackenzie ; "David	MacKenzie"
		push	offset aDavidM_Ihnat ; "David M. Ihnat"
		push	edx
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	offset aPaste	; "paste"
		push	eax
		call	version_etc
		add	esp, 20h
		sub	esp, 0Ch
		push	0		; status
		call	exit
; ---------------------------------------------------------------------------

loc_8000BC4:				; CODE XREF: main+9Fj main+ABj
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8000BCE:				; CODE XREF: main+82j main+C8j ...
		sub	esp, 0Ch
		push	0		; longind
		push	offset longopts	; longopts
		push	offset shortopts ; "d:s"
		push	dword ptr [ebx+4] ; argv
		push	dword ptr [ebx]	; argc
		call	getopt_long
		add	esp, 20h
		mov	[ebp+optc], eax
		cmp	[ebp+optc], 0FFFFFFFFh
		jnz	loc_8000B36
		mov	eax, ds:optind
		cmp	eax, [ebx]
		jnz	short loc_8000C26
		mov	eax, [ebx]
		lea	edx, [eax+1]
		mov	[ebx], edx
		lea	edx, ds:0[eax*4]
		mov	eax, [ebx+4]
		lea	esi, [edx+eax]
		sub	esp, 0Ch
		push	offset s	; "-"
		call	bad_cast
		add	esp, 10h
		mov	[esi], eax

loc_8000C26:				; CODE XREF: main+14Fj
		sub	esp, 0Ch
		push	[ebp+delim_arg]	; strptr
		call	collapse_escapes
		add	esp, 10h
		test	eax, eax
		jz	short loc_8000C75
		sub	esp, 8
		push	5
		push	0
		call	set_quoting_style
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+delim_arg]
		call	quotearg_colon
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aDelimiterListE ; "delimiter list ends with an unescaped	b"...
		call	gettext
		add	esp, 10h
		push	esi
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_8000C75:				; CODE XREF: main+187j
		movzx	eax, ds:serial_merge
		xor	eax, 1
		test	al, al
		jz	short loc_8000CB2
		mov	eax, ds:optind
		lea	edx, ds:0[eax*4]
		mov	eax, [ebx+4]
		add	eax, edx
		mov	edx, ds:optind
		mov	ecx, [ebx]
		sub	ecx, edx
		mov	edx, ecx
		sub	esp, 8
		push	eax		; fnamptr
		push	edx		; nfiles
		call	paste_parallel
		add	esp, 10h
		mov	[ebp+ok], al
		jmp	short loc_8000CDF
; ---------------------------------------------------------------------------

loc_8000CB2:				; CODE XREF: main+1D2j
		mov	eax, ds:optind
		lea	edx, ds:0[eax*4]
		mov	eax, [ebx+4]
		add	eax, edx
		mov	edx, ds:optind
		mov	ecx, [ebx]
		sub	ecx, edx
		mov	edx, ecx
		sub	esp, 8
		push	eax		; fnamptr
		push	edx		; nfiles
		call	paste_serial
		add	esp, 10h
		mov	[ebp+ok], al

loc_8000CDF:				; CODE XREF: main+201j
		mov	eax, ds:delims
		sub	esp, 0Ch
		push	eax		; ptr
		call	free
		add	esp, 10h
		movzx	eax, ds:have_read_stdin
		test	al, al
		jz	short loc_8000D2B
		mov	eax, ds:stdin
		sub	esp, 0Ch
		push	eax		; stream
		call	fclose
		add	esp, 10h
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_8000D2B
		call	__errno_location
		mov	eax, [eax]
		sub	esp, 4
		push	offset s	; "-"
		push	eax		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_8000D2B:				; CODE XREF: main+24Aj	main+260j
		cmp	[ebp+ok], 0
		jz	short loc_8000D38
		mov	eax, 0
		jmp	short loc_8000D3D
; ---------------------------------------------------------------------------

loc_8000D38:				; CODE XREF: main+280j
		mov	eax, 1

loc_8000D3D:				; CODE XREF: main+287j
		sub	esp, 0Ch
		push	eax		; status

loc_8000D41:				; DATA XREF: .eh_frame:08001238o
					; .eh_frame:0800125Co ...
		call	exit
main		endp

_text		ends

; ===========================================================================

; Segment type:	Zero-length
; Segment permissions: Read/Write
_data		segment	byte public 'DATA' use32
_data		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
		assume cs:_bss
		;org 8000D48h
		assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing
; _Bool	have_read_stdin
have_read_stdin	db ?			; DATA XREF: paste_parallel+6Dw
					; paste_parallel+142r ...
; _Bool	serial_merge
serial_merge	db ?			; DATA XREF: main+7Bw
					; main:loc_8000B79w ...
		align 4
; char *delims
delims		dd ?			; DATA XREF: collapse_escapes+1Ew
					; paste_parallel+17Ar ...
; const	char *delim_end
delim_end	dd ?			; DATA XREF: collapse_escapes+14Cw
					; paste_parallel+3E8r ...
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment '32byte' can not be represented in assembly
_rodata		segment	para public 'CONST' use32
		assume cs:_rodata
		;org 8000D60h
; char msgid[]
msgid		db 0Ah			; DATA XREF: emit_ancillary_info+1Do
		db 'Report %s bugs to %s',0Ah,0
aBugCoreutils@g	db 'bug-coreutils@gnu.org',0 ; DATA XREF: emit_ancillary_info+2Do
		align 10h
; char aSHomePageHttpW[]
aSHomePageHttpW	db '%s home page: <http://www.gnu.org/software/%s/>',0Ah,0
					; DATA XREF: emit_ancillary_info+3Fo
; char domainname[]
domainname	db 'coreutils',0        ; DATA XREF: emit_ancillary_info+4Fo
					; main+47o ...
aGnuCoreutils	db 'GNU coreutils',0    ; DATA XREF: emit_ancillary_info+54o
					; main+F8o
		align 4
; char aGeneralHelpUsi[]
aGeneralHelpUsi	db 'General help using GNU software: <http://www.gnu.org/gethelp/>',0Ah,0
					; DATA XREF: emit_ancillary_info+6Bo
; char s2[]
s2		db 'en_',0              ; DATA XREF: emit_ancillary_info+A2o
; char aReportSTransla[]
aReportSTransla	db 'Report %s translation bugs to <http://translationproject.org/team'
					; DATA XREF: emit_ancillary_info+CCo
		db '/>',0Ah,0
		align 4
; char aForCompleteDoc[]
aForCompleteDoc	db 'For complete documentation, run: info coreutils ',27h,'%s invocation'
					; DATA XREF: emit_ancillary_info+FCo
		db 27h,0Ah,0
aSerial		db 'serial',0           ; DATA XREF: .rodata:longoptso
aDelimiters	db 'delimiters',0       ; DATA XREF: .rodata:longoptso
aHelp		db 'help',0             ; DATA XREF: .rodata:longoptso
aVersion	db 'version',0          ; DATA XREF: .rodata:longoptso
		align 20h
; const	option longopts[5]
longopts	option <offset aSerial,	0, 0, 73h> ; DATA XREF:	main+124o
		option <offset aDelimiters, 1, 0, 64h> ; "serial"
		option <offset aHelp, 0, 0, 0FFFFFF7Eh>
		option <offset aVersion, 0, 0, 0FFFFFF7Dh>
		option	<0>
; char aWriteError[]
aWriteError	db 'write error',0      ; DATA XREF: write_error+Ao
; char s[]
s		db '-',0                ; DATA XREF: paste_parallel+5Bo
					; paste_serial+18o ...
aR		db 'r',0                ; DATA XREF: paste_parallel+B3o
					; paste_serial+4Do
; char format[]
format		db '%s',0               ; DATA XREF: paste_parallel+F1o
					; paste_parallel+2B9o ...
; char aStandardInputI[]
aStandardInputI	db 'standard input is closed',0 ; DATA XREF: paste_parallel+154o
; char aTrySHelpForMor[]
aTrySHelpForMor	db 'Try `%s --help',27h,' for more information.',0Ah,0
					; DATA XREF: usage+16o
		align 4
; char aUsageSOption__[]
aUsageSOption__	db 'Usage: %s [OPTION]... [FILE]...',0Ah,0 ; DATA XREF: usage+46o
		align 4
; char aWriteLinesCons[]
aWriteLinesCons	db 'Write lines consisting of the sequentially corresponding lines fr'
					; DATA XREF: usage+69o
		db 'om',0Ah
		db 'each FILE, separated by TABs, to standard output.',0Ah
		db 'With no FILE, or when FILE is -, read standard input.',0Ah
		db 0Ah,0
		align 4
; char aMandatoryArgum[]
aMandatoryArgum	db 'Mandatory arguments to long options are mandatory for short optio'
					; DATA XREF: usage+8Co
		db 'ns too.',0Ah,0
		align 4
; char aDDelimitersLis[]
aDDelimitersLis	db '  -d, --delimiters=LIST   reuse characters from LIST instead of T'
					; DATA XREF: usage+AFo
		db 'ABs',0Ah
		db '  -s, --serial            paste one file at a time instead of in '
		db 'parallel',0Ah,0
; char aHelpDisplayThi[]
aHelpDisplayThi	db '      --help     display this help and exit',0Ah,0
					; DATA XREF: usage+D2o
		align 4
; char aVersionOutputV[]
aVersionOutputV	db '      --version  output version information and exit',0Ah,0
					; DATA XREF: usage+F5o
asc_800119A	db 9,0			; DATA XREF: main+15o
; char locale
locale		db 0			; DATA XREF: main+30o
; char dirname[]
dirname		db '/usr/local/share/locale',0 ; DATA XREF: main+42o
a0		db '\0',0               ; DATA XREF: main:loc_8000B6Fo
aDavidMackenzie	db 'David MacKenzie',0  ; DATA XREF: main+EDo
aDavidM_Ihnat	db 'David M. Ihnat',0   ; DATA XREF: main+F2o
aPaste		db 'paste',0            ; DATA XREF: main+FDo
; char shortopts[]
shortopts	db 'd:s',0              ; DATA XREF: main+129o
		align 4
; char aDelimiterListE[]
aDelimiterListE	db 'delimiter list ends with an unescaped backslash: %s',0
					; DATA XREF: main+1ABo
_rodata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_eh_frame	segment	dword public 'CONST' use32
		assume cs:_eh_frame
		;org 8001218h
		dd 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 20h, 1Ch
		dd offset loc_8000D41-8001F79h
		dd 11Ch, 80E4100h, 0D420285h, 3834405h,	0C5011403h, 4040CC3h
		dd 1Ch,	40h
		dd offset loc_8000D41-8001E81h
		dd 8, 80E4100h,	0D420285h, 0CC54405h, 404h, 1Ch, 60h
		dd offset loc_8000D41-8001E99h
		dd 157h, 80E4100h, 0D420285h, 1530305h,	4040CC5h, 18h
		dd 80h
		dd offset loc_8000D41-8001D62h
		dd 34h,	80E4100h, 0D420285h, 3834405h, 1Ch, 9Ch
		dd offset loc_8000D41-8001D4Ah
		dd 28h,	80E4100h, 0D420285h, 0CC56405h,	404h, 20h, 0BCh
		dd offset loc_8000D41-8001D42h
		dd 4D2h, 80E4100h, 0D420285h, 3834405h,	0C504CA03h, 4040CC3h
		dd 20h,	0E0h
		dd offset loc_8000D41-8001894h
		dd 1E7h, 80E4100h, 0D420285h, 3834405h,	0C501DF03h, 4040CC3h
		dd 18h,	104h
		dd offset loc_8000D41-80016D1h
		dd 11Fh, 80E4100h, 0D420285h, 3834405h,	28h, 120h
		dd offset loc_8000D41-80015CEh
		dd 297h, 10C4400h, 5104700h, 45007502h,	7475030Fh, 2061006h
		dd 3107C75h, 787502h
_eh_frame	ends

; ===========================================================================

; Segment type:	Externs
; extern
		extrn program_name:dword ; DATA	XREF: emit_ancillary_info+7r
					; emit_ancillary_info+B6r ...
		extrn last_component:near ; CODE XREF: emit_ancillary_info+10p
					; emit_ancillary_info+BFp ...
; char *gettext(const char *msgid)
		extrn gettext:near	; CODE XREF: emit_ancillary_info+22p
					; emit_ancillary_info+44p ...
; int printf(const char	*format, ...)
		extrn printf:near	; CODE XREF: emit_ancillary_info+34p
					; emit_ancillary_info+5Ap ...
; struct _IO_FILE *stdout
		extrn stdout:dword	; DATA XREF: emit_ancillary_info+62r
					; paste_parallel+1EBr ...
		extrn fputs_unlocked:near ; CODE XREF: emit_ancillary_info+7Dp
					; usage+7Bp ...
; char *setlocale(int category,	const char *locale)
		extrn setlocale:near	; CODE XREF: emit_ancillary_info+8Cp
					; main+37p
; int strncmp(const char *s1, const char *s2, size_t n)
		extrn strncmp:near	; CODE XREF: emit_ancillary_info+AAp
; char *xstrdup(const char *)
		extrn xstrdup:near	; CODE XREF: collapse_escapes+Cp
; int *_errno_location(void)
		extrn __errno_location:near ; CODE XREF: write_error+19p
					; paste_parallel+E9p ...
; void error(int status, int errnum, const char	*format, ...)
		extrn error:near	; CODE XREF: write_error+27p
					; paste_parallel+F9p ...
; void abort(void)
		extrn abort:near	; CODE XREF: write_error+2Fp
; int putchar_unlocked(int c)
		extrn putchar_unlocked:near ; CODE XREF: xputchar+14p
; void *xmalloc(size_t)
		extrn xmalloc:near	; CODE XREF: paste_parallel+15p
		extrn xnmalloc:near	; CODE XREF: paste_parallel+2Cp
; int strcmp(const char	*s1, const char	*s2)
		extrn strcmp:near	; CODE XREF: paste_parallel+61p
					; paste_serial+1Ep
; struct _IO_FILE *stdin
		extrn stdin:dword	; DATA XREF: paste_parallel+83r
					; paste_parallel+2E0r ...
		extrn fopen64:near	; CODE XREF: paste_parallel+B9p
					; paste_serial+53p
; int fileno(FILE *stream)
		extrn fileno:near	; CODE XREF: paste_parallel+118p
; int getc_unlocked(FILE *stream)
		extrn getc_unlocked:near ; CODE	XREF: paste_parallel+1CAp
					; paste_parallel+245p ...
; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
		extrn fwrite_unlocked:near ; CODE XREF:	paste_parallel+1F9p
					; paste_parallel+399p
; int ferror_unlocked(FILE *stream)
		extrn ferror_unlocked:near ; CODE XREF:	paste_parallel+29Bp
					; paste_serial+15Ap
; void clearerr_unlocked(FILE *stream)
		extrn clearerr_unlocked:near ; CODE XREF: paste_parallel+2FEp
					; paste_serial+18Ep
; int fclose(FILE *stream)
		extrn fclose:near	; CODE XREF: paste_parallel+31Dp
					; paste_serial+19Ep ...
; void free(void *ptr)
		extrn free:near		; CODE XREF: paste_parallel+4B3p
					; paste_parallel+4C1p ...
; struct _IO_FILE *stderr
		extrn stderr:dword	; DATA XREF: usage+25r
; int fprintf(FILE *stream, const char *format,	...)
		extrn fprintf:near	; CODE XREF: usage+30p
; void exit(int	status)
		extrn exit:near		; CODE XREF: usage+11Ap main+110p ...
		extrn set_program_name:near ; CODE XREF: main+25p
; char *bindtextdomain(const char *domainname, const char *dirname)
		extrn bindtextdomain:near ; CODE XREF: main+4Cp
; char *textdomain(const char *domainname)
		extrn textdomain:near	; CODE XREF: main+5Cp
; void close_stdout(void)
		extrn close_stdout	; DATA XREF: main+67o
; int atexit(void (*func)(void))
		extrn atexit:near	; CODE XREF: main+6Cp
; char *optarg
		extrn optarg:dword	; DATA XREF: main:loc_8000B5Cr
					; main+B9r
		extrn Version:dword	; DATA XREF: main:loc_8000B8Cr
		extrn version_etc:near	; CODE XREF: main+103p
; int getopt_long(int argc, char *const	*argv, const char *shortopts, const struct option *longopts, int *longind)
		extrn getopt_long:near	; CODE XREF: main+133p
; int optind
		extrn optind:dword	; DATA XREF: main+148r	main+1D4r ...
		extrn set_quoting_style:near ; CODE XREF: main+190p
		extrn quotearg_colon:near ; CODE XREF: main+19Ep


		end
