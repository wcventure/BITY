;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B611-7234-BB			    |
; |		Doskey Lee, Kingsoft Internet Security Software		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	CFF630C6B2D77F7F6C19FC1B575C7827
; Input	CRC32 :	08CD7120

; File Name   :	D:\coreutils-o\uptime.o
; Format      :	ELF for	Intel 386 (Relocatable)
;
; Source File :	'uptime.c'

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	byte public 'CODE' use32
		assume cs:_text
		;org 8000000h
		assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; unsigned int __cdecl select_plural(uintmax_t n)
select_plural	proc near		; CODE XREF: print_uptime+34Dp

n		= qword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_0]
		mov	dword ptr [ebp+n], eax
		mov	eax, [ebp+arg_4]
		mov	dword ptr [ebp+n+4], eax
		cmp	dword ptr [ebp+n+4], 0
		jbe	short loc_8000036
		mov	eax, dword ptr [ebp+n]
		mov	edx, dword ptr [ebp+n+4]
		push	0
		push	0F4240h
		push	edx
		push	eax
		call	__umoddi3
		add	esp, 10h
		add	eax, 0F4240h
		jmp	short locret_8000039
; ---------------------------------------------------------------------------

loc_8000036:				; CODE XREF: select_plural+16j
		mov	eax, dword ptr [ebp+n]

locret_8000039:				; CODE XREF: select_plural+34j
		leave
		retn
select_plural	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void emit_ancillary_info()
emit_ancillary_info proc near		; CODE XREF: usage+104p

lc_messages	= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset msgid	; "\nReport %s bugs to %s\n"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset aBugCoreutils@g ; "bug-coreutils@gnu.org"
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	offset aSHomePageHttpW ; "%s home page:	<http://www.gnu.org/softw"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset domainname ; "coreutils"
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aGeneralHelpUsi ; "General help using GNU software: <http:"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		sub	esp, 8
		push	0		; locale
		push	5		; category
		call	setlocale
		add	esp, 10h
		mov	[ebp+lc_messages], eax
		cmp	[ebp+lc_messages], 0
		jz	short loc_8000121
		sub	esp, 4
		push	3		; n
		push	offset s2	; "en_"
		push	[ebp+lc_messages] ; s1
		call	strncmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_8000121
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aReportSTransla ; "Report %s translation	bugs to	<http://t"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h

loc_8000121:				; CODE XREF: emit_ancillary_info+9Bj
					; emit_ancillary_info+B4j
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aForCompleteDoc ; "For complete documentation, run: info	c"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		nop
		mov	ebx, [ebp+var_4]
		leave
		retn
emit_ancillary_info endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl print_uptime(size_t n, const STRUCT_UTMP	*this)
print_uptime	proc near		; CODE XREF: uptime+56p

var_2080	= qword	ptr -2080h
var_2074	= dword	ptr -2074h
var_2070	= word ptr -2070h
var_206E	= word ptr -206Eh
this		= dword	ptr -206Ch
end_ptr		= dword	ptr -205Ch
entries		= dword	ptr -2058h
boot_time	= dword	ptr -2054h
uptime		= dword	ptr -2050h
fp		= dword	ptr -204Ch
b		= dword	ptr -2048h
updays		= dword	ptr -2044h
uphours		= dword	ptr -2040h
upmins		= dword	ptr -203Ch
tmn		= dword	ptr -2038h
loads		= dword	ptr -2034h
upsecs		= qword	ptr -2030h
avg		= qword	ptr -2028h
buf		= byte ptr -200Ch
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
n		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 2084h
		mov	eax, [ebp+arg_4]
		mov	[ebp+this], eax
		mov	eax, large gs:14h
		mov	[ebp+var_C], eax
		xor	eax, eax
		mov	[ebp+entries], 0
		mov	[ebp+boot_time], 0
		mov	[ebp+uptime], 0
		sub	esp, 8
		push	offset aR	; "r"
		push	offset aProcUptime ; "/proc/uptime"
		call	fopen64
		add	esp, 10h
		mov	[ebp+fp], eax
		cmp	[ebp+fp], 0
		jz	loc_80002F1
		sub	esp, 4
		push	[ebp+fp]
		push	2000h
		lea	eax, [ebp+buf]
		push	eax
		call	fgets_unlocked
		add	esp, 10h
		mov	[ebp+b], eax
		lea	eax, [ebp+buf]
		cmp	[ebp+b], eax
		jnz	loc_8000284
		sub	esp, 8
		lea	eax, [ebp+end_ptr]
		push	eax
		lea	eax, [ebp+buf]
		push	eax
		call	c_strtod
		add	esp, 10h
		fstp	[ebp+upsecs]
		mov	edx, [ebp+end_ptr]
		lea	eax, [ebp+buf]
		cmp	edx, eax
		jz	short loc_8000284
		fld	[ebp+upsecs]
		fldz
		fxch	st(1)
		fucomip	st, st(1)
		fstp	st
		jb	short loc_8000279
		fld	ds:dbl_8000D90
		fld	[ebp+upsecs]
		fxch	st(1)
		fucomip	st, st(1)
		fstp	st
		jbe	short loc_8000279
		fld	[ebp+upsecs]
		fnstcw	[ebp+var_206E]
		movzx	eax, [ebp+var_206E]
		mov	ah, 0Ch
		mov	[ebp+var_2070],	ax
		fldcw	[ebp+var_2070]
		fistp	[ebp+var_2074]
		fldcw	[ebp+var_206E]
		mov	eax, [ebp+var_2074]
		jmp	short loc_800027E
; ---------------------------------------------------------------------------

loc_8000279:				; CODE XREF: print_uptime+D6j
					; print_uptime+EAj
		mov	eax, 0FFFFFFFFh

loc_800027E:				; CODE XREF: print_uptime+120j
		mov	[ebp+uptime], eax

loc_8000284:				; CODE XREF: print_uptime+93j
					; print_uptime+C6j
		sub	esp, 0Ch
		push	[ebp+fp]	; stream
		call	fclose
		add	esp, 10h
		jmp	short loc_80002F1
; ---------------------------------------------------------------------------

loc_8000297:				; CODE XREF: print_uptime+1A5j
		mov	eax, [ebp+this]
		movzx	eax, byte ptr [eax+2Ch]
		test	al, al
		jz	short loc_80002BB
		mov	eax, [ebp+this]
		movzx	eax, word ptr [eax]
		cmp	ax, 7
		jnz	short loc_80002BB
		mov	eax, 1
		jmp	short loc_80002C0
; ---------------------------------------------------------------------------

loc_80002BB:				; CODE XREF: print_uptime+14Cj
					; print_uptime+15Bj
		mov	eax, 0

loc_80002C0:				; CODE XREF: print_uptime+162j
		add	[ebp+entries], eax
		mov	eax, [ebp+this]
		movzx	eax, word ptr [eax]
		cmp	ax, 2
		jnz	short loc_80002E7
		mov	eax, [ebp+this]
		mov	eax, [eax+154h]
		mov	[ebp+boot_time], eax

loc_80002E7:				; CODE XREF: print_uptime+17Cj
		add	[ebp+this], 180h

loc_80002F1:				; CODE XREF: print_uptime+5Ej
					; print_uptime+13Ej
		mov	eax, [ebp+n]
		lea	edx, [eax-1]
		mov	[ebp+n], edx
		test	eax, eax
		jnz	short loc_8000297
		sub	esp, 0Ch
		push	0		; timer
		call	time
		add	esp, 10h
		mov	[ebp+end_ptr], eax
		cmp	[ebp+uptime], 0
		jnz	short loc_800035D
		cmp	[ebp+boot_time], 0
		jnz	short loc_800034B
		sub	esp, 0Ch
		push	offset aCouldnTGetBoot ; "couldn't get boot time"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		sub	esp, 4
		push	ebx		; format
		push	eax		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_800034B:				; CODE XREF: print_uptime+1CAj
		mov	eax, [ebp+end_ptr]
		sub	eax, [ebp+boot_time]
		mov	[ebp+uptime], eax

loc_800035D:				; CODE XREF: print_uptime+1C1j
		mov	ecx, [ebp+uptime]
		mov	edx, 0C22E4507h
		mov	eax, ecx
		imul	edx
		lea	eax, [edx+ecx]
		sar	eax, 10h
		mov	edx, eax
		mov	eax, ecx
		sar	eax, 1Fh
		sub	edx, eax
		mov	eax, edx
		mov	[ebp+updays], eax
		mov	eax, [ebp+updays]
		imul	edx, eax, 0FFFEAE80h
		mov	eax, [ebp+uptime]
		lea	ecx, [edx+eax]
		mov	edx, 91A2B3C5h
		mov	eax, ecx
		imul	edx
		lea	eax, [edx+ecx]
		sar	eax, 0Bh
		mov	edx, eax
		mov	eax, ecx
		sar	eax, 1Fh
		sub	edx, eax
		mov	eax, edx
		mov	[ebp+uphours], eax
		mov	eax, [ebp+updays]
		imul	edx, eax, 0FFFEAE80h
		mov	eax, [ebp+uptime]
		add	edx, eax
		mov	eax, [ebp+uphours]
		imul	eax, 0FFFFF1F0h
		lea	ecx, [edx+eax]
		mov	edx, 88888889h
		mov	eax, ecx
		imul	edx
		lea	eax, [edx+ecx]
		sar	eax, 5
		mov	edx, eax
		mov	eax, ecx
		sar	eax, 1Fh
		sub	edx, eax
		mov	eax, edx
		mov	[ebp+upmins], eax
		sub	esp, 0Ch
		lea	eax, [ebp+end_ptr]
		push	eax		; timer
		call	localtime
		add	esp, 10h
		mov	[ebp+tmn], eax
		cmp	[ebp+tmn], 0
		jz	short loc_800044C
		sub	esp, 0Ch
		push	offset aHMP	; " %H:%M%P  "
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, ds:stdout
		sub	esp, 0Ch
		push	0
		push	0
		push	[ebp+tmn]
		push	edx
		push	eax
		call	fprintftime
		add	esp, 20h
		jmp	short loc_8000468
; ---------------------------------------------------------------------------

loc_800044C:				; CODE XREF: print_uptime+2C3j
		sub	esp, 0Ch
		push	offset a??????	; " ??:????  "
		call	gettext
		add	esp, 10h
		sub	esp, 0Ch
		push	eax		; format
		call	printf
		add	esp, 10h

loc_8000468:				; CODE XREF: print_uptime+2F3j
		cmp	[ebp+uptime], 0FFFFFFFFh
		jnz	short loc_800048F
		sub	esp, 0Ch
		push	offset aUp????Days???? ; "up ???? days ??:??,  "
		call	gettext
		add	esp, 10h
		sub	esp, 0Ch
		push	eax		; format
		call	printf
		add	esp, 10h
		jmp	short loc_80004FB
; ---------------------------------------------------------------------------

loc_800048F:				; CODE XREF: print_uptime+318j
		cmp	[ebp+updays], 0
		jle	short loc_80004DF
		mov	eax, [ebp+updays]
		cdq
		sub	esp, 8
		push	edx
		push	eax		; n
		call	select_plural
		add	esp, 10h
		sub	esp, 4
		push	eax		; n
		push	offset msgid2	; "up %ld days %2d:%02d,  "
		push	offset msgid1	; "up %ld day %2d:%02d,	 "
		call	ngettext
		add	esp, 10h
		push	[ebp+upmins]
		push	[ebp+uphours]
		push	[ebp+updays]
		push	eax		; format
		call	printf
		add	esp, 10h
		jmp	short loc_80004FB
; ---------------------------------------------------------------------------

loc_80004DF:				; CODE XREF: print_uptime+33Fj
		sub	esp, 4
		push	[ebp+upmins]
		push	[ebp+uphours]
		push	offset format	; "up  %2d:%02d,  "
		call	printf
		add	esp, 10h

loc_80004FB:				; CODE XREF: print_uptime+336j
					; print_uptime+386j
		sub	esp, 4
		push	[ebp+entries]	; n
		push	offset aLuUsers	; "%lu users"
		push	offset aLuUser	; "%lu user"
		call	ngettext
		add	esp, 10h
		sub	esp, 8
		push	[ebp+entries]
		push	eax		; format
		call	printf
		add	esp, 10h
		sub	esp, 8
		push	3		; nelem
		lea	eax, [ebp+avg]
		push	eax		; loadavg
		call	getloadavg
		add	esp, 10h
		mov	[ebp+loads], eax
		cmp	[ebp+loads], 0FFFFFFFFh
		jnz	short loc_800055D
		sub	esp, 0Ch
		push	0Ah		; c
		call	putchar_unlocked
		add	esp, 10h
		jmp	loc_80005FC
; ---------------------------------------------------------------------------

loc_800055D:				; CODE XREF: print_uptime+3F2j
		cmp	[ebp+loads], 0
		jle	short loc_800059A
		fld	[ebp+avg]
		fstp	[ebp+var_2080]
		sub	esp, 0Ch
		push	offset aLoadAverage_2f ; ",  load average: %.2f"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	dword ptr [ebp+var_2080+4]
		push	dword ptr [ebp+var_2080]
		push	eax		; format
		call	printf
		add	esp, 10h

loc_800059A:				; CODE XREF: print_uptime+40Dj
		cmp	[ebp+loads], 1
		jle	short loc_80005C0
		fld	[ebp+avg+8]
		sub	esp, 4
		lea	esp, [esp-8]
		fstp	qword ptr [esp]
		push	offset a_2f	; ", %.2f"
		call	printf
		add	esp, 10h

loc_80005C0:				; CODE XREF: print_uptime+44Aj
		cmp	[ebp+loads], 2
		jle	short loc_80005E6
		fld	[ebp+avg+10h]
		sub	esp, 4
		lea	esp, [esp-8]
		fstp	qword ptr [esp]
		push	offset a_2f	; ", %.2f"
		call	printf
		add	esp, 10h

loc_80005E6:				; CODE XREF: print_uptime+470j
		cmp	[ebp+loads], 0
		jle	short loc_80005FC
		sub	esp, 0Ch
		push	0Ah		; c
		call	putchar_unlocked
		add	esp, 10h

loc_80005FC:				; CODE XREF: print_uptime+401j
					; print_uptime+496j
		nop
		mov	eax, [ebp+var_C]
		xor	eax, large gs:14h
		jz	short loc_800060E
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_800060E:				; CODE XREF: print_uptime+4B0j
		mov	ebx, [ebp+var_4]
		leave
		retn
print_uptime	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl uptime(const char *filename, int	options)
uptime		proc near		; CODE XREF: main+E7p main+10Ap

filename	= dword	ptr -1Ch
n_users		= dword	ptr -14h
utmp_buf	= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
options		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, [ebp+arg_0]
		mov	[ebp+filename],	eax
		mov	eax, large gs:14h
		mov	[ebp+var_C], eax
		xor	eax, eax
		push	[ebp+options]
		lea	eax, [ebp+utmp_buf]
		push	eax
		lea	eax, [ebp+n_users]
		push	eax
		push	[ebp+filename]
		call	read_utmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_800065E
		call	__errno_location
		mov	eax, [eax]
		push	[ebp+filename]
		push	offset aS	; "%s"
		push	eax		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_800065E:				; CODE XREF: uptime+2Fj
		mov	edx, [ebp+utmp_buf]
		mov	eax, [ebp+n_users]
		sub	esp, 8
		push	edx		; this
		push	eax		; n
		call	print_uptime
		add	esp, 10h
		nop
		mov	eax, [ebp+var_C]
		xor	eax, large gs:14h
		jz	short locret_8000683
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

locret_8000683:				; CODE XREF: uptime+69j
		leave
		retn
uptime		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; void __cdecl usage(int status)
		public usage
usage		proc near		; CODE XREF: main+C2p main+15Bp
					; DATA XREF: ...

status		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 4
		cmp	[ebp+status], 0
		jz	short loc_80006C2
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, ds:stderr
		sub	esp, 4
		push	ebx
		push	edx		; format
		push	eax		; stream
		call	fprintf
		add	esp, 10h
		jmp	loc_800078E
; ---------------------------------------------------------------------------

loc_80006C2:				; CODE XREF: usage+Bj
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aUsageSOption__ ; "Usage: %s [OPTION]...	[FILE]\n"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	offset aPrintTheCurren ; "Print	the current time, the length of	t"...
		call	gettext
		add	esp, 10h
		sub	esp, 0Ch
		push	eax		; format
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	offset aProcessesInAnU ; "  Processes in\nan uninterruptible slee"...
		call	gettext
		add	esp, 10h
		sub	esp, 0Ch
		push	eax		; format
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	offset aIfFileIsNotSpe ; "If FILE is not specified, use	%s.  %s	a"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset aVarLogWtmp ; "/var/log/wtmp"
		push	offset filename	; "/var/run/utmp"
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aHelpDisplayThi ; "	--help	   display this	help and "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aVersionOutputV ; "	--version  output version informa"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		call	emit_ancillary_info

loc_800078E:				; CODE XREF: usage+38j
		sub	esp, 0Ch
		push	[ebp+status]	; status
		call	exit
usage		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public main
main		proc near

argc		= dword	ptr  0Ch
argv		= dword	ptr  10h
envp		= dword	ptr  14h

		lea	ecx, [esp+4]
		and	esp, 0FFFFFFF0h
		push	dword ptr [ecx-4]
		push	ebp
		mov	ebp, esp
		push	ebx
		push	ecx
		mov	ebx, ecx
		mov	eax, [ebx+4]
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	set_program_name
		add	esp, 10h
		sub	esp, 8
		push	offset shortopts ; locale
		push	6		; category
		call	setlocale
		add	esp, 10h
		sub	esp, 8
		push	offset dirname	; "/usr/local/share/locale"
		push	offset domainname ; "coreutils"
		call	bindtextdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset domainname ; "coreutils"
		call	textdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset close_stdout ; func
		call	atexit
		add	esp, 10h
		mov	eax, ds:Version
		sub	esp, 8
		push	0
		push	offset aKavehGhazi ; "Kaveh Ghazi"
		push	offset aDavidMackenzie ; "David	MacKenzie"
		push	offset aJosephArceneau ; "Joseph Arceneaux"
		push	offset usage
		push	eax
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	offset aUptime	; "uptime"
		push	dword ptr [ebx+4]
		push	dword ptr [ebx]
		call	parse_long_options
		add	esp, 30h
		sub	esp, 0Ch
		push	0		; longind
		push	0		; longopts
		push	offset shortopts ; shortopts
		push	dword ptr [ebx+4] ; argv
		push	dword ptr [ebx]	; argc
		call	getopt_long
		add	esp, 20h
		cmp	eax, 0FFFFFFFFh
		jz	short loc_8000860
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8000860:				; CODE XREF: main+BBj
		mov	eax, ds:optind
		mov	edx, [ebx]
		sub	edx, eax
		mov	eax, edx
		test	eax, eax
		jz	short loc_8000876
		cmp	eax, 1
		jz	short loc_800088A
		jmp	short loc_80008AD
; ---------------------------------------------------------------------------

loc_8000876:				; CODE XREF: main+D4j
		sub	esp, 8
		push	1		; options
		push	offset filename	; "/var/run/utmp"
		call	uptime
		add	esp, 10h
		jmp	short loc_80008F9
; ---------------------------------------------------------------------------

loc_800088A:				; CODE XREF: main+D9j
		mov	eax, ds:optind
		lea	edx, ds:0[eax*4]
		mov	eax, [ebx+4]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 8
		push	0		; options
		push	eax		; filename
		call	uptime
		add	esp, 10h
		jmp	short loc_80008F9
; ---------------------------------------------------------------------------

loc_80008AD:				; CODE XREF: main+DBj
		mov	eax, ds:optind
		add	eax, 1
		lea	edx, ds:0[eax*4]
		mov	eax, [ebx+4]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aExtraOperandS ;	"extra operand %s"
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_80008F9:				; CODE XREF: main+EFj main+112j
		sub	esp, 0Ch
		push	0		; status

loc_80008FE:				; DATA XREF: .eh_frame:08000DB8o
					; .eh_frame:08000DD8o ...
		call	exit
main		endp

_text		ends

; ===========================================================================

; Segment type:	Zero-length
; Segment permissions: Read/Write
_data		segment	byte public 'DATA' use32
_data		ends

; ===========================================================================

; Segment type:	Zero-length
; Segment permissions: Read/Write
_bss		segment	byte public 'BSS' use32
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rodata		segment	para public 'CONST' use32
		assume cs:_rodata
		;org 8000908h
; char msgid[]
msgid		db 0Ah			; DATA XREF: emit_ancillary_info+1Do
		db 'Report %s bugs to %s',0Ah,0
aBugCoreutils@g	db 'bug-coreutils@gnu.org',0 ; DATA XREF: emit_ancillary_info+2Do
		align 4
; char aSHomePageHttpW[]
aSHomePageHttpW	db '%s home page: <http://www.gnu.org/software/%s/>',0Ah,0
					; DATA XREF: emit_ancillary_info+3Fo
; char domainname[]
domainname	db 'coreutils',0        ; DATA XREF: emit_ancillary_info+4Fo
					; main+3Co ...
aGnuCoreutils	db 'GNU coreutils',0    ; DATA XREF: emit_ancillary_info+54o
					; main+88o
		align 4
; char aGeneralHelpUsi[]
aGeneralHelpUsi	db 'General help using GNU software: <http://www.gnu.org/gethelp/>',0Ah,0
					; DATA XREF: emit_ancillary_info+6Bo
; char s2[]
s2		db 'en_',0              ; DATA XREF: emit_ancillary_info+A2o
; char aReportSTransla[]
aReportSTransla	db 'Report %s translation bugs to <http://translationproject.org/team'
					; DATA XREF: emit_ancillary_info+CCo
		db '/>',0Ah,0
		align 10h
; char aForCompleteDoc[]
aForCompleteDoc	db 'For complete documentation, run: info coreutils ',27h,'%s invocation'
					; DATA XREF: emit_ancillary_info+FCo
		db 27h,0Ah,0
aR		db 'r',0                ; DATA XREF: print_uptime+3Fo
aProcUptime	db '/proc/uptime',0     ; DATA XREF: print_uptime+44o
; char aCouldnTGetBoot[]
aCouldnTGetBoot	db 'couldn',27h,'t get boot time',0 ; DATA XREF: print_uptime+1CFo
; char aHMP[]
aHMP		db ' %H:%M%P  ',0       ; DATA XREF: print_uptime+2C8o
; char a______[]
a??????		db ' ??:????  ',0       ; DATA XREF: print_uptime+2F8o
; char aUp____Days____[]
aUp????Days????	db 'up ???? days ??:??,  ',0 ; DATA XREF: print_uptime+31Do
; char msgid2[]
msgid2		db 'up %ld days %2d:%02d,  ',0 ; DATA XREF: print_uptime+359o
; char msgid1[]
msgid1		db 'up %ld day %2d:%02d,  ',0 ; DATA XREF: print_uptime+35Eo
; char format[]
format		db 'up  %2d:%02d,  ',0  ; DATA XREF: print_uptime+397o
; char aLuUsers[]
aLuUsers	db '%lu users',0        ; DATA XREF: print_uptime+3ADo
; char aLuUser[]
aLuUser		db '%lu user',0         ; DATA XREF: print_uptime+3B2o
; char aLoadAverage_2f[]
aLoadAverage_2f	db ',  load average: %.2f',0 ; DATA XREF: print_uptime+41Eo
; char a_2f[]
a_2f		db ', %.2f',0           ; DATA XREF: print_uptime+45Co
					; print_uptime+482o
; char aS[]
aS		db '%s',0               ; DATA XREF: uptime+3Bo
		align 4
; char aTrySHelpForMor[]
aTrySHelpForMor	db 'Try `%s --help',27h,' for more information.',0Ah,0
					; DATA XREF: usage+16o
; char aUsageSOption__[]
aUsageSOption__	db 'Usage: %s [OPTION]... [FILE]',0Ah,0 ; DATA XREF: usage+46o
		align 10h
; char aPrintTheCurren[]
aPrintTheCurren	db 'Print the current time, the length of time the system has been up'
					; DATA XREF: usage+63o
		db ',',0Ah
		db 'the number of users on the system, and the average number of jobs'
		db 0Ah
		db 'in the run queue over the last 1, 5 and 15 minutes.',0
		align 4
; char aProcessesInAnU[]
aProcessesInAnU	db '  Processes in',0Ah ; DATA XREF: usage+7Fo
		db 'an uninterruptible sleep state also contribute to the load averag'
		db 'e.',0Ah,0
; char aIfFileIsNotSpe[]
aIfFileIsNotSpe	db 'If FILE is not specified, use %s.  %s as FILE is common.',0Ah
					; DATA XREF: usage+9Bo
		db 0Ah,0
aVarLogWtmp	db '/var/log/wtmp',0    ; DATA XREF: usage+ABo
; char filename[]
filename	db '/var/run/utmp',0    ; DATA XREF: usage+B0o main+E2o
		align 4
; char aHelpDisplayThi[]
aHelpDisplayThi	db '      --help     display this help and exit',0Ah,0
					; DATA XREF: usage+C7o
		align 4
; char aVersionOutputV[]
aVersionOutputV	db '      --version  output version information and exit',0Ah,0
					; DATA XREF: usage+EAo
; char shortopts
shortopts	db 0			; DATA XREF: main+25o main+A6o
; char dirname[]
dirname		db '/usr/local/share/locale',0 ; DATA XREF: main+37o
aKavehGhazi	db 'Kaveh Ghazi',0      ; DATA XREF: main+73o
aDavidMackenzie	db 'David MacKenzie',0  ; DATA XREF: main+78o
aJosephArceneau	db 'Joseph Arceneaux',0 ; DATA XREF: main+7Do
aUptime		db 'uptime',0           ; DATA XREF: main+8Do
; char aExtraOperandS[]
aExtraOperandS	db 'extra operand %s',0 ; DATA XREF: main+13Bo
		align 10h
dbl_8000D90	dq 2.147483647e9	; DATA XREF: print_uptime+D8r
_rodata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_eh_frame	segment	dword public 'CONST' use32
		assume cs:_eh_frame
		;org 8000D98h
		dd 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 2	dup(1Ch)
		dd offset loc_80008FE-80016B6h
		dd 3Bh,	80E4100h, 0D420285h, 0CC57705h,	404h, 20h, 3Ch
		dd offset loc_80008FE-800169Bh
		dd 11Ch, 80E4100h, 0D420285h, 3834405h,	0C5011403h, 4040CC3h
		dd 20h,	60h
		dd offset loc_80008FE-80015A3h
		dd 4BCh, 80E4100h, 0D420285h, 3834705h,	0C504B103h, 4040CC3h
		dd 1Ch,	84h
		dd offset loc_80008FE-800110Bh
		dd 72h,	80E4100h, 0D420285h, 0C56E0205h, 4040Ch, 18h, 0A4h
		dd offset loc_80008FE-80010B9h
		dd 114h, 80E4100h, 0D420285h, 3834405h,	24h, 0C0h
		dd offset loc_80008FE-8000FC1h
		dd 16Ah, 10C4400h, 5104700h, 44007502h,	7875030Fh, 2031006h
		dd 7C75h
_eh_frame	ends

; ===========================================================================

; Segment type:	Externs
; extern
		extrn __umoddi3:near	; CODE XREF: select_plural+27p
		extrn program_name:dword ; DATA	XREF: emit_ancillary_info+7r
					; emit_ancillary_info+B6r ...
		extrn last_component:near ; CODE XREF: emit_ancillary_info+10p
					; emit_ancillary_info+BFp ...
; char *gettext(const char *msgid)
		extrn gettext:near	; CODE XREF: emit_ancillary_info+22p
					; emit_ancillary_info+44p ...
; int printf(const char	*format, ...)
		extrn printf:near	; CODE XREF: emit_ancillary_info+34p
					; emit_ancillary_info+5Ap ...
; struct _IO_FILE *stdout
		extrn stdout:dword	; DATA XREF: emit_ancillary_info+62r
					; print_uptime+2D7r ...
		extrn fputs_unlocked:near ; CODE XREF: emit_ancillary_info+7Dp
					; usage+D9p ...
; char *setlocale(int category,	const char *locale)
		extrn setlocale:near	; CODE XREF: emit_ancillary_info+8Cp
					; main+2Cp
; int strncmp(const char *s1, const char *s2, size_t n)
		extrn strncmp:near	; CODE XREF: emit_ancillary_info+AAp
		extrn fopen64:near	; CODE XREF: print_uptime+49p
		extrn fgets_unlocked:near ; CODE XREF: print_uptime+79p
		extrn c_strtod:near	; CODE XREF: print_uptime+AAp
; int fclose(FILE *stream)
		extrn fclose:near	; CODE XREF: print_uptime+136p
; time_t time(time_t *timer)
		extrn time:near		; CODE XREF: print_uptime+1ACp
; int *_errno_location(void)
		extrn __errno_location:near ; CODE XREF: print_uptime+1DEp
					; uptime+31p
; void error(int status, int errnum, const char	*format, ...)
		extrn error:near	; CODE XREF: print_uptime+1ECp
					; uptime+43p ...
; struct tm *localtime(const time_t *timer)
		extrn localtime:near	; CODE XREF: print_uptime+2AEp
		extrn fprintftime:near	; CODE XREF: print_uptime+2EBp
; char *ngettext(const char *msgid1, const char	*msgid2, unsigned __int32 n)
		extrn ngettext:near	; CODE XREF: print_uptime+363p
					; print_uptime+3B7p
; int getloadavg(double	*loadavg, int nelem)
		extrn getloadavg:near	; CODE XREF: print_uptime+3DDp
; int putchar_unlocked(int c)
		extrn putchar_unlocked:near ; CODE XREF: print_uptime+3F9p
					; print_uptime+49Dp
		extrn __stack_chk_fail:near ; CODE XREF: print_uptime+4B2p
					; uptime+6Bp
		extrn read_utmp:near	; CODE XREF: uptime+25p
; struct _IO_FILE *stderr
		extrn stderr:dword	; DATA XREF: usage+25r
; int fprintf(FILE *stream, const char *format,	...)
		extrn fprintf:near	; CODE XREF: usage+30p
; void exit(int	status)
		extrn exit:near		; CODE XREF: usage+10Fp
					; main:loc_80008FEp
		extrn set_program_name:near ; CODE XREF: main+1Ap
; char *bindtextdomain(const char *domainname, const char *dirname)
		extrn bindtextdomain:near ; CODE XREF: main+41p
; char *textdomain(const char *domainname)
		extrn textdomain:near	; CODE XREF: main+51p
; void close_stdout(void)
		extrn close_stdout	; DATA XREF: main+5Co
; int atexit(void (*func)(void))
		extrn atexit:near	; CODE XREF: main+61p
		extrn Version:dword	; DATA XREF: main+69r
		extrn parse_long_options:near ;	CODE XREF: main+97p
; int getopt_long(int argc, char *const	*argv, const char *shortopts, const struct option *longopts, int *longind)
		extrn getopt_long:near	; CODE XREF: main+B0p
; int optind
		extrn optind:dword	; DATA XREF: main:loc_8000860r
					; main:loc_800088Ar ...
		extrn quote:near	; CODE XREF: main+12Ep


		end
