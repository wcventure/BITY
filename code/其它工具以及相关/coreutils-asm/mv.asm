;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B611-7234-BB			    |
; |		Doskey Lee, Kingsoft Internet Security Software		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	DA758FE41EF99611810947987B1ACEA5
; Input	CRC32 :	0F9F3F8B

; File Name   :	D:\coreutils-o\mv.o
; Format      :	ELF for	Intel 386 (Relocatable)
;
; Source File :	'mv.c'

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	byte public 'CODE' use32
		assume cs:_text
		;org 8000000h
		assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void emit_ancillary_info()
emit_ancillary_info proc near		; CODE XREF: usage+1A8p

lc_messages	= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset msgid	; "\nReport %s bugs to %s\n"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset aBugCoreutils@g ; "bug-coreutils@gnu.org"
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	offset aSHomePageHttpW ; "%s home page:	<http://www.gnu.org/softw"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset domainname ; "coreutils"
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aGeneralHelpUsi ; "General help using GNU software: <http:"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		sub	esp, 8
		push	0		; locale
		push	5		; category
		call	setlocale
		add	esp, 10h
		mov	[ebp+lc_messages], eax
		cmp	[ebp+lc_messages], 0
		jz	short loc_80000E6
		sub	esp, 4
		push	3		; n
		push	offset s2	; "en_"
		push	[ebp+lc_messages] ; s1
		call	strncmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_80000E6
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aReportSTransla ; "Report %s translation	bugs to	<http://t"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h

loc_80000E6:				; CODE XREF: emit_ancillary_info+9Bj
					; emit_ancillary_info+B4j
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aForCompleteDoc ; "For complete documentation, run: info	c"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		nop
		mov	ebx, [ebp+var_4]
		leave
		retn
emit_ancillary_info endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; int priv_set_remove_linkdir()
priv_set_remove_linkdir	proc near	; CODE XREF: main+BCp
		push	ebp
		mov	ebp, esp
		mov	eax, 0FFFFFFFFh
		pop	ebp
		retn
priv_set_remove_linkdir	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl rm_option_init(rm_options *x)
rm_option_init	proc near		; CODE XREF: do_move+87p

x		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		mov	eax, [ebp+x]
		mov	byte ptr [eax],	0
		mov	eax, [ebp+x]
		mov	byte ptr [eax+9], 1
		mov	eax, [ebp+x]
		mov	byte ptr [eax+8], 0
		mov	eax, [ebp+x]
		mov	dword ptr [eax+4], 5
		mov	eax, [ebp+x]
		mov	byte ptr [eax+10h], 0
		mov	eax, [ebp+x]
		mov	byte ptr [eax+11h], 0
		mov	eax, [ebp+x]
		mov	byte ptr [eax+12h], 1
		sub	esp, 0Ch
		push	offset dev_ino_buf_5377
		call	get_root_dev_ino
		add	esp, 10h
		mov	edx, eax
		mov	eax, [ebp+x]
		mov	[eax+0Ch], edx
		mov	eax, [ebp+x]
		mov	eax, [eax+0Ch]
		test	eax, eax
		jnz	short loc_80001B8
		sub	esp, 0Ch
		push	offset dword_8001090
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aFailedToGetAtt ; "failed to get	attributes of %s"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		push	esi
		push	ebx		; format
		push	eax		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_80001B8:				; CODE XREF: rm_option_init+58j
		nop
		lea	esp, [ebp-8]
		pop	ebx
		pop	esi
		pop	ebp
		retn
rm_option_init	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl cp_option_init(cp_options *x)
cp_option_init	proc near		; CODE XREF: main+B4p

selinux_enabled	= byte ptr -9
x		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+selinux_enabled], 0
		sub	esp, 0Ch
		push	[ebp+x]
		call	cp_options_default
		add	esp, 10h
		mov	eax, [ebp+x]
		mov	byte ptr [eax+14h], 0
		mov	eax, [ebp+x]
		mov	dword ptr [eax+30h], 0
		mov	eax, [ebp+x]
		mov	dword ptr [eax+4], 2
		mov	eax, [ebp+x]
		mov	byte ptr [eax+15h], 0
		mov	eax, [ebp+x]
		mov	byte ptr [eax+16h], 0
		mov	eax, [ebp+x]
		mov	byte ptr [eax+17h], 0
		mov	eax, [ebp+x]
		mov	dword ptr [eax+8], 4
		mov	eax, [ebp+x]
		mov	byte ptr [eax+18h], 1
		mov	eax, [ebp+x]
		mov	byte ptr [eax+1Bh], 0
		mov	eax, [ebp+x]
		mov	byte ptr [eax+1Ch], 1
		mov	eax, [ebp+x]
		mov	byte ptr [eax+1Fh], 1
		mov	eax, [ebp+x]
		mov	byte ptr [eax+1Dh], 1
		mov	eax, [ebp+x]
		mov	byte ptr [eax+1Eh], 1
		mov	eax, [ebp+x]
		movzx	edx, [ebp+selinux_enabled]
		mov	[eax+21h], dl
		mov	eax, [ebp+x]
		mov	byte ptr [eax+25h], 0
		mov	eax, [ebp+x]
		mov	byte ptr [eax+20h], 0
		mov	eax, [ebp+x]
		mov	byte ptr [eax+22h], 0
		mov	eax, [ebp+x]
		mov	byte ptr [eax+23h], 1
		mov	eax, [ebp+x]
		mov	byte ptr [eax+24h], 0
		mov	eax, [ebp+x]
		mov	byte ptr [eax+26h], 1
		mov	eax, [ebp+x]
		mov	dword ptr [eax+0Ch], 2
		mov	eax, [ebp+x]
		mov	byte ptr [eax+28h], 0
		mov	eax, [ebp+x]
		mov	byte ptr [eax+27h], 0
		mov	eax, [ebp+x]
		mov	dword ptr [eax+10h], 0
		sub	esp, 0Ch
		push	0		; fd
		call	isatty
		add	esp, 10h
		test	eax, eax
		setnz	dl
		mov	eax, [ebp+x]
		mov	[eax+2Bh], dl
		mov	eax, [ebp+x]
		mov	byte ptr [eax+2Ch], 0
		mov	eax, [ebp+x]
		mov	byte ptr [eax+29h], 0
		mov	eax, [ebp+x]
		mov	byte ptr [eax+2Ah], 0
		mov	eax, [ebp+x]
		mov	dword ptr [eax+34h], 0
		mov	eax, [ebp+x]
		mov	dword ptr [eax+38h], 0
		nop
		leave
		retn
cp_option_init	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; _Bool	__cdecl	target_directory_operand(const char *file)
target_directory_operand proc near	; CODE XREF: main+4B8p

file		= dword	ptr -7Ch
is_a_dir	= byte ptr -71h
err		= dword	ptr -70h
st		= stat ptr -6Ch
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 84h
		mov	eax, [ebp+arg_0]
		mov	[ebp+file], eax
		mov	eax, large gs:14h
		mov	[ebp+var_C], eax
		xor	eax, eax
		sub	esp, 8
		lea	eax, [ebp+st]
		push	eax
		push	[ebp+file]
		call	stat64
		add	esp, 10h
		test	eax, eax
		jz	short loc_8000310
		call	__errno_location
		mov	eax, [eax]
		jmp	short loc_8000315
; ---------------------------------------------------------------------------

loc_8000310:				; CODE XREF: target_directory_operand+2Fj
		mov	eax, 0

loc_8000315:				; CODE XREF: target_directory_operand+38j
		mov	[ebp+err], eax
		cmp	[ebp+err], 0
		jnz	short loc_8000334
		mov	eax, [ebp+st.st_mode]
		and	eax, 0F000h
		cmp	eax, 4000h
		jnz	short loc_8000334
		mov	eax, 1
		jmp	short loc_8000339
; ---------------------------------------------------------------------------

loc_8000334:				; CODE XREF: target_directory_operand+46j
					; target_directory_operand+55j
		mov	eax, 0

loc_8000339:				; CODE XREF: target_directory_operand+5Cj
		mov	[ebp+is_a_dir],	al
		and	[ebp+is_a_dir],	1
		cmp	[ebp+err], 0
		jz	short loc_800037B
		cmp	[ebp+err], 2
		jz	short loc_800037B
		sub	esp, 0Ch
		push	[ebp+file]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aAccessingS ; "accessing	%s"
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	[ebp+err]	; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_800037B:				; CODE XREF: target_directory_operand+6Ej
					; target_directory_operand+74j
		movzx	eax, [ebp+is_a_dir]
		mov	edx, [ebp+var_C]
		xor	edx, large gs:14h
		jz	short loc_8000390
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_8000390:				; CODE XREF: target_directory_operand+B3j
		mov	ebx, [ebp+var_4]
		leave
		retn
target_directory_operand endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; _Bool	__cdecl	do_move(const char *source, const char *dest, const cp_options *x)
do_move		proc near		; CODE XREF: movefile+6Cp movefile+93p

x		= dword	ptr -44h
dest		= dword	ptr -40h
source		= dword	ptr -3Ch
copy_into_self	= byte ptr -33h
rename_succeeded= byte ptr -32h
ok		= byte ptr -31h
dir_to_remove	= dword	ptr -30h
status		= dword	ptr -2Ch
rm_options	= rm_options ptr -28h
dir		= dword	ptr -14h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 48h
		mov	eax, [ebp+arg_0]
		mov	[ebp+source], eax
		mov	eax, [ebp+arg_4]
		mov	[ebp+dest], eax
		mov	eax, [ebp+arg_8]
		mov	[ebp+x], eax
		mov	eax, large gs:14h
		mov	[ebp+var_C], eax
		xor	eax, eax
		sub	esp, 8
		lea	eax, [ebp+rename_succeeded]
		push	eax
		lea	eax, [ebp+copy_into_self]
		push	eax
		push	[ebp+x]
		push	0
		push	[ebp+dest]
		push	[ebp+source]
		call	copy
		add	esp, 20h
		mov	[ebp+ok], al
		cmp	[ebp+ok], 0
		jz	loc_8000486
		movzx	eax, [ebp+copy_into_self]
		test	al, al
		jz	short loc_80003F8
		mov	[ebp+dir_to_remove], 0
		mov	[ebp+ok], 0
		jmp	short loc_800040F
; ---------------------------------------------------------------------------

loc_80003F8:				; CODE XREF: do_move+54j
		movzx	eax, [ebp+rename_succeeded]
		test	al, al
		jz	short loc_8000409
		mov	[ebp+dir_to_remove], 0
		jmp	short loc_800040F
; ---------------------------------------------------------------------------

loc_8000409:				; CODE XREF: do_move+69j
		mov	eax, [ebp+source]
		mov	[ebp+dir_to_remove], eax

loc_800040F:				; CODE XREF: do_move+61j do_move+72j
		cmp	[ebp+dir_to_remove], 0
		jz	short loc_8000486
		sub	esp, 0Ch
		lea	eax, [ebp+rm_options]
		push	eax		; x
		call	rm_option_init
		add	esp, 10h
		mov	eax, [ebp+x]
		movzx	eax, byte ptr [eax+2Ah]
		mov	[ebp+rm_options.verbose], al
		mov	eax, [ebp+dir_to_remove]
		mov	[ebp+dir], eax
		mov	[ebp+dir+4], 0
		sub	esp, 8
		lea	eax, [ebp+rm_options]
		push	eax
		lea	eax, [ebp+dir]
		push	eax
		call	rm
		add	esp, 10h
		mov	[ebp+status], eax
		cmp	[ebp+status], 2
		jz	short loc_800047C
		cmp	[ebp+status], 3
		jz	short loc_800047C
		cmp	[ebp+status], 4
		jz	short loc_800047C
		push	offset __PRETTY_FUNCTION___5400	; "do_move"
		push	0E6h		; line
		push	offset file	; "mv.c"
		push	offset assertion ; "VALID_STATUS (status)"
		call	__assert_fail
; ---------------------------------------------------------------------------

loc_800047C:				; CODE XREF: do_move+C0j do_move+C6j ...
		cmp	[ebp+status], 4
		jnz	short loc_8000486
		mov	[ebp+ok], 0

loc_8000486:				; CODE XREF: do_move+48j do_move+7Ej ...
		movzx	eax, [ebp+ok]
		mov	edx, [ebp+var_C]
		xor	edx, large gs:14h
		jz	short locret_800049B
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

locret_800049B:				; CODE XREF: do_move+FFj
		leave
		retn
do_move		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; _Bool	__cdecl	movefile(char *source, char *dest, _Bool dest_is_dir, const cp_options *x)
movefile	proc near		; CODE XREF: main+637p	main+68Bp

dest_is_dir	= byte ptr -1Ch
ok		= byte ptr -11h
src_basename	= dword	ptr -10h
new_dest	= dword	ptr -0Ch
source		= dword	ptr  8
dest		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
x		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, [ebp+arg_8]
		mov	[ebp+dest_is_dir], al
		movzx	eax, ds:remove_trailing_slashes
		test	al, al
		jz	short loc_80004C2
		sub	esp, 0Ch
		push	[ebp+source]
		call	strip_trailing_slashes
		add	esp, 10h

loc_80004C2:				; CODE XREF: movefile+15j
		cmp	[ebp+dest_is_dir], 0
		jz	short loc_8000524
		sub	esp, 0Ch
		push	[ebp+source]
		call	last_component
		add	esp, 10h
		mov	[ebp+src_basename], eax
		sub	esp, 4
		push	0
		push	[ebp+src_basename]
		push	[ebp+dest]
		call	file_name_concat
		add	esp, 10h
		mov	[ebp+new_dest],	eax
		sub	esp, 0Ch
		push	[ebp+new_dest]
		call	strip_trailing_slashes
		add	esp, 10h
		sub	esp, 4
		push	[ebp+x]		; x
		push	[ebp+new_dest]	; dest
		push	[ebp+source]	; source
		call	do_move
		add	esp, 10h
		mov	[ebp+ok], al
		sub	esp, 0Ch
		push	[ebp+new_dest]	; ptr
		call	free
		add	esp, 10h
		jmp	short loc_800053B
; ---------------------------------------------------------------------------

loc_8000524:				; CODE XREF: movefile+29j
		sub	esp, 4
		push	[ebp+x]		; x
		push	[ebp+dest]	; dest
		push	[ebp+source]	; source
		call	do_move
		add	esp, 10h
		mov	[ebp+ok], al

loc_800053B:				; CODE XREF: movefile+85j
		movzx	eax, [ebp+ok]
		leave
		retn
movefile	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; void __cdecl usage(int status)
		public usage
usage		proc near		; CODE XREF: main+2C5p	main+309p ...

status		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0Ch
		cmp	[ebp+status], 0
		jz	short loc_8000580
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, ds:stderr
		sub	esp, 4
		push	ebx
		push	edx		; format
		push	eax		; stream
		call	fprintf
		add	esp, 10h
		jmp	loc_80006EE
; ---------------------------------------------------------------------------

loc_8000580:				; CODE XREF: usage+Dj
		mov	edi, ds:program_name
		mov	esi, ds:program_name
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aUsageSOption__ ; "Usage: %s [OPTION]...	[-T] SOURCE DEST\"...
		call	gettext
		add	esp, 10h
		push	edi
		push	esi
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aRenameSourceTo ; "Rename SOURCE	to DEST, or move SOURCE(s"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aMandatoryArgum ; "Mandatory arguments to long options are"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aBackupControlM ; "	--backup[=CONTROL]	 make a	b"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aStripTrailingS ; "	--strip-trailing-slashes  remove "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aTTargetDirecto ; "  -t,	--target-directory=DIRECTORY  mov"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aHelpDisplayThi ; "	--help	   display this	help and "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aVersionOutputV ; "	--version  output version informa"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aTheBackupSuffi ; "\nThe	backup suffix is `~', unless set "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aNoneOffNeverMa ; "  none, off	    never make backups (e"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		call	emit_ancillary_info

loc_80006EE:				; CODE XREF: usage+3Aj
		sub	esp, 0Ch
		push	[ebp+status]	; status
		call	exit
usage		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public main
main		proc near

argv		= dword	ptr -0DCh
ok		= byte ptr -0D7h
make_backups	= byte ptr -0D6h
no_target_directory= byte ptr -0D5h
backup_suffix_string= dword ptr	-0D4h
version_control_string=	dword ptr -0D0h
target_directory= dword	ptr -0CCh
n_files		= dword	ptr -0C8h
i		= dword	ptr -0C4h
c		= dword	ptr -0C0h
file		= dword	ptr -0BCh
x		= cp_options ptr -0B8h
st		= stat ptr -7Ch
var_1C		= dword	ptr -1Ch
argc		= dword	ptr  0Ch
envp		= dword	ptr  14h

		lea	ecx, [esp+4]
		and	esp, 0FFFFFFF0h
		push	dword ptr [ecx-4]
		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		push	ecx
		sub	esp, 0D8h
		mov	ebx, ecx
		mov	eax, [ebx+4]
		mov	[ebp+argv], eax
		mov	eax, large gs:14h
		mov	[ebp+var_1C], eax
		xor	eax, eax
		mov	[ebp+make_backups], 0
		mov	[ebp+version_control_string], 0
		mov	[ebp+target_directory],	0
		mov	[ebp+no_target_directory], 0
		mov	eax, [ebp+argv]
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	set_program_name
		add	esp, 10h
		sub	esp, 8
		push	offset locale	; locale
		push	6		; category
		call	setlocale
		add	esp, 10h
		sub	esp, 8
		push	offset dirname	; "/usr/local/share/locale"
		push	offset domainname ; "coreutils"
		call	bindtextdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset domainname ; "coreutils"
		call	textdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset close_stdin ; func
		call	atexit
		add	esp, 10h
		sub	esp, 0Ch
		lea	eax, [ebp+x]
		push	eax		; x
		call	cp_option_init
		add	esp, 10h
		call	priv_set_remove_linkdir
		sub	esp, 0Ch
		push	offset name	; "SIMPLE_BACKUP_SUFFIX"
		call	getenv
		add	esp, 10h
		mov	[ebp+backup_suffix_string], eax
		jmp	loc_8000A07
; ---------------------------------------------------------------------------

loc_80007D5:				; CODE XREF: main+33Aj
		mov	eax, [ebp+c]
		cmp	eax, 66h
		jz	loc_8000884
		cmp	eax, 66h
		jg	short loc_8000825
		cmp	eax, 53h
		jz	loc_80009A5
		cmp	eax, 53h
		jg	short loc_8000812
		cmp	eax, 0FFFFFF7Dh
		jz	loc_80009C3
		cmp	eax, 0FFFFFF7Eh
		jz	loc_80009B9
		jmp	loc_80009FD
; ---------------------------------------------------------------------------

loc_8000812:				; CODE XREF: main+FCj
		cmp	eax, 54h
		jz	loc_800098A
		cmp	eax, 62h
		jz	short loc_8000860
		jmp	loc_80009FD
; ---------------------------------------------------------------------------

loc_8000825:				; CODE XREF: main+EEj
		cmp	eax, 74h
		jz	loc_80008BD
		cmp	eax, 74h
		jg	short loc_8000842
		cmp	eax, 69h
		jz	short loc_8000893
		cmp	eax, 6Eh
		jz	short loc_80008A2
		jmp	loc_80009FD
; ---------------------------------------------------------------------------

loc_8000842:				; CODE XREF: main+138j
		cmp	eax, 76h
		jz	loc_800099C
		cmp	eax, 76h
		jl	loc_8000993
		cmp	eax, 80h
		jz	short loc_80008B1
		jmp	loc_80009FD
; ---------------------------------------------------------------------------

loc_8000860:				; CODE XREF: main+125j
		mov	[ebp+make_backups], 1
		mov	eax, ds:optarg
		test	eax, eax
		jz	loc_8000A07
		mov	eax, ds:optarg
		mov	[ebp+version_control_string], eax
		jmp	loc_8000A07
; ---------------------------------------------------------------------------

loc_8000884:				; CODE XREF: main+E5j
		mov	[ebp+x.interactive], 1
		jmp	loc_8000A07
; ---------------------------------------------------------------------------

loc_8000893:				; CODE XREF: main+13Dj
		mov	[ebp+x.interactive], 3
		jmp	loc_8000A07
; ---------------------------------------------------------------------------

loc_80008A2:				; CODE XREF: main+142j
		mov	[ebp+x.interactive], 2
		jmp	loc_8000A07
; ---------------------------------------------------------------------------

loc_80008B1:				; CODE XREF: main+160j
		mov	ds:remove_trailing_slashes, 1
		jmp	loc_8000A07
; ---------------------------------------------------------------------------

loc_80008BD:				; CODE XREF: main+12Fj
		cmp	[ebp+target_directory],	0
		jz	short loc_80008EB
		sub	esp, 0Ch
		push	offset aMultipleTarget ; "multiple target directories specified"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h
		jmp	loc_800097D
; ---------------------------------------------------------------------------

loc_80008EB:				; CODE XREF: main+1CBj
		mov	eax, ds:optarg
		sub	esp, 8
		lea	edx, [ebp+st]
		push	edx
		push	eax
		call	stat64
		add	esp, 10h
		test	eax, eax
		jz	short loc_800093D
		mov	eax, ds:optarg
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	edi, eax
		sub	esp, 0Ch
		push	offset aAccessingS ; "accessing	%s"
		call	gettext
		add	esp, 10h
		mov	esi, eax
		call	__errno_location
		mov	eax, [eax]
		push	edi
		push	esi		; format
		push	eax		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_800093D:				; CODE XREF: main+209j
		mov	eax, [ebp+st.st_mode]
		and	eax, 0F000h
		cmp	eax, 4000h
		jz	short loc_800097D
		mov	eax, ds:optarg
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aTargetSIsNotAD ; "target %s is not a directory"
		call	gettext
		add	esp, 10h
		push	esi
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_800097D:				; CODE XREF: main+1EDj	main+251j
		mov	eax, ds:optarg
		mov	[ebp+target_directory],	eax
		jmp	short loc_8000A07
; ---------------------------------------------------------------------------

loc_800098A:				; CODE XREF: main+11Cj
		mov	[ebp+no_target_directory], 1
		jmp	short loc_8000A07
; ---------------------------------------------------------------------------

loc_8000993:				; CODE XREF: main+155j
		mov	[ebp+x.update],	1
		jmp	short loc_8000A07
; ---------------------------------------------------------------------------

loc_800099C:				; CODE XREF: main+14Cj
		mov	[ebp+x.verbose], 1
		jmp	short loc_8000A07
; ---------------------------------------------------------------------------

loc_80009A5:				; CODE XREF: main+F3j
		mov	[ebp+make_backups], 1
		mov	eax, ds:optarg
		mov	[ebp+backup_suffix_string], eax
		jmp	short loc_8000A07
; ---------------------------------------------------------------------------

loc_80009B9:				; CODE XREF: main+10Ej
		sub	esp, 0Ch
		push	0		; status
		call	usage
; ---------------------------------------------------------------------------

loc_80009C3:				; CODE XREF: main+103j
		mov	edx, ds:Version
		mov	eax, ds:stdout
		push	0
		push	offset aJimMeyering ; "Jim Meyering"
		push	offset aDavidMackenzie ; "David	MacKenzie"
		push	offset aMikeParker ; "Mike Parker"
		push	edx
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	offset aMv	; "mv"
		push	eax
		call	version_etc
		add	esp, 20h
		sub	esp, 0Ch
		push	0		; status
		call	exit
; ---------------------------------------------------------------------------

loc_80009FD:				; CODE XREF: main+114j	main+127j ...
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8000A07:				; CODE XREF: main+D7j main+175j ...
		sub	esp, 0Ch
		push	0		; longind
		push	offset long_options ; longopts
		push	offset shortopts ; "bfint:uvS:T"
		push	[ebp+argv]	; argv
		push	dword ptr [ebx]	; argc
		call	getopt_long
		add	esp, 20h
		mov	[ebp+c], eax
		cmp	[ebp+c], 0FFFFFFFFh
		jnz	loc_80007D5
		mov	eax, ds:optind
		mov	edx, [ebx]
		sub	edx, eax
		mov	eax, edx
		mov	[ebp+n_files], eax
		mov	eax, ds:optind
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		mov	[ebp+file], eax
		cmp	[ebp+target_directory],	0
		setz	al
		movzx	eax, al
		cmp	eax, [ebp+n_files]
		jl	short loc_8000AE2
		cmp	[ebp+n_files], 0
		jg	short loc_8000AA4
		sub	esp, 0Ch
		push	offset aMissingFileOpe ; "missing file operand"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		jmp	short loc_8000AD8
; ---------------------------------------------------------------------------

loc_8000AA4:				; CODE XREF: main+387j
		mov	eax, [ebp+file]
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aMissingDestina ; "missing destination file operand after "...
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h

loc_8000AD8:				; CODE XREF: main+3A9j
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8000AE2:				; CODE XREF: main+37Ej
		cmp	[ebp+no_target_directory], 0
		jz	short loc_8000B62
		cmp	[ebp+target_directory],	0
		jz	short loc_8000B14
		sub	esp, 0Ch
		push	offset aCannotCombineT ; "cannot combine --target-directory (-t) "...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_8000B14:				; CODE XREF: main+3F9j
		cmp	[ebp+n_files], 2
		jle	loc_8000C34
		mov	eax, [ebp+file]
		add	eax, 8
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aExtraOperandS ;	"extra operand %s"
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8000B62:				; CODE XREF: main+3F0j
		cmp	[ebp+target_directory],	0
		jnz	loc_8000C34
		cmp	[ebp+n_files], 1
		jg	short loc_8000B91
		push	offset __PRETTY_FUNCTION___5445	; "main"
		push	1C4h		; line
		push	offset file	; "mv.c"
		push	offset a2N_files ; "2 <= n_files"
		call	__assert_fail
; ---------------------------------------------------------------------------

loc_8000B91:				; CODE XREF: main+47Dj
		mov	eax, [ebp+n_files]
		add	eax, 3FFFFFFFh
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+file]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax		; file
		call	target_directory_operand
		add	esp, 10h
		test	al, al
		jz	short loc_8000BE3
		sub	[ebp+n_files], 1
		mov	eax, [ebp+n_files]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+file]
		add	eax, edx
		mov	eax, [eax]
		mov	[ebp+target_directory],	eax
		jmp	short loc_8000C34
; ---------------------------------------------------------------------------

loc_8000BE3:				; CODE XREF: main+4C2j
		cmp	[ebp+n_files], 2
		jle	short loc_8000C34
		mov	eax, [ebp+n_files]
		add	eax, 3FFFFFFFh
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+file]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aTargetSIsNotAD ; "target %s is not a directory"
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_8000C34:				; CODE XREF: main+422j	main+470j ...
		cmp	[ebp+make_backups], 0
		jz	short loc_8000C72
		mov	eax, [ebp+x.interactive]
		cmp	eax, 2
		jnz	short loc_8000C72
		sub	esp, 0Ch
		push	offset aOptionsBackupA ; "options --backup and --no-clobber are	m"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8000C72:				; CODE XREF: main+542j	main+54Dj
		cmp	[ebp+backup_suffix_string], 0
		jz	short loc_8000C91
		sub	esp, 0Ch
		push	[ebp+backup_suffix_string] ; char *
		call	xstrdup
		add	esp, 10h
		mov	ds:simple_backup_suffix, eax

loc_8000C91:				; CODE XREF: main+580j
		cmp	[ebp+make_backups], 0
		jz	short loc_8000CBE
		sub	esp, 0Ch
		push	offset aBackupType ; "backup type"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	[ebp+version_control_string]
		push	eax
		call	xget_version
		add	esp, 10h
		jmp	short loc_8000CC3
; ---------------------------------------------------------------------------

loc_8000CBE:				; CODE XREF: main+59Fj
		mov	eax, 0

loc_8000CC3:				; CODE XREF: main+5C3j
		mov	[ebp+x.backup_type], eax
		call	hash_init
		cmp	[ebp+target_directory],	0
		jz	loc_8000D66
		cmp	[ebp+n_files], 1
		jle	short loc_8000CF6
		sub	esp, 0Ch
		lea	eax, [ebp+x]
		push	eax
		call	dest_info_init
		add	esp, 10h

loc_8000CF6:				; CODE XREF: main+5E9j
		mov	[ebp+ok], 1
		mov	[ebp+i], 0
		jmp	short loc_8000D56
; ---------------------------------------------------------------------------

loc_8000D09:				; CODE XREF: main+669j
		mov	eax, [ebp+i]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+file]
		add	eax, edx
		mov	eax, [eax]
		lea	edx, [ebp+x]
		push	edx		; x
		push	1		; dest_is_dir
		push	[ebp+target_directory] ; dest
		push	eax		; source
		call	movefile
		add	esp, 10h
		movzx	edx, [ebp+ok]
		movzx	eax, al
		and	eax, edx
		test	eax, eax
		setnz	al
		mov	[ebp+ok], al
		add	[ebp+i], 1

loc_8000D56:				; CODE XREF: main+60Ej
		mov	eax, [ebp+i]
		cmp	eax, [ebp+n_files]
		jl	short loc_8000D09
		jmp	short loc_8000D92
; ---------------------------------------------------------------------------

loc_8000D66:				; CODE XREF: main+5DCj
		mov	eax, [ebp+file]
		add	eax, 4
		mov	edx, [eax]
		mov	eax, [ebp+file]
		mov	eax, [eax]
		lea	ecx, [ebp+x]
		push	ecx		; x
		push	0		; dest_is_dir
		push	edx		; dest
		push	eax		; source
		call	movefile
		add	esp, 10h
		mov	[ebp+ok], al

loc_8000D92:				; CODE XREF: main+66Bj
		cmp	[ebp+ok], 0
		jz	short loc_8000DA2
		mov	eax, 0
		jmp	short loc_8000DA7
; ---------------------------------------------------------------------------

loc_8000DA2:				; CODE XREF: main+6A0j
		mov	eax, 1

loc_8000DA7:				; CODE XREF: main+6A7j
		sub	esp, 0Ch
		push	eax		; status

loc_8000DAB:				; DATA XREF: .eh_frame:080019E4o
					; .eh_frame:08001A08o ...
		call	exit
main		endp

_text		ends

; ===========================================================================

; Segment type:	Zero-length
; Segment permissions: Read/Write
_data		segment	byte public 'DATA' use32
_data		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
		assume cs:_bss
		;org 8000DB4h
		assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing
; _Bool	remove_trailing_slashes
remove_trailing_slashes	db ?		; DATA XREF: movefile+Cr
					; main:loc_80008B1w
		align 4
; Function-local static	variable
; dev_ino dev_ino_buf_5377
dev_ino_buf_5377 dev_ino <?>		; DATA XREF: rm_option_init+3Bo
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment '32byte' can not be represented in assembly
_rodata		segment	para public 'CONST' use32
		assume cs:_rodata
		;org 8000DE0h
; char msgid[]
msgid		db 0Ah			; DATA XREF: emit_ancillary_info+1Do
		db 'Report %s bugs to %s',0Ah,0
aBugCoreutils@g	db 'bug-coreutils@gnu.org',0 ; DATA XREF: emit_ancillary_info+2Do
		align 10h
; char aSHomePageHttpW[]
aSHomePageHttpW	db '%s home page: <http://www.gnu.org/software/%s/>',0Ah,0
					; DATA XREF: emit_ancillary_info+3Fo
; char domainname[]
domainname	db 'coreutils',0        ; DATA XREF: emit_ancillary_info+4Fo
					; main+7Do ...
aGnuCoreutils	db 'GNU coreutils',0    ; DATA XREF: emit_ancillary_info+54o
					; main+2E7o
		align 4
; char aGeneralHelpUsi[]
aGeneralHelpUsi	db 'General help using GNU software: <http://www.gnu.org/gethelp/>',0Ah,0
					; DATA XREF: emit_ancillary_info+6Bo
; char s2[]
s2		db 'en_',0              ; DATA XREF: emit_ancillary_info+A2o
; char aReportSTransla[]
aReportSTransla	db 'Report %s translation bugs to <http://translationproject.org/team'
					; DATA XREF: emit_ancillary_info+CCo
		db '/>',0Ah,0
		align 4
; char aForCompleteDoc[]
aForCompleteDoc	db 'For complete documentation, run: info coreutils ',27h,'%s invocation'
					; DATA XREF: emit_ancillary_info+FCo
		db 27h,0Ah,0
aBackup		db 'backup',0           ; DATA XREF: .rodata:long_optionso
aForce		db 'force',0            ; DATA XREF: .rodata:long_optionso
aInteractive	db 'interactive',0      ; DATA XREF: .rodata:long_optionso
aNoClobber	db 'no-clobber',0       ; DATA XREF: .rodata:long_optionso
aNoTargetDirect	db 'no-target-directory',0 ; DATA XREF: .rodata:long_optionso
aStripTrailin_0	db 'strip-trailing-slashes',0 ; DATA XREF: .rodata:long_optionso
aSuffix		db 'suffix',0           ; DATA XREF: .rodata:long_optionso
aTargetDirector	db 'target-directory',0 ; DATA XREF: .rodata:long_optionso
aUpdate		db 'update',0           ; DATA XREF: .rodata:long_optionso
aVerbose	db 'verbose',0          ; DATA XREF: .rodata:long_optionso
aHelp		db 'help',0             ; DATA XREF: .rodata:long_optionso
aVersion	db 'version',0          ; DATA XREF: .rodata:long_optionso
		align 20h
; const	option long_options[13]
long_options	option <offset aBackup,	2, 0, 62h> ; DATA XREF:	main+313o
		option <offset aForce, 0, 0, 66h> ; "backup"
		option <offset aInteractive, 0,	0, 69h>
		option <offset aNoClobber, 0, 0, 6Eh>
		option <offset aNoTargetDirect,	0, 0, 54h>
		option <offset aStripTrailin_0,	0, 0, 80h>
		option <offset aSuffix,	1, 0, 53h>
		option <offset aTargetDirector,	1, 0, 74h>
		option <offset aUpdate,	0, 0, 75h>
		option <offset aVerbose, 0, 0, 76h>
		option <offset aHelp, 0, 0, 0FFFFFF7Eh>
		option <offset aVersion, 0, 0, 0FFFFFF7Dh>
		option	<0>
dword_8001090	dd 2Fh			; DATA XREF: rm_option_init+5Do
; char aFailedToGetAtt[]
aFailedToGetAtt	db 'failed to get attributes of %s',0 ; DATA XREF: rm_option_init+6Fo
; char aAccessingS[]
aAccessingS	db 'accessing %s',0     ; DATA XREF: target_directory_operand+89o
					; main+221o
; char file[]
file		db 'mv.c',0             ; DATA XREF: do_move+D8o main+489o
; char assertion[]
assertion	db 'VALID_STATUS (status)',0 ; DATA XREF: do_move+DDo
		align 4
; char aTrySHelpForMor[]
aTrySHelpForMor	db 'Try `%s --help',27h,' for more information.',0Ah,0
					; DATA XREF: usage+18o
		align 4
; char aUsageSOption__[]
aUsageSOption__	db 'Usage: %s [OPTION]... [-T] SOURCE DEST',0Ah ; DATA XREF: usage+54o
		db '  or:  %s [OPTION]... SOURCE... DIRECTORY',0Ah
		db '  or:  %s [OPTION]... -t DIRECTORY SOURCE...',0Ah,0
		align 4
; char aRenameSourceTo[]
aRenameSourceTo	db 'Rename SOURCE to DEST, or move SOURCE(s) to DIRECTORY.',0Ah
					; DATA XREF: usage+76o
		db 0Ah,0
		align 10h
; char aMandatoryArgum[]
aMandatoryArgum	db 'Mandatory arguments to long options are mandatory for short optio'
					; DATA XREF: usage+99o
		db 'ns too.',0Ah,0
		align 4
; char aBackupControlM[]
aBackupControlM	db '      --backup[=CONTROL]       make a backup of each existing des'
					; DATA XREF: usage+BCo
		db 'tination file',0Ah
		db '  -b                           like --backup but does not accept '
		db 'an argument',0Ah
		db '  -f, --force                  do not prompt before overwriting',0Ah
		db '  -i, --interactive            prompt before overwrite',0Ah
		db '  -n, --no-clobber             do not overwrite an existing file',0Ah
		db 'If you specify more than one of -i, -f, -n, only the final one ta'
		db 'kes effect.',0Ah,0
		align 10h
; char aStripTrailingS[]
aStripTrailingS	db '      --strip-trailing-slashes  remove any trailing slashes from '
					; DATA XREF: usage+DFo
		db 'each SOURCE',0Ah
		db '                                 argument',0Ah
		db '  -S, --suffix=SUFFIX          override the usual backup suffix',0Ah
		db 0
; char aTTargetDirecto[]
aTTargetDirecto	db '  -t, --target-directory=DIRECTORY  move all SOURCE arguments int'
					; DATA XREF: usage+102o
		db 'o DIRECTORY',0Ah
		db '  -T, --no-target-directory    treat DEST as a normal file',0Ah
		db '  -u, --update                 move only when the SOURCE file is '
		db 'newer',0Ah
		db '                                 than the destination file or whe'
		db 'n the',0Ah
		db '                                 destination file is missing',0Ah
		db '  -v, --verbose                explain what is being done',0Ah,0
		align 4
; char aHelpDisplayThi[]
aHelpDisplayThi	db '      --help     display this help and exit',0Ah,0
					; DATA XREF: usage+125o
		align 4
; char aVersionOutputV[]
aVersionOutputV	db '      --version  output version information and exit',0Ah,0
					; DATA XREF: usage+148o
		align 10h
; char aTheBackupSuffi[]
aTheBackupSuffi	db 0Ah			; DATA XREF: usage+16Bo
		db 'The backup suffix is `~',27h,', unless set with --suffix or SIMPLE_B'
		db 'ACKUP_SUFFIX.',0Ah
		db 'The version control method may be selected via the --backup optio'
		db 'n or through',0Ah
		db 'the VERSION_CONTROL environment variable.  Here are the values:',0Ah
		db 0Ah,0
		align 10h
; char aNoneOffNeverMa[]
aNoneOffNeverMa	db '  none, off       never make backups (even if --backup is given)',0Ah
					; DATA XREF: usage+18Eo
		db '  numbered, t     make numbered backups',0Ah
		db '  existing, nil   numbered if numbered backups exist, simple othe'
		db 'rwise',0Ah
		db '  simple, never   always make simple backups',0Ah,0
; char locale
locale		db 0			; DATA XREF: main+66o
; char dirname[]
dirname		db '/usr/local/share/locale',0 ; DATA XREF: main+78o
; char name[]
name		db 'SIMPLE_BACKUP_SUFFIX',0 ; DATA XREF: main+C4o
; char aMultipleTarget[]
aMultipleTarget	db 'multiple target directories specified',0 ; DATA XREF: main+1D0o
; char aTargetSIsNotAD[]
aTargetSIsNotAD	db 'target %s is not a directory',0 ; DATA XREF: main+269o
					; main+520o
aJimMeyering	db 'Jim Meyering',0     ; DATA XREF: main+2D7o
aDavidMackenzie	db 'David MacKenzie',0  ; DATA XREF: main+2DCo
aMikeParker	db 'Mike Parker',0      ; DATA XREF: main+2E1o
aMv		db 'mv',0               ; DATA XREF: main+2ECo
; char shortopts[]
shortopts	db 'bfint:uvS:T',0      ; DATA XREF: main+318o
; char aMissingFileOpe[]
aMissingFileOpe	db 'missing file operand',0 ; DATA XREF: main+38Co
; char aMissingDestina[]
aMissingDestina	db 'missing destination file operand after %s',0 ; DATA XREF: main+3C4o
		align 4
; char aCannotCombineT[]
aCannotCombineT	db 'cannot combine --target-directory (-t) and --no-target-directory '
					; DATA XREF: main+3FEo
		db '(-T)',0
; char aExtraOperandS[]
aExtraOperandS	db 'extra operand %s',0 ; DATA XREF: main+444o
; char a2N_files[]
a2N_files	db '2 <= n_files',0     ; DATA XREF: main+48Eo
; char aOptionsBackupA[]
aOptionsBackupA	db 'options --backup and --no-clobber are mutually exclusive',0
					; DATA XREF: main+552o
; char aBackupType[]
aBackupType	db 'backup type',0      ; DATA XREF: main+5A4o
		align 4
; Function-local static	variable
; const	char _PRETTY_FUNCTION___5400[8]
__PRETTY_FUNCTION___5400 db 'do_move',0 ; DATA XREF: do_move+CEo
; Function-local static	variable
; const	char _PRETTY_FUNCTION___5445[5]
__PRETTY_FUNCTION___5445 db 'main',0    ; DATA XREF: main+47Fo
_rodata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_eh_frame	segment	dword public 'CONST' use32
		assume cs:_eh_frame
		;org 80019C4h
		dd 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 20h, 1Ch
		dd offset loc_8000DAB-800278Fh
		dd 11Ch, 80E4100h, 0D420285h, 3834405h,	0C5011403h, 4040CC3h
		dd 1Ch,	40h
		dd offset loc_8000DAB-8002697h
		dd 0Ah,	80E4100h, 0D420285h, 0CC54605h,	404h, 24h, 60h
		dd offset loc_8000DAB-80026ADh
		dd 9Ah,	80E4100h, 0D420285h, 3864205h, 92020483h, 41C641C3h
		dd 4040CC5h, 1Ch, 88h
		dd offset loc_8000DAB-800263Bh
		dd 116h, 80E4100h, 0D420285h, 1120305h,	4040CC5h, 20h
		dd 0A8h
		dd offset loc_8000DAB-8002545h
		dd 0BFh, 80E4100h, 0D420285h, 3834705h,	0C3C5B402h, 4040Ch
		dd 1Ch,	0CCh
		dd offset loc_8000DAB-80024AAh
		dd 108h, 80E4100h, 0D420285h, 1040305h,	4040CC5h, 1Ch
		dd 0ECh
		dd offset loc_8000DAB-80023C2h
		dd 0A4h, 80E4100h, 0D420285h, 0C5A00205h, 4040Ch, 1Ch
		dd 10Ch
		dd offset loc_8000DAB-800233Eh
		dd 1B8h, 80E4100h, 0D420285h, 3874605h,	5830486h, 2Ch
		dd 12Ch
		dd offset loc_8000DAB-80021A6h
		dd 6B7h, 10C4400h, 5104700h, 46007502h,	7075030Fh, 2071006h
		dd 6107C75h, 10787502h,	74750203h
_eh_frame	ends

; ===========================================================================

; Segment type:	Externs
; extern
		extrn program_name:dword ; DATA	XREF: emit_ancillary_info+7r
					; emit_ancillary_info+B6r ...
		extrn last_component:near ; CODE XREF: emit_ancillary_info+10p
					; emit_ancillary_info+BFp ...
; char *gettext(const char *msgid)
		extrn gettext:near	; CODE XREF: emit_ancillary_info+22p
					; emit_ancillary_info+44p ...
; int printf(const char	*format, ...)
		extrn printf:near	; CODE XREF: emit_ancillary_info+34p
					; emit_ancillary_info+5Ap ...
; struct _IO_FILE *stdout
		extrn stdout:dword	; DATA XREF: emit_ancillary_info+62r
					; usage+6Dr ...
		extrn fputs_unlocked:near ; CODE XREF: emit_ancillary_info+7Dp
					; usage+88p ...
; char *setlocale(int category,	const char *locale)
		extrn setlocale:near	; CODE XREF: emit_ancillary_info+8Cp
					; main+6Dp
; int strncmp(const char *s1, const char *s2, size_t n)
		extrn strncmp:near	; CODE XREF: emit_ancillary_info+AAp
		extrn get_root_dev_ino:near ; CODE XREF: rm_option_init+40p
		extrn quote:near	; CODE XREF: rm_option_init+62p
					; target_directory_operand+7Cp	...
; int *_errno_location(void)
		extrn __errno_location:near ; CODE XREF: rm_option_init+7Ep
					; target_directory_operand+31p	...
; void error(int status, int errnum, const char	*format, ...)
		extrn error:near	; CODE XREF: rm_option_init+8Ap
					; target_directory_operand+9Dp	...
		extrn cp_options_default:near ;	CODE XREF: cp_option_init+10p
; int isatty(int fd)
		extrn isatty:near	; CODE XREF: cp_option_init+D7p
		extrn stat64:near	; CODE XREF: target_directory_operand+25p
					; main+1FFp
		extrn __stack_chk_fail:near ; CODE XREF: target_directory_operand+B5p
					; do_move+101p
		extrn copy:near		; CODE XREF: do_move+39p
		extrn rm:near		; CODE XREF: do_move+B1p
; void _assert_fail(const char *assertion, const char *file, unsigned int line,	const char *function)
		extrn __assert_fail:near ; CODE	XREF: do_move+E2p main+493p
		extrn strip_trailing_slashes:near ; CODE XREF: movefile+1Dp
					; movefile+58p
		extrn file_name_concat:near ; CODE XREF: movefile+47p
; void free(void *ptr)
		extrn free:near		; CODE XREF: movefile+7Dp
; struct _IO_FILE *stderr
		extrn stderr:dword	; DATA XREF: usage+27r
; int fprintf(FILE *stream, const char *format,	...)
		extrn fprintf:near	; CODE XREF: usage+32p
; void exit(int	status)
		extrn exit:near		; CODE XREF: usage+1B3p main+2FFp ...
		extrn set_program_name:near ; CODE XREF: main+5Bp
; char *bindtextdomain(const char *domainname, const char *dirname)
		extrn bindtextdomain:near ; CODE XREF: main+82p
; char *textdomain(const char *domainname)
		extrn textdomain:near	; CODE XREF: main+92p
; void close_stdin(void)
		extrn close_stdin	; DATA XREF: main+9Do
; int atexit(void (*func)(void))
		extrn atexit:near	; CODE XREF: main+A2p
; char *getenv(const char *name)
		extrn getenv:near	; CODE XREF: main+C9p
; char *optarg
		extrn optarg:dword	; DATA XREF: main+16Er	main+17Br ...
		extrn Version:dword	; DATA XREF: main:loc_80009C3r
		extrn version_etc:near	; CODE XREF: main+2F2p
; int getopt_long(int argc, char *const	*argv, const char *shortopts, const struct option *longopts, int *longind)
		extrn getopt_long:near	; CODE XREF: main+325p
; int optind
		extrn optind:dword	; DATA XREF: main+340r	main+351r
; char *xstrdup(const char *)
		extrn xstrdup:near	; CODE XREF: main+58Bp
		extrn simple_backup_suffix:dword ; DATA	XREF: main+593w
		extrn xget_version:near	; CODE XREF: main+5BBp
		extrn hash_init:near	; CODE XREF: main+5D0p
		extrn dest_info_init:near ; CODE XREF: main+5F5p


		end
