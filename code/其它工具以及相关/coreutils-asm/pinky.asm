;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B611-7234-BB			    |
; |		Doskey Lee, Kingsoft Internet Security Software		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	F6075098AE01A801DDA3DB40DF7653AC
; Input	CRC32 :	F2DE2AAF

; File Name   :	D:\coreutils-o\pinky.o
; Format      :	ELF for	Intel 386 (Relocatable)
;
; Source File :	'pinky.c'

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	byte public 'CODE' use32
		assume cs:_text
		;org 8000000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; unsigned __int8 __cdecl to_uchar(char	ch_0)
to_uchar	proc near		; CODE XREF: create_fullname+B9p
					; create_fullname+F3p

ch_0		= byte ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 4
		mov	eax, [ebp+arg_0]
		mov	[ebp+ch_0], al
		movzx	eax, [ebp+ch_0]
		leave
		retn
to_uchar	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void emit_ancillary_info()
emit_ancillary_info proc near		; CODE XREF: usage+10Dp

lc_messages	= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset msgid	; "\nReport %s bugs to %s\n"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset aBugCoreutils@g ; "bug-coreutils@gnu.org"
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	offset aSHomePageHttpW ; "%s home page:	<http://www.gnu.org/softw"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset domainname ; "coreutils"
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aGeneralHelpUsi ; "General help using GNU software: <http:"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		sub	esp, 8
		push	0		; locale
		push	5		; category
		call	setlocale
		add	esp, 10h
		mov	[ebp+lc_messages], eax
		cmp	[ebp+lc_messages], 0
		jz	short loc_80000F8
		sub	esp, 4
		push	3		; n
		push	offset s2	; "en_"
		push	[ebp+lc_messages] ; s1
		call	strncmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_80000F8
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aReportSTransla ; "Report %s translation	bugs to	<http://t"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h

loc_80000F8:				; CODE XREF: emit_ancillary_info+9Bj
					; emit_ancillary_info+B4j
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aForCompleteDoc ; "For complete documentation, run: info	c"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		nop
		mov	ebx, [ebp+var_4]
		leave
		retn
emit_ancillary_info endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; char *__cdecl	timetostr(time_t t, char *buf)
timetostr	proc near		; CODE XREF: time_string+66p

t		= dword	ptr  8
buf		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	eax, [ebp+t]
		cdq
		sub	esp, 4
		push	[ebp+buf]
		push	edx
		push	eax
		call	imaxtostr
		add	esp, 10h
		leave
		retn
timetostr	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; size_t __cdecl count_ampersands(const	char *str)
count_ampersands proc near		; CODE XREF: create_fullname+21p

count		= dword	ptr -4
str		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		mov	[ebp+count], 0

loc_8000157:				; CODE XREF: count_ampersands+29j
		mov	eax, [ebp+str]
		movzx	eax, byte ptr [eax]
		cmp	al, 26h
		jnz	short loc_8000165
		add	[ebp+count], 1

loc_8000165:				; CODE XREF: count_ampersands+15j
		mov	eax, [ebp+str]
		lea	edx, [eax+1]
		mov	[ebp+str], edx
		movzx	eax, byte ptr [eax]
		test	al, al
		jnz	short loc_8000157
		mov	eax, [ebp+count]
		leave
		retn
count_ampersands endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; char *__cdecl	create_fullname(const char *gecos_name,	const char *user_name)
create_fullname	proc near		; CODE XREF: print_entry+1C0p
					; print_long_entry+F7p

rsize		= dword	ptr -24h
r		= dword	ptr -20h
uname		= dword	ptr -1Ch
ampersands	= dword	ptr -18h
ulen		= dword	ptr -14h
product		= dword	ptr -10h
result		= dword	ptr -0Ch
var_4		= dword	ptr -4
gecos_name	= dword	ptr  8
user_name	= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 24h
		sub	esp, 0Ch
		push	[ebp+gecos_name] ; s
		call	strlen
		add	esp, 10h
		add	eax, 1
		mov	[ebp+rsize], eax
		sub	esp, 0Ch
		push	[ebp+gecos_name] ; str
		call	count_ampersands
		add	esp, 10h
		mov	[ebp+ampersands], eax
		cmp	[ebp+ampersands], 0
		jz	short loc_80001EF
		sub	esp, 0Ch
		push	[ebp+user_name]	; s
		call	strlen
		add	esp, 10h
		mov	[ebp+ulen], eax
		mov	eax, [ebp+ampersands]
		imul	eax, [ebp+ulen]
		mov	[ebp+product], eax
		mov	eax, [ebp+product]
		sub	eax, [ebp+ampersands]
		add	[ebp+rsize], eax
		mov	eax, 0FFFFFFFFh
		mov	edx, 0
		div	[ebp+ampersands]
		cmp	eax, [ebp+ulen]
		jb	short loc_80001EA
		mov	eax, [ebp+rsize]
		cmp	eax, [ebp+product]
		jnb	short loc_80001EF

loc_80001EA:				; CODE XREF: create_fullname+66j
		call	xalloc_die

loc_80001EF:				; CODE XREF: create_fullname+30j
					; create_fullname+6Ej
		sub	esp, 0Ch
		push	[ebp+rsize]	; size_t
		call	xmalloc
		add	esp, 10h
		mov	[ebp+result], eax
		mov	eax, [ebp+result]
		mov	[ebp+r], eax
		jmp	loc_80002C0
; ---------------------------------------------------------------------------

loc_800020B:				; CODE XREF: create_fullname+14Ej
		mov	eax, [ebp+gecos_name]
		movzx	eax, byte ptr [eax]
		cmp	al, 26h
		jnz	loc_80002AB
		mov	eax, [ebp+user_name]
		mov	[ebp+uname], eax
		call	__ctype_b_loc
		mov	ebx, [eax]
		mov	eax, [ebp+uname]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; ch_0
		call	to_uchar
		add	esp, 10h
		movzx	eax, al
		add	eax, eax
		add	eax, ebx
		movzx	eax, word ptr [eax]
		movzx	eax, ax
		and	eax, 200h
		test	eax, eax
		jz	short loc_800029F
		mov	ebx, [ebp+r]
		lea	eax, [ebx+1]
		mov	[ebp+r], eax
		mov	eax, [ebp+uname]
		lea	edx, [eax+1]
		mov	[ebp+uname], edx
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; ch_0
		call	to_uchar
		add	esp, 10h
		movzx	eax, al
		sub	esp, 0Ch
		push	eax		; c
		call	toupper
		add	esp, 10h
		mov	[ebx], al
		jmp	short loc_800029F
; ---------------------------------------------------------------------------

loc_8000288:				; CODE XREF: create_fullname+12Dj
		mov	eax, [ebp+r]
		lea	edx, [eax+1]
		mov	[ebp+r], edx
		mov	edx, [ebp+uname]
		lea	ecx, [edx+1]
		mov	[ebp+uname], ecx
		movzx	edx, byte ptr [edx]
		mov	[eax], dl

loc_800029F:				; CODE XREF: create_fullname+D5j
					; create_fullname+10Cj
		mov	eax, [ebp+uname]
		movzx	eax, byte ptr [eax]
		test	al, al
		jnz	short loc_8000288
		jmp	short loc_80002BC
; ---------------------------------------------------------------------------

loc_80002AB:				; CODE XREF: create_fullname+99j
		mov	eax, [ebp+r]
		lea	edx, [eax+1]
		mov	[ebp+r], edx
		mov	edx, [ebp+gecos_name]
		movzx	edx, byte ptr [edx]
		mov	[eax], dl

loc_80002BC:				; CODE XREF: create_fullname+12Fj
		add	[ebp+gecos_name], 1

loc_80002C0:				; CODE XREF: create_fullname+8Cj
		mov	eax, [ebp+gecos_name]
		movzx	eax, byte ptr [eax]
		test	al, al
		jnz	loc_800020B
		mov	eax, [ebp+r]
		mov	byte ptr [eax],	0
		mov	eax, [ebp+result]
		mov	ebx, [ebp+var_4]
		leave
		retn
create_fullname	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; const	char *__cdecl idle_string(time_t when)
idle_string	proc near		; CODE XREF: print_entry+233p

seconds_idle	= dword	ptr -18h
hours		= dword	ptr -14h
minutes		= dword	ptr -10h
days		= dword	ptr -0Ch
var_4		= dword	ptr -4
when		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, ds:now_5279
		test	eax, eax
		jnz	short loc_80002FC
		sub	esp, 0Ch
		push	offset now_5279	; timer
		call	time
		add	esp, 10h

loc_80002FC:				; CODE XREF: idle_string+Ej
		mov	eax, ds:now_5279
		sub	eax, [ebp+when]
		mov	[ebp+seconds_idle], eax
		cmp	[ebp+seconds_idle], 3Bh
		jg	short loc_8000317
		mov	eax, offset asc_80014D0	; "	"
		jmp	loc_80003DB
; ---------------------------------------------------------------------------

loc_8000317:				; CODE XREF: idle_string+2Fj
		cmp	[ebp+seconds_idle], 1517Fh
		jg	short loc_800039E
		mov	ecx, [ebp+seconds_idle]
		mov	edx, 91A2B3C5h
		mov	eax, ecx
		imul	edx
		lea	eax, [edx+ecx]
		sar	eax, 0Bh
		mov	edx, eax
		mov	eax, ecx
		sar	eax, 1Fh
		sub	edx, eax
		mov	eax, edx
		mov	[ebp+hours], eax
		mov	ebx, [ebp+seconds_idle]
		mov	edx, 91A2B3C5h
		mov	eax, ebx
		imul	edx
		lea	eax, [edx+ebx]
		sar	eax, 0Bh
		mov	edx, eax
		mov	eax, ebx
		sar	eax, 1Fh
		mov	ecx, edx
		sub	ecx, eax
		imul	eax, ecx, 0E10h
		sub	ebx, eax
		mov	ecx, ebx
		mov	edx, 88888889h
		mov	eax, ecx
		imul	edx
		lea	eax, [edx+ecx]
		sar	eax, 5
		mov	edx, eax
		mov	eax, ecx
		sar	eax, 1Fh
		sub	edx, eax
		mov	eax, edx
		mov	[ebp+minutes], eax
		push	[ebp+minutes]
		push	[ebp+hours]
		push	offset format	; "%02d:%02d"
		push	offset buf_5280	; s
		call	sprintf
		add	esp, 10h
		jmp	short loc_80003D6
; ---------------------------------------------------------------------------

loc_800039E:				; CODE XREF: idle_string+42j
		mov	ecx, [ebp+seconds_idle]
		mov	edx, 0C22E4507h
		mov	eax, ecx
		imul	edx
		lea	eax, [edx+ecx]
		sar	eax, 10h
		mov	edx, eax
		mov	eax, ecx
		sar	eax, 1Fh
		sub	edx, eax
		mov	eax, edx
		mov	[ebp+days], eax
		sub	esp, 4
		push	[ebp+days]
		push	offset aLud	; "%lud"
		push	offset buf_5280	; s
		call	sprintf
		add	esp, 10h

loc_80003D6:				; CODE XREF: idle_string+C0j
		mov	eax, offset buf_5280

loc_80003DB:				; CODE XREF: idle_string+36j
		mov	ebx, [ebp+var_4]
		leave
		retn
idle_string	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; const	char *__cdecl time_string(const	STRUCT_UTMP *utmp_ent)
time_string	proc near		; CODE XREF: print_entry+278p

utmp_ent	= dword	ptr -1Ch
t		= dword	ptr -14h
tmp		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, [ebp+arg_0]
		mov	[ebp+utmp_ent],	eax
		mov	eax, large gs:14h
		mov	[ebp+var_C], eax
		xor	eax, eax
		mov	eax, [ebp+utmp_ent]
		mov	eax, [eax+154h]
		mov	[ebp+t], eax
		sub	esp, 0Ch
		lea	eax, [ebp+t]
		push	eax		; timer
		call	localtime
		add	esp, 10h
		mov	[ebp+tmp], eax
		cmp	[ebp+tmp], 0
		jz	short loc_800043A
		mov	eax, ds:time_format
		push	[ebp+tmp]	; tp
		push	eax		; format
		push	21h		; maxsize
		push	offset buf_5288	; s
		call	strftime
		add	esp, 10h
		mov	eax, offset buf_5288
		jmp	short loc_800044E
; ---------------------------------------------------------------------------

loc_800043A:				; CODE XREF: time_string+39j
		mov	eax, [ebp+t]
		sub	esp, 8
		push	offset buf_5288	; buf
		push	eax		; t
		call	timetostr
		add	esp, 10h

loc_800044E:				; CODE XREF: time_string+58j
		mov	edx, [ebp+var_C]
		xor	edx, large gs:14h
		jz	short locret_800045F
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

locret_800045F:				; CODE XREF: time_string+78j
		leave
		retn
time_string	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl print_entry(const STRUCT_UTMP *utmp_ent)
print_entry	proc near		; CODE XREF: scan_entries+B0p
					; scan_entries+CEp

utmp_ent	= dword	ptr -1BCh
mesg		= byte ptr -1ADh
last_change	= dword	ptr -1ACh
host		= dword	ptr -1A8h
display		= dword	ptr -1A4h
pw		= dword	ptr -1A0h
comma		= dword	ptr -19Ch
result		= dword	ptr -198h
stats		= stat ptr -194h
line		= byte ptr -133h
ut_host		= byte ptr -10Dh
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 1C8h
		mov	eax, [ebp+arg_0]
		mov	[ebp+utmp_ent],	eax
		mov	eax, large gs:14h
		mov	[ebp+var_C], eax
		xor	eax, eax
		mov	eax, [ebp+utmp_ent]
		movzx	eax, byte ptr [eax+8]
		cmp	al, 2Fh
		jnz	short loc_80004B3
		mov	eax, [ebp+utmp_ent]
		add	eax, 8
		sub	esp, 4
		push	20h		; n
		push	eax		; src
		lea	eax, [ebp+line]
		push	eax		; dest
		call	strncpy
		add	esp, 10h
		mov	[ebp+line+20h],	0
		jmp	short loc_80004ED
; ---------------------------------------------------------------------------

loc_80004B3:				; CODE XREF: print_entry+29j
		lea	eax, [ebp+line]
		mov	dword ptr [eax], 7665642Fh
		mov	word ptr [eax+4], 2Fh
		mov	eax, [ebp+utmp_ent]
		lea	edx, [eax+8]
		lea	eax, [ebp+line]
		add	eax, 5
		sub	esp, 4
		push	20h		; n
		push	edx		; src
		push	eax		; dest
		call	strncpy
		add	esp, 10h
		mov	[ebp+line+25h],	0

loc_80004ED:				; CODE XREF: print_entry+50j
		sub	esp, 8
		lea	eax, [ebp+stats]
		push	eax
		lea	eax, [ebp+line]
		push	eax
		call	stat64
		add	esp, 10h
		test	eax, eax
		jnz	short loc_8000537
		mov	eax, [ebp+stats.st_mode]
		and	eax, 10h
		test	eax, eax
		jz	short loc_800051E
		mov	eax, 20h
		jmp	short loc_8000523
; ---------------------------------------------------------------------------

loc_800051E:				; CODE XREF: print_entry+B4j
		mov	eax, 2Ah

loc_8000523:				; CODE XREF: print_entry+BBj
		mov	[ebp+mesg], al
		mov	eax, [ebp+stats.st_atim.tv_sec]
		mov	[ebp+last_change], eax
		jmp	short loc_8000548
; ---------------------------------------------------------------------------

loc_8000537:				; CODE XREF: print_entry+A7j
		mov	[ebp+mesg], 3Fh
		mov	[ebp+last_change], 0

loc_8000548:				; CODE XREF: print_entry+D4j
		mov	eax, [ebp+utmp_ent]
		add	eax, 2Ch
		sub	esp, 4
		push	eax
		push	20h
		push	offset a8_S	; "%-8.*s"
		call	printf
		add	esp, 10h
		movzx	eax, include_fullname
		test	al, al
		jz	loc_8000656
		mov	eax, [ebp+utmp_ent]
		add	eax, 2Ch
		sub	esp, 4
		push	20h		; n
		push	eax		; src
		lea	eax, [ebp+ut_host]
		push	eax		; dest
		call	strncpy
		add	esp, 10h
		mov	[ebp+ut_host+20h], 0
		sub	esp, 0Ch
		lea	eax, [ebp+ut_host]
		push	eax		; name
		call	getpwnam
		add	esp, 10h
		mov	[ebp+pw], eax
		cmp	[ebp+pw], 0
		jnz	short loc_80005DC
		sub	esp, 0Ch
		push	offset a???	; "	   ???"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	eax
		push	offset a19s	; " %19s"
		call	printf
		add	esp, 10h
		jmp	short loc_8000656
; ---------------------------------------------------------------------------

loc_80005DC:				; CODE XREF: print_entry+156j
		mov	eax, [ebp+pw]
		mov	eax, [eax+10h]
		sub	esp, 8
		push	2Ch		; c
		push	eax		; s
		call	strchr
		add	esp, 10h
		mov	[ebp+comma], eax
		cmp	[ebp+comma], 0
		jz	short loc_800060B
		mov	eax, [ebp+comma]
		mov	byte ptr [eax],	0

loc_800060B:				; CODE XREF: print_entry+19Fj
		mov	eax, [ebp+pw]
		mov	edx, [eax]
		mov	eax, [ebp+pw]
		mov	eax, [eax+10h]
		sub	esp, 8
		push	edx		; user_name
		push	eax		; gecos_name
		call	create_fullname
		add	esp, 10h
		mov	[ebp+result], eax
		sub	esp, 8
		push	[ebp+result]
		push	offset a19_19s	; " %-19.19s"
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+result]	; ptr
		call	free
		add	esp, 10h

loc_8000656:				; CODE XREF: print_entry+10Cj
					; print_entry+179j
		mov	eax, [ebp+utmp_ent]
		lea	edx, [eax+8]
		movsx	eax, [ebp+mesg]
		push	edx
		push	20h
		push	eax
		push	offset aC8_S	; " %c%-8.*s"
		call	printf
		add	esp, 10h
		movzx	eax, include_idle
		test	al, al
		jz	short loc_80006D0
		cmp	[ebp+last_change], 0
		jz	short loc_80006AF
		sub	esp, 0Ch
		push	[ebp+last_change] ; when
		call	idle_string
		add	esp, 10h
		sub	esp, 8
		push	eax
		push	offset a6s	; " %-6s"
		call	printf
		add	esp, 10h
		jmp	short loc_80006D0
; ---------------------------------------------------------------------------

loc_80006AF:				; CODE XREF: print_entry+228j
		sub	esp, 0Ch
		push	offset a?????	; "?????"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	eax
		push	offset a6s	; " %-6s"
		call	printf
		add	esp, 10h

loc_80006D0:				; CODE XREF: print_entry+21Fj
					; print_entry+24Cj
		sub	esp, 0Ch
		push	[ebp+utmp_ent]	; utmp_ent
		call	time_string
		add	esp, 10h
		sub	esp, 8
		push	eax
		push	offset aS	; " %s"
		call	printf
		add	esp, 10h
		movzx	eax, include_where
		test	al, al
		jz	loc_8000815
		mov	eax, [ebp+utmp_ent]
		movzx	eax, byte ptr [eax+4Ch]
		test	al, al
		jz	loc_8000815
		mov	[ebp+host], 0
		mov	[ebp+display], 0
		mov	eax, [ebp+utmp_ent]
		add	eax, 4Ch
		sub	esp, 4
		push	100h		; n
		push	eax		; src
		lea	eax, [ebp+ut_host]
		push	eax		; dest
		call	strncpy
		add	esp, 10h
		mov	[ebp+ut_host+100h], 0
		sub	esp, 8
		push	3Ah		; c
		lea	eax, [ebp+ut_host]
		push	eax		; s
		call	strchr
		add	esp, 10h
		mov	[ebp+display], eax
		cmp	[ebp+display], 0
		jz	short loc_8000781
		mov	eax, [ebp+display]
		lea	edx, [eax+1]
		mov	[ebp+display], edx
		mov	byte ptr [eax],	0

loc_8000781:				; CODE XREF: print_entry+30Cj
		movzx	eax, [ebp+ut_host]
		test	al, al
		jz	short loc_80007A4
		sub	esp, 0Ch
		lea	eax, [ebp+ut_host]
		push	eax
		call	canon_host
		add	esp, 10h
		mov	[ebp+host], eax

loc_80007A4:				; CODE XREF: print_entry+329j
		cmp	[ebp+host], 0
		jnz	short loc_80007B9
		lea	eax, [ebp+ut_host]
		mov	[ebp+host], eax

loc_80007B9:				; CODE XREF: print_entry+34Aj
		cmp	[ebp+display], 0
		jz	short loc_80007E0
		sub	esp, 4
		push	[ebp+display]
		push	[ebp+host]
		push	offset aSS	; " %s:%s"
		call	printf
		add	esp, 10h
		jmp	short loc_80007F6
; ---------------------------------------------------------------------------

loc_80007E0:				; CODE XREF: print_entry+35Fj
		sub	esp, 8
		push	[ebp+host]
		push	offset aS	; " %s"
		call	printf
		add	esp, 10h

loc_80007F6:				; CODE XREF: print_entry+37Dj
		lea	eax, [ebp+ut_host]
		cmp	[ebp+host], eax
		jz	short loc_8000815
		sub	esp, 0Ch
		push	[ebp+host]	; ptr
		call	free
		add	esp, 10h

loc_8000815:				; CODE XREF: print_entry+29Aj
					; print_entry+2ACj ...
		sub	esp, 0Ch
		push	0Ah		; c
		call	putchar_unlocked
		add	esp, 10h
		nop
		mov	eax, [ebp+var_C]
		xor	eax, large gs:14h
		jz	short locret_8000834
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

locret_8000834:				; CODE XREF: print_entry+3CCj
		leave
		retn
print_entry	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl print_long_entry(const char *name)
print_long_entry proc near		; CODE XREF: long_pinky+24p

name		= dword	ptr -43Ch
pw		= dword	ptr -438h
comma		= dword	ptr -434h
result		= dword	ptr -430h
baseproject	= dword	ptr -42Ch
project		= dword	ptr -428h
stream		= dword	ptr -424h
bytes		= dword	ptr -420h
baseplan	= dword	ptr -41Ch
plan		= dword	ptr -418h
stream_0	= dword	ptr -414h
bytes_0		= dword	ptr -410h
buf		= byte ptr -40Ch
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 444h
		mov	eax, [ebp+arg_0]
		mov	[ebp+name], eax
		mov	eax, large gs:14h
		mov	[ebp+var_C], eax
		xor	eax, eax
		sub	esp, 0Ch
		push	[ebp+name]	; name
		call	getpwnam
		add	esp, 10h
		mov	[ebp+pw], eax
		sub	esp, 0Ch
		push	offset aLoginName ; "Login name: "
		call	gettext
		add	esp, 10h
		sub	esp, 0Ch
		push	eax		; format
		call	printf
		add	esp, 10h
		sub	esp, 8
		push	[ebp+name]
		push	offset a28s	; "%-28s"
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	offset aInRealLife ; "In real life: "
		call	gettext
		add	esp, 10h
		sub	esp, 0Ch
		push	eax		; format
		call	printf
		add	esp, 10h
		cmp	[ebp+pw], 0
		jnz	short loc_80008E8
		sub	esp, 0Ch
		push	offset a???_0	; "???\n"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	eax
		push	offset aS	; " %s"
		call	printf
		add	esp, 10h
		jmp	loc_8000C64
; ---------------------------------------------------------------------------

loc_80008E8:				; CODE XREF: print_long_entry+8Aj
		mov	eax, [ebp+pw]
		mov	eax, [eax+10h]
		sub	esp, 8
		push	2Ch		; c
		push	eax		; s
		call	strchr
		add	esp, 10h
		mov	[ebp+comma], eax
		cmp	[ebp+comma], 0
		jz	short loc_8000917
		mov	eax, [ebp+comma]
		mov	byte ptr [eax],	0

loc_8000917:				; CODE XREF: print_long_entry+D6j
		mov	eax, [ebp+pw]
		mov	edx, [eax]
		mov	eax, [ebp+pw]
		mov	eax, [eax+10h]
		sub	esp, 8
		push	edx		; user_name
		push	eax		; gecos_name
		call	create_fullname
		add	esp, 10h
		mov	[ebp+result], eax
		sub	esp, 8
		push	[ebp+result]
		push	offset aS	; " %s"
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+result]	; ptr
		call	free
		add	esp, 10h
		sub	esp, 0Ch
		push	0Ah		; c
		call	putchar_unlocked
		add	esp, 10h
		movzx	eax, include_home_and_shell
		test	al, al
		jz	short loc_80009F3
		sub	esp, 0Ch
		push	offset aDirectory ; "Directory:	"
		call	gettext
		add	esp, 10h
		sub	esp, 0Ch
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	eax, [ebp+pw]
		mov	eax, [eax+14h]
		sub	esp, 8
		push	eax
		push	offset a29s	; "%-29s"
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	offset aShell	; "Shell: "
		call	gettext
		add	esp, 10h
		sub	esp, 0Ch
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	eax, [ebp+pw]
		mov	eax, [eax+18h]
		sub	esp, 8
		push	eax
		push	offset aS	; " %s"
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	0Ah		; c
		call	putchar_unlocked
		add	esp, 10h

loc_80009F3:				; CODE XREF: print_long_entry+142j
		movzx	eax, include_project
		test	al, al
		jz	loc_8000B25
		mov	[ebp+baseproject], offset a_project ; "/.project"
		mov	eax, [ebp+pw]
		mov	eax, [eax+14h]
		sub	esp, 0Ch
		push	eax		; s
		call	strlen
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	[ebp+baseproject] ; s
		call	strlen
		add	esp, 10h
		add	eax, ebx
		add	eax, 1
		sub	esp, 0Ch
		push	eax		; size_t
		call	xmalloc
		add	esp, 10h
		mov	[ebp+project], eax
		mov	eax, [ebp+pw]
		mov	eax, [eax+14h]
		sub	esp, 8
		push	eax
		push	[ebp+project]
		call	stpcpy
		add	esp, 10h
		sub	esp, 8
		push	[ebp+baseproject] ; src
		push	eax		; dest
		call	strcpy
		add	esp, 10h
		sub	esp, 8
		push	offset aR	; "r"
		push	[ebp+project]
		call	fopen64
		add	esp, 10h
		mov	[ebp+stream], eax
		cmp	[ebp+stream], 0
		jz	short loc_8000B14
		sub	esp, 0Ch
		push	offset aProject	; "Project: "
		call	gettext
		add	esp, 10h
		sub	esp, 0Ch
		push	eax		; format
		call	printf
		add	esp, 10h
		jmp	short loc_8000AD8
; ---------------------------------------------------------------------------

loc_8000ABB:				; CODE XREF: print_long_entry+2CBj
		mov	eax, ds:stdout
		push	eax		; stream
		push	[ebp+bytes]	; n
		push	1		; size
		lea	eax, [ebp+buf]
		push	eax		; ptr
		call	fwrite_unlocked
		add	esp, 10h

loc_8000AD8:				; CODE XREF: print_long_entry+283j
		push	[ebp+stream]	; stream
		push	400h		; n
		push	1		; size
		lea	eax, [ebp+buf]
		push	eax		; ptr
		call	fread_unlocked
		add	esp, 10h
		mov	[ebp+bytes], eax
		cmp	[ebp+bytes], 0
		jnz	short loc_8000ABB
		sub	esp, 0Ch
		push	[ebp+stream]	; stream
		call	fclose
		add	esp, 10h

loc_8000B14:				; CODE XREF: print_long_entry+265j
		sub	esp, 0Ch
		push	[ebp+project]	; ptr
		call	free
		add	esp, 10h

loc_8000B25:				; CODE XREF: print_long_entry+1C6j
		movzx	eax, include_plan
		test	al, al
		jz	loc_8000C57
		mov	[ebp+baseplan],	offset a_plan ;	"/.plan"
		mov	eax, [ebp+pw]
		mov	eax, [eax+14h]
		sub	esp, 0Ch
		push	eax		; s
		call	strlen
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	[ebp+baseplan]	; s
		call	strlen
		add	esp, 10h
		add	eax, ebx
		add	eax, 1
		sub	esp, 0Ch
		push	eax		; size_t
		call	xmalloc
		add	esp, 10h
		mov	[ebp+plan], eax
		mov	eax, [ebp+pw]
		mov	eax, [eax+14h]
		sub	esp, 8
		push	eax
		push	[ebp+plan]
		call	stpcpy
		add	esp, 10h
		sub	esp, 8
		push	[ebp+baseplan]	; src
		push	eax		; dest
		call	strcpy
		add	esp, 10h
		sub	esp, 8
		push	offset aR	; "r"
		push	[ebp+plan]
		call	fopen64
		add	esp, 10h
		mov	[ebp+stream_0],	eax
		cmp	[ebp+stream_0],	0
		jz	short loc_8000C46
		sub	esp, 0Ch
		push	offset aPlan	; "Plan:\n"
		call	gettext
		add	esp, 10h
		sub	esp, 0Ch
		push	eax		; format
		call	printf
		add	esp, 10h
		jmp	short loc_8000C0A
; ---------------------------------------------------------------------------

loc_8000BED:				; CODE XREF: print_long_entry+3FDj
		mov	eax, ds:stdout
		push	eax		; stream
		push	[ebp+bytes_0]	; n
		push	1		; size
		lea	eax, [ebp+buf]
		push	eax		; ptr
		call	fwrite_unlocked
		add	esp, 10h

loc_8000C0A:				; CODE XREF: print_long_entry+3B5j
		push	[ebp+stream_0]	; stream
		push	400h		; n
		push	1		; size
		lea	eax, [ebp+buf]
		push	eax		; ptr
		call	fread_unlocked
		add	esp, 10h
		mov	[ebp+bytes_0], eax
		cmp	[ebp+bytes_0], 0
		jnz	short loc_8000BED
		sub	esp, 0Ch
		push	[ebp+stream_0]	; stream
		call	fclose
		add	esp, 10h

loc_8000C46:				; CODE XREF: print_long_entry+397j
		sub	esp, 0Ch
		push	[ebp+plan]	; ptr
		call	free
		add	esp, 10h

loc_8000C57:				; CODE XREF: print_long_entry+2F8j
		sub	esp, 0Ch
		push	0Ah		; c
		call	putchar_unlocked
		add	esp, 10h

loc_8000C64:				; CODE XREF: print_long_entry+ADj
		mov	eax, [ebp+var_C]
		xor	eax, large gs:14h
		jz	short loc_8000C75
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_8000C75:				; CODE XREF: print_long_entry+438j
		mov	ebx, [ebp+var_4]
		leave
		retn
print_long_entry endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void print_heading()
print_heading	proc near		; CODE XREF: scan_entries+50p
		push	ebp
		mov	ebp, esp
		sub	esp, 8
		sub	esp, 0Ch
		push	offset aLogin	; "Login"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	eax
		push	offset a8s	; "%-8s"
		call	printf
		add	esp, 10h
		movzx	eax, include_fullname
		test	al, al
		jz	short loc_8000CCD
		sub	esp, 0Ch
		push	offset aName	; "Name"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	eax
		push	offset a19s_0	; " %-19s"
		call	printf
		add	esp, 10h

loc_8000CCD:				; CODE XREF: print_heading+30j
		sub	esp, 0Ch
		push	offset aTty	; " TTY"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	eax
		push	offset a9s	; " %-9s"
		call	printf
		add	esp, 10h
		movzx	eax, include_idle
		test	al, al
		jz	short loc_8000D1A
		sub	esp, 0Ch
		push	offset aIdle	; "Idle"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	eax
		push	offset a6s	; " %-6s"
		call	printf
		add	esp, 10h

loc_8000D1A:				; CODE XREF: print_heading+7Dj
		sub	esp, 0Ch
		push	offset aWhen	; "When"
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, ds:time_format_width
		sub	esp, 4
		push	edx
		push	eax
		push	offset aS_0	; " %-*s"
		call	printf
		add	esp, 10h
		movzx	eax, include_where
		test	al, al
		jz	short loc_8000D6F
		sub	esp, 0Ch
		push	offset aWhere	; "Where"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	eax
		push	offset aS	; " %s"
		call	printf
		add	esp, 10h

loc_8000D6F:				; CODE XREF: print_heading+D2j
		sub	esp, 0Ch
		push	0Ah		; c
		call	putchar_unlocked
		add	esp, 10h
		nop
		leave
		retn
print_heading	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl scan_entries(size_t n, const STRUCT_UTMP	*utmp_buf, const int argc_names, char *const *argv_names)
scan_entries	proc near		; CODE XREF: short_pinky+5Ep

i		= dword	ptr -0Ch
n		= dword	ptr  8
utmp_buf	= dword	ptr  0Ch
argc_names	= dword	ptr  10h
argv_names	= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		sub	esp, 0Ch
		push	2
		call	hard_locale
		add	esp, 10h
		test	al, al
		jz	short loc_8000DAC
		mov	ds:time_format,	offset aYMDHM ;	"%Y-%m-%d %H:%M"
		mov	ds:time_format_width, 10h
		jmp	short loc_8000DC0
; ---------------------------------------------------------------------------

loc_8000DAC:				; CODE XREF: scan_entries+15j
		mov	ds:time_format,	offset aBEHM ; "%b %e %H:%M"
		mov	ds:time_format_width, 0Ch

loc_8000DC0:				; CODE XREF: scan_entries+2Bj
		movzx	eax, include_heading
		test	al, al
		jz	loc_8000E5C
		call	print_heading
		jmp	loc_8000E5C
; ---------------------------------------------------------------------------

loc_8000DD9:				; CODE XREF: scan_entries+E8j
		mov	eax, [ebp+utmp_buf]
		movzx	eax, byte ptr [eax+2Ch]
		test	al, al
		jz	short loc_8000E55
		mov	eax, [ebp+utmp_buf]
		movzx	eax, word ptr [eax]
		cmp	ax, 7
		jnz	short loc_8000E55
		cmp	[ebp+argc_names], 0
		jz	short loc_8000E47
		mov	[ebp+i], 0
		jmp	short loc_8000E3D
; ---------------------------------------------------------------------------

loc_8000DFF:				; CODE XREF: scan_entries+C4j
		mov	eax, [ebp+i]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv_names]
		add	eax, edx
		mov	eax, [eax]
		mov	edx, [ebp+utmp_buf]
		add	edx, 2Ch
		sub	esp, 4
		push	20h		; n
		push	eax		; s2
		push	edx		; s1
		call	strncmp
		add	esp, 10h
		test	eax, eax
		jnz	short loc_8000E39
		sub	esp, 0Ch
		push	[ebp+utmp_buf]	; utmp_ent
		call	print_entry
		add	esp, 10h
		jmp	short loc_8000E55
; ---------------------------------------------------------------------------

loc_8000E39:				; CODE XREF: scan_entries+A8j
		add	[ebp+i], 1

loc_8000E3D:				; CODE XREF: scan_entries+7Ej
		mov	eax, [ebp+i]
		cmp	eax, [ebp+argc_names]
		jl	short loc_8000DFF
		jmp	short loc_8000E55
; ---------------------------------------------------------------------------

loc_8000E47:				; CODE XREF: scan_entries+75j
		sub	esp, 0Ch
		push	[ebp+utmp_buf]	; utmp_ent
		call	print_entry
		add	esp, 10h

loc_8000E55:				; CODE XREF: scan_entries+63j
					; scan_entries+6Fj ...
		add	[ebp+utmp_buf],	180h

loc_8000E5C:				; CODE XREF: scan_entries+4Aj
					; scan_entries+55j
		mov	eax, [ebp+n]
		lea	edx, [eax-1]
		mov	[ebp+n], edx
		test	eax, eax
		jnz	loc_8000DD9
		nop
		leave
		retn
scan_entries	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl short_pinky(const char *filename, const int argc_names, char *const *argv_names)
short_pinky	proc near		; CODE XREF: main+246p

argv_names	= dword	ptr -20h
filename	= dword	ptr -1Ch
n_users		= dword	ptr -14h
utmp_buf	= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
argc_names	= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, [ebp+arg_0]
		mov	[ebp+filename],	eax
		mov	eax, [ebp+arg_8]
		mov	[ebp+argv_names], eax
		mov	eax, large gs:14h
		mov	[ebp+var_C], eax
		xor	eax, eax
		push	0
		lea	eax, [ebp+utmp_buf]
		push	eax
		lea	eax, [ebp+n_users]
		push	eax
		push	[ebp+filename]
		call	read_utmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_8000EC0
		call	__errno_location
		mov	eax, [eax]
		push	[ebp+filename]
		push	offset aS_1	; "%s"
		push	eax		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_8000EC0:				; CODE XREF: short_pinky+34j
		mov	edx, [ebp+utmp_buf]
		mov	eax, [ebp+n_users]
		push	[ebp+argv_names] ; argv_names
		push	[ebp+argc_names] ; argc_names
		push	edx		; utmp_buf
		push	eax		; n
		call	scan_entries
		add	esp, 10h
		nop
		mov	eax, [ebp+var_C]
		xor	eax, large gs:14h
		jz	short locret_8000EE8
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

locret_8000EE8:				; CODE XREF: short_pinky+71j
		leave
		retn
short_pinky	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl long_pinky(const	int argc_names,	char *const *argv_names)
long_pinky	proc near		; CODE XREF: main+268p

i		= dword	ptr -0Ch
argc_names	= dword	ptr  8
argv_names	= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+i], 0
		jmp	short loc_8000F1A
; ---------------------------------------------------------------------------

loc_8000EF9:				; CODE XREF: long_pinky+36j
		mov	eax, [ebp+i]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv_names]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax		; name
		call	print_long_entry
		add	esp, 10h
		add	[ebp+i], 1

loc_8000F1A:				; CODE XREF: long_pinky+Dj
		mov	eax, [ebp+i]
		cmp	eax, [ebp+argc_names]
		jl	short loc_8000EF9
		nop
		leave
		retn
long_pinky	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; void __cdecl usage(int status)
		public usage
usage		proc near		; CODE XREF: main+160p	main+1A4p ...

status		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 4
		cmp	[ebp+status], 0
		jz	short loc_8000F62
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, ds:stderr
		sub	esp, 4
		push	ebx
		push	edx		; format
		push	eax		; stream
		call	fprintf
		add	esp, 10h
		jmp	loc_8001037
; ---------------------------------------------------------------------------

loc_8000F62:				; CODE XREF: usage+Bj
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aUsageSOption__ ; "Usage: %s [OPTION]...	[USER]...\n"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aLProduceLongFo ; "\n  -l	      produce long format"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aFOmitTheLineOf ; "  -f		    omit the line of colu"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aHelpDisplayThi ; "	--help	   display this	help and "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aVersionOutputV ; "	--version  output version informa"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		sub	esp, 0Ch
		push	offset aALightweightFi ; "\nA lightweight `finger' program;  prin"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	offset filename	; "/var/run/utmp"
		push	eax		; format
		call	printf
		add	esp, 10h
		call	emit_ancillary_info

loc_8001037:				; CODE XREF: usage+38j
		sub	esp, 0Ch
		push	[ebp+status]	; status
		call	exit
usage		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public main
main		proc near

optc		= dword	ptr -10h
n_users		= dword	ptr -0Ch
argc		= dword	ptr  0Ch
argv		= dword	ptr  10h
envp		= dword	ptr  14h

		lea	ecx, [esp+4]
		and	esp, 0FFFFFFF0h
		push	dword ptr [ecx-4]
		push	ebp
		mov	ebp, esp
		push	ebx
		push	ecx
		sub	esp, 10h
		mov	ebx, ecx
		mov	eax, [ebx+4]
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	set_program_name
		add	esp, 10h
		sub	esp, 8
		push	offset locale	; locale
		push	6		; category
		call	setlocale
		add	esp, 10h
		sub	esp, 8
		push	offset dirname	; "/usr/local/share/locale"
		push	offset domainname ; "coreutils"
		call	bindtextdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset domainname ; "coreutils"
		call	textdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset close_stdout ; func
		call	atexit
		add	esp, 10h
		jmp	loc_80011EB
; ---------------------------------------------------------------------------

loc_80010B3:				; CODE XREF: main+1CCj
		mov	eax, [ebp+optc]
		cmp	eax, 69h
		jz	loc_8001158
		cmp	eax, 69h
		jg	short loc_8001100
		cmp	eax, 62h
		jz	loc_8001194
		cmp	eax, 62h
		jg	short loc_80010ED
		cmp	eax, 0FFFFFF7Dh
		jz	loc_80011A7
		cmp	eax, 0FFFFFF7Eh
		jz	loc_800119D
		jmp	loc_80011E1
; ---------------------------------------------------------------------------

loc_80010ED:				; CODE XREF: main+8Ej
		cmp	eax, 66h
		jz	short loc_8001140
		cmp	eax, 68h
		jz	loc_8001182
		jmp	loc_80011E1
; ---------------------------------------------------------------------------

loc_8001100:				; CODE XREF: main+80j
		cmp	eax, 71h
		jz	short loc_800116B
		cmp	eax, 71h
		jg	short loc_8001119
		cmp	eax, 6Ch
		jz	short loc_8001134
		cmp	eax, 70h
		jz	short loc_800118B
		jmp	loc_80011E1
; ---------------------------------------------------------------------------

loc_8001119:				; CODE XREF: main+C6j
		cmp	eax, 73h
		jz	short loc_8001128
		cmp	eax, 77h
		jz	short loc_800114C
		jmp	loc_80011E1
; ---------------------------------------------------------------------------

loc_8001128:				; CODE XREF: main+DAj
		mov	do_short_format, 1
		jmp	loc_80011EB
; ---------------------------------------------------------------------------

loc_8001134:				; CODE XREF: main+CBj
		mov	do_short_format, 0
		jmp	loc_80011EB
; ---------------------------------------------------------------------------

loc_8001140:				; CODE XREF: main+AEj
		mov	include_heading, 0
		jmp	loc_80011EB
; ---------------------------------------------------------------------------

loc_800114C:				; CODE XREF: main+DFj
		mov	include_fullname, 0
		jmp	loc_80011EB
; ---------------------------------------------------------------------------

loc_8001158:				; CODE XREF: main+77j
		mov	include_fullname, 0
		mov	include_where, 0
		jmp	loc_80011EB
; ---------------------------------------------------------------------------

loc_800116B:				; CODE XREF: main+C1j
		mov	include_fullname, 0
		mov	include_where, 0
		mov	include_idle, 0
		jmp	short loc_80011EB
; ---------------------------------------------------------------------------

loc_8001182:				; CODE XREF: main+B3j
		mov	include_project, 0
		jmp	short loc_80011EB
; ---------------------------------------------------------------------------

loc_800118B:				; CODE XREF: main+D0j
		mov	include_plan, 0
		jmp	short loc_80011EB
; ---------------------------------------------------------------------------

loc_8001194:				; CODE XREF: main+85j
		mov	include_home_and_shell,	0
		jmp	short loc_80011EB
; ---------------------------------------------------------------------------

loc_800119D:				; CODE XREF: main+A0j
		sub	esp, 0Ch
		push	0		; status
		call	usage
; ---------------------------------------------------------------------------

loc_80011A7:				; CODE XREF: main+95j
		mov	edx, ds:Version
		mov	eax, ds:stdout
		push	0
		push	offset aKavehGhazi ; "Kaveh Ghazi"
		push	offset aDavidMackenzie ; "David	MacKenzie"
		push	offset aJosephArceneau ; "Joseph Arceneaux"
		push	edx
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	offset aPinky	; "pinky"
		push	eax
		call	version_etc
		add	esp, 20h
		sub	esp, 0Ch
		push	0		; status
		call	exit
; ---------------------------------------------------------------------------

loc_80011E1:				; CODE XREF: main+A6j main+B9j ...
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_80011EB:				; CODE XREF: main+6Cj main+EDj ...
		sub	esp, 0Ch
		push	0		; longind
		push	offset longopts	; longopts
		push	offset shortopts ; "sfwiqbhlp"
		push	dword ptr [ebx+4] ; argv
		push	dword ptr [ebx]	; argc
		call	getopt_long
		add	esp, 20h
		mov	[ebp+optc], eax
		cmp	[ebp+optc], 0FFFFFFFFh
		jnz	loc_80010B3
		mov	eax, ds:optind
		mov	edx, [ebx]
		sub	edx, eax
		mov	eax, edx
		mov	[ebp+n_users], eax
		movzx	eax, do_short_format
		xor	eax, 1
		test	al, al
		jz	short loc_8001260
		cmp	[ebp+n_users], 0
		jnz	short loc_8001260
		sub	esp, 0Ch
		push	offset aNoUsernameSpec ; "no username specified; at least one mus"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8001260:				; CODE XREF: main+1ECj	main+1F2j
		movzx	eax, do_short_format
		test	al, al
		jz	short loc_8001292
		mov	eax, ds:optind
		lea	edx, ds:0[eax*4]
		mov	eax, [ebx+4]
		add	eax, edx
		sub	esp, 4
		push	eax		; argv_names
		push	[ebp+n_users]	; argc_names
		push	offset filename	; "/var/run/utmp"
		call	short_pinky
		add	esp, 10h
		jmp	short loc_80012B2
; ---------------------------------------------------------------------------

loc_8001292:				; CODE XREF: main+227j
		mov	eax, ds:optind
		lea	edx, ds:0[eax*4]
		mov	eax, [ebx+4]
		add	eax, edx
		sub	esp, 8
		push	eax		; argv_names
		push	[ebp+n_users]	; argc_names
		call	long_pinky
		add	esp, 10h

loc_80012B2:				; CODE XREF: main+24Ej
		sub	esp, 0Ch
		push	0		; status

loc_80012B7:				; DATA XREF: .eh_frame:08001A38o
					; .eh_frame:08001A58o ...
		call	exit
main		endp

_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	byte public 'DATA' use32
		assume cs:_data
		;org 80012BCh
; _Bool	include_idle
include_idle	db 1			; DATA XREF: print_entry+216r
					; print_heading+74r ...
; _Bool	include_heading
include_heading	db 1			; DATA XREF: scan_entries:loc_8000DC0r
					; main:loc_8001140w
; _Bool	include_fullname
include_fullname db 1			; DATA XREF: print_entry+103r
					; print_heading+27r ...
; _Bool	include_project
include_project	db 1			; DATA XREF: print_long_entry:loc_80009F3r
					; main:loc_8001182w
; _Bool	include_plan
include_plan	db 1			; DATA XREF: print_long_entry:loc_8000B25r
					; main:loc_800118Bw
; _Bool	include_home_and_shell
include_home_and_shell db 1		; DATA XREF: print_long_entry+139r
					; main:loc_8001194w
; _Bool	do_short_format
do_short_format	db 1			; DATA XREF: main:loc_8001128w
					; main:loc_8001134w ...
; _Bool	include_where
include_where	db 1			; DATA XREF: print_entry+291r
					; print_heading+C9r ...
_data		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
; Segment alignment '32byte' can not be represented in assembly
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 80012E0h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
; const	char *time_format
time_format	dd ?			; DATA XREF: time_string+3Br
					; scan_entries+17w ...
; int time_format_width
time_format_width dd ?			; DATA XREF: print_heading+B2r
					; scan_entries+21w ...
; Function-local static	variable
; time_t now_5279
now_5279	dd ?			; DATA XREF: idle_string+7r
					; idle_string+13o ...
; Function-local static	variable
; char buf_5280[13]
buf_5280	db 0Dh dup(?)		; DATA XREF: idle_string+B3o
					; idle_string+EDo ...
		align 10h
; Function-local static	variable
; char buf_5288[33]
buf_5288	db 21h dup(?)		; DATA XREF: time_string+46o
					; time_string+53o ...
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment '32byte' can not be represented in assembly
_rodata		segment	para public 'CONST' use32
		assume cs:_rodata
		;org 8001340h
; char msgid[]
msgid		db 0Ah			; DATA XREF: emit_ancillary_info+1Do
		db 'Report %s bugs to %s',0Ah,0
aBugCoreutils@g	db 'bug-coreutils@gnu.org',0 ; DATA XREF: emit_ancillary_info+2Do
		align 10h
; char aSHomePageHttpW[]
aSHomePageHttpW	db '%s home page: <http://www.gnu.org/software/%s/>',0Ah,0
					; DATA XREF: emit_ancillary_info+3Fo
; char domainname[]
domainname	db 'coreutils',0        ; DATA XREF: emit_ancillary_info+4Fo
					; main+3Fo ...
aGnuCoreutils	db 'GNU coreutils',0    ; DATA XREF: emit_ancillary_info+54o
					; main+182o
		align 4
; char aGeneralHelpUsi[]
aGeneralHelpUsi	db 'General help using GNU software: <http://www.gnu.org/gethelp/>',0Ah,0
					; DATA XREF: emit_ancillary_info+6Bo
; char s2[]
s2		db 'en_',0              ; DATA XREF: emit_ancillary_info+A2o
; char aReportSTransla[]
aReportSTransla	db 'Report %s translation bugs to <http://translationproject.org/team'
					; DATA XREF: emit_ancillary_info+CCo
		db '/>',0Ah,0
		align 4
; char aForCompleteDoc[]
aForCompleteDoc	db 'For complete documentation, run: info coreutils ',27h,'%s invocation'
					; DATA XREF: emit_ancillary_info+FCo
		db 27h,0Ah,0
aHelp		db 'help',0             ; DATA XREF: .rodata:longoptso
aVersion	db 'version',0          ; DATA XREF: .rodata:longoptso
		align 10h
; const	option longopts[3]
longopts	option <offset aHelp, 0, 0, 0FFFFFF7Eh>	; DATA XREF: main+1AEo
		option <offset aVersion, 0, 0, 0FFFFFF7Dh> ; "help"
		option	<0>
asc_80014D0	db '     ',0            ; DATA XREF: idle_string+31o
; char format[]
format		db '%02d:%02d',0        ; DATA XREF: idle_string+AEo
; char aLud[]
aLud		db '%lud',0             ; DATA XREF: idle_string+E8o
; char a8_S[]
a8_S		db '%-8.*s',0           ; DATA XREF: print_entry+F6o
; char a___[]
a???		db '        ???',0      ; DATA XREF: print_entry+15Bo
; char a19s[]
a19s		db ' %19s',0            ; DATA XREF: print_entry+16Co
; char a19_19s[]
a19_19s		db ' %-19.19s',0        ; DATA XREF: print_entry+1D7o
; char aC8_S[]
aC8_S		db ' %c%-8.*s',0        ; DATA XREF: print_entry+209o
; char a6s[]
a6s		db ' %-6s',0            ; DATA XREF: print_entry+23Fo
					; print_entry+262o ...
; char a_____[]
a?????		db '?????',0            ; DATA XREF: print_entry+251o
; char aS[]
aS		db ' %s',0              ; DATA XREF: print_entry+284o
					; print_entry+388o ...
; char aSS[]
aSS		db ' %s:%s',0           ; DATA XREF: print_entry+370o
; char aLoginName[]
aLoginName	db 'Login name: ',0     ; DATA XREF: print_long_entry+38o
; char a28s[]
a28s		db '%-28s',0            ; DATA XREF: print_long_entry+5Ao
; char aInRealLife[]
aInRealLife	db 'In real life: ',0   ; DATA XREF: print_long_entry+6Ao
; char a____0[]
a???_0		db '???',0Ah,0          ; DATA XREF: print_long_entry+8Fo
; char aDirectory[]
aDirectory	db 'Directory: ',0      ; DATA XREF: print_long_entry+147o
; char a29s[]
a29s		db '%-29s',0            ; DATA XREF: print_long_entry+16Do
; char aShell[]
aShell		db 'Shell: ',0          ; DATA XREF: print_long_entry+17Do
a_project	db '/.project',0        ; DATA XREF: print_long_entry+1CCo
aR		db 'r',0                ; DATA XREF: print_long_entry+245o
					; print_long_entry+377o
; char aProject[]
aProject	db 'Project: ',0        ; DATA XREF: print_long_entry+26Ao
a_plan		db '/.plan',0           ; DATA XREF: print_long_entry+2FEo
; char aPlan[]
aPlan		db 'Plan:',0Ah,0        ; DATA XREF: print_long_entry+39Co
; char aLogin[]
aLogin		db 'Login',0            ; DATA XREF: print_heading+9o
; char a8s[]
a8s		db '%-8s',0             ; DATA XREF: print_heading+1Ao
; char aName[]
aName		db 'Name',0             ; DATA XREF: print_heading+35o
; char a19s_0[]
a19s_0		db ' %-19s',0           ; DATA XREF: print_heading+46o
; char aTty[]
aTty		db ' TTY',0             ; DATA XREF: print_heading+56o
; char a9s[]
a9s		db ' %-9s',0            ; DATA XREF: print_heading+67o
; char aIdle[]
aIdle		db 'Idle',0             ; DATA XREF: print_heading+82o
; char aWhen[]
aWhen		db 'When',0             ; DATA XREF: print_heading+A3o
; char aS_0[]
aS_0		db ' %-*s',0            ; DATA XREF: print_heading+BCo
; char aWhere[]
aWhere		db 'Where',0            ; DATA XREF: print_heading+D7o
aYMDHM		db '%Y-%m-%d %H:%M',0   ; DATA XREF: scan_entries+17o
aBEHM		db '%b %e %H:%M',0      ; DATA XREF: scan_entries:loc_8000DACo
; char aS_1[]
aS_1		db '%s',0               ; DATA XREF: short_pinky+40o
; char aTrySHelpForMor[]
aTrySHelpForMor	db 'Try `%s --help',27h,' for more information.',0Ah,0
					; DATA XREF: usage+16o
		align 4
; char aUsageSOption__[]
aUsageSOption__	db 'Usage: %s [OPTION]... [USER]...',0Ah,0 ; DATA XREF: usage+46o
		align 10h
; char aLProduceLongFo[]
aLProduceLongFo	db 0Ah			; DATA XREF: usage+69o
		db '  -l              produce long format output for the specified US'
		db 'ERs',0Ah
		db '  -b              omit the user',27h,'s home directory and shell in '
		db 'long format',0Ah
		db '  -h              omit the user',27h,'s project file in long format',0Ah
		db '  -p              omit the user',27h,'s plan file in long format',0Ah
		db '  -s              do short format output, this is the default',0Ah,0
; char aFOmitTheLineOf[]
aFOmitTheLineOf	db '  -f              omit the line of column headings in short forma'
					; DATA XREF: usage+8Co
		db 't',0Ah
		db '  -w              omit the user',27h,'s full name in short format',0Ah
		db '  -i              omit the user',27h,'s full name and remote host in'
		db ' short format',0Ah
		db '  -q              omit the user',27h,'s full name, remote host and i'
		db 'dle time',0Ah
		db '                  in short format',0Ah,0
		align 10h
; char aHelpDisplayThi[]
aHelpDisplayThi	db '      --help     display this help and exit',0Ah,0
					; DATA XREF: usage+AFo
		align 10h
; char aVersionOutputV[]
aVersionOutputV	db '      --version  output version information and exit',0Ah,0
					; DATA XREF: usage+D2o
		align 4
; char aALightweightFi[]
aALightweightFi	db 0Ah			; DATA XREF: usage+EFo
		db 'A lightweight `finger',27h,' program;  print user information.',0Ah
		db 'The utmp file will be %s.',0Ah,0
; char filename[]
filename	db '/var/run/utmp',0    ; DATA XREF: usage+FFo main+241o
; char locale
locale		db 0			; DATA XREF: main+28o
; char dirname[]
dirname		db '/usr/local/share/locale',0 ; DATA XREF: main+3Ao
aKavehGhazi	db 'Kaveh Ghazi',0      ; DATA XREF: main+172o
aDavidMackenzie	db 'David MacKenzie',0  ; DATA XREF: main+177o
aJosephArceneau	db 'Joseph Arceneaux',0 ; DATA XREF: main+17Co
aPinky		db 'pinky',0            ; DATA XREF: main+187o
; char shortopts[]
shortopts	db 'sfwiqbhlp',0        ; DATA XREF: main+1B3o
		align 4
; char aNoUsernameSpec[]
aNoUsernameSpec	db 'no username specified; at least one must be specified when using '
					; DATA XREF: main+1F7o
		db '-l',0
_rodata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_eh_frame	segment	dword public 'CONST' use32
		assume cs:_eh_frame
		;org 8001A18h
		dd 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 2	dup(1Ch)
		dd offset loc_80012B7-8002CEFh
		dd 12h,	80E4100h, 0D420285h, 0CC54E05h,	404h, 20h, 3Ch
		dd offset loc_80012B7-8002CFDh
		dd 11Ch, 80E4100h, 0D420285h, 3834405h,	0C5011403h, 4040CC3h
		dd 1Ch,	60h
		dd offset loc_80012B7-8002C05h
		dd 1Ch,	80E4100h, 0D420285h, 0CC55805h,	404h, 1Ch, 80h
		dd offset loc_80012B7-8002C09h
		dd 30h,	80E4100h, 0D420285h, 0CC56C05h,	404h, 20h, 0A0h
		dd offset loc_80012B7-8002BF9h
		dd 162h, 80E4100h, 0D420285h, 3834405h,	0C5015A03h, 4040CC3h
		dd 20h,	0C4h
		dd offset loc_80012B7-8002ABBh
		dd 104h, 80E4100h, 0D420285h, 3834405h,	0C3C5FC02h, 4040Ch
		dd 1Ch,	0E8h
		dd offset loc_80012B7-80029DBh
		dd 81h,	80E4100h, 0D420285h, 0C57D0205h, 4040Ch, 1Ch, 108h
		dd offset loc_80012B7-800297Ah
		dd 3D5h, 80E4100h, 0D420285h, 3D10305h,	4040CC5h, 20h
		dd 128h
		dd offset loc_80012B7-80025C5h
		dd 444h, 80E4100h, 0D420285h, 3834705h,	0C5043903h, 4040CC3h
		dd 1Ch,	14Ch
		dd offset loc_80012B7-80021A5h
		dd 105h, 80E4100h, 0D420285h, 1010305h,	4040CC5h, 1Ch
		dd 16Ch
		dd offset loc_80012B7-80020C0h
		dd 0F1h, 80E4100h, 0D420285h, 0C5ED0205h, 4040Ch, 1Ch
		dd 18Ch
		dd offset loc_80012B7-8001FEFh
		dd 7Ah,	80E4100h, 0D420285h, 0C5760205h, 4040Ch, 1Ch, 1ACh
		dd offset loc_80012B7-8001F95h
		dd 3Bh,	80E4100h, 0D420285h, 0CC57705h,	404h, 18h, 1CCh
		dd offset loc_80012B7-8001F7Ah
		dd 11Dh, 80E4100h, 0D420285h, 3834405h,	24h, 1E8h
		dd offset loc_80012B7-8001E79h
		dd 27Ah, 10C4400h, 5104700h, 44007502h,	7875030Fh, 2031006h
		dd 7C75h
_eh_frame	ends

; ===========================================================================

; Segment type:	Externs
; extern
		extrn program_name:dword ; DATA	XREF: emit_ancillary_info+7r
					; emit_ancillary_info+B6r ...
		extrn last_component:near ; CODE XREF: emit_ancillary_info+10p
					; emit_ancillary_info+BFp ...
; char *gettext(const char *msgid)
		extrn gettext:near	; CODE XREF: emit_ancillary_info+22p
					; emit_ancillary_info+44p ...
; int printf(const char	*format, ...)
		extrn printf:near	; CODE XREF: emit_ancillary_info+34p
					; emit_ancillary_info+5Ap ...
; struct _IO_FILE *stdout
		extrn stdout:dword	; DATA XREF: emit_ancillary_info+62r
					; print_long_entry:loc_8000ABBr ...
		extrn fputs_unlocked:near ; CODE XREF: emit_ancillary_info+7Dp
					; usage+7Bp ...
; char *setlocale(int category,	const char *locale)
		extrn setlocale:near	; CODE XREF: emit_ancillary_info+8Cp
					; main+2Fp
; int strncmp(const char *s1, const char *s2, size_t n)
		extrn strncmp:near	; CODE XREF: emit_ancillary_info+AAp
					; scan_entries+9Ep
		extrn imaxtostr:near	; CODE XREF: timetostr+12p
; size_t strlen(const char *s)
		extrn strlen:near	; CODE XREF: create_fullname+Dp
					; create_fullname+38p ...
		extrn xalloc_die:near	; CODE XREF: create_fullname:loc_80001EAp
; void *xmalloc(size_t)
		extrn xmalloc:near	; CODE XREF: create_fullname+7Bp
					; print_long_entry+207p ...
; const	unsigned __int16 **_ctype_b_loc(void)
		extrn __ctype_b_loc:near ; CODE	XREF: create_fullname+A5p
; int toupper(int c)
		extrn toupper:near	; CODE XREF: create_fullname+102p
; time_t time(time_t *timer)
		extrn time:near		; CODE XREF: idle_string+18p
; int sprintf(char *s, const char *format, ...)
		extrn sprintf:near	; CODE XREF: idle_string+B8p
					; idle_string+F2p
; struct tm *localtime(const time_t *timer)
		extrn localtime:near	; CODE XREF: time_string+2Ap
; size_t strftime(char *s, size_t maxsize, const char *format, const struct tm *tp)
		extrn strftime:near	; CODE XREF: time_string+4Bp
		extrn __stack_chk_fail:near ; CODE XREF: time_string+7Ap
					; print_entry+3CEp ...
; char *strncpy(char *dest, const char *src, size_t n)
		extrn strncpy:near	; CODE XREF: print_entry+41p
					; print_entry+7Dp ...
		extrn stat64:near	; CODE XREF: print_entry+9Dp
; struct passwd	*getpwnam(const	char *name)
		extrn getpwnam:near	; CODE XREF: print_entry+141p
					; print_long_entry+27p
; char *strchr(const char *s, int c)
		extrn strchr:near	; CODE XREF: print_entry+18Ap
					; print_entry+2F7p ...
; void free(void *ptr)
		extrn free:near		; CODE XREF: print_entry+1EDp
					; print_entry+3ACp ...
		extrn canon_host:near	; CODE XREF: print_entry+335p
; int putchar_unlocked(int c)
		extrn putchar_unlocked:near ; CODE XREF: print_entry+3B9p
					; print_long_entry+131p ...
		extrn stpcpy:near	; CODE XREF: print_long_entry+228p
					; print_long_entry+35Ap
; char *strcpy(char *dest, const char *src)
		extrn strcpy:near	; CODE XREF: print_long_entry+23Ap
					; print_long_entry+36Cp
		extrn fopen64:near	; CODE XREF: print_long_entry+250p
					; print_long_entry+382p
; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
		extrn fwrite_unlocked:near ; CODE XREF:	print_long_entry+29Ap
					; print_long_entry+3CCp
; size_t fread_unlocked(void *ptr, size_t size,	size_t n, FILE *stream)
		extrn fread_unlocked:near ; CODE XREF: print_long_entry+2B6p
					; print_long_entry+3E8p
; int fclose(FILE *stream)
		extrn fclose:near	; CODE XREF: print_long_entry+2D6p
					; print_long_entry+408p
		extrn hard_locale:near	; CODE XREF: scan_entries+Bp
		extrn read_utmp:near	; CODE XREF: short_pinky+2Ap
; int *_errno_location(void)
		extrn __errno_location:near ; CODE XREF: short_pinky+36p
; void error(int status, int errnum, const char	*format, ...)
		extrn error:near	; CODE XREF: short_pinky+48p main+20Cp
; struct _IO_FILE *stderr
		extrn stderr:dword	; DATA XREF: usage+25r
; int fprintf(FILE *stream, const char *format,	...)
		extrn fprintf:near	; CODE XREF: usage+30p
; void exit(int	status)
		extrn exit:near		; CODE XREF: usage+118p main+19Ap ...
		extrn set_program_name:near ; CODE XREF: main+1Dp
; char *bindtextdomain(const char *domainname, const char *dirname)
		extrn bindtextdomain:near ; CODE XREF: main+44p
; char *textdomain(const char *domainname)
		extrn textdomain:near	; CODE XREF: main+54p
; void close_stdout(void)
		extrn close_stdout	; DATA XREF: main+5Fo
; int atexit(void (*func)(void))
		extrn atexit:near	; CODE XREF: main+64p
		extrn Version:dword	; DATA XREF: main:loc_80011A7r
		extrn version_etc:near	; CODE XREF: main+18Dp
; int getopt_long(int argc, char *const	*argv, const char *shortopts, const struct option *longopts, int *longind)
		extrn getopt_long:near	; CODE XREF: main+1BDp
; int optind
		extrn optind:dword	; DATA XREF: main+1D2r	main+229r ...


		end
