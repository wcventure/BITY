;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B611-7234-BB			    |
; |		Doskey Lee, Kingsoft Internet Security Software		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	6314EEDFB4349A5DF0EBD9B29BB38410
; Input	CRC32 :	DAB3C2B2

; File Name   :	D:\coreutils-o\df.o
; Format      :	ELF for	Intel 386 (Relocatable)
;
; Source File :	'df.c'

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	byte public 'CODE' use32
		assume cs:_text
		;org 8000000h
		assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void emit_size_note()
emit_size_note	proc near		; CODE XREF: usage+165p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 4
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset msgid	; "\nSIZE may be (or may be an integer opt"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		nop
		mov	ebx, [ebp+var_4]
		leave
		retn
emit_size_note	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl emit_blocksize_note(const char *program)
emit_blocksize_note proc near		; CODE XREF: usage+15Dp

program		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		sub	esp, 0Ch
		push	offset aDisplayValuesA ; "\nDisplay values are in units	of the fi"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	[ebp+program]
		push	eax		; format
		call	printf
		add	esp, 10h
		nop
		leave
		retn
emit_blocksize_note endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void emit_ancillary_info()
emit_ancillary_info proc near		; CODE XREF: usage+16Ap

lc_messages	= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aReportSBugsToS ; "\nReport %s bugs to %s\n"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset aBugCoreutils@g ; "bug-coreutils@gnu.org"
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	offset aSHomePageHttpW ; "%s home page:	<http://www.gnu.org/softw"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset domainname ; "coreutils"
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aGeneralHelpUsi ; "General help using GNU software: <http:"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		sub	esp, 8
		push	0		; locale
		push	5		; category
		call	setlocale
		add	esp, 10h
		mov	[ebp+lc_messages], eax
		cmp	[ebp+lc_messages], 0
		jz	short loc_800013E
		sub	esp, 4
		push	3		; n
		push	offset s2	; "en_"
		push	[ebp+lc_messages] ; s1
		call	strncmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_800013E
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aReportSTransla ; "Report %s translation	bugs to	<http://t"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h

loc_800013E:				; CODE XREF: emit_ancillary_info+9Bj
					; emit_ancillary_info+B4j
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aForCompleteDoc ; "For complete documentation, run: info	c"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		nop
		mov	ebx, [ebp+var_4]
		leave
		retn
emit_ancillary_info endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void print_header()
print_header	proc near		; CODE XREF: show_dev+22Dp

divisible_by_1000= byte	ptr -2BEh
divisible_by_1024= byte	ptr -2BDh
opts		= dword	ptr -2BCh
q1000		= qword	ptr -2B8h
q1024		= qword	ptr -2B0h
buf		= byte ptr -2A8h
var_1C		= dword	ptr -1Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2BCh
		mov	eax, large gs:14h
		mov	[ebp+var_1C], eax
		xor	eax, eax
		movzx	eax, ds:print_type
		test	al, al
		jz	short loc_80001BB
		mov	edi, ds:stdout
		sub	esp, 0Ch
		push	offset aFilesystemType ; "Filesystem	Type"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	edi
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		jmp	short loc_80001DE
; ---------------------------------------------------------------------------

loc_80001BB:				; CODE XREF: print_header+20j
		mov	edi, ds:stdout
		sub	esp, 0Ch
		push	offset aFilesystem ; "Filesystem	"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	edi
		push	eax
		call	fputs_unlocked
		add	esp, 10h

loc_80001DE:				; CODE XREF: print_header+45j
		movzx	eax, ds:inode_format
		test	al, al
		jz	short loc_8000211
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aInodesIusedIfr ; "    Inodes   IUsed   IFree IUse%"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		jmp	loc_800044A
; ---------------------------------------------------------------------------

loc_8000211:				; CODE XREF: print_header+73j
		mov	eax, ds:human_output_opts
		and	eax, 10h
		test	eax, eax
		jz	short loc_8000279
		mov	eax, ds:human_output_opts
		and	eax, 20h
		test	eax, eax
		jz	short loc_8000251
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aSizeUsedAvailU ; "    Size  Used Avail Use%"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		jmp	loc_800044A
; ---------------------------------------------------------------------------

loc_8000251:				; CODE XREF: print_header+B3j
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aSizeUsedAvai_0 ; "     Size   Used  Avail Use%"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		jmp	loc_800044A
; ---------------------------------------------------------------------------

loc_8000279:				; CODE XREF: print_header+A7j
		movzx	eax, ds:posix_format
		test	al, al
		jz	short loc_80002C7
		mov	eax, dword ptr ds:output_block_size
		mov	edx, dword ptr ds:output_block_size+4
		sub	esp, 4
		lea	ecx, [ebp+buf]
		push	ecx
		push	edx
		push	eax
		call	umaxtostr
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aSBlocksUsedAva ; " %s-blocks	  Used Available Capacity"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		jmp	loc_800044A
; ---------------------------------------------------------------------------

loc_80002C7:				; CODE XREF: print_header+10Ej
		mov	eax, ds:human_output_opts
		and	eax, 124h
		or	al, 98h
		mov	[ebp+opts], eax
		mov	eax, dword ptr ds:output_block_size
		mov	edx, dword ptr ds:output_block_size+4
		mov	dword ptr [ebp+q1000], eax
		mov	dword ptr [ebp+q1000+4], edx
		mov	eax, dword ptr ds:output_block_size
		mov	edx, dword ptr ds:output_block_size+4
		mov	dword ptr [ebp+q1024], eax
		mov	dword ptr [ebp+q1024+4], edx

loc_8000307:				; CODE XREF: print_header+23Ej
		mov	eax, dword ptr [ebp+q1000]
		mov	edx, dword ptr [ebp+q1000+4]
		push	0
		push	3E8h
		push	edx
		push	eax
		call	__umoddi3
		add	esp, 10h
		or	eax, edx
		test	eax, eax
		setz	al
		mov	[ebp+divisible_by_1000], al
		mov	eax, dword ptr [ebp+q1000]
		mov	edx, dword ptr [ebp+q1000+4]
		push	0
		push	3E8h
		push	edx
		push	eax
		call	__udivdi3
		add	esp, 10h
		mov	dword ptr [ebp+q1000], eax
		mov	dword ptr [ebp+q1000+4], edx
		mov	eax, dword ptr [ebp+q1024]
		and	eax, 3FFh
		mov	ebx, eax
		mov	eax, dword ptr [ebp+q1024+4]
		and	eax, 0
		mov	esi, eax
		mov	eax, ebx
		or	eax, esi
		test	eax, eax
		setz	al
		mov	[ebp+divisible_by_1024], al
		mov	eax, dword ptr [ebp+q1024]
		mov	edx, dword ptr [ebp+q1024+4]
		shrd	eax, edx, 0Ah
		shr	edx, 0Ah
		mov	dword ptr [ebp+q1024], eax
		mov	dword ptr [ebp+q1024+4], edx
		movzx	edx, [ebp+divisible_by_1000]
		movzx	eax, [ebp+divisible_by_1024]
		and	eax, edx
		test	eax, eax
		jnz	loc_8000307
		movzx	edx, [ebp+divisible_by_1000]
		movzx	eax, [ebp+divisible_by_1024]
		cmp	edx, eax
		jge	short loc_80003D1
		or	[ebp+opts], 20h

loc_80003D1:				; CODE XREF: print_header+254j
		movzx	edx, [ebp+divisible_by_1024]
		movzx	eax, [ebp+divisible_by_1000]
		cmp	edx, eax
		jge	short loc_80003EA
		and	[ebp+opts], 0FFFFFFDFh

loc_80003EA:				; CODE XREF: print_header+26Dj
		mov	eax, [ebp+opts]
		and	eax, 20h
		test	eax, eax
		jnz	short loc_8000401
		or	[ebp+opts], 100h

loc_8000401:				; CODE XREF: print_header+281j
		mov	eax, dword ptr ds:output_block_size
		mov	edx, dword ptr ds:output_block_size+4
		push	0
		push	1
		push	0
		push	1
		push	[ebp+opts]
		lea	ecx, [ebp+buf]
		push	ecx
		push	edx
		push	eax
		call	human_readable
		add	esp, 20h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset a4sBlocksUsedAv ; " %4s-blocks	   Used	Available Use%%"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h

loc_800044A:				; CODE XREF: print_header+98j
					; print_header+D8j ...
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aMountedOn ; " Mounted on\n"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		nop
		mov	eax, [ebp+var_1C]
		xor	eax, large gs:14h
		jz	short loc_800047F
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_800047F:				; CODE XREF: print_header+304j
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
print_header	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; _Bool	__cdecl	selected_fstype(const char *fstype)
selected_fstype	proc near		; CODE XREF: show_dev+B3p

fsp		= dword	ptr -0Ch
fstype		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, ds:fs_select_list
		test	eax, eax
		jz	short loc_800049C
		cmp	[ebp+fstype], 0
		jnz	short loc_80004A3

loc_800049C:				; CODE XREF: selected_fstype+Dj
		mov	eax, 1
		jmp	short locret_80004E0
; ---------------------------------------------------------------------------

loc_80004A3:				; CODE XREF: selected_fstype+13j
		mov	eax, ds:fs_select_list
		mov	[ebp+fsp], eax
		jmp	short loc_80004D5
; ---------------------------------------------------------------------------

loc_80004AD:				; CODE XREF: selected_fstype+52j
		mov	eax, [ebp+fsp]
		mov	eax, [eax]
		sub	esp, 8
		push	eax		; s2
		push	[ebp+fstype]	; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		jnz	short loc_80004CC
		mov	eax, 1
		jmp	short locret_80004E0
; ---------------------------------------------------------------------------

loc_80004CC:				; CODE XREF: selected_fstype+3Cj
		mov	eax, [ebp+fsp]
		mov	eax, [eax+4]
		mov	[ebp+fsp], eax

loc_80004D5:				; CODE XREF: selected_fstype+24j
		cmp	[ebp+fsp], 0
		jnz	short loc_80004AD
		mov	eax, 0

locret_80004E0:				; CODE XREF: selected_fstype+1Aj
					; selected_fstype+43j
		leave
		retn
selected_fstype	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; _Bool	__cdecl	excluded_fstype(const char *fstype)
excluded_fstype	proc near		; CODE XREF: show_dev+CFp

fsp		= dword	ptr -0Ch
fstype		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, ds:fs_exclude_list
		test	eax, eax
		jz	short loc_80004F7
		cmp	[ebp+fstype], 0
		jnz	short loc_80004FE

loc_80004F7:				; CODE XREF: excluded_fstype+Dj
		mov	eax, 0
		jmp	short locret_800053B
; ---------------------------------------------------------------------------

loc_80004FE:				; CODE XREF: excluded_fstype+13j
		mov	eax, ds:fs_exclude_list
		mov	[ebp+fsp], eax
		jmp	short loc_8000530
; ---------------------------------------------------------------------------

loc_8000508:				; CODE XREF: excluded_fstype+52j
		mov	eax, [ebp+fsp]
		mov	eax, [eax]
		sub	esp, 8
		push	eax		; s2
		push	[ebp+fstype]	; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		jnz	short loc_8000527
		mov	eax, 1
		jmp	short locret_800053B
; ---------------------------------------------------------------------------

loc_8000527:				; CODE XREF: excluded_fstype+3Cj
		mov	eax, [ebp+fsp]
		mov	eax, [eax+4]
		mov	[ebp+fsp], eax

loc_8000530:				; CODE XREF: excluded_fstype+24j
		cmp	[ebp+fsp], 0
		jnz	short loc_8000508
		mov	eax, 0

locret_800053B:				; CODE XREF: excluded_fstype+1Aj
					; excluded_fstype+43j
		leave
		retn
excluded_fstype	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; _Bool	__cdecl	known_value(uintmax_t n)
known_value	proc near		; CODE XREF: df_readable+37p
					; show_dev+424p ...

n		= qword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	eax, [ebp+arg_0]
		mov	dword ptr [ebp+n], eax
		mov	eax, [ebp+arg_4]
		mov	dword ptr [ebp+n+4], eax
		mov	eax, 1
		cmp	dword ptr [ebp+n+4], 0FFFFFFFFh
		jb	short locret_800056B
		cmp	dword ptr [ebp+n+4], 0FFFFFFFFh
		ja	short loc_8000566
		cmp	dword ptr [ebp+n], 0FFFFFFFDh
		jbe	short locret_800056B

loc_8000566:				; CODE XREF: known_value+21j
		mov	eax, 0

locret_800056B:				; CODE XREF: known_value+1Bj
					; known_value+27j
		leave
		retn
known_value	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; const	char *__cdecl df_readable(_Bool	negative, uintmax_t n, char *buf, uintmax_t input_units, uintmax_t output_units)
df_readable	proc near		; CODE XREF: show_dev+845p
					; show_dev+888p ...

output_units	= qword	ptr -38h
input_units	= qword	ptr -30h
n		= qword	ptr -28h
negative	= byte ptr -1Ch
p		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
buf		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h
arg_1C		= dword	ptr  24h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 34h
		mov	eax, [ebp+arg_0]
		mov	[ebp+negative],	al
		mov	eax, [ebp+arg_4]
		mov	dword ptr [ebp+n], eax
		mov	eax, [ebp+arg_8]
		mov	dword ptr [ebp+n+4], eax
		mov	eax, [ebp+arg_10]
		mov	dword ptr [ebp+input_units], eax
		mov	eax, [ebp+arg_14]
		mov	dword ptr [ebp+input_units+4], eax
		mov	eax, [ebp+arg_18]
		mov	dword ptr [ebp+output_units], eax
		mov	eax, [ebp+arg_1C]
		mov	dword ptr [ebp+output_units+4],	eax
		push	dword ptr [ebp+n+4]
		push	dword ptr [ebp+n] ; n
		call	known_value
		add	esp, 8
		xor	eax, 1
		test	al, al
		jz	short loc_80005C5
		movzx	eax, [ebp+negative]
		xor	eax, 1
		test	al, al
		jz	short loc_80005C5
		mov	eax, offset asc_8002E8B	; "-"
		jmp	short loc_800061E
; ---------------------------------------------------------------------------

loc_80005C5:				; CODE XREF: df_readable+44j
					; df_readable+4Fj
		mov	ecx, ds:human_output_opts
		movzx	edx, [ebp+negative]
		mov	eax, [ebp+buf]
		lea	ebx, [edx+eax]
		cmp	[ebp+negative],	0
		jz	short loc_80005EA
		mov	eax, dword ptr [ebp+n]
		mov	edx, dword ptr [ebp+n+4]
		neg	eax
		adc	edx, 0
		neg	edx
		jmp	short loc_80005F0
; ---------------------------------------------------------------------------

loc_80005EA:				; CODE XREF: df_readable+6Cj
		mov	eax, dword ptr [ebp+n]
		mov	edx, dword ptr [ebp+n+4]

loc_80005F0:				; CODE XREF: df_readable+7Bj
		push	dword ptr [ebp+output_units+4]
		push	dword ptr [ebp+output_units]
		push	dword ptr [ebp+input_units+4]
		push	dword ptr [ebp+input_units]
		push	ecx
		push	ebx
		push	edx
		push	eax
		call	human_readable
		add	esp, 20h
		mov	[ebp+p], eax
		cmp	[ebp+negative],	0
		jz	short loc_800061B
		sub	[ebp+p], 1
		mov	eax, [ebp+p]
		mov	byte ptr [eax],	2Dh

loc_800061B:				; CODE XREF: df_readable+A2j
		mov	eax, [ebp+p]

loc_800061E:				; CODE XREF: df_readable+56j
		mov	ebx, [ebp+var_4]
		leave
		retn
df_readable	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl add_uint_with_neg_flag(uintmax_t	*dest, _Bool *dest_neg,	uintmax_t src, _Bool src_neg)
add_uint_with_neg_flag proc near	; CODE XREF: show_dev+75Bp

src_neg		= byte ptr -14h
src		= qword	ptr -10h
dest		= dword	ptr  8
dest_neg	= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, [ebp+arg_10]
		mov	edx, [ebp+arg_8]
		mov	dword ptr [ebp+src], edx
		mov	edx, [ebp+arg_C]
		mov	dword ptr [ebp+src+4], edx
		mov	[ebp+src_neg], al
		mov	eax, [ebp+dest_neg]
		movzx	eax, byte ptr [eax]
		xor	eax, 1
		xor	al, [ebp+src_neg]
		test	al, al
		jz	short loc_800066B
		mov	eax, [ebp+dest]
		mov	ecx, [eax]
		mov	ebx, [eax+4]
		mov	eax, dword ptr [ebp+src]
		mov	edx, dword ptr [ebp+src+4]
		add	eax, ecx
		adc	edx, ebx
		mov	ecx, [ebp+dest]
		mov	[ecx], eax
		mov	[ecx+4], edx
		jmp	loc_8000713
; ---------------------------------------------------------------------------

loc_800066B:				; CODE XREF: add_uint_with_neg_flag+27j
		mov	eax, [ebp+dest_neg]
		movzx	eax, byte ptr [eax]
		test	al, al
		jz	short loc_800068C
		mov	eax, [ebp+dest]
		mov	edx, [eax+4]
		mov	eax, [eax]
		neg	eax
		adc	edx, 0
		neg	edx
		mov	ecx, [ebp+dest]
		mov	[ecx], eax
		mov	[ecx+4], edx

loc_800068C:				; CODE XREF: add_uint_with_neg_flag+50j
		cmp	[ebp+src_neg], 0
		jz	short loc_800069C
		neg	dword ptr [ebp+src]
		adc	dword ptr [ebp+src+4], 0
		neg	dword ptr [ebp+src+4]

loc_800069C:				; CODE XREF: add_uint_with_neg_flag+6Dj
		mov	eax, [ebp+dest]
		mov	edx, [eax+4]
		mov	eax, [eax]
		cmp	edx, dword ptr [ebp+src+4]
		jb	short loc_80006CB
		cmp	edx, dword ptr [ebp+src+4]
		ja	short loc_80006B3
		cmp	eax, dword ptr [ebp+src]
		jbe	short loc_80006CB

loc_80006B3:				; CODE XREF: add_uint_with_neg_flag+89j
		mov	eax, [ebp+dest]
		mov	edx, [eax+4]
		mov	eax, [eax]
		sub	eax, dword ptr [ebp+src]
		sbb	edx, dword ptr [ebp+src+4]
		mov	ecx, [ebp+dest]
		mov	[ecx], eax
		mov	[ecx+4], edx
		jmp	short loc_80006F2
; ---------------------------------------------------------------------------

loc_80006CB:				; CODE XREF: add_uint_with_neg_flag+84j
					; add_uint_with_neg_flag+8Ej
		mov	eax, [ebp+dest]
		mov	edx, [eax+4]
		mov	eax, [eax]
		mov	ecx, dword ptr [ebp+src]
		mov	ebx, dword ptr [ebp+src+4]
		sub	ecx, eax
		sbb	ebx, edx
		mov	eax, ecx
		mov	edx, ebx
		mov	ecx, [ebp+dest]
		mov	[ecx], eax
		mov	[ecx+4], edx
		mov	eax, [ebp+dest_neg]
		movzx	edx, [ebp+src_neg]
		mov	[eax], dl

loc_80006F2:				; CODE XREF: add_uint_with_neg_flag+A6j
		mov	eax, [ebp+dest_neg]
		movzx	eax, byte ptr [eax]
		test	al, al
		jz	short loc_8000713
		mov	eax, [ebp+dest]
		mov	edx, [eax+4]
		mov	eax, [eax]
		neg	eax
		adc	edx, 0
		neg	edx
		mov	ecx, [ebp+dest]
		mov	[ecx], eax
		mov	[ecx+4], edx

loc_8000713:				; CODE XREF: add_uint_with_neg_flag+43j
					; add_uint_with_neg_flag+D7j
		add	esp, 14h
		pop	ebx
		pop	ebp
		retn
add_uint_with_neg_flag endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl show_dev(const char *disk, const	char *mount_point, const char *stat_file, const	char *fstype, _Bool me_dummy, _Bool me_remote, const fs_usage *force_fsu)
show_dev	proc near		; CODE XREF: show_disk+8Dp
					; show_point+48Dp ...

var_8A8		= qword	ptr -8A8h
var_8A0		= qword	ptr -8A0h
var_898		= word ptr -898h
var_896		= word ptr -896h
force_fsu	= dword	ptr -894h
me_remote	= byte ptr -890h
me_dummy	= byte ptr -88Ch
fstype		= dword	ptr -888h
stat_file	= dword	ptr -884h
mount_point	= dword	ptr -880h
disk		= dword	ptr -87Ch
negate_available= byte ptr -872h
negate_used	= byte ptr -871h
width		= dword	ptr -870h
col1_adjustment	= dword	ptr -86Ch
use_width	= dword	ptr -868h
disk_name_len	= dword	ptr -864h
fstype_len	= dword	ptr -860h
lipct		= dword	ptr -85Ch
input_units	= qword	ptr -858h
output_units	= qword	ptr -850h
total		= qword	ptr -848h
available	= qword	ptr -840h
available_to_root= qword ptr -838h
used		= qword	ptr -830h
pct		= qword	ptr -828h
b		= qword	ptr -820h
u100		= qword	ptr -818h
nonroot_total	= qword	ptr -810h
u		= qword	ptr -808h
a		= qword	ptr -800h
nonroot_total_0	= qword	ptr -7F8h
ipct		= qword	ptr -7F0h
fsu		= fs_usage ptr -7E8h
buf		= byte ptr -7B3h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 8A0h
		mov	edx, [ebp+arg_10]
		mov	eax, [ebp+arg_14]
		mov	ecx, [ebp+arg_0]
		mov	[ebp+disk], ecx
		mov	ecx, [ebp+arg_4]
		mov	[ebp+mount_point], ecx
		mov	ecx, [ebp+arg_8]
		mov	[ebp+stat_file], ecx
		mov	ecx, [ebp+arg_C]
		mov	[ebp+fstype], ecx
		mov	[ebp+me_dummy],	dl
		mov	[ebp+me_remote], al
		mov	eax, [ebp+arg_18]
		mov	[ebp+force_fsu], eax
		mov	eax, large gs:14h
		mov	[ebp+var_C], eax
		xor	eax, eax
		mov	[ebp+col1_adjustment], 0
		fld1
		fchs
		fstp	[ebp+pct]
		cmp	[ebp+me_remote], 0
		jz	short loc_800079A
		movzx	eax, ds:show_local_fs
		test	al, al
		jnz	loc_8001433

loc_800079A:				; CODE XREF: show_dev+70j
		cmp	[ebp+me_dummy],	0
		jz	short loc_80007C3
		movzx	eax, ds:show_all_fs
		xor	eax, 1
		test	al, al
		jz	short loc_80007C3
		movzx	eax, ds:show_listed_fs
		xor	eax, 1
		test	al, al
		jnz	loc_8001436

loc_80007C3:				; CODE XREF: show_dev+88j show_dev+96j
		sub	esp, 0Ch
		push	[ebp+fstype]	; fstype
		call	selected_fstype
		add	esp, 10h
		xor	eax, 1
		test	al, al
		jnz	loc_8001439
		sub	esp, 0Ch
		push	[ebp+fstype]	; fstype
		call	excluded_fstype
		add	esp, 10h
		test	al, al
		jnz	loc_8001439
		cmp	[ebp+stat_file], 0
		jnz	short loc_800081E
		cmp	[ebp+mount_point], 0
		jz	short loc_8000812
		mov	eax, [ebp+mount_point]
		jmp	short loc_8000818
; ---------------------------------------------------------------------------

loc_8000812:				; CODE XREF: show_dev+EFj
		mov	eax, [ebp+disk]

loc_8000818:				; CODE XREF: show_dev+F7j
		mov	[ebp+stat_file], eax

loc_800081E:				; CODE XREF: show_dev+E6j
		cmp	[ebp+force_fsu], 0
		jz	short loc_80008A3
		mov	eax, [ebp+force_fsu]
		mov	edx, [eax]
		mov	dword ptr [ebp+fsu.fsu_blocksize], edx
		mov	edx, [eax+4]
		mov	dword ptr [ebp+fsu.fsu_blocksize+4], edx
		mov	edx, [eax+8]
		mov	dword ptr [ebp+fsu.fsu_blocks],	edx
		mov	edx, [eax+0Ch]
		mov	dword ptr [ebp+fsu.fsu_blocks+4], edx
		mov	edx, [eax+10h]
		mov	dword ptr [ebp+fsu.fsu_bfree], edx
		mov	edx, [eax+14h]
		mov	dword ptr [ebp+fsu.fsu_bfree+4], edx
		mov	edx, [eax+18h]
		mov	dword ptr [ebp+fsu.fsu_bavail],	edx
		mov	edx, [eax+1Ch]
		mov	dword ptr [ebp+fsu.fsu_bavail+4], edx
		mov	edx, [eax+20h]
		mov	dword ptr [ebp+fsu.fsu_bavail_top_bit_set], edx
		mov	edx, [eax+24h]
		mov	dword ptr [ebp+fsu.fsu_files], edx
		mov	edx, [eax+28h]
		mov	dword ptr [ebp+fsu.fsu_files+4], edx
		mov	edx, [eax+2Ch]
		mov	dword ptr [ebp+fsu.fsu_ffree], edx
		mov	eax, [eax+30h]
		mov	dword ptr [ebp+fsu.fsu_ffree+4], eax
		jmp	short loc_80008FF
; ---------------------------------------------------------------------------

loc_80008A3:				; CODE XREF: show_dev+10Cj
		sub	esp, 4
		lea	eax, [ebp+fsu]
		push	eax
		push	[ebp+disk]
		push	[ebp+stat_file]
		call	get_fs_usage
		add	esp, 10h
		test	eax, eax
		jz	short loc_80008FF
		sub	esp, 0Ch
		push	[ebp+stat_file]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		push	ebx
		push	offset format	; "%s"
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	ds:exit_status,	1
		jmp	loc_800143D
; ---------------------------------------------------------------------------

loc_80008FF:				; CODE XREF: show_dev+188j
					; show_dev+1AAj
		mov	eax, dword ptr [ebp+fsu.fsu_blocks]
		mov	edx, dword ptr [ebp+fsu.fsu_blocks+4]
		or	eax, edx
		test	eax, eax
		jnz	short loc_8000931
		movzx	eax, ds:show_all_fs
		xor	eax, 1
		test	al, al
		jz	short loc_8000931
		movzx	eax, ds:show_listed_fs
		xor	eax, 1
		test	al, al
		jnz	loc_800143C

loc_8000931:				; CODE XREF: show_dev+1F6j
					; show_dev+204j
		movzx	eax, ds:file_systems_processed
		xor	eax, 1
		test	al, al
		jz	short loc_800094B
		mov	ds:file_systems_processed, 1
		call	print_header

loc_800094B:				; CODE XREF: show_dev+224j
		cmp	[ebp+disk], 0
		jnz	short loc_800095E
		mov	[ebp+disk], offset asc_8002E8B ; "-"

loc_800095E:				; CODE XREF: show_dev+239j
		cmp	[ebp+fstype], 0
		jnz	short loc_8000971
		mov	[ebp+fstype], offset asc_8002E8B ; "-"

loc_8000971:				; CODE XREF: show_dev+24Cj
		movzx	eax, ds:print_type
		test	al, al
		jz	loc_8000A39
		sub	esp, 0Ch
		push	[ebp+disk]	; s
		call	strlen
		add	esp, 10h
		mov	[ebp+disk_name_len], eax
		sub	esp, 0Ch
		push	[ebp+fstype]	; s
		call	strlen
		add	esp, 10h
		mov	[ebp+fstype_len], eax
		mov	edx, [ebp+disk_name_len]
		mov	eax, [ebp+fstype_len]
		add	eax, edx
		cmp	eax, 11h
		ja	short loc_80009EF
		mov	eax, [ebp+disk_name_len]
		mov	edx, 12h
		sub	edx, eax
		mov	eax, edx
		push	[ebp+fstype]
		push	eax
		push	[ebp+disk]
		push	offset aSS	; "%s%*s  "
		call	printf
		add	esp, 10h
		jmp	loc_8000A90
; ---------------------------------------------------------------------------

loc_80009EF:				; CODE XREF: show_dev+2A6j
		movzx	eax, ds:posix_format
		xor	eax, 1
		test	al, al
		jz	short loc_8000A1B
		sub	esp, 4
		push	[ebp+fstype]
		push	[ebp+disk]
		push	offset aS18s	; "%s\n%18s  "
		call	printf
		add	esp, 10h
		jmp	short loc_8000A90
; ---------------------------------------------------------------------------

loc_8000A1B:				; CODE XREF: show_dev+2E2j
		sub	esp, 4
		push	[ebp+fstype]
		push	[ebp+disk]
		push	offset aSS_0	; "%s %s"
		call	printf
		add	esp, 10h
		jmp	short loc_8000A90
; ---------------------------------------------------------------------------

loc_8000A39:				; CODE XREF: show_dev+261j
		sub	esp, 0Ch
		push	[ebp+disk]	; s
		call	strlen
		add	esp, 10h
		cmp	eax, 14h
		jbe	short loc_8000A7A
		movzx	eax, ds:posix_format
		xor	eax, 1
		test	al, al
		jz	short loc_8000A7A
		sub	esp, 4
		push	offset locale
		push	[ebp+disk]
		push	offset aS20s	; "%s\n%20s"
		call	printf
		add	esp, 10h
		jmp	short loc_8000A90
; ---------------------------------------------------------------------------

loc_8000A7A:				; CODE XREF: show_dev+334j
					; show_dev+342j
		sub	esp, 8
		push	[ebp+disk]
		push	offset a20s	; "%-20s"
		call	printf
		add	esp, 10h

loc_8000A90:				; CODE XREF: show_dev+2D1j
					; show_dev+300j ...
		movzx	eax, ds:inode_format
		test	al, al
		jz	loc_8000BBB
		mov	[ebp+width], 7
		mov	[ebp+use_width], 5
		mov	dword ptr [ebp+output_units], 1
		mov	dword ptr [ebp+output_units+4],	0
		mov	eax, dword ptr [ebp+output_units]
		mov	edx, dword ptr [ebp+output_units+4]
		mov	dword ptr [ebp+input_units], eax
		mov	dword ptr [ebp+input_units+4], edx
		mov	eax, dword ptr [ebp+fsu.fsu_files]
		mov	edx, dword ptr [ebp+fsu.fsu_files+4]
		mov	dword ptr [ebp+total], eax
		mov	dword ptr [ebp+total+4], edx
		mov	eax, dword ptr [ebp+fsu.fsu_ffree]
		mov	edx, dword ptr [ebp+fsu.fsu_ffree+4]
		mov	dword ptr [ebp+available], eax
		mov	dword ptr [ebp+available+4], edx
		mov	[ebp+negate_available],	0
		mov	eax, dword ptr [ebp+available]
		mov	edx, dword ptr [ebp+available+4]
		mov	dword ptr [ebp+available_to_root], eax
		mov	dword ptr [ebp+available_to_root+4], edx
		sub	esp, 8
		push	dword ptr [ebp+total+4]
		push	dword ptr [ebp+total] ;	n
		call	known_value
		add	esp, 10h
		test	al, al
		jz	short loc_8000B70
		mov	ecx, dword ptr ds:grand_fsu.fsu_files
		mov	ebx, dword ptr ds:grand_fsu.fsu_files+4
		mov	eax, dword ptr [ebp+total]
		mov	edx, dword ptr [ebp+total+4]
		add	eax, ecx
		adc	edx, ebx
		mov	dword ptr ds:grand_fsu.fsu_files, eax
		mov	dword ptr ds:grand_fsu.fsu_files+4, edx

loc_8000B70:				; CODE XREF: show_dev+42Ej
		sub	esp, 8
		push	dword ptr [ebp+available+4]
		push	dword ptr [ebp+available] ; n
		call	known_value
		add	esp, 10h
		test	al, al
		jz	loc_8000E7C
		mov	ecx, dword ptr ds:grand_fsu.fsu_ffree
		mov	ebx, dword ptr ds:grand_fsu.fsu_ffree+4
		mov	eax, dword ptr [ebp+available]
		mov	edx, dword ptr [ebp+available+4]
		add	eax, ecx
		adc	edx, ebx
		mov	dword ptr ds:grand_fsu.fsu_ffree, eax
		mov	dword ptr ds:grand_fsu.fsu_ffree+4, edx
		jmp	loc_8000E7C
; ---------------------------------------------------------------------------

loc_8000BBB:				; CODE XREF: show_dev+380j
		mov	eax, ds:human_output_opts
		and	eax, 10h
		test	eax, eax
		jz	short loc_8000BEA
		mov	eax, ds:human_output_opts
		and	eax, 20h
		test	eax, eax
		jnz	short loc_8000BDA
		mov	eax, 6
		jmp	short loc_8000BDF
; ---------------------------------------------------------------------------

loc_8000BDA:				; CODE XREF: show_dev+4B8j
		mov	eax, 5

loc_8000BDF:				; CODE XREF: show_dev+4BFj
		mov	[ebp+width], eax
		jmp	loc_8000C6A
; ---------------------------------------------------------------------------

loc_8000BEA:				; CODE XREF: show_dev+4ACj
		mov	[ebp+width], 9
		movzx	eax, ds:posix_format
		test	al, al
		jz	short loc_8000C6A
		mov	[ebp+col1_adjustment], 0FFFFFFFDh
		mov	eax, dword ptr ds:output_block_size
		mov	edx, dword ptr ds:output_block_size+4
		mov	dword ptr [ebp+b], eax
		mov	dword ptr [ebp+b+4], edx
		jmp	short loc_8000C4F
; ---------------------------------------------------------------------------

loc_8000C22:				; CODE XREF: show_dev+53Dj
					; show_dev+54Fj
		add	[ebp+col1_adjustment], 1
		mov	eax, dword ptr [ebp+b]
		mov	edx, dword ptr [ebp+b+4]
		push	0
		push	0Ah
		push	edx
		push	eax
		call	__udivdi3
		add	esp, 10h
		mov	dword ptr [ebp+b], eax
		mov	dword ptr [ebp+b+4], edx

loc_8000C4F:				; CODE XREF: show_dev+507j
		cmp	dword ptr [ebp+b+4], 0
		ja	short loc_8000C22
		cmp	dword ptr [ebp+b+4], 0
		jb	short loc_8000C6A
		cmp	dword ptr [ebp+b], 9
		ja	short loc_8000C22

loc_8000C6A:				; CODE XREF: show_dev+4CCj
					; show_dev+4E4j ...
		movzx	eax, ds:posix_format
		test	al, al
		jz	short loc_8000C88
		mov	eax, ds:human_output_opts
		and	eax, 10h
		test	eax, eax
		jnz	short loc_8000C88
		mov	eax, 8
		jmp	short loc_8000C8D
; ---------------------------------------------------------------------------

loc_8000C88:				; CODE XREF: show_dev+55Aj
					; show_dev+566j
		mov	eax, 4

loc_8000C8D:				; CODE XREF: show_dev+56Dj
		mov	[ebp+use_width], eax
		mov	eax, dword ptr [ebp+fsu.fsu_blocksize]
		mov	edx, dword ptr [ebp+fsu.fsu_blocksize+4]
		mov	dword ptr [ebp+input_units], eax
		mov	dword ptr [ebp+input_units+4], edx
		mov	eax, dword ptr ds:output_block_size
		mov	edx, dword ptr ds:output_block_size+4
		mov	dword ptr [ebp+output_units], eax
		mov	dword ptr [ebp+output_units+4],	edx
		mov	eax, dword ptr [ebp+fsu.fsu_blocks]
		mov	edx, dword ptr [ebp+fsu.fsu_blocks+4]
		mov	dword ptr [ebp+total], eax
		mov	dword ptr [ebp+total+4], edx
		mov	eax, dword ptr [ebp+fsu.fsu_bavail]
		mov	edx, dword ptr [ebp+fsu.fsu_bavail+4]
		mov	dword ptr [ebp+available], eax
		mov	dword ptr [ebp+available+4], edx
		movzx	eax, [ebp+fsu.fsu_bavail_top_bit_set]
		test	al, al
		jz	short loc_8000D1F
		sub	esp, 8
		push	dword ptr [ebp+available+4]
		push	dword ptr [ebp+available] ; n
		call	known_value
		add	esp, 10h
		test	al, al
		jz	short loc_8000D1F
		mov	eax, 1
		jmp	short loc_8000D24
; ---------------------------------------------------------------------------

loc_8000D1F:				; CODE XREF: show_dev+5E2j
					; show_dev+5FDj
		mov	eax, 0

loc_8000D24:				; CODE XREF: show_dev+604j
		mov	[ebp+negate_available],	al
		and	[ebp+negate_available],	1
		mov	eax, dword ptr [ebp+fsu.fsu_bfree]
		mov	edx, dword ptr [ebp+fsu.fsu_bfree+4]
		mov	dword ptr [ebp+available_to_root], eax
		mov	dword ptr [ebp+available_to_root+4], edx
		sub	esp, 8
		push	dword ptr [ebp+total+4]
		push	dword ptr [ebp+total] ;	n
		call	known_value
		add	esp, 10h
		test	al, al
		jz	short loc_8000DAE
		mov	ecx, dword ptr ds:grand_fsu.fsu_blocks
		mov	ebx, dword ptr ds:grand_fsu.fsu_blocks+4
		mov	eax, dword ptr [ebp+input_units+4]
		imul	eax, dword ptr [ebp+total]
		mov	edx, eax
		mov	eax, dword ptr [ebp+total+4]
		imul	eax, dword ptr [ebp+input_units]
		lea	esi, [edx+eax]
		mov	eax, dword ptr [ebp+total]
		mul	dword ptr [ebp+input_units]
		add	esi, edx
		mov	edx, esi
		add	eax, ecx
		adc	edx, ebx
		mov	dword ptr ds:grand_fsu.fsu_blocks, eax
		mov	dword ptr ds:grand_fsu.fsu_blocks+4, edx

loc_8000DAE:				; CODE XREF: show_dev+649j
		sub	esp, 8
		push	dword ptr [ebp+available_to_root+4]
		push	dword ptr [ebp+available_to_root] ; n
		call	known_value
		add	esp, 10h
		test	al, al
		jz	short loc_8000E13
		mov	ecx, dword ptr ds:grand_fsu.fsu_bfree
		mov	ebx, dword ptr ds:grand_fsu.fsu_bfree+4
		mov	eax, dword ptr [ebp+input_units+4]
		imul	eax, dword ptr [ebp+available_to_root]
		mov	edx, eax
		mov	eax, dword ptr [ebp+available_to_root+4]
		imul	eax, dword ptr [ebp+input_units]
		lea	esi, [edx+eax]
		mov	eax, dword ptr [ebp+available_to_root]
		mul	dword ptr [ebp+input_units]
		add	esi, edx
		mov	edx, esi
		add	eax, ecx
		adc	edx, ebx
		mov	dword ptr ds:grand_fsu.fsu_bfree, eax
		mov	dword ptr ds:grand_fsu.fsu_bfree+4, edx

loc_8000E13:				; CODE XREF: show_dev+6AEj
		sub	esp, 8
		push	dword ptr [ebp+available+4]
		push	dword ptr [ebp+available] ; n
		call	known_value
		add	esp, 10h
		test	al, al
		jz	short loc_8000E7C
		movzx	ecx, [ebp+negate_available]
		mov	eax, dword ptr [ebp+input_units+4]
		imul	eax, dword ptr [ebp+available]
		mov	edx, eax
		mov	eax, dword ptr [ebp+available+4]
		imul	eax, dword ptr [ebp+input_units]
		lea	ebx, [edx+eax]
		mov	eax, dword ptr [ebp+available]
		mul	dword ptr [ebp+input_units]
		add	ebx, edx
		mov	edx, ebx
		sub	esp, 0Ch
		push	ecx		; src_neg
		push	edx
		push	eax		; src
		push	offset grand_fsu.fsu_bavail_top_bit_set	; dest_neg
		push	offset grand_fsu.fsu_bavail ; dest
		call	add_uint_with_neg_flag
		add	esp, 20h

loc_8000E7C:				; CODE XREF: show_dev+470j
					; show_dev+49Dj ...
		mov	dword ptr [ebp+used], 0FFFFFFFFh
		mov	dword ptr [ebp+used+4],	0FFFFFFFFh
		mov	[ebp+negate_used], 0
		sub	esp, 8
		push	dword ptr [ebp+total+4]
		push	dword ptr [ebp+total] ;	n
		call	known_value
		add	esp, 10h
		test	al, al
		jz	short loc_8000F25
		sub	esp, 8
		push	dword ptr [ebp+available_to_root+4]
		push	dword ptr [ebp+available_to_root] ; n
		call	known_value
		add	esp, 10h
		test	al, al
		jz	short loc_8000F25
		mov	eax, dword ptr [ebp+total]
		mov	edx, dword ptr [ebp+total+4]
		sub	eax, dword ptr [ebp+available_to_root]
		sbb	edx, dword ptr [ebp+available_to_root+4]
		mov	dword ptr [ebp+used], eax
		mov	dword ptr [ebp+used+4],	edx
		mov	ecx, 1
		mov	eax, dword ptr [ebp+total]
		mov	edx, dword ptr [ebp+total+4]
		cmp	edx, dword ptr [ebp+available_to_root+4]
		jb	short loc_8000F1F
		cmp	edx, dword ptr [ebp+available_to_root+4]
		ja	short loc_8000F1A
		cmp	eax, dword ptr [ebp+available_to_root]
		jb	short loc_8000F1F

loc_8000F1A:				; CODE XREF: show_dev+7F7j
		mov	ecx, 0

loc_8000F1F:				; CODE XREF: show_dev+7EFj
					; show_dev+7FFj
		mov	[ebp+negate_used], cl

loc_8000F25:				; CODE XREF: show_dev+797j
					; show_dev+7B2j
		movzx	eax, [ebp+negate_available]
		push	dword ptr [ebp+output_units+4]
		push	dword ptr [ebp+output_units] ; output_units
		push	dword ptr [ebp+input_units+4]
		push	dword ptr [ebp+input_units] ; input_units
		lea	edx, [ebp+buf]
		add	edx, 51Ah
		push	edx		; buf
		push	dword ptr [ebp+available+4]
		push	dword ptr [ebp+available] ; n
		push	eax		; negative
		call	df_readable
		add	esp, 20h
		mov	esi, eax
		movzx	eax, [ebp+negate_used]
		push	dword ptr [ebp+output_units+4]
		push	dword ptr [ebp+output_units] ; output_units
		push	dword ptr [ebp+input_units+4]
		push	dword ptr [ebp+input_units] ; input_units
		lea	edx, [ebp+buf]
		add	edx, 28Dh
		push	edx		; buf
		push	dword ptr [ebp+used+4]
		push	dword ptr [ebp+used] ; n
		push	eax		; negative
		call	df_readable
		add	esp, 20h
		mov	ebx, eax
		push	dword ptr [ebp+output_units+4]
		push	dword ptr [ebp+output_units] ; output_units
		push	dword ptr [ebp+input_units+4]
		push	dword ptr [ebp+input_units] ; input_units
		lea	eax, [ebp+buf]
		push	eax		; buf
		push	dword ptr [ebp+total+4]
		push	dword ptr [ebp+total] ;	n
		push	0		; negative
		call	df_readable
		add	esp, 20h
		mov	ecx, eax
		mov	edx, [ebp+width]
		mov	eax, [ebp+col1_adjustment]
		add	eax, edx
		sub	esp, 4
		push	esi
		push	[ebp+width]
		push	ebx
		push	[ebp+width]
		push	ecx
		push	eax
		push	offset aSSS	; " %*s	%*s %*s	"
		call	printf
		add	esp, 20h
		sub	esp, 8
		push	dword ptr [ebp+used+4]
		push	dword ptr [ebp+used] ; n
		call	known_value
		add	esp, 10h
		xor	eax, 1
		test	al, al
		jnz	loc_80013B5
		sub	esp, 8
		push	dword ptr [ebp+available+4]
		push	dword ptr [ebp+available] ; n
		call	known_value
		add	esp, 10h
		xor	eax, 1
		test	al, al
		jnz	loc_80013B5
		movzx	eax, [ebp+negate_used]
		xor	eax, 1
		test	al, al
		jz	loc_80011F5
		cmp	dword ptr [ebp+used+4],	28F5C28h
		ja	loc_80011F5
		cmp	dword ptr [ebp+used+4],	28F5C28h
		jb	short loc_8001092
		cmp	dword ptr [ebp+used], 0F5C28F5Ch
		ja	loc_80011F5

loc_8001092:				; CODE XREF: show_dev+967j
		mov	ecx, dword ptr [ebp+used]
		mov	ebx, dword ptr [ebp+used+4]
		mov	eax, dword ptr [ebp+available]
		mov	edx, dword ptr [ebp+available+4]
		add	eax, ecx
		adc	edx, ebx
		or	eax, edx
		test	eax, eax
		jz	loc_80011F5
		mov	ecx, dword ptr [ebp+used]
		mov	ebx, dword ptr [ebp+used+4]
		mov	eax, dword ptr [ebp+available]
		mov	edx, dword ptr [ebp+available+4]
		add	eax, ecx
		adc	edx, ebx
		mov	ecx, 1
		cmp	edx, dword ptr [ebp+used+4]
		jb	short loc_80010F6
		cmp	edx, dword ptr [ebp+used+4]
		ja	short loc_80010F1
		cmp	eax, dword ptr [ebp+used]
		jb	short loc_80010F6

loc_80010F1:				; CODE XREF: show_dev+9CEj
		mov	ecx, 0

loc_80010F6:				; CODE XREF: show_dev+9C6j
					; show_dev+9D6j
		movzx	edx, cl
		movzx	eax, [ebp+negate_available]
		cmp	edx, eax
		jnz	loc_80011F5
		mov	eax, dword ptr [ebp+used+4]
		imul	edx, eax, 64h
		mov	eax, dword ptr [ebp+used]
		imul	eax, 0
		lea	ecx, [edx+eax]
		mov	eax, 64h
		mul	dword ptr [ebp+used]
		add	ecx, edx
		mov	edx, ecx
		mov	dword ptr [ebp+u100], eax
		mov	dword ptr [ebp+u100+4],	edx
		mov	dword ptr [ebp+u100], eax
		mov	dword ptr [ebp+u100+4],	edx
		mov	ecx, dword ptr [ebp+used]
		mov	ebx, dword ptr [ebp+used+4]
		mov	eax, dword ptr [ebp+available]
		mov	edx, dword ptr [ebp+available+4]
		add	eax, ecx
		adc	edx, ebx
		mov	dword ptr [ebp+nonroot_total], eax
		mov	dword ptr [ebp+nonroot_total+4], edx
		push	dword ptr [ebp+nonroot_total+4]
		push	dword ptr [ebp+nonroot_total]
		push	dword ptr [ebp+u100+4]
		push	dword ptr [ebp+u100]
		call	__udivdi3
		add	esp, 10h
		mov	ebx, eax
		mov	esi, edx
		mov	eax, dword ptr [ebp+u100]
		mov	edx, dword ptr [ebp+u100+4]
		push	dword ptr [ebp+nonroot_total+4]
		push	dword ptr [ebp+nonroot_total]
		push	edx
		push	eax
		call	__umoddi3
		add	esp, 10h
		or	eax, edx
		test	eax, eax
		setnz	al
		mov	ecx, eax
		movzx	eax, cl
		mov	edx, 0
		add	ebx, eax
		adc	esi, edx
		mov	dword ptr [ebp+var_8A8], ebx
		mov	dword ptr [ebp+var_8A8+4], esi
		fild	[ebp+var_8A8]
		cmp	dword ptr [ebp+var_8A8+4], 0
		jns	short loc_80011EA
		fld	ds:tbyte_8003580
		faddp	st(1), st

loc_80011EA:				; CODE XREF: show_dev+AC7j
		fstp	[ebp+pct]
		jmp	loc_80013B5
; ---------------------------------------------------------------------------

loc_80011F5:				; CODE XREF: show_dev+947j
					; show_dev+957j ...
		cmp	[ebp+negate_used], 0
		jz	short loc_800123F
		mov	eax, dword ptr [ebp+used]
		mov	edx, dword ptr [ebp+used+4]
		neg	eax
		adc	edx, 0
		neg	edx
		mov	dword ptr [ebp+var_8A8], eax
		mov	dword ptr [ebp+var_8A8+4], edx
		fild	[ebp+var_8A8]
		test	edx, edx
		jns	short loc_800122F
		fld	ds:tbyte_8003580
		faddp	st(1), st

loc_800122F:				; CODE XREF: show_dev+B0Cj
		fstp	[ebp+var_8A0]
		fld	[ebp+var_8A0]
		fchs
		jmp	short loc_8001262
; ---------------------------------------------------------------------------

loc_800123F:				; CODE XREF: show_dev+AE3j
		fild	[ebp+used]
		cmp	dword ptr [ebp+used+4],	0
		jns	short loc_8001256
		fld	ds:tbyte_8003580
		faddp	st(1), st

loc_8001256:				; CODE XREF: show_dev+B33j
		fstp	[ebp+var_8A0]
		fld	[ebp+var_8A0]

loc_8001262:				; CODE XREF: show_dev+B24j
		fstp	[ebp+u]
		cmp	[ebp+negate_available],	0
		jz	short loc_80012B2
		mov	eax, dword ptr [ebp+available]
		mov	edx, dword ptr [ebp+available+4]
		neg	eax
		adc	edx, 0
		neg	edx
		mov	dword ptr [ebp+var_8A8], eax
		mov	dword ptr [ebp+var_8A8+4], edx
		fild	[ebp+var_8A8]
		test	edx, edx
		jns	short loc_80012A2
		fld	ds:tbyte_8003580
		faddp	st(1), st

loc_80012A2:				; CODE XREF: show_dev+B7Fj
		fstp	[ebp+var_8A0]
		fld	[ebp+var_8A0]
		fchs
		jmp	short loc_80012D5
; ---------------------------------------------------------------------------

loc_80012B2:				; CODE XREF: show_dev+B56j
		fild	[ebp+available]
		cmp	dword ptr [ebp+available+4], 0
		jns	short loc_80012C9
		fld	ds:tbyte_8003580
		faddp	st(1), st

loc_80012C9:				; CODE XREF: show_dev+BA6j
		fstp	[ebp+var_8A0]
		fld	[ebp+var_8A0]

loc_80012D5:				; CODE XREF: show_dev+B97j
		fstp	[ebp+a]
		fld	[ebp+u]
		fadd	[ebp+a]
		fstp	[ebp+nonroot_total_0]
		fld	[ebp+nonroot_total_0]
		fldz
		fucomip	st, st(1)
		fstp	st
		jp	short loc_800130D
		fld	[ebp+nonroot_total_0]
		fldz
		fucomip	st, st(1)
		fstp	st
		jz	loc_80013B5

loc_800130D:				; CODE XREF: show_dev+BE0j
		fld	[ebp+u]
		fld	ds:dbl_8003590
		fmulp	st(1), st
		fdiv	[ebp+nonroot_total_0]
		fstp	[ebp+pct]
		fld	[ebp+pct]
		fnstcw	[ebp+var_896]
		movzx	eax, [ebp+var_896]
		mov	ah, 0Ch
		mov	[ebp+var_898], ax
		fldcw	[ebp+var_898]
		fistp	[ebp+lipct]
		fldcw	[ebp+var_896]
		fild	[ebp+lipct]
		fstp	[ebp+ipct]
		fld	[ebp+ipct]
		fld1
		fsubp	st(1), st
		fld	[ebp+pct]
		fucomip	st, st(1)
		fstp	st
		jbe	short loc_80013B5
		fld	[ebp+ipct]
		fld1
		faddp	st(1), st
		fld	[ebp+pct]
		fxch	st(1)
		fucomip	st, st(1)
		fstp	st
		jb	short loc_80013B5
		fld	[ebp+pct]
		fld	[ebp+ipct]
		fxch	st(1)
		fucomip	st, st(1)
		fstp	st
		jbe	short loc_80013A7
		fld1
		jmp	short loc_80013A9
; ---------------------------------------------------------------------------

loc_80013A7:				; CODE XREF: show_dev+C88j
		fldz

loc_80013A9:				; CODE XREF: show_dev+C8Cj
		fadd	[ebp+ipct]
		fstp	[ebp+pct]

loc_80013B5:				; CODE XREF: show_dev+913j
					; show_dev+935j ...
		fld	[ebp+pct]
		fldz
		fxch	st(1)
		fucomip	st, st(1)
		fstp	st
		jb	short loc_80013EA
		mov	eax, [ebp+use_width]
		sub	eax, 1
		push	dword ptr [ebp+pct+4]
		push	dword ptr [ebp+pct]
		push	eax
		push	offset a_0f	; "%*.0f%%"
		call	printf
		add	esp, 10h
		jmp	short loc_8001405
; ---------------------------------------------------------------------------

loc_80013EA:				; CODE XREF: show_dev+CAAj
		sub	esp, 4
		push	offset asc_8002ECD ; "-	"
		push	[ebp+use_width]
		push	offset aS_0	; "%*s"
		call	printf
		add	esp, 10h

loc_8001405:				; CODE XREF: show_dev+CCFj
		cmp	[ebp+mount_point], 0
		jz	short loc_8001424
		sub	esp, 8
		push	[ebp+mount_point]
		push	offset aS_1	; " %s"
		call	printf
		add	esp, 10h

loc_8001424:				; CODE XREF: show_dev+CF3j
		sub	esp, 0Ch
		push	0Ah		; c
		call	putchar_unlocked
		add	esp, 10h
		jmp	short loc_800143D
; ---------------------------------------------------------------------------

loc_8001433:				; CODE XREF: show_dev+7Bj
		nop
		jmp	short loc_800143D
; ---------------------------------------------------------------------------

loc_8001436:				; CODE XREF: show_dev+A4j
		nop
		jmp	short loc_800143D
; ---------------------------------------------------------------------------

loc_8001439:				; CODE XREF: show_dev+C0j show_dev+D9j
		nop
		jmp	short loc_800143D
; ---------------------------------------------------------------------------

loc_800143C:				; CODE XREF: show_dev+212j
		nop

loc_800143D:				; CODE XREF: show_dev+1E1j
					; show_dev+D18j ...
		mov	eax, [ebp+var_C]
		xor	eax, large gs:14h
		jz	short loc_800144E
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_800144E:				; CODE XREF: show_dev+D2Ej
		lea	esp, [ebp-8]
		pop	ebx
		pop	esi
		pop	ebp
		retn
show_dev	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; char *__cdecl	find_mount_point(const char *file, const stat *file_stat)
find_mount_point proc near		; CODE XREF: show_point+4A6p

file_stat	= dword	ptr -110h
file		= dword	ptr -10Ch
mp		= dword	ptr -100h
xdir		= dword	ptr -0FCh
__old		= dword	ptr -0F8h
__len		= dword	ptr -0F4h
__new		= dword	ptr -0F0h
dir		= dword	ptr -0ECh
save_errno	= dword	ptr -0E8h
cwd		= saved_cwd ptr	-0E4h
last_stat	= stat ptr -0DCh
st		= stat ptr -7Ch
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 10Ch
		mov	eax, [ebp+arg_0]
		mov	[ebp+file], eax
		mov	eax, [ebp+arg_4]
		mov	[ebp+file_stat], eax
		mov	eax, large gs:14h
		mov	[ebp+var_1C], eax
		xor	eax, eax
		mov	[ebp+mp], 0
		sub	esp, 0Ch
		lea	eax, [ebp+cwd]
		push	eax
		call	save_cwd
		add	esp, 10h
		test	eax, eax
		jz	short loc_80014D0
		sub	esp, 0Ch
		push	offset aCannotGetCurre ; "cannot get current directory"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		sub	esp, 4
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	eax, 0
		jmp	loc_800182A
; ---------------------------------------------------------------------------

loc_80014D0:				; CODE XREF: find_mount_point+47j
		mov	eax, [ebp+file_stat]
		mov	eax, [eax+10h]
		and	eax, 0F000h
		cmp	eax, 4000h
		jnz	short loc_800155C
		mov	edx, [ebp+file_stat]
		lea	eax, [ebp+last_stat]
		mov	ebx, edx
		mov	edx, 18h
		mov	edi, eax
		mov	esi, ebx
		mov	ecx, edx
		rep movsd
		sub	esp, 0Ch
		push	[ebp+file]	; path
		call	chdir
		add	esp, 10h
		test	eax, eax
		jns	loc_80016B3
		sub	esp, 0Ch
		push	[ebp+file]
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aCannotChangeTo ; "cannot change	to directory %s"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		push	esi
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	eax, 0
		jmp	loc_800182A
; ---------------------------------------------------------------------------

loc_800155C:				; CODE XREF: find_mount_point+8Ej
		sub	esp, 0Ch
		push	[ebp+file]
		call	dir_name
		add	esp, 10h
		mov	[ebp+xdir], eax
		mov	eax, [ebp+xdir]
		mov	[ebp+__old], eax
		sub	esp, 0Ch
		push	[ebp+__old]	; s
		call	strlen
		add	esp, 10h
		add	eax, 1
		mov	[ebp+__len], eax
		mov	eax, [ebp+__len]
		lea	edx, [eax+0Fh]
		mov	eax, 10h
		sub	eax, 1
		add	eax, edx
		mov	edi, 10h
		mov	edx, 0
		div	edi
		imul	eax, 10h
		sub	esp, eax
		mov	eax, esp
		add	eax, 0Fh
		shr	eax, 4
		shl	eax, 4
		mov	[ebp+__new], eax
		sub	esp, 4
		push	[ebp+__len]	; n
		push	[ebp+__old]	; src
		push	[ebp+__new]	; dest
		call	memcpy
		add	esp, 10h
		mov	[ebp+dir], eax
		sub	esp, 0Ch
		push	[ebp+xdir]	; ptr
		call	free
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+dir]	; path
		call	chdir
		add	esp, 10h
		test	eax, eax
		jns	short loc_800165A
		sub	esp, 0Ch
		push	[ebp+dir]
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aCannotChangeTo ; "cannot change	to directory %s"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		push	esi
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	eax, 0
		jmp	loc_800182A
; ---------------------------------------------------------------------------

loc_800165A:				; CODE XREF: find_mount_point+1C0j
		sub	esp, 8
		lea	eax, [ebp+last_stat]
		push	eax
		push	offset a_	; "."
		call	stat64
		add	esp, 10h
		test	eax, eax
		jns	short loc_80016B3
		sub	esp, 0Ch
		push	[ebp+dir]
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aCannotStatCurr ; "cannot stat current directory	(now %s)"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		push	esi
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		jmp	done
; ---------------------------------------------------------------------------

loc_80016B3:				; CODE XREF: find_mount_point+BEj
					; find_mount_point+21Ej ...
		sub	esp, 8
		lea	eax, [ebp+st]
		push	eax
		push	offset path	; ".."
		call	stat64
		add	esp, 10h
		test	eax, eax
		jns	short loc_8001708
		sub	esp, 0Ch
		push	offset path	; ".."
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aCannotStatS ; "cannot stat %s"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		push	esi
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		jmp	done
; ---------------------------------------------------------------------------

loc_8001708:				; CODE XREF: find_mount_point+274j
		mov	ecx, dword ptr [ebp+st.st_dev]
		mov	ebx, dword ptr [ebp+st.st_dev+4]
		mov	eax, dword ptr [ebp+last_stat.st_dev]
		mov	edx, dword ptr [ebp+last_stat.st_dev+4]
		mov	esi, ebx
		xor	esi, edx
		xor	eax, ecx
		or	eax, esi
		test	eax, eax
		jnz	loc_80017AD
		mov	ecx, dword ptr [ebp+st.st_ino]
		mov	ebx, dword ptr [ebp+st.st_ino+4]
		mov	eax, dword ptr [ebp+last_stat.st_ino]
		mov	edx, dword ptr [ebp+last_stat.st_ino+4]
		mov	esi, ebx
		xor	esi, edx
		xor	eax, ecx
		or	eax, esi
		test	eax, eax
		jz	short loc_80017AD
		sub	esp, 0Ch
		push	offset path	; ".."
		call	chdir
		add	esp, 10h
		test	eax, eax
		jns	short loc_8001794
		sub	esp, 0Ch
		push	offset path	; ".."
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aCannotChangeTo ; "cannot change	to directory %s"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		push	esi
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		nop
		jmp	short done
; ---------------------------------------------------------------------------

loc_8001794:				; CODE XREF: find_mount_point+302j
		lea	eax, [ebp+last_stat]
		lea	edx, [ebp+st]
		mov	ecx, 18h
		mov	edi, eax
		mov	esi, edx
		rep movsd
		jmp	loc_80016B3
; ---------------------------------------------------------------------------

loc_80017AD:				; CODE XREF: find_mount_point+2CFj
					; find_mount_point+2EEj
		call	xgetcwd
		mov	[ebp+mp], eax

done:					; CODE XREF: find_mount_point+259j
					; find_mount_point+2AEj ...
		call	__errno_location
		mov	eax, [eax]
		mov	[ebp+save_errno], eax
		sub	esp, 0Ch
		lea	eax, [ebp+cwd]
		push	eax
		call	restore_cwd
		add	esp, 10h
		test	eax, eax
		jz	short loc_8001803
		sub	esp, 0Ch
		push	offset aFailedToReturn ; "failed to return to initial working dir"...
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		sub	esp, 4
		push	ebx		; format
		push	eax		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_8001803:				; CODE XREF: find_mount_point+384j
		sub	esp, 0Ch
		lea	eax, [ebp+cwd]
		push	eax
		call	free_cwd
		add	esp, 10h
		call	__errno_location
		mov	edx, eax
		mov	eax, [ebp+save_errno]
		mov	[edx], eax
		mov	eax, [ebp+mp]

loc_800182A:				; CODE XREF: find_mount_point+76j
					; find_mount_point+102j ...
		mov	edi, [ebp+var_1C]
		xor	edi, large gs:14h
		jz	short loc_800183B
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_800183B:				; CODE XREF: find_mount_point+3DFj
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
find_mount_point endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; _Bool	__cdecl	show_disk(const	char *disk)
show_disk	proc near		; CODE XREF: show_entry+30p

me		= dword	ptr -10h
best_match	= dword	ptr -0Ch
disk		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	[ebp+best_match], 0
		mov	eax, ds:mount_list
		mov	[ebp+me], eax
		jmp	short loc_8001883
; ---------------------------------------------------------------------------

loc_800185C:				; CODE XREF: show_disk+44j
		mov	eax, [ebp+me]
		mov	eax, [eax]
		sub	esp, 8
		push	eax		; s2
		push	[ebp+disk]	; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		jnz	short loc_800187A
		mov	eax, [ebp+me]
		mov	[ebp+best_match], eax

loc_800187A:				; CODE XREF: show_disk+2Fj
		mov	eax, [ebp+me]
		mov	eax, [eax+18h]
		mov	[ebp+me], eax

loc_8001883:				; CODE XREF: show_disk+17j
		cmp	[ebp+me], 0
		jnz	short loc_800185C
		cmp	[ebp+best_match], 0
		jz	short loc_80018DF
		mov	eax, [ebp+best_match]
		movzx	eax, byte ptr [eax+14h]
		and	eax, 2
		test	al, al
		setnz	al
		movzx	esi, al
		mov	eax, [ebp+best_match]
		movzx	eax, byte ptr [eax+14h]
		and	eax, 1
		test	al, al
		setnz	al
		movzx	ebx, al
		mov	eax, [ebp+best_match]
		mov	ecx, [eax+8]
		mov	eax, [ebp+best_match]
		mov	edx, [eax+4]
		mov	eax, [ebp+best_match]
		mov	eax, [eax]
		sub	esp, 4
		push	0		; force_fsu
		push	esi		; me_remote
		push	ebx		; me_dummy
		push	ecx		; fstype
		push	0		; stat_file
		push	edx		; mount_point
		push	eax		; disk
		call	show_dev
		add	esp, 20h
		mov	eax, 1
		jmp	short loc_80018E4
; ---------------------------------------------------------------------------

loc_80018DF:				; CODE XREF: show_disk+4Aj
		mov	eax, 0

loc_80018E4:				; CODE XREF: show_disk+9Aj
		lea	esp, [ebp-8]
		pop	ebx
		pop	esi
		pop	ebp
		retn
show_disk	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl show_point(const	char *point, const stat	*statp)
show_point	proc near		; CODE XREF: show_entry+45p

statp		= dword	ptr -90h
point		= dword	ptr -8Ch
me		= dword	ptr -88h
best_match	= dword	ptr -84h
best_match_len	= dword	ptr -80h
resolved	= dword	ptr -7Ch
resolved_len	= dword	ptr -78h
len		= dword	ptr -74h
mp		= dword	ptr -70h
disk_stats	= stat ptr -6Ch
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 90h
		mov	eax, [ebp+arg_0]
		mov	[ebp+point], eax
		mov	eax, [ebp+arg_4]
		mov	[ebp+statp], eax
		mov	eax, large gs:14h
		mov	[ebp+var_C], eax
		xor	eax, eax
		mov	[ebp+best_match], 0
		mov	eax, [ebp+point]
		movzx	eax, byte ptr [eax]
		cmp	al, 2Fh
		jnz	loc_80019CE
		mov	eax, ds:mount_list
		mov	[ebp+me], eax
		jmp	loc_80019C1
; ---------------------------------------------------------------------------

loc_800193E:				; CODE XREF: show_point+DDj
		mov	eax, [ebp+me]
		mov	eax, [eax+4]
		sub	esp, 8
		push	[ebp+point]	; s2
		push	eax		; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		jnz	short loc_80019B2
		mov	eax, [ebp+me]
		mov	eax, [eax+8]
		sub	esp, 8
		push	offset aLofs	; "lofs"
		push	eax		; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_80019B2
		cmp	[ebp+best_match], 0
		jz	short loc_80019A6
		mov	eax, [ebp+best_match]
		movzx	eax, byte ptr [eax+14h]
		and	eax, 1
		test	al, al
		jnz	short loc_80019A6
		mov	eax, [ebp+me]
		movzx	eax, byte ptr [eax+14h]
		and	eax, 1
		test	al, al
		jnz	short loc_80019B2

loc_80019A6:				; CODE XREF: show_point+97j
					; show_point+A8j
		mov	eax, [ebp+me]
		mov	[ebp+best_match], eax

loc_80019B2:				; CODE XREF: show_point+70j
					; show_point+8Ej ...
		mov	eax, [ebp+me]
		mov	eax, [eax+18h]
		mov	[ebp+me], eax

loc_80019C1:				; CODE XREF: show_point+4Ej
		cmp	[ebp+me], 0
		jnz	loc_800193E

loc_80019CE:				; CODE XREF: show_point+3Dj
		cmp	[ebp+best_match], 0
		jnz	loc_8001B69
		sub	esp, 0Ch
		push	[ebp+point]
		call	canonicalize_file_name
		add	esp, 10h
		mov	[ebp+resolved],	eax
		cmp	[ebp+resolved],	0
		jz	loc_8001B0E
		mov	eax, [ebp+resolved]
		movzx	eax, byte ptr [eax]
		cmp	al, 2Fh
		jnz	loc_8001B0E
		sub	esp, 0Ch
		push	[ebp+resolved]	; s
		call	strlen
		add	esp, 10h
		mov	[ebp+resolved_len], eax
		mov	[ebp+best_match_len], 0
		mov	eax, ds:mount_list
		mov	[ebp+me], eax
		jmp	loc_8001B01
; ---------------------------------------------------------------------------

loc_8001A2F:				; CODE XREF: show_point+21Dj
		mov	eax, [ebp+me]
		mov	eax, [eax+8]
		sub	esp, 8
		push	offset aLofs	; "lofs"
		push	eax		; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		jz	loc_8001AF2
		cmp	[ebp+best_match], 0
		jz	short loc_8001A7C
		mov	eax, [ebp+best_match]
		movzx	eax, byte ptr [eax+14h]
		and	eax, 1
		test	al, al
		jnz	short loc_8001A7C
		mov	eax, [ebp+me]
		movzx	eax, byte ptr [eax+14h]
		and	eax, 1
		test	al, al
		jnz	short loc_8001AF2

loc_8001A7C:				; CODE XREF: show_point+16Dj
					; show_point+17Ej
		mov	eax, [ebp+me]
		mov	eax, [eax+4]
		sub	esp, 0Ch
		push	eax		; s
		call	strlen
		add	esp, 10h
		mov	[ebp+len], eax
		mov	eax, [ebp+best_match_len]
		cmp	eax, [ebp+len]
		ja	short loc_8001AF2
		mov	eax, [ebp+len]
		cmp	eax, [ebp+resolved_len]
		ja	short loc_8001AF2
		cmp	[ebp+len], 1
		jz	short loc_8001AE0
		mov	eax, [ebp+len]
		cmp	eax, [ebp+resolved_len]
		jz	short loc_8001AC1
		mov	edx, [ebp+resolved]
		mov	eax, [ebp+len]
		add	eax, edx
		movzx	eax, byte ptr [eax]
		cmp	al, 2Fh
		jnz	short loc_8001AF2

loc_8001AC1:				; CODE XREF: show_point+1C5j
		mov	eax, [ebp+me]
		mov	eax, [eax+4]
		sub	esp, 4
		push	[ebp+len]	; n
		push	[ebp+resolved]	; s2
		push	eax		; s1
		call	strncmp
		add	esp, 10h
		test	eax, eax
		jnz	short loc_8001AF2

loc_8001AE0:				; CODE XREF: show_point+1BDj
		mov	eax, [ebp+me]
		mov	[ebp+best_match], eax
		mov	eax, [ebp+len]
		mov	[ebp+best_match_len], eax

loc_8001AF2:				; CODE XREF: show_point+160j
					; show_point+18Fj ...
		mov	eax, [ebp+me]
		mov	eax, [eax+18h]
		mov	[ebp+me], eax

loc_8001B01:				; CODE XREF: show_point+13Fj
		cmp	[ebp+me], 0
		jnz	loc_8001A2F

loc_8001B0E:				; CODE XREF: show_point+108j
					; show_point+116j
		sub	esp, 0Ch
		push	[ebp+resolved]	; ptr
		call	free
		add	esp, 10h
		cmp	[ebp+best_match], 0
		jz	short loc_8001B69
		mov	eax, [ebp+best_match]
		mov	eax, [eax+4]
		sub	esp, 8
		lea	edx, [ebp+disk_stats]
		push	edx
		push	eax
		call	stat64
		add	esp, 10h
		test	eax, eax
		jnz	short loc_8001B5F
		mov	ecx, dword ptr [ebp+disk_stats.st_dev]
		mov	ebx, dword ptr [ebp+disk_stats.st_dev+4]
		mov	eax, [ebp+statp]
		mov	edx, [eax+4]
		mov	eax, [eax]
		mov	esi, ebx
		xor	esi, edx
		xor	eax, ecx
		or	eax, esi
		test	eax, eax
		jz	short loc_8001B69

loc_8001B5F:				; CODE XREF: show_point+255j
		mov	[ebp+best_match], 0

loc_8001B69:				; CODE XREF: show_point+EAj
					; show_point+238j ...
		cmp	[ebp+best_match], 0
		jnz	loc_8001D1B
		mov	eax, ds:mount_list
		mov	[ebp+me], eax
		jmp	loc_8001D0E
; ---------------------------------------------------------------------------

loc_8001B86:				; CODE XREF: show_point+42Aj
		mov	eax, [ebp+me]
		mov	edx, [eax+10h]
		mov	eax, [eax+0Ch]
		mov	ecx, edx
		xor	ecx, 0FFFFFFFFh
		xor	eax, 0FFFFFFFFh
		or	eax, ecx
		test	eax, eax
		jnz	loc_8001C2E
		mov	eax, [ebp+me]
		mov	eax, [eax+4]
		sub	esp, 8
		lea	edx, [ebp+disk_stats]
		push	edx
		push	eax
		call	stat64
		add	esp, 10h
		test	eax, eax
		jnz	short loc_8001BD5
		mov	eax, dword ptr [ebp+disk_stats.st_dev]
		mov	edx, dword ptr [ebp+disk_stats.st_dev+4]
		mov	ecx, [ebp+me]
		mov	[ecx+0Ch], eax
		mov	[ecx+10h], edx
		jmp	short loc_8001C2E
; ---------------------------------------------------------------------------

loc_8001BD5:				; CODE XREF: show_point+2D4j
		call	__errno_location
		mov	eax, [eax]
		cmp	eax, 5
		jnz	short loc_8001C1A
		mov	eax, [ebp+me]
		mov	eax, [eax+4]
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		push	ebx
		push	offset format	; "%s"
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	ds:exit_status,	1

loc_8001C1A:				; CODE XREF: show_point+2F4j
		mov	eax, [ebp+me]
		mov	dword ptr [eax+0Ch], 0FFFFFFFEh
		mov	dword ptr [eax+10h], 0FFFFFFFFh

loc_8001C2E:				; CODE XREF: show_point+2B3j
					; show_point+2E8j
		mov	eax, [ebp+statp]
		mov	ecx, [eax]
		mov	ebx, [eax+4]
		mov	eax, [ebp+me]
		mov	edx, [eax+10h]
		mov	eax, [eax+0Ch]
		mov	esi, ebx
		xor	esi, edx
		xor	eax, ecx
		or	eax, esi
		test	eax, eax
		jnz	loc_8001CFF
		mov	eax, [ebp+me]
		mov	eax, [eax+8]
		sub	esp, 8
		push	offset aLofs	; "lofs"
		push	eax		; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		jz	loc_8001CFF
		cmp	[ebp+best_match], 0
		jz	short loc_8001CA2
		mov	eax, [ebp+best_match]
		movzx	eax, byte ptr [eax+14h]
		and	eax, 1
		test	al, al
		jnz	short loc_8001CA2
		mov	eax, [ebp+me]
		movzx	eax, byte ptr [eax+14h]
		and	eax, 1
		test	al, al
		jnz	short loc_8001CFF

loc_8001CA2:				; CODE XREF: show_point+393j
					; show_point+3A4j
		mov	eax, [ebp+me]
		mov	eax, [eax+4]
		sub	esp, 8
		lea	edx, [ebp+disk_stats]
		push	edx
		push	eax
		call	stat64
		add	esp, 10h
		test	eax, eax
		jnz	short loc_8001CDD
		mov	ecx, dword ptr [ebp+disk_stats.st_dev]
		mov	ebx, dword ptr [ebp+disk_stats.st_dev+4]
		mov	eax, [ebp+me]
		mov	edx, [eax+10h]
		mov	eax, [eax+0Ch]
		mov	esi, ebx
		xor	esi, edx
		xor	eax, ecx
		or	eax, esi
		test	eax, eax
		jz	short loc_8001CF3

loc_8001CDD:				; CODE XREF: show_point+3D2j
		mov	eax, [ebp+me]
		mov	dword ptr [eax+0Ch], 0FFFFFFFEh
		mov	dword ptr [eax+10h], 0FFFFFFFFh
		jmp	short loc_8001CFF
; ---------------------------------------------------------------------------

loc_8001CF3:				; CODE XREF: show_point+3F0j
		mov	eax, [ebp+me]
		mov	[ebp+best_match], eax

loc_8001CFF:				; CODE XREF: show_point+364j
					; show_point+386j ...
		mov	eax, [ebp+me]
		mov	eax, [eax+18h]
		mov	[ebp+me], eax

loc_8001D0E:				; CODE XREF: show_point+296j
		cmp	[ebp+me], 0
		jnz	loc_8001B86

loc_8001D1B:				; CODE XREF: show_point+285j
		cmp	[ebp+best_match], 0
		jz	short loc_8001D82
		mov	eax, [ebp+best_match]
		movzx	eax, byte ptr [eax+14h]
		and	eax, 2
		test	al, al
		setnz	al
		movzx	esi, al
		mov	eax, [ebp+best_match]
		movzx	eax, byte ptr [eax+14h]
		and	eax, 1
		test	al, al
		setnz	al
		movzx	ebx, al
		mov	eax, [ebp+best_match]
		mov	ecx, [eax+8]
		mov	eax, [ebp+best_match]
		mov	edx, [eax+4]
		mov	eax, [ebp+best_match]
		mov	eax, [eax]
		sub	esp, 4
		push	0		; force_fsu
		push	esi		; me_remote
		push	ebx		; me_dummy
		push	ecx		; fstype
		push	[ebp+point]	; stat_file
		push	edx		; mount_point
		push	eax		; disk
		call	show_dev
		add	esp, 20h
		jmp	short loc_8001DCA
; ---------------------------------------------------------------------------

loc_8001D82:				; CODE XREF: show_point+437j
		sub	esp, 8
		push	[ebp+statp]	; file_stat
		push	[ebp+point]	; file
		call	find_mount_point
		add	esp, 10h
		mov	[ebp+mp], eax
		cmp	[ebp+mp], 0
		jz	short loc_8001DCA
		sub	esp, 4
		push	0		; force_fsu
		push	0		; me_remote
		push	0		; me_dummy
		push	0		; fstype
		push	0		; stat_file
		push	[ebp+mp]	; mount_point
		push	0		; disk
		call	show_dev
		add	esp, 20h
		sub	esp, 0Ch
		push	[ebp+mp]	; ptr
		call	free
		add	esp, 10h

loc_8001DCA:				; CODE XREF: show_point+495j
					; show_point+4B5j
		nop
		mov	eax, [ebp+var_C]
		xor	eax, large gs:14h
		jz	short loc_8001DDC
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_8001DDC:				; CODE XREF: show_point+4EAj
		lea	esp, [ebp-8]
		pop	ebx
		pop	esi
		pop	ebp
		retn
show_point	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl show_entry(const	char *name, const stat *statp)
show_entry	proc near		; CODE XREF: main+779p

name		= dword	ptr  8
statp		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	eax, [ebp+statp]
		mov	eax, [eax+10h]
		and	eax, 0F000h
		cmp	eax, 6000h
		jz	short loc_8001E0D
		mov	eax, [ebp+statp]
		mov	eax, [eax+10h]
		and	eax, 0F000h
		cmp	eax, 2000h
		jnz	short loc_8001E1F

loc_8001E0D:				; CODE XREF: show_entry+16j
		sub	esp, 0Ch
		push	[ebp+name]	; disk
		call	show_disk
		add	esp, 10h
		test	al, al
		jnz	short loc_8001E32

loc_8001E1F:				; CODE XREF: show_entry+28j
		sub	esp, 8
		push	[ebp+statp]	; statp
		push	[ebp+name]	; point
		call	show_point
		add	esp, 10h
		jmp	short locret_8001E33
; ---------------------------------------------------------------------------

loc_8001E32:				; CODE XREF: show_entry+3Aj
		nop

locret_8001E33:				; CODE XREF: show_entry+4Dj
		leave
		retn
show_entry	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void show_all_entries()
show_all_entries proc near		; CODE XREF: main:loc_8002819p

me		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	eax, ds:mount_list
		mov	[ebp+me], eax
		jmp	short loc_8001E99
; ---------------------------------------------------------------------------

loc_8001E47:				; CODE XREF: show_all_entries+68j
		mov	eax, [ebp+me]
		movzx	eax, byte ptr [eax+14h]
		and	eax, 2
		test	al, al
		setnz	al
		movzx	esi, al
		mov	eax, [ebp+me]
		movzx	eax, byte ptr [eax+14h]
		and	eax, 1
		test	al, al
		setnz	al
		movzx	ebx, al
		mov	eax, [ebp+me]
		mov	ecx, [eax+8]
		mov	eax, [ebp+me]
		mov	edx, [eax+4]
		mov	eax, [ebp+me]
		mov	eax, [eax]
		sub	esp, 4
		push	0		; force_fsu
		push	esi		; me_remote
		push	ebx		; me_dummy
		push	ecx		; fstype
		push	0		; stat_file
		push	edx		; mount_point
		push	eax		; disk
		call	show_dev
		add	esp, 20h
		mov	eax, [ebp+me]
		mov	eax, [eax+18h]
		mov	[ebp+me], eax

loc_8001E99:				; CODE XREF: show_all_entries+10j
		cmp	[ebp+me], 0
		jnz	short loc_8001E47
		nop
		lea	esp, [ebp-8]
		pop	ebx
		pop	esi
		pop	ebp
		retn
show_all_entries endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl add_fs_type(const char *fstype)
add_fs_type	proc near		; CODE XREF: main+362p

fsp		= dword	ptr -0Ch
fstype		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		sub	esp, 0Ch
		push	8		; size_t
		call	xmalloc
		add	esp, 10h
		mov	[ebp+fsp], eax
		mov	eax, [ebp+fsp]
		mov	edx, [ebp+fstype]
		mov	[eax], edx
		mov	edx, ds:fs_select_list
		mov	eax, [ebp+fsp]
		mov	[eax+4], edx
		mov	eax, [ebp+fsp]
		mov	ds:fs_select_list, eax
		nop
		leave
		retn
add_fs_type	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl add_excluded_fs_type(const char *fstype)
add_excluded_fs_type proc near		; CODE XREF: main+378p

fsp		= dword	ptr -0Ch
fstype		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		sub	esp, 0Ch
		push	8		; size_t
		call	xmalloc
		add	esp, 10h
		mov	[ebp+fsp], eax
		mov	eax, [ebp+fsp]
		mov	edx, [ebp+fstype]
		mov	[eax], edx
		mov	edx, ds:fs_exclude_list
		mov	eax, [ebp+fsp]
		mov	[eax+4], edx
		mov	eax, [ebp+fsp]
		mov	ds:fs_exclude_list, eax
		nop
		leave
		retn
add_excluded_fs_type endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; void __cdecl usage(int status)
		public usage
usage		proc near		; CODE XREF: main+390p	main+3E7p

status		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 4
		cmp	[ebp+status], 0
		jz	short loc_8001F4E
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, ds:stderr
		sub	esp, 4
		push	ebx
		push	edx		; format
		push	eax		; stream
		call	fprintf
		add	esp, 10h
		jmp	loc_8002080
; ---------------------------------------------------------------------------

loc_8001F4E:				; CODE XREF: usage+Bj
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aUsageSOption__ ; "Usage: %s [OPTION]...	[FILE]...\n"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aShowInformatio ; "Show information about the file system "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aMandatoryArgum ; "Mandatory arguments to long options are"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aAAllIncludeDum ; "  -a,	--all		  include dummy	f"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aIInodesListIno ; "  -i,	--inodes	  list inode info"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aPPortabilityUs ; "  -P,	--portability	  use the POSIX	o"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aHelpDisplayThi ; "	--help	   display this	help and "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aVersionOutputV ; "	--version  output version informa"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		sub	esp, 0Ch
		push	offset program	; "DF"
		call	emit_blocksize_note
		add	esp, 10h
		call	emit_size_note
		call	emit_ancillary_info

loc_8002080:				; CODE XREF: usage+38j
		sub	esp, 0Ch
		push	[ebp+status]	; status
		call	exit
usage		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public main
main		proc near

argv		= dword	ptr -5Ch
match		= byte ptr -49h
oi		= dword	ptr -48h
stats		= dword	ptr -44h
fs_incl		= dword	ptr -40h
fs_excl		= dword	ptr -3Ch
i		= dword	ptr -38h
i_0		= dword	ptr -34h
c		= dword	ptr -30h
e		= dword	ptr -2Ch
fd		= dword	ptr -28h
status		= dword	ptr -24h
warning		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
argc		= dword	ptr  0Ch
envp		= dword	ptr  14h

		lea	ecx, [esp+4]
		and	esp, 0FFFFFFF0h
		push	dword ptr [ecx-4]
		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		push	ecx
		sub	esp, 5Ch
		mov	ebx, ecx
		mov	eax, [ebx+4]
		mov	[ebp+argv], eax
		mov	eax, large gs:14h
		mov	[ebp+var_1C], eax
		xor	eax, eax
		mov	eax, [ebp+argv]
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	set_program_name
		add	esp, 10h
		sub	esp, 8
		push	offset locale	; locale
		push	6		; category
		call	setlocale
		add	esp, 10h
		sub	esp, 8
		push	offset dirname	; "/usr/local/share/locale"
		push	offset domainname ; "coreutils"
		call	bindtextdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset domainname ; "coreutils"
		call	textdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset close_stdout ; func
		call	atexit
		add	esp, 10h
		mov	ds:fs_select_list, 0
		mov	ds:fs_exclude_list, 0
		mov	ds:inode_format, 0
		mov	ds:show_all_fs,	0
		mov	ds:show_listed_fs, 0
		mov	ds:human_output_opts, 0FFFFFFFFh
		mov	ds:print_type, 0
		mov	ds:file_systems_processed, 0
		mov	ds:posix_format, 0
		mov	ds:exit_status,	0
		mov	ds:print_grand_total, 0
		mov	dword ptr ds:grand_fsu.fsu_blocksize, 1
		mov	dword ptr ds:grand_fsu.fsu_blocksize+4,	0

loc_8002176:				; CODE XREF: main+3EDj
					; main:loc_800247Ej
		mov	[ebp+oi], 0FFFFFFFFh
		sub	esp, 0Ch
		lea	eax, [ebp+oi]
		push	eax		; longind
		push	offset long_options ; longopts
		push	offset shortopts ; "aB:iF:hHklmPTt:vx:"
		push	[ebp+argv]	; argv
		push	dword ptr [ebx]	; argc
		call	getopt_long
		add	esp, 20h
		mov	[ebp+c], eax
		cmp	[ebp+c], 0FFFFFFFFh
		jnz	short loc_80021B7
		mov	eax, ds:human_output_opts
		cmp	eax, 0FFFFFFFFh
		jz	loc_8002483
		jmp	loc_80024F5
; ---------------------------------------------------------------------------

loc_80021B7:				; CODE XREF: main+117j
		mov	eax, [ebp+c]
		cmp	eax, 68h
		jz	loc_800231C
		cmp	eax, 68h
		jg	short loc_8002242
		cmp	eax, 48h
		jz	loc_800233F
		cmp	eax, 48h
		jg	short loc_800220F
		cmp	eax, 0FFFFFF7Eh
		jz	loc_8002416
		cmp	eax, 0FFFFFF7Eh
		jg	short loc_80021F8
		cmp	eax, 0FFFFFF7Dh
		jz	loc_8002420
		jmp	loc_800246D
; ---------------------------------------------------------------------------

loc_80021F8:				; CODE XREF: main+15Bj
		cmp	eax, 42h
		jz	loc_80022C6
		cmp	eax, 46h
		jz	loc_80023E4
		jmp	loc_800246D
; ---------------------------------------------------------------------------

loc_800220F:				; CODE XREF: main+149j
		cmp	eax, 54h
		jz	loc_80023B4
		cmp	eax, 54h
		jg	short loc_800222B
		cmp	eax, 50h
		jz	loc_80023C0
		jmp	loc_800246D
; ---------------------------------------------------------------------------

loc_800222B:				; CODE XREF: main+190j
		cmp	eax, 61h
		jz	loc_80022BA
		cmp	eax, 63h
		jz	loc_800240D
		jmp	loc_800246D
; ---------------------------------------------------------------------------

loc_8002242:				; CODE XREF: main+13Bj
		cmp	eax, 74h
		jz	loc_80023E4
		cmp	eax, 74h
		jg	short loc_8002283
		cmp	eax, 6Bh
		jz	loc_8002362
		cmp	eax, 6Bh
		jg	short loc_800226C
		cmp	eax, 69h
		jz	loc_8002310
		jmp	loc_800246D
; ---------------------------------------------------------------------------

loc_800226C:				; CODE XREF: main+1D1j
		cmp	eax, 6Ch
		jz	loc_8002385
		cmp	eax, 6Dh
		jz	loc_8002391
		jmp	loc_800246D
; ---------------------------------------------------------------------------

loc_8002283:				; CODE XREF: main+1C3j
		cmp	eax, 78h
		jz	loc_80023FA
		cmp	eax, 78h
		jg	short loc_800229F
		cmp	eax, 76h
		jz	loc_8002477
		jmp	loc_800246D
; ---------------------------------------------------------------------------

loc_800229F:				; CODE XREF: main+204j
		cmp	eax, 80h
		jz	loc_80023D8
		cmp	eax, 81h
		jz	loc_80023CC
		jmp	loc_800246D
; ---------------------------------------------------------------------------

loc_80022BA:				; CODE XREF: main+1A3j
		mov	ds:show_all_fs,	1
		jmp	loc_800247E
; ---------------------------------------------------------------------------

loc_80022C6:				; CODE XREF: main+170j
		mov	eax, ds:optarg
		sub	esp, 4
		push	offset output_block_size
		push	offset human_output_opts
		push	eax
		call	human_options
		add	esp, 10h
		mov	[ebp+e], eax
		cmp	[ebp+e], 0
		jz	loc_800247D
		mov	ecx, ds:optarg
		mov	eax, [ebp+c]
		movsx	edx, al
		mov	eax, [ebp+oi]
		sub	esp, 0Ch
		push	ecx
		push	offset long_options
		push	edx
		push	eax
		push	[ebp+e]
		call	xstrtol_fatal

loc_8002310:				; CODE XREF: main+1D6j
		mov	ds:inode_format, 1
		jmp	loc_800247E
; ---------------------------------------------------------------------------

loc_800231C:				; CODE XREF: main+132j
		mov	ds:human_output_opts, 0B0h
		mov	dword ptr ds:output_block_size,	1
		mov	dword ptr ds:output_block_size+4, 0
		jmp	loc_800247E
; ---------------------------------------------------------------------------

loc_800233F:				; CODE XREF: main+140j
		mov	ds:human_output_opts, 90h
		mov	dword ptr ds:output_block_size,	1
		mov	dword ptr ds:output_block_size+4, 0
		jmp	loc_800247E
; ---------------------------------------------------------------------------

loc_8002362:				; CODE XREF: main+1C8j
		mov	ds:human_output_opts, 0
		mov	dword ptr ds:output_block_size,	400h
		mov	dword ptr ds:output_block_size+4, 0
		jmp	loc_800247E
; ---------------------------------------------------------------------------

loc_8002385:				; CODE XREF: main+1E4j
		mov	ds:show_local_fs, 1
		jmp	loc_800247E
; ---------------------------------------------------------------------------

loc_8002391:				; CODE XREF: main+1EDj
		mov	ds:human_output_opts, 0
		mov	dword ptr ds:output_block_size,	100000h
		mov	dword ptr ds:output_block_size+4, 0
		jmp	loc_800247E
; ---------------------------------------------------------------------------

loc_80023B4:				; CODE XREF: main+187j
		mov	ds:print_type, 1
		jmp	loc_800247E
; ---------------------------------------------------------------------------

loc_80023C0:				; CODE XREF: main+195j
		mov	ds:posix_format, 1
		jmp	loc_800247E
; ---------------------------------------------------------------------------

loc_80023CC:				; CODE XREF: main+224j
		mov	ds:require_sync, 1
		jmp	loc_800247E
; ---------------------------------------------------------------------------

loc_80023D8:				; CODE XREF: main+219j
		mov	ds:require_sync, 0
		jmp	loc_800247E
; ---------------------------------------------------------------------------

loc_80023E4:				; CODE XREF: main+179j	main+1BAj
		mov	eax, ds:optarg
		sub	esp, 0Ch
		push	eax		; fstype
		call	add_fs_type
		add	esp, 10h
		jmp	loc_800247E
; ---------------------------------------------------------------------------

loc_80023FA:				; CODE XREF: main+1FBj
		mov	eax, ds:optarg
		sub	esp, 0Ch
		push	eax		; fstype
		call	add_excluded_fs_type
		add	esp, 10h
		jmp	short loc_800247E
; ---------------------------------------------------------------------------

loc_800240D:				; CODE XREF: main+1ACj
		mov	ds:print_grand_total, 1
		jmp	short loc_800247E
; ---------------------------------------------------------------------------

loc_8002416:				; CODE XREF: main+150j
		sub	esp, 0Ch
		push	0		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8002420:				; CODE XREF: main+162j
		sub	esp, 8
		push	offset aTorbjRnGranlun ; "Torbjörn Granlund"
		push	offset aTorbjornGranlu ; "Torbjorn Granlund"
		call	proper_name_utf8
		add	esp, 10h
		mov	ecx, eax
		mov	edx, ds:Version
		mov	eax, ds:stdout
		push	0
		push	offset aPaulEggert ; "Paul Eggert"
		push	offset aDavidMackenzie ; "David	MacKenzie"
		push	ecx
		push	edx
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	offset aDf_0	; "df"
		push	eax
		call	version_etc
		add	esp, 20h
		sub	esp, 0Ch
		push	0		; status
		call	exit
; ---------------------------------------------------------------------------

loc_800246D:				; CODE XREF: main+168j	main+17Fj ...
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8002477:				; CODE XREF: main+209j
		nop
		jmp	loc_8002176
; ---------------------------------------------------------------------------

loc_800247D:				; CODE XREF: main+25Dj
		nop

loc_800247E:				; CODE XREF: main+236j	main+28Cj ...
		jmp	loc_8002176
; ---------------------------------------------------------------------------

loc_8002483:				; CODE XREF: main+121j
		movzx	eax, ds:posix_format
		test	al, al
		jz	short loc_80024CF
		mov	ds:human_output_opts, 0
		sub	esp, 0Ch
		push	offset name	; "POSIXLY_CORRECT"
		call	getenv
		add	esp, 10h
		test	eax, eax
		jz	short loc_80024B8
		mov	eax, 200h
		mov	edx, 0
		jmp	short loc_80024C2
; ---------------------------------------------------------------------------

loc_80024B8:				; CODE XREF: main+41Fj
		mov	eax, 400h
		mov	edx, 0

loc_80024C2:				; CODE XREF: main+42Bj
		mov	dword ptr ds:output_block_size,	eax
		mov	dword ptr ds:output_block_size+4, edx
		jmp	short loc_80024F5
; ---------------------------------------------------------------------------

loc_80024CF:				; CODE XREF: main+401j
		sub	esp, 0Ch
		push	offset aDf_block_size ;	"DF_BLOCK_SIZE"
		call	getenv
		add	esp, 10h
		sub	esp, 4
		push	offset output_block_size
		push	offset human_output_opts
		push	eax
		call	human_options
		add	esp, 10h

loc_80024F5:				; CODE XREF: main+127j	main+442j
		mov	[ebp+match], 0
		mov	eax, ds:fs_select_list
		mov	[ebp+fs_incl], eax
		jmp	short loc_8002577
; ---------------------------------------------------------------------------

loc_8002503:				; CODE XREF: main+4F0j
		mov	eax, ds:fs_exclude_list
		mov	[ebp+fs_excl], eax
		jmp	short loc_8002568
; ---------------------------------------------------------------------------

loc_800250D:				; CODE XREF: main+4E1j
		mov	eax, [ebp+fs_excl]
		mov	edx, [eax]
		mov	eax, [ebp+fs_incl]
		mov	eax, [eax]
		sub	esp, 8
		push	edx		; s2
		push	eax		; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		jnz	short loc_800255F
		mov	eax, [ebp+fs_incl]
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aFileSystemType ; "file system type %s both selected and	e"...
		call	gettext
		add	esp, 10h
		push	esi
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	[ebp+match], 1
		jmp	short loc_800256E
; ---------------------------------------------------------------------------

loc_800255F:				; CODE XREF: main+49Bj
		mov	eax, [ebp+fs_excl]
		mov	eax, [eax+4]
		mov	[ebp+fs_excl], eax

loc_8002568:				; CODE XREF: main+480j
		cmp	[ebp+fs_excl], 0
		jnz	short loc_800250D

loc_800256E:				; CODE XREF: main+4D2j
		mov	eax, [ebp+fs_incl]
		mov	eax, [eax+4]
		mov	[ebp+fs_incl], eax

loc_8002577:				; CODE XREF: main+476j
		cmp	[ebp+fs_incl], 0
		jnz	short loc_8002503
		cmp	[ebp+match], 0
		jz	short loc_800258D
		sub	esp, 0Ch
		push	1		; status
		call	exit
; ---------------------------------------------------------------------------

loc_800258D:				; CODE XREF: main+4F6j
		mov	eax, ds:optind
		cmp	eax, [ebx]
		jge	loc_80026DC
		mov	eax, ds:optind
		mov	edx, [ebx]
		sub	edx, eax
		mov	eax, edx
		sub	esp, 8
		push	60h
		push	eax
		call	xnmalloc
		add	esp, 10h
		mov	[ebp+stats], eax
		mov	eax, ds:optind
		mov	[ebp+i], eax
		jmp	loc_80026D1
; ---------------------------------------------------------------------------

loc_80025C3:				; CODE XREF: main+64Bj
		mov	eax, [ebp+i]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 8
		push	100h
		push	eax
		call	open64
		add	esp, 10h
		mov	[ebp+fd], eax
		cmp	[ebp+fd], 0
		js	short loc_8002623
		mov	eax, ds:optind
		mov	edx, [ebp+i]
		sub	edx, eax
		mov	eax, edx
		mov	edx, eax
		mov	eax, edx
		add	eax, eax
		add	eax, edx
		shl	eax, 5
		mov	edx, eax
		mov	eax, [ebp+stats]
		add	eax, edx
		sub	esp, 8
		push	eax
		push	[ebp+fd]
		call	fstat64
		add	esp, 10h
		test	eax, eax
		jz	loc_80026B9

loc_8002623:				; CODE XREF: main+561j
		mov	eax, ds:optind
		mov	edx, [ebp+i]
		sub	edx, eax
		mov	eax, edx
		mov	edx, eax
		mov	eax, edx
		add	eax, eax
		add	eax, edx
		shl	eax, 5
		mov	edx, eax
		mov	eax, [ebp+stats]
		add	edx, eax
		mov	eax, [ebp+i]
		lea	ecx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, ecx
		mov	eax, [eax]
		sub	esp, 8
		push	edx
		push	eax
		call	stat64
		add	esp, 10h
		test	eax, eax
		jz	short loc_80026B9
		mov	eax, [ebp+i]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	esi, eax
		call	__errno_location
		mov	eax, [eax]
		push	esi
		push	offset format	; "%s"
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	ds:exit_status,	1
		mov	eax, [ebp+i]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		mov	dword ptr [eax], 0

loc_80026B9:				; CODE XREF: main+592j	main+5D6j
		cmp	[ebp+fd], 0
		js	short loc_80026CD
		sub	esp, 0Ch
		push	[ebp+fd]	; fd
		call	close
		add	esp, 10h

loc_80026CD:				; CODE XREF: main+632j
		add	[ebp+i], 1

loc_80026D1:				; CODE XREF: main+533j
		mov	eax, [ebp+i]
		cmp	eax, [ebx]
		jl	loc_80025C3

loc_80026DC:				; CODE XREF: main+509j
		mov	eax, ds:fs_select_list
		test	eax, eax
		jnz	short loc_8002704
		mov	eax, ds:fs_exclude_list
		test	eax, eax
		jnz	short loc_8002704
		movzx	eax, ds:print_type
		test	al, al
		jnz	short loc_8002704
		movzx	eax, ds:show_local_fs
		test	al, al
		jz	short loc_800270B

loc_8002704:				; CODE XREF: main+658j	main+661j ...
		mov	eax, 1
		jmp	short loc_8002710
; ---------------------------------------------------------------------------

loc_800270B:				; CODE XREF: main+677j
		mov	eax, 0

loc_8002710:				; CODE XREF: main+67Ej
		and	eax, 1
		sub	esp, 0Ch
		push	eax
		call	read_file_system_list
		add	esp, 10h
		mov	ds:mount_list, eax
		mov	eax, ds:mount_list
		test	eax, eax
		jnz	short loc_8002791
		mov	eax, ds:optind
		cmp	eax, [ebx]
		setnl	al
		movzx	eax, al
		mov	[ebp+status], eax
		mov	eax, ds:optind
		cmp	eax, [ebx]
		jge	short loc_8002758
		sub	esp, 0Ch
		push	offset aWarning	; "Warning: "
		call	gettext
		add	esp, 10h
		jmp	short loc_800275D
; ---------------------------------------------------------------------------

loc_8002758:				; CODE XREF: main+6B9j
		mov	eax, offset locale

loc_800275D:				; CODE XREF: main+6CBj
		mov	[ebp+warning], eax
		sub	esp, 0Ch
		push	offset aCannotReadTabl ; "cannot read table of mounted file syste"...
		call	gettext
		add	esp, 10h
		mov	esi, eax
		call	__errno_location
		mov	eax, [eax]
		sub	esp, 0Ch
		push	esi
		push	[ebp+warning]
		push	offset aSS_1	; "%s%s"
		push	eax		; errnum
		push	[ebp+status]	; status
		call	error
		add	esp, 20h

loc_8002791:				; CODE XREF: main+6A0j
		movzx	eax, ds:require_sync
		test	al, al
		jz	short loc_80027A1
		call	sync

loc_80027A1:				; CODE XREF: main+70Fj
		mov	eax, ds:optind
		cmp	eax, [ebx]
		jge	short loc_8002819
		mov	ds:show_listed_fs, 1
		mov	eax, ds:optind
		mov	[ebp+i_0], eax
		jmp	short loc_8002810
; ---------------------------------------------------------------------------

loc_80027BB:				; CODE XREF: main+78Aj
		mov	eax, [ebp+i_0]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_800280C
		mov	eax, ds:optind
		mov	edx, [ebp+i_0]
		sub	edx, eax
		mov	eax, edx
		mov	edx, eax
		mov	eax, edx
		add	eax, eax
		add	eax, edx
		shl	eax, 5
		mov	edx, eax
		mov	eax, [ebp+stats]
		add	edx, eax
		mov	eax, [ebp+i_0]
		lea	ecx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, ecx
		mov	eax, [eax]
		sub	esp, 8
		push	edx		; statp
		push	eax		; name
		call	show_entry
		add	esp, 10h

loc_800280C:				; CODE XREF: main+743j
		add	[ebp+i_0], 1

loc_8002810:				; CODE XREF: main+72Ej
		mov	eax, [ebp+i_0]
		cmp	eax, [ebx]
		jl	short loc_80027BB
		jmp	short loc_800281E
; ---------------------------------------------------------------------------

loc_8002819:				; CODE XREF: main+71Dj
		call	show_all_entries

loc_800281E:				; CODE XREF: main+78Cj
		movzx	eax, ds:print_grand_total
		test	al, al
		jz	short loc_8002867
		movzx	eax, ds:inode_format
		test	al, al
		jz	short loc_8002848
		mov	dword ptr ds:grand_fsu.fsu_blocks, 1
		mov	dword ptr ds:grand_fsu.fsu_blocks+4, 0

loc_8002848:				; CODE XREF: main+7A7j
		sub	esp, 4
		push	offset grand_fsu ; force_fsu
		push	0		; me_remote
		push	0		; me_dummy
		push	0		; fstype
		push	0		; stat_file
		push	0		; mount_point
		push	offset disk	; "total"
		call	show_dev
		add	esp, 20h

loc_8002867:				; CODE XREF: main+79Cj
		movzx	eax, ds:file_systems_processed
		xor	eax, 1
		test	al, al
		jz	short loc_8002895
		sub	esp, 0Ch
		push	offset aNoFileSystemsP ; "no file systems processed"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_8002895:				; CODE XREF: main+7E8j
		mov	eax, ds:exit_status
		sub	esp, 0Ch
		push	eax		; status

loc_800289E:				; DATA XREF: .eh_frame:080035B8o
					; .eh_frame:080035DCo ...
		call	exit
main		endp

_text		ends

; ===========================================================================

; Segment type:	Zero-length
; Segment permissions: Read/Write
_data		segment	byte public 'DATA' use32
_data		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
; Segment alignment '32byte' can not be represented in assembly
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 80028C0h
		assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing
; _Bool	inode_format
inode_format	db ?			; DATA XREF: print_header:loc_80001DEr
					; show_dev:loc_8000A90r ...
; _Bool	show_all_fs
show_all_fs	db ?			; DATA XREF: show_dev+8Ar
					; show_dev+1F8r ...
; _Bool	show_local_fs
show_local_fs	db ?			; DATA XREF: show_dev+72r
					; main:loc_8002385w ...
; _Bool	show_listed_fs
show_listed_fs	db ?			; DATA XREF: show_dev+98r
					; show_dev+206r ...
; int human_output_opts
human_output_opts dd ?			; DATA XREF: print_header:loc_8000211r
					; print_header+A9r ...
; uintmax_t output_block_size
output_block_size dq ?			; DATA XREF: print_header+110r
					; print_header+165r ...
; _Bool	posix_format
posix_format	db ?			; DATA XREF: print_header:loc_8000279r
					; show_dev:loc_80009EFr ...
; _Bool	file_systems_processed
file_systems_processed db ?		; DATA XREF: show_dev:loc_8000931r
					; show_dev+226w ...
; _Bool	require_sync
require_sync	db ?			; DATA XREF: main:loc_80023CCw
					; main:loc_80023D8w ...
		align 4
; int exit_status
exit_status	dd ?			; DATA XREF: show_dev+1D7w
					; show_point+325w ...
; fs_type_list *fs_select_list
fs_select_list	dd ?			; DATA XREF: selected_fstype+6r
					; selected_fstype:loc_80004A3r	...
; fs_type_list *fs_exclude_list
fs_exclude_list	dd ?			; DATA XREF: excluded_fstype+6r
					; excluded_fstype:loc_80004FEr	...
; mount_entry *mount_list
mount_list	dd ?			; DATA XREF: show_disk+Fr
					; show_point+43r ...
; _Bool	print_type
print_type	db ?			; DATA XREF: print_header+17r
					; show_dev:loc_8000971r ...
; _Bool	print_grand_total
print_grand_total db ?			; DATA XREF: main+D0w
					; main:loc_800240Dw ...
		align 20h
; fs_usage grand_fsu
grand_fsu	fs_usage <?>		; DATA XREF: main+D7w main+7C0o ...
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment '32byte' can not be represented in assembly
_rodata		segment	para public 'CONST' use32
		assume cs:_rodata
		;org 8002940h
; char msgid[]
msgid		db 0Ah			; DATA XREF: emit_size_note+10o
		db 'SIZE may be (or may be an integer optionally followed by) one of '
		db 'following:',0Ah
		db 'KB 1000, K 1024, MB 1000*1000, M 1024*1024, and so on for G, T, P'
		db ', E, Z, Y.',0Ah,0
		align 4
; char aDisplayValuesA[]
aDisplayValuesA	db 0Ah			; DATA XREF: emit_blocksize_note+9o
		db 'Display values are in units of the first available SIZE from --bl'
		db 'ock-size,',0Ah
		db 'and the %s_BLOCK_SIZE, BLOCK_SIZE and BLOCKSIZE environment varia'
		db 'bles.',0Ah
		db 'Otherwise, units default to 1024 bytes (or 512 if POSIXLY_CORRECT'
		db ' is set).',0Ah,0
; char aReportSBugsToS[]
aReportSBugsToS	db 0Ah			; DATA XREF: emit_ancillary_info+1Do
		db 'Report %s bugs to %s',0Ah,0
aBugCoreutils@g	db 'bug-coreutils@gnu.org',0 ; DATA XREF: emit_ancillary_info+2Do
; char aSHomePageHttpW[]
aSHomePageHttpW	db '%s home page: <http://www.gnu.org/software/%s/>',0Ah,0
					; DATA XREF: emit_ancillary_info+3Fo
; char domainname[]
domainname	db 'coreutils',0        ; DATA XREF: emit_ancillary_info+4Fo
					; main+51o ...
aGnuCoreutils	db 'GNU coreutils',0    ; DATA XREF: emit_ancillary_info+54o
					; main+3C5o
		align 4
; char aGeneralHelpUsi[]
aGeneralHelpUsi	db 'General help using GNU software: <http://www.gnu.org/gethelp/>',0Ah,0
					; DATA XREF: emit_ancillary_info+6Bo
; char s2[]
s2		db 'en_',0              ; DATA XREF: emit_ancillary_info+A2o
; char aReportSTransla[]
aReportSTransla	db 'Report %s translation bugs to <http://translationproject.org/team'
					; DATA XREF: emit_ancillary_info+CCo
		db '/>',0Ah,0
		align 10h
; char aForCompleteDoc[]
aForCompleteDoc	db 'For complete documentation, run: info coreutils ',27h,'%s invocation'
					; DATA XREF: emit_ancillary_info+FCo
		db 27h,0Ah,0
aAll		db 'all',0              ; DATA XREF: .rodata:long_optionso
aBlockSize	db 'block-size',0       ; DATA XREF: .rodata:long_optionso
aInodes		db 'inodes',0           ; DATA XREF: .rodata:long_optionso
aHumanReadable	db 'human-readable',0   ; DATA XREF: .rodata:long_optionso
aSi		db 'si',0               ; DATA XREF: .rodata:long_optionso
aLocal		db 'local',0            ; DATA XREF: .rodata:long_optionso
aMegabytes	db 'megabytes',0        ; DATA XREF: .rodata:long_optionso
aPortability	db 'portability',0      ; DATA XREF: .rodata:long_optionso
aPrintType	db 'print-type',0       ; DATA XREF: .rodata:long_optionso
aSync		db 'sync',0             ; DATA XREF: .rodata:long_optionso
aNoSync		db 'no-sync',0          ; DATA XREF: .rodata:long_optionso
; char disk[]
disk		db 'total',0            ; DATA XREF: main+7CFo
					; .rodata:long_optionso
aType		db 'type',0             ; DATA XREF: .rodata:long_optionso
aExcludeType	db 'exclude-type',0     ; DATA XREF: .rodata:long_optionso
aHelp		db 'help',0             ; DATA XREF: .rodata:long_optionso
aVersion	db 'version',0          ; DATA XREF: .rodata:long_optionso
		align 20h
; const	option long_options[17]
long_options	option <offset aAll, 0,	0, 61h>	; DATA XREF: main+F9o
					; main+276o
		option <offset aBlockSize, 1, 0, 42h> ;	"all"
		option <offset aInodes,	0, 0, 69h>
		option <offset aHumanReadable, 0, 0, 68h>
		option <offset aSi, 0, 0, 48h>
		option <offset aLocal, 0, 0, 6Ch>
		option <offset aMegabytes, 0, 0, 6Dh>
		option <offset aPortability, 0,	0, 50h>
		option <offset aPrintType, 0, 0, 54h>
		option <offset aSync, 0, 0, 81h>
		option <offset aNoSync,	0, 0, 80h>
		option <offset disk, 0,	0, 63h>
		option <offset aType, 1, 0, 74h>
		option <offset aExcludeType, 1,	0, 78h>
		option <offset aHelp, 0, 0, 0FFFFFF7Eh>
		option <offset aVersion, 0, 0, 0FFFFFF7Dh>
		option	<0>
; char aFilesystemType[]
aFilesystemType	db 'Filesystem    Type',0 ; DATA XREF: print_header+2Bo
; char aFilesystem[]
aFilesystem	db 'Filesystem        ',0 ; DATA XREF: print_header+50o
		align 4
; char aInodesIusedIfr[]
aInodesIusedIfr	db '    Inodes   IUsed   IFree IUse%',0 ; DATA XREF: print_header+7Eo
; char aSizeUsedAvailU[]
aSizeUsedAvailU	db '    Size  Used Avail Use%',0 ; DATA XREF: print_header+BEo
; char aSizeUsedAvai_0[]
aSizeUsedAvai_0	db '     Size   Used  Avail Use%',0 ; DATA XREF: print_header+E6o
; char aSBlocksUsedAva[]
aSBlocksUsedAva	db ' %s-blocks      Used Available Capacity',0
					; DATA XREF: print_header+134o
; char a4sBlocksUsedAv[]
a4sBlocksUsedAv	db ' %4s-blocks      Used Available Use%%',0 ; DATA XREF: print_header+2BCo
; char aMountedOn[]
aMountedOn	db ' Mounted on',0Ah,0  ; DATA XREF: print_header+2DFo
asc_8002E8B	db '-',0                ; DATA XREF: df_readable+51o
					; show_dev+23Bo ...
; char format[]
format		db '%s',0               ; DATA XREF: show_dev+1C7o
					; show_point+315o ...
; char aSS[]
aSS		db '%s%*s  ',0          ; DATA XREF: show_dev+2C4o
; char aS18s[]
aS18s		db '%s',0Ah             ; DATA XREF: show_dev+2F3o
		db '%18s  ',0
; char aSS_0[]
aSS_0		db '%s %s',0            ; DATA XREF: show_dev+311o
; char locale
locale		db 0			; DATA XREF: show_dev+347o main+3Ao ...
; char aS20s[]
aS20s		db '%s',0Ah             ; DATA XREF: show_dev+352o
		db '%20s',0
; char a20s[]
a20s		db '%-20s',0            ; DATA XREF: show_dev+36Ao
; char aSSS[]
aSSS		db ' %*s %*s %*s ',0    ; DATA XREF: show_dev+8EAo
; char a_0f[]
a_0f		db '%*.0f%%',0          ; DATA XREF: show_dev+CC2o
asc_8002ECD	db '- ',0               ; DATA XREF: show_dev+CD4o
; char aS_0[]
aS_0		db '%*s',0              ; DATA XREF: show_dev+CDFo
; char aS_1[]
aS_1		db ' %s',0              ; DATA XREF: show_dev+CFEo
; char aCannotGetCurre[]
aCannotGetCurre	db 'cannot get current directory',0 ; DATA XREF: find_mount_point+4Co
; char aCannotChangeTo[]
aCannotChangeTo	db 'cannot change to directory %s',0 ; DATA XREF: find_mount_point+DAo
					; find_mount_point+1D8o ...
a_		db '.',0                ; DATA XREF: find_mount_point+20Fo
		align 4
; char aCannotStatCurr[]
aCannotStatCurr	db 'cannot stat current directory (now %s)',0
					; DATA XREF: find_mount_point+236o
; char path[]
path		db '..',0               ; DATA XREF: find_mount_point+265o
					; find_mount_point+279o ...
; char aCannotStatS[]
aCannotStatS	db 'cannot stat %s',0   ; DATA XREF: find_mount_point+28Bo
		align 4
; char aFailedToReturn[]
aFailedToReturn	db 'failed to return to initial working directory',0
					; DATA XREF: find_mount_point+389o
; char aLofs[]
aLofs		db 'lofs',0             ; DATA XREF: show_point+7Eo
					; show_point+150o ...
		align 4
; char aTrySHelpForMor[]
aTrySHelpForMor	db 'Try `%s --help',27h,' for more information.',0Ah,0
					; DATA XREF: usage+16o
		align 10h
; char aUsageSOption__[]
aUsageSOption__	db 'Usage: %s [OPTION]... [FILE]...',0Ah,0 ; DATA XREF: usage+46o
		align 4
; char aShowInformatio[]
aShowInformatio	db 'Show information about the file system on which each FILE resides'
					; DATA XREF: usage+69o
		db ',',0Ah
		db 'or all file systems by default.',0Ah
		db 0Ah,0
		align 4
; char aMandatoryArgum[]
aMandatoryArgum	db 'Mandatory arguments to long options are mandatory for short optio'
					; DATA XREF: usage+8Co
		db 'ns too.',0Ah,0
		align 4
; char aAAllIncludeDum[]
aAAllIncludeDum	db '  -a, --all             include dummy file systems',0Ah
					; DATA XREF: usage+AFo
		db '  -B, --block-size=SIZE  use SIZE-byte blocks',0Ah
		db '      --total           produce a grand total',0Ah
		db '  -h, --human-readable  print sizes in human readable format (e.g'
		db '., 1K 234M 2G)',0Ah
		db '  -H, --si              likewise, but use powers of 1000 not 1024'
		db 0Ah,0
		align 4
; char aIInodesListIno[]
aIInodesListIno	db '  -i, --inodes          list inode information instead of block u'
					; DATA XREF: usage+D2o
		db 'sage',0Ah
		db '  -k                    like --block-size=1K',0Ah
		db '  -l, --local           limit listing to local file systems',0Ah
		db '      --no-sync         do not invoke sync before getting usage i'
		db 'nfo (default)',0Ah,0
		align 4
; char aPPortabilityUs[]
aPPortabilityUs	db '  -P, --portability     use the POSIX output format',0Ah
					; DATA XREF: usage+F5o
		db '      --sync            invoke sync before getting usage info',0Ah
		db '  -t, --type=TYPE       limit listing to file systems of type TYP'
		db 'E',0Ah
		db '  -T, --print-type      print file system type',0Ah
		db '  -x, --exclude-type=TYPE   limit listing to file systems not of '
		db 'type TYPE',0Ah
		db '  -v                    (ignored)',0Ah,0
		align 10h
; char aHelpDisplayThi[]
aHelpDisplayThi	db '      --help     display this help and exit',0Ah,0
					; DATA XREF: usage+118o
		align 10h
; char aVersionOutputV[]
aVersionOutputV	db '      --version  output version information and exit',0Ah,0
					; DATA XREF: usage+13Bo
; char program[]
program		db 'DF',0               ; DATA XREF: usage+158o
; char dirname[]
dirname		db '/usr/local/share/locale',0 ; DATA XREF: main+4Co
; char shortopts[]
shortopts	db 'aB:iF:hHklmPTt:vx:',0 ; DATA XREF: main+FEo
aTorbjRnGranlun	db 'Torbjörn Granlund',0 ; DATA XREF: main+398o
aTorbjornGranlu	db 'Torbjorn Granlund',0 ; DATA XREF: main+39Do
aPaulEggert	db 'Paul Eggert',0      ; DATA XREF: main+3B9o
aDavidMackenzie	db 'David MacKenzie',0  ; DATA XREF: main+3BEo
aDf_0		db 'df',0               ; DATA XREF: main+3CAo
; char name[]
name		db 'POSIXLY_CORRECT',0  ; DATA XREF: main+410o
; char aDf_block_size[]
aDf_block_size	db 'DF_BLOCK_SIZE',0    ; DATA XREF: main+447o
		align 4
; char aFileSystemType[]
aFileSystemType	db 'file system type %s both selected and excluded',0 ; DATA XREF: main+4B3o
; char aWarning[]
aWarning	db 'Warning: ',0        ; DATA XREF: main+6BEo
		align 4
; char aCannotReadTabl[]
aCannotReadTabl	db 'cannot read table of mounted file systems',0 ; DATA XREF: main+6D8o
; char aSS_1[]
aSS_1		db '%s%s',0             ; DATA XREF: main+6F5o
; char aNoFileSystemsP[]
aNoFileSystemsP	db 'no file systems processed',0 ; DATA XREF: main+7EDo
		align 10h
tbyte_8003580	dt 1.8446744073709551616e19 ; DATA XREF: show_dev+AC9r
					; show_dev+B0Er ...
		align 10h
dbl_8003590	dq 100.0		; DATA XREF: show_dev+BFAr
_rodata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_eh_frame	segment	dword public 'CONST' use32
		assume cs:_eh_frame
		;org 8003598h
		dd 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 20h, 1Ch
		dd offset loc_800289E-8005E56h
		dd 30h,	80E4100h, 0D420285h, 3834405h, 0CC3C568h, 404h
		dd 1Ch,	40h
		dd offset loc_800289E-8005E4Ah
		dd 28h,	80E4100h, 0D420285h, 0CC56405h,	404h, 20h, 60h
		dd offset loc_800289E-8005E42h
		dd 11Ch, 80E4100h, 0D420285h, 3834405h,	0C5011403h, 4040CC3h
		dd 2Ch,	84h
		dd offset loc_800289E-8005D4Ah
		dd 313h, 80E4100h, 0D420285h, 3874905h,	5830486h, 0C3030303h
		dd 0C741C641h, 40CC541h, 4, 1Ch, 0B4h
		dd offset loc_800289E-8005A67h
		dd 5Bh,	80E4100h, 0D420285h, 0C5570205h, 4040Ch, 1Ch, 0D4h
		dd offset loc_800289E-8005A2Ch
		dd 5Bh,	80E4100h, 0D420285h, 0C5570205h, 4040Ch, 1Ch, 0F4h
		dd offset loc_800289E-80059F1h
		dd 30h,	80E4100h, 0D420285h, 0CC56C05h,	404h, 20h, 114h
		dd offset loc_800289E-80059E1h
		dd 0B6h, 80E4100h, 0D420285h, 3834405h,	0C3C5AE02h, 4040Ch
		dd 20h,	138h
		dd offset loc_800289E-800594Fh
		dd 0F6h, 80E4100h, 0D420285h, 3834405h,	41C3ED02h, 4040CC5h
		dd 28h,	15Ch
		dd offset loc_800289E-800587Dh
		dd 0D3Ch, 80E4100h, 0D420285h, 3864805h, 2E030483h, 0C641C30Dh
		dd 40CC541h, 4,	2Ch, 188h
		dd offset loc_800289E-8004B6Dh
		dd 3EEh, 80E4100h, 0D420285h, 3874905h,	5830486h, 0C303DE03h
		dd 0C741C641h, 40CC541h, 4, 24h, 1B8h
		dd offset loc_800289E-80047AFh
		dd 0A8h, 80E4100h, 0D420285h, 3864505h,	9D020483h, 41C641C3h
		dd 4040CC5h, 28h, 1E0h
		dd offset loc_800289E-800472Fh
		dd 4F8h, 80E4100h, 0D420285h, 3864805h,	0EA030483h, 0C641C304h
		dd 40CC541h, 4,	1Ch, 20Ch
		dd offset loc_800289E-8004263h
		dd 52h,	80E4100h, 0D420285h, 0C54E0205h, 4040Ch, 24h, 22Ch
		dd offset loc_800289E-8004231h
		dd 72h,	80E4100h, 0D420285h, 3864505h, 67020483h, 41C641C3h
		dd 4040CC5h, 1Ch, 254h
		dd offset loc_800289E-80041E7h
		dd 35h,	80E4100h, 0D420285h, 0CC57105h,	404h, 1Ch, 274h
		dd offset loc_800289E-80041D2h
		dd 35h,	80E4100h, 0D420285h, 0CC57105h,	404h, 18h, 294h
		dd offset loc_800289E-80041BDh
		dd 17Ah, 80E4100h, 0D420285h, 3834405h,	28h, 2B0h
		dd offset loc_800289E-800405Fh
		dd 818h, 10C4400h, 5104700h, 45007502h,	7475030Fh, 2061006h
		dd 3107C75h, 787502h
_eh_frame	ends

; ===========================================================================

; Segment type:	Externs
; extern
; struct _IO_FILE *stdout
		extrn stdout:dword	; DATA XREF: emit_size_note+7r
					; emit_ancillary_info+62r ...
; char *gettext(const char *msgid)
		extrn gettext:near	; CODE XREF: emit_size_note+15p
					; emit_blocksize_note+Ep ...
		extrn fputs_unlocked:near ; CODE XREF: emit_size_note+22p
					; emit_ancillary_info+7Dp ...
; int printf(const char	*format, ...)
		extrn printf:near	; CODE XREF: emit_blocksize_note+1Dp
					; emit_ancillary_info+34p ...
		extrn program_name:dword ; DATA	XREF: emit_ancillary_info+7r
					; emit_ancillary_info+B6r ...
		extrn last_component:near ; CODE XREF: emit_ancillary_info+10p
					; emit_ancillary_info+BFp ...
; char *setlocale(int category,	const char *locale)
		extrn setlocale:near	; CODE XREF: emit_ancillary_info+8Cp
					; main+41p
; int strncmp(const char *s1, const char *s2, size_t n)
		extrn strncmp:near	; CODE XREF: emit_ancillary_info+AAp
					; show_point+1E9p
		extrn __umoddi3:near	; CODE XREF: print_header+1A8p
					; show_dev+A91p
		extrn __udivdi3:near	; CODE XREF: print_header+1D2p
					; show_dev+522p ...
		extrn umaxtostr:near	; CODE XREF: print_header+127p
		extrn human_readable:near ; CODE XREF: print_header+2AFp
					; df_readable+93p
		extrn __stack_chk_fail:near ; CODE XREF: print_header+306p
					; show_dev+D30p ...
; int strcmp(const char	*s1, const char	*s2)
		extrn strcmp:near	; CODE XREF: selected_fstype+32p
					; excluded_fstype+32p ...
		extrn get_fs_usage:near	; CODE XREF: show_dev+1A0p
		extrn quote:near	; CODE XREF: show_dev+1B5p
					; find_mount_point+CDp	...
; int *_errno_location(void)
		extrn __errno_location:near ; CODE XREF: show_dev+1BFp
					; find_mount_point+5Bp	...
; void error(int status, int errnum, const char	*format, ...)
		extrn error:near	; CODE XREF: show_dev+1CFp
					; find_mount_point+69p	...
; size_t strlen(const char *s)
		extrn strlen:near	; CODE XREF: show_dev+270p
					; show_dev+287p ...
; int putchar_unlocked(int c)
		extrn putchar_unlocked:near ; CODE XREF: show_dev+D10p
		extrn save_cwd:near	; CODE XREF: find_mount_point+3Dp
; int chdir(const char *path)
		extrn chdir:near	; CODE XREF: find_mount_point+B4p
					; find_mount_point+1B6p ...
		extrn dir_name:near	; CODE XREF: find_mount_point+110p
; void *memcpy(void *dest, const void *src, size_t n)
		extrn memcpy:near	; CODE XREF: find_mount_point+18Ep
; void free(void *ptr)
		extrn free:near		; CODE XREF: find_mount_point+1A5p
					; show_point+229p ...
		extrn stat64:near	; CODE XREF: find_mount_point+214p
					; find_mount_point+26Ap ...
		extrn xgetcwd:near	; CODE XREF: find_mount_point:loc_80017ADp
		extrn restore_cwd:near	; CODE XREF: find_mount_point+37Ap
		extrn free_cwd:near	; CODE XREF: find_mount_point+3B8p
		extrn canonicalize_file_name:near ; CODE XREF: show_point+F9p
; void *xmalloc(size_t)
		extrn xmalloc:near	; CODE XREF: add_fs_type+Bp
					; add_excluded_fs_type+Bp
; struct _IO_FILE *stderr
		extrn stderr:dword	; DATA XREF: usage+25r
; int fprintf(FILE *stream, const char *format,	...)
		extrn fprintf:near	; CODE XREF: usage+30p
; void exit(int	status)
		extrn exit:near		; CODE XREF: usage+175p main+3DDp ...
		extrn set_program_name:near ; CODE XREF: main+2Fp
; char *bindtextdomain(const char *domainname, const char *dirname)
		extrn bindtextdomain:near ; CODE XREF: main+56p
; char *textdomain(const char *domainname)
		extrn textdomain:near	; CODE XREF: main+66p
; void close_stdout(void)
		extrn close_stdout	; DATA XREF: main+71o
; int atexit(void (*func)(void))
		extrn atexit:near	; CODE XREF: main+76p
; int getopt_long(int argc, char *const	*argv, const char *shortopts, const struct option *longopts, int *longind)
		extrn getopt_long:near	; CODE XREF: main+108p
; char *optarg
		extrn optarg:dword	; DATA XREF: main:loc_80022C6r
					; main+263r ...
		extrn human_options:near ; CODE	XREF: main+24Ep main+462p
		extrn xstrtol_fatal:near ; CODE	XREF: main+280p
		extrn proper_name_utf8:near ; CODE XREF: main+3A2p
		extrn Version:dword	; DATA XREF: main+3ACr
		extrn version_etc:near	; CODE XREF: main+3D0p
; char *getenv(const char *name)
		extrn getenv:near	; CODE XREF: main+415p	main+44Cp
; int optind
		extrn optind:dword	; DATA XREF: main:loc_800258Dr
					; main+50Fr ...
		extrn xnmalloc:near	; CODE XREF: main+520p
		extrn open64:near	; CODE XREF: main+552p
		extrn fstat64:near	; CODE XREF: main+588p
; int close(int	fd)
		extrn close:near	; CODE XREF: main+63Ap
		extrn read_file_system_list:near ; CODE	XREF: main+68Cp
; void sync(void)
		extrn sync:near		; CODE XREF: main+711p


		end
