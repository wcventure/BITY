;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B611-7234-BB			    |
; |		Doskey Lee, Kingsoft Internet Security Software		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	CABFDD6A771617701C2DE7ABB2AA5517
; Input	CRC32 :	D68CF425

; File Name   :	D:\coreutils-o\env.o
; Format      :	ELF for	Intel 386 (Relocatable)
;
; Source File :	'env.c'

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	byte public 'CODE' use32
		assume cs:_text
		;org 8000000h
		assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl initialize_exit_failure(int status)
initialize_exit_failure	proc near	; CODE XREF: main+6Bp

status		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		cmp	[ebp+status], 1
		jz	short loc_8000011
		mov	eax, [ebp+status]
		mov	ds:exit_failure, eax

loc_8000011:				; CODE XREF: initialize_exit_failure+7j
		nop
		pop	ebp
		retn
initialize_exit_failure	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void emit_ancillary_info()
emit_ancillary_info proc near		; CODE XREF: usage+ECp

lc_messages	= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset msgid	; "\nReport %s bugs to %s\n"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset aBugCoreutils@g ; "bug-coreutils@gnu.org"
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	offset aSHomePageHttpW ; "%s home page:	<http://www.gnu.org/softw"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset domainname ; "coreutils"
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aGeneralHelpUsi ; "General help using GNU software: <http:"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		sub	esp, 8
		push	0		; locale
		push	5		; category
		call	setlocale
		add	esp, 10h
		mov	[ebp+lc_messages], eax
		cmp	[ebp+lc_messages], 0
		jz	short loc_80000FA
		sub	esp, 4
		push	3		; n
		push	offset s2	; "en_"
		push	[ebp+lc_messages] ; s1
		call	strncmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_80000FA
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aReportSTransla ; "Report %s translation	bugs to	<http://t"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h

loc_80000FA:				; CODE XREF: emit_ancillary_info+9Bj
					; emit_ancillary_info+B4j
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aForCompleteDoc ; "For complete documentation, run: info	c"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		nop
		mov	ebx, [ebp+var_4]
		leave
		retn
emit_ancillary_info endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; void __cdecl usage(int status)
		public usage
usage		proc near		; CODE XREF: main+C2p main+104p ...

status		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 4
		cmp	[ebp+status], 0
		jz	short loc_800016D
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, ds:stderr
		sub	esp, 4
		push	ebx
		push	edx		; format
		push	eax		; stream
		call	fprintf
		add	esp, 10h
		jmp	loc_8000221
; ---------------------------------------------------------------------------

loc_800016D:				; CODE XREF: usage+Bj
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aUsageSOption__ ; "Usage: %s [OPTION]...	[-] [NAME=VALUE]."...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aSetEachNameToV ; "Set each NAME	to VALUE in the	environme"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aHelpDisplayThi ; "	--help	   display this	help and "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aVersionOutputV ; "	--version  output version informa"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aAMereImpliesI_ ; "\nA mere - implies -i.  If no	COMMAND, "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		call	emit_ancillary_info

loc_8000221:				; CODE XREF: usage+38j
		sub	esp, 0Ch
		push	[ebp+status]	; status
		call	exit
usage		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public main
main		proc near

ignore_environment= byte ptr -2Ah
opt_nul_terminate_output= byte ptr -29h
e		= dword	ptr -28h
optc		= dword	ptr -24h
name		= dword	ptr -20h
exit_status	= dword	ptr -1Ch
argc		= dword	ptr  0Ch
argv		= dword	ptr  10h
envp		= dword	ptr  14h

		lea	ecx, [esp+4]
		and	esp, 0FFFFFFF0h
		push	dword ptr [ecx-4]
		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		push	ecx
		sub	esp, 28h
		mov	ebx, ecx
		mov	[ebp+ignore_environment], 0
		mov	[ebp+opt_nul_terminate_output],	0
		mov	eax, [ebx+4]
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	set_program_name
		add	esp, 10h
		sub	esp, 8
		push	offset locale	; locale
		push	6		; category
		call	setlocale
		add	esp, 10h
		sub	esp, 8
		push	offset dirname	; "/usr/local/share/locale"
		push	offset domainname ; "coreutils"
		call	bindtextdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset domainname ; "coreutils"
		call	textdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	7Dh		; status
		call	initialize_exit_failure
		add	esp, 10h
		sub	esp, 0Ch
		push	offset close_stdout ; func
		call	atexit
		add	esp, 10h
		jmp	loc_8000335
; ---------------------------------------------------------------------------

loc_80002B4:				; CODE XREF: main+12Cj
		mov	eax, [ebp+optc]
		cmp	eax, 30h
		jz	short loc_80002E3
		cmp	eax, 30h
		jg	short loc_80002D1
		cmp	eax, 0FFFFFF7Dh
		jz	short loc_80002F3
		cmp	eax, 0FFFFFF7Eh
		jz	short loc_80002E9
		jmp	short loc_800032B
; ---------------------------------------------------------------------------

loc_80002D1:				; CODE XREF: main+93j
		cmp	eax, 69h
		jz	short loc_80002DD
		cmp	eax, 75h
		jz	short loc_8000335
		jmp	short loc_800032B
; ---------------------------------------------------------------------------

loc_80002DD:				; CODE XREF: main+A8j
		mov	[ebp+ignore_environment], 1
		jmp	short loc_8000335
; ---------------------------------------------------------------------------

loc_80002E3:				; CODE XREF: main+8Ej
		mov	[ebp+opt_nul_terminate_output],	1
		jmp	short loc_8000335
; ---------------------------------------------------------------------------

loc_80002E9:				; CODE XREF: main+A1j
		sub	esp, 0Ch
		push	0		; status
		call	usage
; ---------------------------------------------------------------------------

loc_80002F3:				; CODE XREF: main+9Aj
		mov	edx, ds:Version
		mov	eax, ds:stdout
		sub	esp, 4
		push	0
		push	offset aDavidMackenzie ; "David	MacKenzie"
		push	offset aRichardMlynari ; "Richard Mlynarik"
		push	edx
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	offset aEnv	; "env"
		push	eax
		call	version_etc
		add	esp, 20h
		sub	esp, 0Ch
		push	0		; status
		call	exit
; ---------------------------------------------------------------------------

loc_800032B:				; CODE XREF: main+A3j main+AFj
		sub	esp, 0Ch
		push	7Dh		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8000335:				; CODE XREF: main+83j main+ADj ...
		sub	esp, 0Ch
		push	0		; longind
		push	offset longopts	; longopts
		push	offset shortopts ; "+iu:0"
		push	dword ptr [ebx+4] ; argv
		push	dword ptr [ebx]	; argc
		call	getopt_long
		add	esp, 20h
		mov	[ebp+optc], eax
		cmp	[ebp+optc], 0FFFFFFFFh
		jnz	loc_80002B4
		mov	eax, ds:optind
		cmp	eax, [ebx]
		jge	short loc_8000393
		mov	eax, ds:optind
		lea	edx, ds:0[eax*4]
		mov	eax, [ebx+4]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 8
		push	offset asc_8000AA0 ; "-"
		push	eax		; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		jnz	short loc_8000393
		mov	[ebp+ignore_environment], 1

loc_8000393:				; CODE XREF: main+139j	main+161j
		cmp	[ebp+ignore_environment], 0
		jz	short loc_80003A3
		mov	ds:environ, offset dummy_environ_5100

loc_80003A3:				; CODE XREF: main+16Bj
		mov	ds:optind, 0
		jmp	short loc_8000403
; ---------------------------------------------------------------------------

loc_80003AF:				; CODE XREF: main+1FAj
		cmp	[ebp+optc], 75h
		jnz	short loc_8000403
		mov	eax, ds:optarg
		sub	esp, 0Ch
		push	eax		; name
		call	unsetenv
		add	esp, 10h
		test	eax, eax
		jz	short loc_8000403
		mov	eax, ds:optarg
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	edi, eax
		sub	esp, 0Ch
		push	offset aCannotUnsetS ; "cannot unset %s"
		call	gettext
		add	esp, 10h
		mov	esi, eax
		call	__errno_location
		mov	eax, [eax]
		push	edi
		push	esi		; format
		push	eax		; errnum
		push	7Dh		; status
		call	error
		add	esp, 10h

loc_8000403:				; CODE XREF: main+181j	main+187j ...
		sub	esp, 0Ch
		push	0		; longind
		push	offset longopts	; longopts
		push	offset shortopts ; "+iu:0"
		push	dword ptr [ebx+4] ; argv
		push	dword ptr [ebx]	; argc
		call	getopt_long
		add	esp, 20h
		mov	[ebp+optc], eax
		cmp	[ebp+optc], 0FFFFFFFFh
		jnz	short loc_80003AF
		mov	eax, ds:optind
		cmp	eax, [ebx]
		jge	loc_8000503
		mov	eax, ds:optind
		lea	edx, ds:0[eax*4]
		mov	eax, [ebx+4]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 8
		push	offset asc_8000AA0 ; "-"
		push	eax		; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		jnz	loc_8000503
		mov	eax, ds:optind
		add	eax, 1
		mov	ds:optind, eax
		jmp	loc_8000503
; ---------------------------------------------------------------------------

loc_8000473:				; CODE XREF: main+303j
		mov	eax, ds:optind
		lea	edx, [eax+1]
		mov	ds:optind, edx
		lea	edx, ds:0[eax*4]
		mov	eax, [ebx+4]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax		; string
		call	putenv
		add	esp, 10h
		test	eax, eax
		jz	short loc_8000503
		mov	eax, ds:optind
		add	eax, 3FFFFFFFh
		lea	edx, ds:0[eax*4]
		mov	eax, [ebx+4]
		add	eax, edx
		mov	eax, [eax]
		mov	[ebp+name], eax
		sub	esp, 8
		push	3Dh		; c
		push	[ebp+name]	; s
		call	strchr
		add	esp, 10h
		mov	byte ptr [eax],	0
		sub	esp, 0Ch
		push	[ebp+name]
		call	quote
		add	esp, 10h
		mov	edi, eax
		sub	esp, 0Ch
		push	offset aCannotSetS ; "cannot set %s"
		call	gettext
		add	esp, 10h
		mov	esi, eax
		call	__errno_location
		mov	eax, [eax]
		push	edi
		push	esi		; format
		push	eax		; errnum
		push	7Dh		; status
		call	error
		add	esp, 10h

loc_8000503:				; CODE XREF: main+203j	main+22Fj ...
		mov	eax, ds:optind
		cmp	eax, [ebx]
		jge	short loc_8000535
		mov	eax, ds:optind
		lea	edx, ds:0[eax*4]
		mov	eax, [ebx+4]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 8
		push	3Dh		; c
		push	eax		; s
		call	strchr
		add	esp, 10h
		test	eax, eax
		jnz	loc_8000473

loc_8000535:				; CODE XREF: main+2DEj
		mov	eax, ds:optind
		cmp	[ebx], eax
		jg	short loc_800058A
		mov	eax, ds:environ
		mov	[ebp+e], eax
		jmp	short loc_8000577
; ---------------------------------------------------------------------------

loc_8000548:				; CODE XREF: main+352j
		cmp	[ebp+opt_nul_terminate_output],	0
		jz	short loc_8000555
		mov	ecx, 0
		jmp	short loc_800055A
; ---------------------------------------------------------------------------

loc_8000555:				; CODE XREF: main+320j
		mov	ecx, 0Ah

loc_800055A:				; CODE XREF: main+327j
		mov	eax, [ebp+e]
		lea	edx, [eax+4]
		mov	[ebp+e], edx
		mov	eax, [eax]
		sub	esp, 4
		push	ecx
		push	eax
		push	offset format	; "%s%c"
		call	printf
		add	esp, 10h

loc_8000577:				; CODE XREF: main+31Aj
		mov	eax, [ebp+e]
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_8000548
		sub	esp, 0Ch
		push	0		; status
		call	exit
; ---------------------------------------------------------------------------

loc_800058A:				; CODE XREF: main+310j
		cmp	[ebp+opt_nul_terminate_output],	0
		jz	short loc_80005C2
		sub	esp, 0Ch
		push	offset aCannotSpecifyN ; "cannot specify --null	(-0) with command"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		sub	esp, 4
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		sub	esp, 0Ch
		push	7Dh		; status
		call	usage
; ---------------------------------------------------------------------------

loc_80005C2:				; CODE XREF: main+362j
		mov	eax, ds:optind
		lea	edx, ds:0[eax*4]
		mov	eax, [ebx+4]
		add	edx, eax
		mov	eax, ds:optind
		lea	ecx, ds:0[eax*4]
		mov	eax, [ebx+4]
		add	eax, ecx
		mov	eax, [eax]
		sub	esp, 8
		push	edx		; argv
		push	eax		; file
		call	execvp
		add	esp, 10h
		call	__errno_location
		mov	eax, [eax]
		cmp	eax, 2
		jnz	short loc_8000606
		mov	eax, 7Fh
		jmp	short loc_800060B
; ---------------------------------------------------------------------------

loc_8000606:				; CODE XREF: main+3D1j
		mov	eax, 7Eh

loc_800060B:				; CODE XREF: main+3D8j
		mov	[ebp+exit_status], eax
		mov	eax, ds:optind
		lea	edx, ds:0[eax*4]
		mov	eax, [ebx+4]
		add	eax, edx
		mov	ebx, [eax]
		call	__errno_location
		mov	eax, [eax]
		push	ebx
		push	offset aS	; "%s"
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+exit_status] ; status

loc_800063F:				; DATA XREF: .eh_frame:08000B14o
					; .eh_frame:08000B34o ...
		call	exit
main		endp

_text		ends

; ===========================================================================

; Segment type:	Zero-length
; Segment permissions: Read/Write
_data		segment	byte public 'DATA' use32
_data		ends

; Function-local static	variable
; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
		assume cs:_bss
		;org 8000648h
		assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing
; char *dummy_environ_5100[1]
dummy_environ_5100 dd ?			; DATA XREF: main+16Do
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment '32byte' can not be represented in assembly
_rodata		segment	para public 'CONST' use32
		assume cs:_rodata
		;org 8000660h
; char msgid[]
msgid		db 0Ah			; DATA XREF: emit_ancillary_info+1Do
		db 'Report %s bugs to %s',0Ah,0
aBugCoreutils@g	db 'bug-coreutils@gnu.org',0 ; DATA XREF: emit_ancillary_info+2Do
		align 10h
; char aSHomePageHttpW[]
aSHomePageHttpW	db '%s home page: <http://www.gnu.org/software/%s/>',0Ah,0
					; DATA XREF: emit_ancillary_info+3Fo
; char domainname[]
domainname	db 'coreutils',0        ; DATA XREF: emit_ancillary_info+4Fo
					; main+49o ...
aGnuCoreutils	db 'GNU coreutils',0    ; DATA XREF: emit_ancillary_info+54o
					; main+E2o
		align 4
; char aGeneralHelpUsi[]
aGeneralHelpUsi	db 'General help using GNU software: <http://www.gnu.org/gethelp/>',0Ah,0
					; DATA XREF: emit_ancillary_info+6Bo
; char s2[]
s2		db 'en_',0              ; DATA XREF: emit_ancillary_info+A2o
; char aReportSTransla[]
aReportSTransla	db 'Report %s translation bugs to <http://translationproject.org/team'
					; DATA XREF: emit_ancillary_info+CCo
		db '/>',0Ah,0
		align 4
; char aForCompleteDoc[]
aForCompleteDoc	db 'For complete documentation, run: info coreutils ',27h,'%s invocation'
					; DATA XREF: emit_ancillary_info+FCo
		db 27h,0Ah,0
aIgnoreEnvironm	db 'ignore-environment',0 ; DATA XREF: .rodata:longoptso
aNull		db 'null',0             ; DATA XREF: .rodata:longoptso
aUnset		db 'unset',0            ; DATA XREF: .rodata:longoptso
aHelp		db 'help',0             ; DATA XREF: .rodata:longoptso
aVersion	db 'version',0          ; DATA XREF: .rodata:longoptso
		align 10h
; const	option longopts[6]
longopts	option <offset aIgnoreEnvironm,	0, 0, 69h> ; DATA XREF:	main+10Eo
					; main+1DCo
		option <offset aNull, 0, 0, 30h> ; "ignore-environment"
		option <offset aUnset, 1, 0, 75h>
		option <offset aHelp, 0, 0, 0FFFFFF7Eh>
		option <offset aVersion, 0, 0, 0FFFFFF7Dh>
		option	<0>
; char aTrySHelpForMor[]
aTrySHelpForMor	db 'Try `%s --help',27h,' for more information.',0Ah,0
					; DATA XREF: usage+16o
		align 4
; char aUsageSOption__[]
aUsageSOption__	db 'Usage: %s [OPTION]... [-] [NAME=VALUE]... [COMMAND [ARG]...]',0Ah,0
					; DATA XREF: usage+46o
		align 4
; char aSetEachNameToV[]
aSetEachNameToV	db 'Set each NAME to VALUE in the environment and run COMMAND.',0Ah
					; DATA XREF: usage+69o
		db 0Ah
		db '  -i, --ignore-environment  start with an empty environment',0Ah
		db '  -0, --null           end each output line with 0 byte rather th'
		db 'an newline',0Ah
		db '  -u, --unset=NAME     remove variable from the environment',0Ah,0
		align 4
; char aHelpDisplayThi[]
aHelpDisplayThi	db '      --help     display this help and exit',0Ah,0
					; DATA XREF: usage+8Co
		align 4
; char aVersionOutputV[]
aVersionOutputV	db '      --version  output version information and exit',0Ah,0
					; DATA XREF: usage+AFo
		align 4
; char aAMereImpliesI_[]
aAMereImpliesI_	db 0Ah			; DATA XREF: usage+D2o
		db 'A mere - implies -i.  If no COMMAND, print the resulting environm'
		db 'ent.',0Ah,0
; char locale
locale		db 0			; DATA XREF: main+32o
; char dirname[]
dirname		db '/usr/local/share/locale',0 ; DATA XREF: main+44o
aDavidMackenzie	db 'David MacKenzie',0  ; DATA XREF: main+D7o
aRichardMlynari	db 'Richard Mlynarik',0 ; DATA XREF: main+DCo
aEnv		db 'env',0              ; DATA XREF: main+E7o
; char shortopts[]
shortopts	db '+iu:0',0            ; DATA XREF: main+113o main+1E1o
; char asc_8000AA0[]
asc_8000AA0	db '-',0                ; DATA XREF: main+151o main+21Fo
; char aCannotUnsetS[]
aCannotUnsetS	db 'cannot unset %s',0  ; DATA XREF: main+1B4o
; char aCannotSetS[]
aCannotSetS	db 'cannot set %s',0    ; DATA XREF: main+2B4o
; char format[]
format		db '%s%c',0             ; DATA XREF: main+33Eo
		align 4
; char aCannotSpecifyN[]
aCannotSpecifyN	db 'cannot specify --null (-0) with command',0 ; DATA XREF: main+367o
; char aS[]
aS		db '%s',0               ; DATA XREF: main+3FDo
_rodata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_eh_frame	segment	dword public 'CONST' use32
		assume cs:_eh_frame
		;org 8000AF4h
		dd 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 2	dup(1Ch)
		dd offset loc_800063F-8001153h
		dd 14h,	80E4100h, 0D420285h, 0CC55005h,	404h, 20h, 3Ch
		dd offset loc_800063F-800115Fh
		dd 11Ch, 80E4100h, 0D420285h, 3834405h,	0C5011403h, 4040CC3h
		dd 18h,	60h
		dd offset loc_800063F-8001067h
		dd 0FCh, 80E4100h, 0D420285h, 3834405h,	2Ch, 7Ch
		dd offset loc_800063F-8000F87h
		dd 418h, 10C4400h, 5104700h, 46007502h,	7075030Fh, 2071006h
		dd 6107C75h, 10787502h,	74750203h
_eh_frame	ends

; ===========================================================================

; Segment type:	Externs
; extern
		extrn exit_failure:dword ; DATA	XREF: initialize_exit_failure+Cw
		extrn program_name:dword ; DATA	XREF: emit_ancillary_info+7r
					; emit_ancillary_info+B6r ...
		extrn last_component:near ; CODE XREF: emit_ancillary_info+10p
					; emit_ancillary_info+BFp ...
; char *gettext(const char *msgid)
		extrn gettext:near	; CODE XREF: emit_ancillary_info+22p
					; emit_ancillary_info+44p ...
; int printf(const char	*format, ...)
		extrn printf:near	; CODE XREF: emit_ancillary_info+34p
					; emit_ancillary_info+5Ap ...
; struct _IO_FILE *stdout
		extrn stdout:dword	; DATA XREF: emit_ancillary_info+62r
					; usage+60r ...
		extrn fputs_unlocked:near ; CODE XREF: emit_ancillary_info+7Dp
					; usage+7Bp ...
; char *setlocale(int category,	const char *locale)
		extrn setlocale:near	; CODE XREF: emit_ancillary_info+8Cp
					; main+39p
; int strncmp(const char *s1, const char *s2, size_t n)
		extrn strncmp:near	; CODE XREF: emit_ancillary_info+AAp
; struct _IO_FILE *stderr
		extrn stderr:dword	; DATA XREF: usage+25r
; int fprintf(FILE *stream, const char *format,	...)
		extrn fprintf:near	; CODE XREF: usage+30p
; void exit(int	status)
		extrn exit:near		; CODE XREF: usage+F7p	main+FAp ...
		extrn set_program_name:near ; CODE XREF: main+27p
; char *bindtextdomain(const char *domainname, const char *dirname)
		extrn bindtextdomain:near ; CODE XREF: main+4Ep
; char *textdomain(const char *domainname)
		extrn textdomain:near	; CODE XREF: main+5Ep
; void close_stdout(void)
		extrn close_stdout	; DATA XREF: main+76o
; int atexit(void (*func)(void))
		extrn atexit:near	; CODE XREF: main+7Bp
		extrn Version:dword	; DATA XREF: main:loc_80002F3r
		extrn version_etc:near	; CODE XREF: main+EDp
; int getopt_long(int argc, char *const	*argv, const char *shortopts, const struct option *longopts, int *longind)
		extrn getopt_long:near	; CODE XREF: main+11Dp	main+1EBp
; int optind
		extrn optind:dword	; DATA XREF: main+132r	main+13Br ...
; int strcmp(const char	*s1, const char	*s2)
		extrn strcmp:near	; CODE XREF: main+157p	main+225p
		extrn environ:dword	; DATA XREF: main+16Dw	main+312r
; char *optarg
		extrn optarg:dword	; DATA XREF: main+189r	main+19Er
; int unsetenv(const char *name)
		extrn unsetenv:near	; CODE XREF: main+192p
		extrn quote:near	; CODE XREF: main+1A7p	main+2A7p
; int *_errno_location(void)
		extrn __errno_location:near ; CODE XREF: main+1C3p main+2C3p ...
; void error(int status, int errnum, const char	*format, ...)
		extrn error:near	; CODE XREF: main+1CFp	main+2CFp ...
; int putenv(char *string)
		extrn putenv:near	; CODE XREF: main+267p
; char *strchr(const char *s, int c)
		extrn strchr:near	; CODE XREF: main+296p	main+2F9p
; int execvp(const char	*file, char *const *argv)
		extrn execvp:near	; CODE XREF: main+3BFp


		end
