;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B611-7234-BB			    |
; |		Doskey Lee, Kingsoft Internet Security Software		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	45B76586A521D0615416190A944B5942
; Input	CRC32 :	A6350E17

; File Name   :	D:\coreutils-o\chcon.o
; Format      :	ELF for	Intel 386 (Relocatable)
;
; Source File :	'chcon.c'

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	byte public 'CODE' use32
		assume cs:_text
		;org 8000000h
		assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void emit_ancillary_info()
emit_ancillary_info proc near		; CODE XREF: usage+13Fp

lc_messages	= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset msgid	; "\nReport %s bugs to %s\n"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset aBugCoreutils@g ; "bug-coreutils@gnu.org"
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	offset aSHomePageHttpW ; "%s home page:	<http://www.gnu.org/softw"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset domainname ; "coreutils"
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aGeneralHelpUsi ; "General help using GNU software: <http:"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		sub	esp, 8
		push	0		; locale
		push	5		; category
		call	setlocale
		add	esp, 10h
		mov	[ebp+lc_messages], eax
		cmp	[ebp+lc_messages], 0
		jz	short loc_80000E6
		sub	esp, 4
		push	3		; n
		push	offset s2	; "en_"
		push	[ebp+lc_messages] ; s1
		call	strncmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_80000E6
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aReportSTransla ; "Report %s translation	bugs to	<http://t"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h

loc_80000E6:				; CODE XREF: emit_ancillary_info+9Bj
					; emit_ancillary_info+B4j
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aForCompleteDoc ; "For complete documentation, run: info	c"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		nop
		mov	ebx, [ebp+var_4]
		leave
		retn
emit_ancillary_info endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl ignore_ptr(void *p)
ignore_ptr	proc near		; CODE XREF: process_file+180p

p		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		nop
		pop	ebp
		retn
ignore_ptr	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl freecon(char *con)
freecon		proc near		; CODE XREF: change_file_context+21Dp

con		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		nop
		pop	ebp
		retn
freecon		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; int __cdecl getfilecon(const char *file, char	**con)
getfilecon	proc near		; CODE XREF: main+3CFp

file		= dword	ptr  8
con		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		call	__errno_location
		mov	dword ptr [eax], 5Fh
		mov	eax, 0FFFFFFFFh
		leave
		retn
getfilecon	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; context_t __cdecl context_new(const char *s)
context_new	proc near		; CODE XREF: compute_context_from_mask+12p
					; change_file_context+12Ap ...

s		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		call	__errno_location
		mov	dword ptr [eax], 5Fh
		mov	eax, 0
		leave
		retn
context_new	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; char *__cdecl	context_str(context_t con)
context_str	proc near		; CODE XREF: change_file_context+148p

con		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		call	__errno_location
		mov	dword ptr [eax], 5Fh
		mov	eax, 0
		leave
		retn
context_str	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl context_free(context_t c)
context_free	proc near		; CODE XREF: compute_context_from_mask+216p
					; change_file_context+20Ep ...

c		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		nop
		pop	ebp
		retn
context_free	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; int __cdecl context_user_set(context_t sc, const char	*s)
context_user_set proc near		; CODE XREF: compute_context_from_mask+78p

sc		= dword	ptr  8
s		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		call	__errno_location
		mov	dword ptr [eax], 5Fh
		mov	eax, 0FFFFFFFFh
		leave
		retn
context_user_set endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; int __cdecl context_role_set(context_t sc, const char	*s)
context_role_set proc near		; CODE XREF: compute_context_from_mask+144p

sc		= dword	ptr  8
s		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		call	__errno_location
		mov	dword ptr [eax], 5Fh
		mov	eax, 0FFFFFFFFh
		leave
		retn
context_role_set endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; int __cdecl context_range_set(context_t sc, const char *s)
context_range_set proc near		; CODE XREF: compute_context_from_mask+DEp

sc		= dword	ptr  8
s		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		call	__errno_location
		mov	dword ptr [eax], 5Fh
		mov	eax, 0FFFFFFFFh
		leave
		retn
context_range_set endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; int __cdecl context_type_set(context_t sc, const char	*s)
context_type_set proc near		; CODE XREF: compute_context_from_mask+1AAp

sc		= dword	ptr  8
s		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		call	__errno_location
		mov	dword ptr [eax], 5Fh
		mov	eax, 0FFFFFFFFh
		leave
		retn
context_type_set endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; int __cdecl compute_context_from_mask(char *context, context_t *ret)
compute_context_from_mask proc near	; CODE XREF: change_file_context+10Bp

ok		= byte ptr -11h
new_context	= dword	ptr -10h
saved_errno	= dword	ptr -0Ch
context		= dword	ptr  8
ret		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	[ebp+ok], 1
		sub	esp, 0Ch
		push	[ebp+context]	; s
		call	context_new
		add	esp, 10h
		mov	[ebp+new_context], eax
		cmp	[ebp+new_context], 0
		jnz	short loc_8000239
		sub	esp, 0Ch
		push	[ebp+context]
		call	quotearg_colon
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aFailedToCreate ; "failed to create security context: %s"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		push	esi
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	eax, 1
		jmp	loc_8000414
; ---------------------------------------------------------------------------

loc_8000239:				; CODE XREF: compute_context_from_mask+21j
		mov	eax, ds:specified_user
		test	eax, eax
		jz	short loc_800029F
		mov	eax, ds:specified_user
		sub	esp, 8
		push	eax		; s
		push	[ebp+new_context] ; sc
		call	context_user_set
		add	esp, 10h
		test	eax, eax
		jz	short loc_800029F
		mov	eax, ds:specified_user
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aFailedToSetSSe ; "failed to set	%s security context compo"...
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		sub	esp, 0Ch
		push	esi
		push	offset aUser	; "user"
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 20h
		mov	[ebp+ok], 0

loc_800029F:				; CODE XREF: compute_context_from_mask+6Aj
					; compute_context_from_mask+82j
		mov	eax, ds:specified_range
		test	eax, eax
		jz	short loc_8000305
		mov	eax, ds:specified_range
		sub	esp, 8
		push	eax		; s
		push	[ebp+new_context] ; sc
		call	context_range_set
		add	esp, 10h
		test	eax, eax
		jz	short loc_8000305
		mov	eax, ds:specified_range
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aFailedToSetSSe ; "failed to set	%s security context compo"...
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		sub	esp, 0Ch
		push	esi
		push	offset aRange	; "range"
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 20h
		mov	[ebp+ok], 0

loc_8000305:				; CODE XREF: compute_context_from_mask+D0j
					; compute_context_from_mask+E8j
		mov	eax, ds:specified_role
		test	eax, eax
		jz	short loc_800036B
		mov	eax, ds:specified_role
		sub	esp, 8
		push	eax		; s
		push	[ebp+new_context] ; sc
		call	context_role_set
		add	esp, 10h
		test	eax, eax
		jz	short loc_800036B
		mov	eax, ds:specified_role
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aFailedToSetSSe ; "failed to set	%s security context compo"...
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		sub	esp, 0Ch
		push	esi
		push	offset aRole	; "role"
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 20h
		mov	[ebp+ok], 0

loc_800036B:				; CODE XREF: compute_context_from_mask+136j
					; compute_context_from_mask+14Ej
		mov	eax, ds:specified_type
		test	eax, eax
		jz	short loc_80003D1
		mov	eax, ds:specified_type
		sub	esp, 8
		push	eax		; s
		push	[ebp+new_context] ; sc
		call	context_type_set
		add	esp, 10h
		test	eax, eax
		jz	short loc_80003D1
		mov	eax, ds:specified_type
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aFailedToSetSSe ; "failed to set	%s security context compo"...
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		sub	esp, 0Ch
		push	esi
		push	offset aType	; "type"
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 20h
		mov	[ebp+ok], 0

loc_80003D1:				; CODE XREF: compute_context_from_mask+19Cj
					; compute_context_from_mask+1B4j
		movzx	eax, [ebp+ok]
		xor	eax, 1
		test	al, al
		jz	short loc_8000407
		call	__errno_location
		mov	eax, [eax]
		mov	[ebp+saved_errno], eax
		sub	esp, 0Ch
		push	[ebp+new_context] ; c
		call	context_free
		add	esp, 10h
		call	__errno_location
		mov	edx, eax
		mov	eax, [ebp+saved_errno]
		mov	[edx], eax
		mov	eax, 1
		jmp	short loc_8000414
; ---------------------------------------------------------------------------

loc_8000407:				; CODE XREF: compute_context_from_mask+204j
		mov	eax, [ebp+ret]
		mov	edx, [ebp+new_context]
		mov	[eax], edx
		mov	eax, 0

loc_8000414:				; CODE XREF: compute_context_from_mask+5Ej
					; compute_context_from_mask+22Fj
		lea	esp, [ebp-8]
		pop	ebx
		pop	esi
		pop	ebp
		retn
compute_context_from_mask endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; int __cdecl change_file_context(int fd, const	char *file)
change_file_context proc near		; CODE XREF: process_file+46Dp

file		= dword	ptr -3Ch
file_context	= dword	ptr -34h
context		= dword	ptr -30h
errors		= dword	ptr -2Ch
status		= dword	ptr -28h
context_string	= dword	ptr -24h
fail		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
fd		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	eax, [ebp+arg_4]
		mov	[ebp+file], eax
		mov	eax, large gs:14h
		mov	[ebp+var_1C], eax
		xor	eax, eax
		mov	[ebp+file_context], 0
		mov	[ebp+errors], 0
		mov	eax, ds:specified_context
		test	eax, eax
		jnz	loc_800053C
		movzx	eax, ds:affect_symlink_referent
		test	al, al
		jz	short loc_8000472
		sub	esp, 4
		lea	eax, [ebp+file_context]
		push	eax
		push	[ebp+file]
		push	[ebp+fd]
		call	getfileconat
		add	esp, 10h
		jmp	short loc_8000487
; ---------------------------------------------------------------------------

loc_8000472:				; CODE XREF: change_file_context+3Ej
		sub	esp, 4
		lea	eax, [ebp+file_context]
		push	eax
		push	[ebp+file]
		push	[ebp+fd]
		call	lgetfileconat
		add	esp, 10h

loc_8000487:				; CODE XREF: change_file_context+55j
		mov	[ebp+status], eax
		cmp	[ebp+status], 0
		jns	short loc_80004DC
		call	__errno_location
		mov	eax, [eax]
		cmp	eax, 3Dh
		jz	short loc_80004DC
		sub	esp, 0Ch
		push	[ebp+file]
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aFailedToGetSec ; "failed to get	security context of %s"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		push	esi
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	eax, 1
		jmp	loc_8000643
; ---------------------------------------------------------------------------

loc_80004DC:				; CODE XREF: change_file_context+73j
					; change_file_context+7Fj
		mov	eax, [ebp+file_context]
		test	eax, eax
		jnz	short loc_800051B
		sub	esp, 0Ch
		push	[ebp+file]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aCanTApplyParti ; "can't apply partial context to unlabele"...
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	eax, 1
		jmp	loc_8000643
; ---------------------------------------------------------------------------

loc_800051B:				; CODE XREF: change_file_context+C6j
		mov	eax, [ebp+file_context]
		sub	esp, 8
		lea	edx, [ebp+context]
		push	edx		; ret
		push	eax		; context
		call	compute_context_from_mask
		add	esp, 10h
		test	eax, eax
		jz	short loc_800055C
		mov	eax, 1
		jmp	loc_8000643
; ---------------------------------------------------------------------------

loc_800053C:				; CODE XREF: change_file_context+2Fj
		mov	eax, ds:specified_context
		sub	esp, 0Ch
		push	eax		; s
		call	context_new
		add	esp, 10h
		mov	[ebp+context], eax
		mov	eax, [ebp+context]
		test	eax, eax
		jnz	short loc_800055C
		call	abort
; ---------------------------------------------------------------------------

loc_800055C:				; CODE XREF: change_file_context+115j
					; change_file_context+13Aj
		mov	eax, [ebp+context]
		sub	esp, 0Ch
		push	eax		; con
		call	context_str
		add	esp, 10h
		mov	[ebp+context_string], eax
		mov	eax, [ebp+file_context]
		test	eax, eax
		jz	short loc_800058F
		mov	eax, [ebp+file_context]
		sub	esp, 8
		push	eax		; s2
		push	[ebp+context_string] ; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		jz	loc_8000622

loc_800058F:				; CODE XREF: change_file_context+158j
		movzx	eax, ds:affect_symlink_referent
		test	al, al
		jz	short loc_80005B0
		sub	esp, 4
		push	[ebp+context_string]
		push	[ebp+file]
		push	[ebp+fd]
		call	setfileconat
		add	esp, 10h
		jmp	short loc_80005C4
; ---------------------------------------------------------------------------

loc_80005B0:				; CODE XREF: change_file_context+17Dj
		sub	esp, 4
		push	[ebp+context_string]
		push	[ebp+file]
		push	[ebp+fd]
		call	lsetfileconat
		add	esp, 10h

loc_80005C4:				; CODE XREF: change_file_context+193j
		mov	[ebp+fail], eax
		cmp	[ebp+fail], 0
		jz	short loc_8000622
		mov	[ebp+errors], 1
		sub	esp, 8
		push	[ebp+context_string]
		push	1
		call	quote_n
		add	esp, 10h
		mov	edi, eax
		sub	esp, 8
		push	[ebp+file]
		push	0
		call	quote_n
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aFailedToChange ; "failed to change context of %s to %s"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		sub	esp, 0Ch
		push	edi
		push	esi
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 20h

loc_8000622:				; CODE XREF: change_file_context+16Ej
					; change_file_context+1B0j
		mov	eax, [ebp+context]
		sub	esp, 0Ch
		push	eax		; c
		call	context_free
		add	esp, 10h
		mov	eax, [ebp+file_context]
		sub	esp, 0Ch
		push	eax		; con
		call	freecon
		add	esp, 10h
		mov	eax, [ebp+errors]

loc_8000643:				; CODE XREF: change_file_context+BCj
					; change_file_context+FBj ...
		mov	ecx, [ebp+var_1C]
		xor	ecx, large gs:14h
		jz	short loc_8000654
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_8000654:				; CODE XREF: change_file_context+232j
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
change_file_context endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; _Bool	__cdecl	process_file(FTS *fts, FTSENT *ent)
process_file	proc near		; CODE XREF: process_files+7Ap

ok		= byte ptr -15h
file_full_name	= dword	ptr -14h
file		= dword	ptr -10h
file_stats	= dword	ptr -0Ch
fts		= dword	ptr  8
ent		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	eax, [ebp+ent]
		mov	eax, [eax+18h]
		mov	[ebp+file_full_name], eax
		mov	eax, [ebp+ent]
		mov	eax, [eax+14h]
		mov	[ebp+file], eax
		mov	eax, [ebp+ent]
		add	eax, 40h
		mov	[ebp+file_stats], eax
		mov	[ebp+ok], 1
		mov	eax, [ebp+ent]
		movzx	eax, word ptr [eax+38h]
		movzx	eax, ax
		cmp	eax, 0Ah	; switch 11 cases
		ja	loc_8000953	; jumptable 0800069D default case
		mov	eax, ds:off_800184C[eax*4]
		jmp	eax		; switch jump
; ---------------------------------------------------------------------------

loc_800069F:				; CODE XREF: process_file+41j
					; DATA XREF: .rodata:off_800184Co
		movzx	eax, ds:recurse	; jumptable 0800069D case 1
		test	al, al
		jz	loc_8000956
		mov	eax, ds:root_dev_ino
		test	eax, eax
		jz	loc_80007EE
		mov	eax, [ebp+ent]
		mov	ecx, [eax+98h]
		mov	ebx, [eax+9Ch]
		mov	eax, ds:root_dev_ino
		mov	edx, [eax+4]
		mov	eax, [eax]
		mov	esi, ebx
		xor	esi, edx
		xor	eax, ecx
		or	eax, esi
		test	eax, eax
		jnz	loc_80007EE
		mov	eax, [ebp+ent]
		mov	ecx, [eax+40h]
		mov	ebx, [eax+44h]
		mov	eax, ds:root_dev_ino
		mov	edx, [eax+0Ch]
		mov	eax, [eax+8]
		mov	esi, ebx
		xor	esi, edx
		xor	eax, ecx
		or	eax, esi
		test	eax, eax
		jnz	loc_80007EE
		sub	esp, 8
		push	offset asc_800169D ; "/"
		push	[ebp+file_full_name] ; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		jnz	short loc_800074F
		sub	esp, 0Ch
		push	[ebp+file_full_name]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aItIsDangerousT ; "it is	dangerous to operate recursively "...
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		jmp	short loc_8000797
; ---------------------------------------------------------------------------

loc_800074F:				; CODE XREF: process_file+C1j
		sub	esp, 8
		push	offset asc_800169D ; "/"
		push	1
		call	quote_n
		add	esp, 10h
		mov	esi, eax
		sub	esp, 8
		push	[ebp+file_full_name]
		push	0
		call	quote_n
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aItIsDangerou_0 ; "it is	dangerous to operate recursively "...
		call	gettext
		add	esp, 10h
		sub	esp, 0Ch
		push	esi
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 20h

loc_8000797:				; CODE XREF: process_file+F1j
		sub	esp, 0Ch
		push	offset aUseNoPreserveR ; "use --no-preserve-root to override this"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		sub	esp, 4
		push	4		; int
		push	[ebp+ent]	; FTSENT *
		push	[ebp+fts]	; FTS *
		call	fts_set
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+fts]	; FTS *
		call	fts_read
		add	esp, 10h
		sub	esp, 0Ch
		push	eax		; p
		call	ignore_ptr
		add	esp, 10h
		mov	eax, 0
		jmp	loc_8000AFE
; ---------------------------------------------------------------------------

loc_80007EE:				; CODE XREF: process_file+59j
					; process_file+82j ...
		mov	eax, 1
		jmp	loc_8000AFE
; ---------------------------------------------------------------------------

loc_80007F8:				; CODE XREF: process_file+41j
					; DATA XREF: .rodata:off_800184Co
		movzx	eax, ds:recurse	; jumptable 0800069D case 6
		xor	eax, 1
		test	al, al
		jz	loc_8000959
		mov	eax, 1
		jmp	loc_8000AFE
; ---------------------------------------------------------------------------

loc_8000814:				; CODE XREF: process_file+41j
					; DATA XREF: .rodata:off_800184Co
		mov	eax, [ebp+ent]	; jumptable 0800069D case 10
		mov	eax, [eax+2Ch]
		test	eax, eax
		jnz	short loc_800084F
		mov	eax, [ebp+ent]
		mov	eax, [eax+0Ch]
		test	eax, eax
		jnz	short loc_800084F
		mov	eax, [ebp+ent]
		mov	dword ptr [eax+0Ch], 1
		sub	esp, 4
		push	1		; int
		push	[ebp+ent]	; FTSENT *
		push	[ebp+fts]	; FTS *
		call	fts_set
		add	esp, 10h
		mov	eax, 1
		jmp	loc_8000AFE
; ---------------------------------------------------------------------------

loc_800084F:				; CODE XREF: process_file+1C0j
					; process_file+1CAj
		sub	esp, 0Ch
		push	[ebp+file_full_name]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aCannotAccessS ;	"cannot	access %s"
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, [ebp+ent]
		mov	eax, [eax+1Ch]
		push	ebx
		push	edx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	[ebp+ok], 0
		jmp	loc_800095D
; ---------------------------------------------------------------------------

loc_800088D:				; CODE XREF: process_file+41j
					; DATA XREF: .rodata:off_800184Co
		sub	esp, 0Ch	; jumptable 0800069D case 7
		push	[ebp+file_full_name]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aS	; "%s"
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, [ebp+ent]
		mov	eax, [eax+1Ch]
		push	ebx
		push	edx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	[ebp+ok], 0
		jmp	loc_800095D
; ---------------------------------------------------------------------------

loc_80008CB:				; CODE XREF: process_file+41j
					; DATA XREF: .rodata:off_800184Co
		sub	esp, 0Ch	; jumptable 0800069D case 4
		push	[ebp+file_full_name]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aCannotReadDire ; "cannot read directory	%s"
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, [ebp+ent]
		mov	eax, [eax+1Ch]
		push	ebx
		push	edx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	[ebp+ok], 0
		jmp	short loc_800095D
; ---------------------------------------------------------------------------

loc_8000906:				; CODE XREF: process_file+41j
					; DATA XREF: .rodata:off_800184Co
		sub	esp, 8		; jumptable 0800069D case 2
		push	[ebp+ent]
		push	[ebp+fts]
		call	cycle_warning_required
		add	esp, 10h
		test	al, al
		jz	short loc_800095C
		sub	esp, 0Ch
		push	[ebp+file_full_name]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aWarningCircula ; "WARNING: Circular directory structure.\"...
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	eax, 0
		jmp	loc_8000AFE
; ---------------------------------------------------------------------------

loc_8000953:				; CODE XREF: process_file+34j
					; process_file+41j
					; DATA XREF: ...
		nop			; jumptable 0800069D default case
		jmp	short loc_800095D
; ---------------------------------------------------------------------------

loc_8000956:				; CODE XREF: process_file+4Cj
		nop
		jmp	short loc_800095D
; ---------------------------------------------------------------------------

loc_8000959:				; CODE XREF: process_file+1A8j
		nop
		jmp	short loc_800095D
; ---------------------------------------------------------------------------

loc_800095C:				; CODE XREF: process_file+2BDj
		nop

loc_800095D:				; CODE XREF: process_file+22Cj
					; process_file+26Aj ...
		mov	eax, [ebp+ent]
		movzx	eax, word ptr [eax+38h]
		cmp	ax, 6
		jnz	loc_8000A7E
		cmp	[ebp+ok], 0
		jz	loc_8000A7E
		mov	eax, ds:root_dev_ino
		test	eax, eax
		jz	loc_8000A7E
		mov	eax, [ebp+file_stats]
		mov	ecx, [eax+58h]
		mov	ebx, [eax+5Ch]
		mov	eax, ds:root_dev_ino
		mov	edx, [eax+4]
		mov	eax, [eax]
		mov	esi, ebx
		xor	esi, edx
		xor	eax, ecx
		or	eax, esi
		test	eax, eax
		jnz	loc_8000A7E
		mov	eax, [ebp+file_stats]
		mov	ecx, [eax]
		mov	ebx, [eax+4]
		mov	eax, ds:root_dev_ino
		mov	edx, [eax+0Ch]
		mov	eax, [eax+8]
		mov	esi, ebx
		xor	esi, edx
		xor	eax, ecx
		or	eax, esi
		test	eax, eax
		jnz	loc_8000A7E
		sub	esp, 8
		push	offset asc_800169D ; "/"
		push	[ebp+file_full_name] ; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		jnz	short loc_8000A12
		sub	esp, 0Ch
		push	[ebp+file_full_name]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aItIsDangerousT ; "it is	dangerous to operate recursively "...
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		jmp	short loc_8000A5A
; ---------------------------------------------------------------------------

loc_8000A12:				; CODE XREF: process_file+384j
		sub	esp, 8
		push	offset asc_800169D ; "/"
		push	1
		call	quote_n
		add	esp, 10h
		mov	esi, eax
		sub	esp, 8
		push	[ebp+file_full_name]
		push	0
		call	quote_n
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aItIsDangerou_0 ; "it is	dangerous to operate recursively "...
		call	gettext
		add	esp, 10h
		sub	esp, 0Ch
		push	esi
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 20h

loc_8000A5A:				; CODE XREF: process_file+3B4j
		sub	esp, 0Ch
		push	offset aUseNoPreserveR ; "use --no-preserve-root to override this"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	[ebp+ok], 0

loc_8000A7E:				; CODE XREF: process_file+30Cj
					; process_file+316j ...
		cmp	[ebp+ok], 0
		jz	short loc_8000AD9
		movzx	eax, ds:verbose
		test	al, al
		jz	short loc_8000ABC
		sub	esp, 0Ch
		push	[ebp+file_full_name]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aChangingSecuri ; "changing security context of %s\n"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h

loc_8000ABC:				; CODE XREF: process_file+431j
		mov	eax, [ebp+fts]
		mov	eax, [eax+1Ch]
		sub	esp, 8
		push	[ebp+file]	; file
		push	eax		; fd
		call	change_file_context
		add	esp, 10h
		test	eax, eax
		jz	short loc_8000AD9
		mov	[ebp+ok], 0

loc_8000AD9:				; CODE XREF: process_file+426j
					; process_file+477j
		movzx	eax, ds:recurse
		xor	eax, 1
		test	al, al
		jz	short loc_8000AFA
		sub	esp, 4
		push	4		; int
		push	[ebp+ent]	; FTSENT *
		push	[ebp+fts]	; FTS *
		call	fts_set
		add	esp, 10h

loc_8000AFA:				; CODE XREF: process_file+489j
		movzx	eax, [ebp+ok]

loc_8000AFE:				; CODE XREF: process_file+18Dj
					; process_file+197j ...
		lea	esp, [ebp-8]
		pop	ebx
		pop	esi
		pop	ebp
		retn
process_file	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; _Bool	__cdecl	process_files(char **files, int	bit_flags)
process_files	proc near		; CODE XREF: main+574p

ok		= byte ptr -11h
fts		= dword	ptr -10h
ent		= dword	ptr -0Ch
var_4		= dword	ptr -4
files		= dword	ptr  8
bit_flags	= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	[ebp+ok], 1
		sub	esp, 4
		push	0
		push	[ebp+bit_flags]
		push	[ebp+files]
		call	xfts_open
		add	esp, 10h
		mov	[ebp+fts], eax

loc_8000B26:				; CODE XREF: process_files+93j
		sub	esp, 0Ch
		push	[ebp+fts]	; FTS *
		call	fts_read
		add	esp, 10h
		mov	[ebp+ent], eax
		cmp	[ebp+ent], 0
		jnz	short loc_8000B76
		call	__errno_location
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_8000B9A
		sub	esp, 0Ch
		push	offset aFts_readFailed ; "fts_read failed"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		sub	esp, 4
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	[ebp+ok], 0
		jmp	short loc_8000B9A
; ---------------------------------------------------------------------------

loc_8000B76:				; CODE XREF: process_files+36j
		sub	esp, 8
		push	[ebp+ent]	; ent
		push	[ebp+fts]	; fts
		call	process_file
		add	esp, 10h
		movzx	edx, [ebp+ok]
		movzx	eax, al
		and	eax, edx
		test	eax, eax
		setnz	al
		mov	[ebp+ok], al
		jmp	short loc_8000B26
; ---------------------------------------------------------------------------

loc_8000B9A:				; CODE XREF: process_files+41j
					; process_files+6Fj
		nop
		sub	esp, 0Ch
		push	[ebp+fts]	; FTS *
		call	fts_close
		add	esp, 10h
		test	eax, eax
		jz	short loc_8000BD9
		sub	esp, 0Ch
		push	offset aFts_closeFaile ; "fts_close failed"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		sub	esp, 4
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	[ebp+ok], 0

loc_8000BD9:				; CODE XREF: process_files+A6j
		movzx	eax, [ebp+ok]
		mov	ebx, [ebp+var_4]
		leave
		retn
process_files	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; void __cdecl usage(int status)
		public usage
usage		proc near		; CODE XREF: main+230p	main+272p ...

status		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0Ch
		cmp	[ebp+status], 0
		jz	short loc_8000C21
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, ds:stderr
		sub	esp, 4
		push	ebx
		push	edx		; format
		push	eax		; stream
		call	fprintf
		add	esp, 10h
		jmp	loc_8000D26
; ---------------------------------------------------------------------------

loc_8000C21:				; CODE XREF: usage+Dj
		mov	edi, ds:program_name
		mov	esi, ds:program_name
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aUsageSOption__ ; "Usage: %s [OPTION]...	CONTEXT	FILE...\n"...
		call	gettext
		add	esp, 10h
		push	edi
		push	esi
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aChangeTheSecur ; "Change the security context of each FIL"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aReferenceRfile ; "	--reference=RFILE  use RFILE's se"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aUUserUserSetUs ; "  -u,	--user=USER	   set user USER "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aTheFollowingOp ; "The following	options	modify how a hier"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aHelpDisplayThi ; "	--help	   display this	help and "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aVersionOutputV ; "	--version  output version informa"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		call	emit_ancillary_info

loc_8000D26:				; CODE XREF: usage+3Aj
		sub	esp, 0Ch
		push	[ebp+status]	; status
		call	exit
usage		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public main
main		proc near

argv		= dword	ptr -3Ch
preserve_root	= byte ptr -37h
component_specified= byte ptr -36h
ok		= byte ptr -35h
ref_context	= dword	ptr -34h
bit_flags	= dword	ptr -30h
dereference	= dword	ptr -2Ch
reference_file	= dword	ptr -28h
optc		= dword	ptr -24h
context		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
argc		= dword	ptr  0Ch
envp		= dword	ptr  14h

		lea	ecx, [esp+4]
		and	esp, 0FFFFFFF0h
		push	dword ptr [ecx-4]
		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		push	ecx
		sub	esp, 3Ch
		mov	ebx, ecx
		mov	eax, [ebx+4]
		mov	[ebp+argv], eax
		mov	eax, large gs:14h
		mov	[ebp+var_1C], eax
		xor	eax, eax
		mov	[ebp+ref_context], 0
		mov	[ebp+bit_flags], 10h
		mov	[ebp+dereference], 0FFFFFFFFh
		mov	[ebp+preserve_root], 0
		mov	[ebp+component_specified], 0
		mov	[ebp+reference_file], 0
		mov	eax, [ebp+argv]
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	set_program_name
		add	esp, 10h
		sub	esp, 8
		push	offset locale	; locale
		push	6		; category
		call	setlocale
		add	esp, 10h
		sub	esp, 8
		push	offset dirname	; "/usr/local/share/locale"
		push	offset domainname ; "coreutils"
		call	bindtextdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset domainname ; "coreutils"
		call	textdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset close_stdout ; func
		call	atexit
		add	esp, 10h
		jmp	loc_8000FA8
; ---------------------------------------------------------------------------

loc_8000DD8:				; CODE XREF: main+29Aj
		mov	eax, [ebp+optc]
		cmp	eax, 6Ch
		jz	loc_8000F4C
		cmp	eax, 6Ch
		jg	short loc_8000E4E
		cmp	eax, 4Ch
		jz	loc_8000EB5
		cmp	eax, 4Ch
		jg	short loc_8000E1B
		cmp	eax, 0FFFFFF7Eh
		jz	loc_8000F5C
		cmp	eax, 48h
		jz	loc_8000EA9
		cmp	eax, 0FFFFFF7Dh
		jz	loc_8000F66
		jmp	loc_8000F9E
; ---------------------------------------------------------------------------

loc_8000E1B:				; CODE XREF: main+C4j
		cmp	eax, 52h
		jz	loc_8000F04
		cmp	eax, 52h
		jg	short loc_8000E37
		cmp	eax, 50h
		jz	loc_8000EC1
		jmp	loc_8000F9E
; ---------------------------------------------------------------------------

loc_8000E37:				; CODE XREF: main+F6j
		cmp	eax, 66h
		jz	loc_8000FA8
		cmp	eax, 68h
		jz	loc_8000ECD
		jmp	loc_8000F9E
; ---------------------------------------------------------------------------

loc_8000E4E:				; CODE XREF: main+B6j
		cmp	eax, 76h
		jz	loc_8000F10
		cmp	eax, 76h
		jg	short loc_8000E7C
		cmp	eax, 74h
		jz	loc_8000F3C
		cmp	eax, 74h
		jg	loc_8000F1C
		cmp	eax, 72h
		jz	loc_8000F2C
		jmp	loc_8000F9E
; ---------------------------------------------------------------------------

loc_8000E7C:				; CODE XREF: main+129j
		cmp	eax, 81h
		jz	short loc_8000EE5
		cmp	eax, 81h
		jg	short loc_8000E96
		cmp	eax, 80h
		jz	short loc_8000ED9
		jmp	loc_8000F9E
; ---------------------------------------------------------------------------

loc_8000E96:				; CODE XREF: main+157j
		cmp	eax, 82h
		jz	short loc_8000EEE
		cmp	eax, 83h
		jz	short loc_8000EF7
		jmp	loc_8000F9E
; ---------------------------------------------------------------------------

loc_8000EA9:				; CODE XREF: main+D4j
		mov	[ebp+bit_flags], 11h
		jmp	loc_8000FA8
; ---------------------------------------------------------------------------

loc_8000EB5:				; CODE XREF: main+BBj
		mov	[ebp+bit_flags], 2
		jmp	loc_8000FA8
; ---------------------------------------------------------------------------

loc_8000EC1:				; CODE XREF: main+FBj
		mov	[ebp+bit_flags], 10h
		jmp	loc_8000FA8
; ---------------------------------------------------------------------------

loc_8000ECD:				; CODE XREF: main+112j
		mov	[ebp+dereference], 0
		jmp	loc_8000FA8
; ---------------------------------------------------------------------------

loc_8000ED9:				; CODE XREF: main+15Ej
		mov	[ebp+dereference], 1
		jmp	loc_8000FA8
; ---------------------------------------------------------------------------

loc_8000EE5:				; CODE XREF: main+150j
		mov	[ebp+preserve_root], 0
		jmp	loc_8000FA8
; ---------------------------------------------------------------------------

loc_8000EEE:				; CODE XREF: main+16Aj
		mov	[ebp+preserve_root], 1
		jmp	loc_8000FA8
; ---------------------------------------------------------------------------

loc_8000EF7:				; CODE XREF: main+171j
		mov	eax, ds:optarg
		mov	[ebp+reference_file], eax
		jmp	loc_8000FA8
; ---------------------------------------------------------------------------

loc_8000F04:				; CODE XREF: main+EDj
		mov	ds:recurse, 1
		jmp	loc_8000FA8
; ---------------------------------------------------------------------------

loc_8000F10:				; CODE XREF: main+120j
		mov	ds:verbose, 1
		jmp	loc_8000FA8
; ---------------------------------------------------------------------------

loc_8000F1C:				; CODE XREF: main+137j
		mov	eax, ds:optarg
		mov	ds:specified_user, eax
		mov	[ebp+component_specified], 1
		jmp	short loc_8000FA8
; ---------------------------------------------------------------------------

loc_8000F2C:				; CODE XREF: main+140j
		mov	eax, ds:optarg
		mov	ds:specified_role, eax
		mov	[ebp+component_specified], 1
		jmp	short loc_8000FA8
; ---------------------------------------------------------------------------

loc_8000F3C:				; CODE XREF: main+12Ej
		mov	eax, ds:optarg
		mov	ds:specified_type, eax
		mov	[ebp+component_specified], 1
		jmp	short loc_8000FA8
; ---------------------------------------------------------------------------

loc_8000F4C:				; CODE XREF: main+ADj
		mov	eax, ds:optarg
		mov	ds:specified_range, eax
		mov	[ebp+component_specified], 1
		jmp	short loc_8000FA8
; ---------------------------------------------------------------------------

loc_8000F5C:				; CODE XREF: main+CBj
		sub	esp, 0Ch
		push	0		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8000F66:				; CODE XREF: main+DFj
		mov	edx, ds:Version
		mov	eax, ds:stdout
		sub	esp, 4
		push	0
		push	offset aJimMeyering ; "Jim Meyering"
		push	offset aRussellCoker ; "Russell	Coker"
		push	edx
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	offset aChcon	; "chcon"
		push	eax
		call	version_etc
		add	esp, 20h
		sub	esp, 0Ch
		push	0		; status
		call	exit
; ---------------------------------------------------------------------------

loc_8000F9E:				; CODE XREF: main+E5j main+101j ...
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8000FA8:				; CODE XREF: main+A2j main+109j ...
		sub	esp, 0Ch
		push	0		; longind
		push	offset long_options ; longopts
		push	offset shortopts ; "HLPRhvu:r:t:l:"
		push	[ebp+argv]	; argv
		push	dword ptr [ebx]	; argc
		call	getopt_long
		add	esp, 20h
		mov	[ebp+optc], eax
		cmp	[ebp+optc], 0FFFFFFFFh
		jnz	loc_8000DD8
		movzx	eax, ds:recurse
		test	al, al
		jz	short loc_8001040
		cmp	[ebp+bit_flags], 10h
		jnz	short loc_8001011
		cmp	[ebp+dereference], 1
		jnz	short loc_8001008
		sub	esp, 0Ch
		push	offset aRDereferenceRe ; "-R --dereference requires either -H or "...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_8001008:				; CODE XREF: main+2B5j
		mov	ds:affect_symlink_referent, 0
		jmp	short loc_8001053
; ---------------------------------------------------------------------------

loc_8001011:				; CODE XREF: main+2AFj
		cmp	[ebp+dereference], 0
		jnz	short loc_8001037
		sub	esp, 0Ch
		push	offset aRHRequiresP ; "-R -h requires -P"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_8001037:				; CODE XREF: main+2E4j
		mov	ds:affect_symlink_referent, 1
		jmp	short loc_8001053
; ---------------------------------------------------------------------------

loc_8001040:				; CODE XREF: main+2A9j
		mov	[ebp+bit_flags], 10h
		cmp	[ebp+dereference], 0
		setnz	al
		mov	ds:affect_symlink_referent, al

loc_8001053:				; CODE XREF: main+2DEj	main+30Dj
		mov	eax, ds:optind
		mov	edx, [ebx]
		sub	edx, eax
		mov	eax, edx
		cmp	[ebp+reference_file], 0
		jnz	short loc_800106A
		cmp	[ebp+component_specified], 0
		jz	short loc_8001071

loc_800106A:				; CODE XREF: main+331j
		mov	edx, 1
		jmp	short loc_8001076
; ---------------------------------------------------------------------------

loc_8001071:				; CODE XREF: main+337j
		mov	edx, 2

loc_8001076:				; CODE XREF: main+33Ej
		cmp	eax, edx
		jge	short loc_80010F0
		mov	eax, ds:optind
		cmp	[ebx], eax
		jg	short loc_80010A5
		sub	esp, 0Ch
		push	offset aMissingOperand ; "missing operand"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		jmp	short loc_80010E6
; ---------------------------------------------------------------------------

loc_80010A5:				; CODE XREF: main+350j
		mov	eax, [ebx]
		add	eax, 3FFFFFFFh
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aMissingOpera_0 ; "missing operand after	%s"
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h

loc_80010E6:				; CODE XREF: main+372j
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_80010F0:				; CODE XREF: main+347j
		cmp	[ebp+reference_file], 0
		jz	short loc_800114F
		sub	esp, 8
		lea	eax, [ebp+ref_context]
		push	eax		; con
		push	[ebp+reference_file] ; file
		call	getfilecon
		add	esp, 10h
		test	eax, eax
		jns	short loc_8001142
		sub	esp, 0Ch
		push	[ebp+reference_file]
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aFailedToGetSec ; "failed to get	security context of %s"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		push	esi
		push	ebx		; format
		push	eax		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_8001142:				; CODE XREF: main+3D9j
		mov	eax, [ebp+ref_context]
		mov	ds:specified_context, eax
		jmp	loc_80011DB
; ---------------------------------------------------------------------------

loc_800114F:				; CODE XREF: main+3C3j
		cmp	[ebp+component_specified], 0
		jz	short loc_8001161
		mov	ds:specified_context, 0
		jmp	short loc_80011DB
; ---------------------------------------------------------------------------

loc_8001161:				; CODE XREF: main+422j
		mov	eax, ds:optind
		lea	edx, [eax+1]
		mov	ds:optind, edx
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		mov	eax, [eax]
		mov	ds:specified_context, eax
		mov	eax, ds:specified_context
		sub	esp, 0Ch
		push	eax		; s
		call	context_new
		add	esp, 10h
		mov	[ebp+context], eax
		cmp	[ebp+context], 0
		jnz	short loc_80011CD
		mov	eax, ds:specified_context
		sub	esp, 0Ch
		push	eax
		call	quotearg_colon
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aInvalidContext ; "invalid context: %s"
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_80011CD:				; CODE XREF: main+469j
		sub	esp, 0Ch
		push	[ebp+context]	; c
		call	context_free
		add	esp, 10h

loc_80011DB:				; CODE XREF: main+419j	main+42Ej
		cmp	[ebp+reference_file], 0
		jz	short loc_8001211
		cmp	[ebp+component_specified], 0
		jz	short loc_8001211
		sub	esp, 0Ch
		push	offset aConflictingSec ; "conflicting security context specifiers"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8001211:				; CODE XREF: main+4AEj	main+4B4j
		movzx	eax, ds:recurse
		test	al, al
		jz	short loc_800127A
		cmp	[ebp+preserve_root], 0
		jz	short loc_800127A
		sub	esp, 0Ch
		push	offset dev_ino_buf_5494
		call	get_root_dev_ino
		add	esp, 10h
		mov	ds:root_dev_ino, eax
		mov	eax, ds:root_dev_ino
		test	eax, eax
		jnz	short loc_8001286
		sub	esp, 0Ch
		push	offset asc_800169D ; "/"
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aFailedToGetAtt ; "failed to get	attributes of %s"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		push	esi
		push	ebx		; format
		push	eax		; errnum
		push	1		; status
		call	error
		add	esp, 10h
		jmp	short loc_8001286
; ---------------------------------------------------------------------------

loc_800127A:				; CODE XREF: main+4E9j	main+4EFj
		mov	ds:root_dev_ino, 0
		jmp	short loc_8001287
; ---------------------------------------------------------------------------

loc_8001286:				; CODE XREF: main+50Dj	main+547j
		nop

loc_8001287:				; CODE XREF: main+553j
		mov	eax, [ebp+bit_flags]
		or	eax, 8
		mov	edx, eax
		mov	eax, ds:optind
		lea	ecx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, ecx
		sub	esp, 8
		push	edx		; bit_flags
		push	eax		; files
		call	process_files
		add	esp, 10h
		mov	[ebp+ok], al
		cmp	[ebp+ok], 0
		jz	short loc_80012BD
		mov	eax, 0
		jmp	short loc_80012C2
; ---------------------------------------------------------------------------

loc_80012BD:				; CODE XREF: main+583j
		mov	eax, 1

loc_80012C2:				; CODE XREF: main+58Aj
		sub	esp, 0Ch
		push	eax		; status

loc_80012C6:				; DATA XREF: .eh_frame:08001FC4o
					; .eh_frame:08001FE8o ...
		call	exit
main		endp

_text		ends

; ===========================================================================

; Segment type:	Zero-length
; Segment permissions: Read/Write
_data		segment	byte public 'DATA' use32
_data		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
		assume cs:_bss
		;org 80012CCh
		assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing
; _Bool	affect_symlink_referent
affect_symlink_referent	db ?		; DATA XREF: change_file_context+35r
					; change_file_context:loc_800058Fr ...
; _Bool	recurse
recurse		db ?			; DATA XREF: process_file:loc_800069Fr
					; process_file:loc_80007F8r ...
; _Bool	verbose
verbose		db ?			; DATA XREF: process_file+428r
					; main:loc_8000F10w
		align 10h
; dev_ino *root_dev_ino
root_dev_ino	dd ?			; DATA XREF: process_file+52r
					; process_file+6Er ...
; const	char *specified_context
specified_context dd ?			; DATA XREF: change_file_context+28r
					; change_file_context:loc_800053Cr ...
; const	char *specified_user
specified_user	dd ?			; DATA XREF: compute_context_from_mask:loc_8000239r
					; compute_context_from_mask+6Cr ...
; const	char *specified_role
specified_role	dd ?			; DATA XREF: compute_context_from_mask:loc_8000305r
					; compute_context_from_mask+138r ...
; const	char *specified_range
specified_range	dd ?			; DATA XREF: compute_context_from_mask:loc_800029Fr
					; compute_context_from_mask+D2r ...
; const	char *specified_type
specified_type	dd ?			; DATA XREF: compute_context_from_mask:loc_800036Br
					; compute_context_from_mask+19Er ...
; Function-local static	variable
; dev_ino dev_ino_buf_5494
dev_ino_buf_5494 dev_ino <?>		; DATA XREF: main+4F4o
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment '32byte' can not be represented in assembly
_rodata		segment	para public 'CONST' use32
		assume cs:_rodata
		;org 8001300h
; char msgid[]
msgid		db 0Ah			; DATA XREF: emit_ancillary_info+1Do
		db 'Report %s bugs to %s',0Ah,0
aBugCoreutils@g	db 'bug-coreutils@gnu.org',0 ; DATA XREF: emit_ancillary_info+2Do
		align 10h
; char aSHomePageHttpW[]
aSHomePageHttpW	db '%s home page: <http://www.gnu.org/software/%s/>',0Ah,0
					; DATA XREF: emit_ancillary_info+3Fo
; char domainname[]
domainname	db 'coreutils',0        ; DATA XREF: emit_ancillary_info+4Fo
					; main+75o ...
aGnuCoreutils	db 'GNU coreutils',0    ; DATA XREF: emit_ancillary_info+54o
					; main+250o
		align 4
; char aGeneralHelpUsi[]
aGeneralHelpUsi	db 'General help using GNU software: <http://www.gnu.org/gethelp/>',0Ah,0
					; DATA XREF: emit_ancillary_info+6Bo
; char s2[]
s2		db 'en_',0              ; DATA XREF: emit_ancillary_info+A2o
; char aReportSTransla[]
aReportSTransla	db 'Report %s translation bugs to <http://translationproject.org/team'
					; DATA XREF: emit_ancillary_info+CCo
		db '/>',0Ah,0
		align 4
; char aForCompleteDoc[]
aForCompleteDoc	db 'For complete documentation, run: info coreutils ',27h,'%s invocation'
					; DATA XREF: emit_ancillary_info+FCo
		db 27h,0Ah,0
aRecursive	db 'recursive',0        ; DATA XREF: .rodata:long_optionso
aDereference	db 'dereference',0      ; DATA XREF: .rodata:long_optionso
aNoDereference	db 'no-dereference',0   ; DATA XREF: .rodata:long_optionso
aNoPreserveRoot	db 'no-preserve-root',0 ; DATA XREF: .rodata:long_optionso
aPreserveRoot	db 'preserve-root',0    ; DATA XREF: .rodata:long_optionso
aReference	db 'reference',0        ; DATA XREF: .rodata:long_optionso
aUser		db 'user',0             ; DATA XREF: compute_context_from_mask+B4o
					; .rodata:long_optionso
aRole		db 'role',0             ; DATA XREF: compute_context_from_mask+180o
					; .rodata:long_optionso
aType		db 'type',0             ; DATA XREF: compute_context_from_mask+1E6o
					; .rodata:long_optionso
aRange		db 'range',0            ; DATA XREF: compute_context_from_mask+11Ao
					; .rodata:long_optionso
aVerbose	db 'verbose',0          ; DATA XREF: .rodata:long_optionso
aHelp		db 'help',0             ; DATA XREF: .rodata:long_optionso
aVersion	db 'version',0          ; DATA XREF: .rodata:long_optionso
		align 20h
; const	option long_options[14]
long_options	option <offset aRecursive, 0, 0, 52h> ;	DATA XREF: main+27Co
		option <offset aDereference, 0,	0, 80h>	; "recursive"
		option <offset aNoDereference, 0, 0, 68h>
		option <offset aNoPreserveRoot,	0, 0, 81h>
		option <offset aPreserveRoot, 0, 0, 82h>
		option <offset aReference, 1, 0, 83h>
		option <offset aUser, 1, 0, 75h>
		option <offset aRole, 1, 0, 72h>
		option <offset aType, 1, 0, 74h>
		option <offset aRange, 1, 0, 6Ch>
		option <offset aVerbose, 0, 0, 76h>
		option <offset aHelp, 0, 0, 0FFFFFF7Eh>
		option <offset aVersion, 0, 0, 0FFFFFF7Dh>
		option	<0>
; char aFailedToCreate[]
aFailedToCreate	db 'failed to create security context: %s',0
					; DATA XREF: compute_context_from_mask+36o
		align 4
; char aFailedToSetSSe[]
aFailedToSetSSe	db 'failed to set %s security context component to %s',0
					; DATA XREF: compute_context_from_mask+9Ao
					; compute_context_from_mask+100o ...
		align 4
; char aFailedToGetSec[]
aFailedToGetSec	db 'failed to get security context of %s',0
					; DATA XREF: change_file_context+94o
					; main+3EEo
		align 4
; char aCanTApplyParti[]
aCanTApplyParti	db 'can',27h,'t apply partial context to unlabeled file %s',0
					; DATA XREF: change_file_context+DBo
		align 4
; char aFailedToChange[]
aFailedToChange	db 'failed to change context of %s to %s',0
					; DATA XREF: change_file_context+1E0o
; char asc_800169D[]
asc_800169D	db '/',0                ; DATA XREF: process_file+AFo
					; process_file+F6o ...
		align 10h
; char aItIsDangerousT[]
aItIsDangerousT	db 'it is dangerous to operate recursively on %s',0
					; DATA XREF: process_file+D6o
					; process_file+399o
		align 10h
; char aItIsDangerou_0[]
aItIsDangerou_0	db 'it is dangerous to operate recursively on %s (same as %s)',0
					; DATA XREF: process_file+11Co
					; process_file+3DFo
		align 4
; char aUseNoPreserveR[]
aUseNoPreserveR	db 'use --no-preserve-root to override this failsafe',0
					; DATA XREF: process_file+13Eo
					; process_file+401o
; char aCannotAccessS[]
aCannotAccessS	db 'cannot access %s',0 ; DATA XREF: process_file+206o
; char aS[]
aS		db '%s',0               ; DATA XREF: process_file+244o
; char aCannotReadDire[]
aCannotReadDire	db 'cannot read directory %s',0 ; DATA XREF: process_file+282o
		align 4
; char aWarningCircula[]
aWarningCircula	db 'WARNING: Circular directory structure.',0Ah
					; DATA XREF: process_file+2D2o
		db 'This almost certainly means that you have a corrupted file system'
		db '.',0Ah
		db 'NOTIFY YOUR SYSTEM MANAGER.',0Ah
		db 'The following directory is part of the cycle:',0Ah
		db '  %s',0Ah,0
		align 4
; char aChangingSecuri[]
aChangingSecuri	db 'changing security context of %s',0Ah,0 ; DATA XREF: process_file+446o
		align 4
off_800184C	dd offset loc_8000953	; DATA XREF: process_file+3Ar
		dd offset loc_800069F	; jump table for switch	statement
		dd offset loc_8000906
		dd offset loc_8000953
		dd offset loc_80008CB
		dd offset loc_8000953
		dd offset loc_80007F8
		dd offset loc_800088D
		dd offset loc_8000953
		dd offset loc_8000953
		dd offset loc_8000814
; char aFts_readFailed[]
aFts_readFailed	db 'fts_read failed',0  ; DATA XREF: process_files+46o
; char aFts_closeFaile[]
aFts_closeFaile	db 'fts_close failed',0 ; DATA XREF: process_files+ABo
		align 4
; char aTrySHelpForMor[]
aTrySHelpForMor	db 'Try `%s --help',27h,' for more information.',0Ah,0
					; DATA XREF: usage+18o
		align 4
; char aUsageSOption__[]
aUsageSOption__	db 'Usage: %s [OPTION]... CONTEXT FILE...',0Ah ; DATA XREF: usage+54o
		db '  or:  %s [OPTION]... [-u USER] [-r ROLE] [-l RANGE] [-t TYPE] FI'
		db 'LE...',0Ah
		db '  or:  %s [OPTION]... --reference=RFILE FILE...',0Ah,0
		align 4
; char aChangeTheSecur[]
aChangeTheSecur	db 'Change the security context of each FILE to CONTEXT.',0Ah
					; DATA XREF: usage+76o
		db 'With --reference, change the security context of each FILE to tha'
		db 't of RFILE.',0Ah
		db 0Ah
		db '  -h, --no-dereference   affect symbolic links instead of any ref'
		db 'erenced file',0Ah,0
		align 4
; char aReferenceRfile[]
aReferenceRfile	db '      --reference=RFILE  use RFILE',27h,'s security context rather t'
					; DATA XREF: usage+99o
		db 'han specifying',0Ah
		db '                         a CONTEXT value',0Ah
		db '  -R, --recursive        operate on files and directories recursi'
		db 'vely',0Ah
		db '  -v, --verbose          output a diagnostic for every file proce'
		db 'ssed',0Ah,0
		align 4
; char aUUserUserSetUs[]
aUUserUserSetUs	db '  -u, --user=USER        set user USER in the target security con'
					; DATA XREF: usage+BCo
		db 'text',0Ah
		db '  -r, --role=ROLE        set role ROLE in the target security con'
		db 'text',0Ah
		db '  -t, --type=TYPE        set type TYPE in the target security con'
		db 'text',0Ah
		db '  -l, --range=RANGE      set range RANGE in the target security c'
		db 'ontext',0Ah
		db 0Ah,0
; char aTheFollowingOp[]
aTheFollowingOp	db 'The following options modify how a hierarchy is traversed when th'
					; DATA XREF: usage+DFo
		db 'e -R',0Ah
		db 'option is also specified.  If more than one is specified, only th'
		db 'e final',0Ah
		db 'one takes effect.',0Ah
		db 0Ah
		db '  -H                     if a command line argument is a symbolic'
		db ' link',0Ah
		db '                         to a directory, traverse it',0Ah
		db '  -L                     traverse every symbolic link to a direct'
		db 'ory',0Ah
		db '                         encountered',0Ah
		db '  -P                     do not traverse any symbolic links (defa'
		db 'ult)',0Ah
		db 0Ah,0
; char aHelpDisplayThi[]
aHelpDisplayThi	db '      --help     display this help and exit',0Ah,0
					; DATA XREF: usage+102o
		align 4
; char aVersionOutputV[]
aVersionOutputV	db '      --version  output version information and exit',0Ah,0
					; DATA XREF: usage+125o
; char locale
locale		db 0			; DATA XREF: main+5Eo
; char dirname[]
dirname		db '/usr/local/share/locale',0 ; DATA XREF: main+70o
aJimMeyering	db 'Jim Meyering',0     ; DATA XREF: main+245o
aRussellCoker	db 'Russell Coker',0    ; DATA XREF: main+24Ao
aChcon		db 'chcon',0            ; DATA XREF: main+255o
; char shortopts[]
shortopts	db 'HLPRhvu:r:t:l:',0   ; DATA XREF: main+281o
		align 4
; char aRDereferenceRe[]
aRDereferenceRe	db '-R --dereference requires either -H or -L',0 ; DATA XREF: main+2BAo
; char aRHRequiresP[]
aRHRequiresP	db '-R -h requires -P',0 ; DATA XREF: main+2E9o
; char aMissingOperand[]
aMissingOperand	db 'missing operand',0  ; DATA XREF: main+355o
; char aMissingOpera_0[]
aMissingOpera_0	db 'missing operand after %s',0 ; DATA XREF: main+39Ao
; char aInvalidContext[]
aInvalidContext	db 'invalid context: %s',0 ; DATA XREF: main+481o
		align 4
; char aConflictingSec[]
aConflictingSec	db 'conflicting security context specifiers given',0 ; DATA XREF: main+4B9o
		align 4
; char aFailedToGetAtt[]
aFailedToGetAtt	db 'failed to get attributes of %s',0 ; DATA XREF: main+524o
_rodata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_eh_frame	segment	dword public 'CONST' use32
		assume cs:_eh_frame
		;org 8001FA4h
		dd 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 20h, 1Ch
		dd offset loc_80012C6-800328Ah
		dd 11Ch, 80E4100h, 0D420285h, 3834405h,	0C5011403h, 4040CC3h
		dd 1Ch,	40h
		dd offset loc_80012C6-8003192h
		dd 6, 80E4100h,	0D420285h, 0CC54205h, 404h, 1Ch, 60h
		dd offset loc_80012C6-80031ACh
		dd 6, 80E4100h,	0D420285h, 0CC54205h, 404h, 1Ch, 80h
		dd offset loc_80012C6-80031C6h
		dd 18h,	80E4100h, 0D420285h, 0CC55405h,	404h, 1Ch, 0A0h
		dd offset loc_80012C6-80031CEh
		dd 18h,	80E4100h, 0D420285h, 0CC55405h,	404h, 1Ch, 0C0h
		dd offset loc_80012C6-80031D6h
		dd 18h,	80E4100h, 0D420285h, 0CC55405h,	404h, 1Ch, 0E0h
		dd offset loc_80012C6-80031DEh
		dd 6, 80E4100h,	0D420285h, 0CC54205h, 404h, 1Ch, 100h
		dd offset loc_80012C6-80031F8h
		dd 18h,	80E4100h, 0D420285h, 0CC55405h,	404h, 1Ch, 120h
		dd offset loc_80012C6-8003200h
		dd 18h,	80E4100h, 0D420285h, 0CC55405h,	404h, 1Ch, 140h
		dd offset loc_80012C6-8003208h
		dd 18h,	80E4100h, 0D420285h, 0CC55405h,	404h, 1Ch, 160h
		dd offset loc_80012C6-8003210h
		dd 18h,	80E4100h, 0D420285h, 0CC55405h,	404h, 28h, 180h
		dd offset loc_80012C6-8003218h
		dd 245h, 80E4100h, 0D420285h, 3864505h,	3A030483h, 0C641C302h
		dd 40CC541h, 4,	2Ch, 1ACh
		dd offset loc_80012C6-8002FFFh
		dd 241h, 80E4100h, 0D420285h, 3874605h,	5830486h, 0C3023403h
		dd 0C741C641h, 40CC541h, 4, 28h, 1DCh
		dd offset loc_80012C6-8002DEEh
		dd 4A9h, 80E4100h, 0D420285h, 3864505h,	9E030483h, 0C641C304h
		dd 40CC541h, 4,	20h, 208h
		dd offset loc_80012C6-8002971h
		dd 0DDh, 80E4100h, 0D420285h, 3834405h,	0C3C5D502h, 4040Ch
		dd 1Ch,	22Ch
		dd offset loc_80012C6-80028B8h
		dd 14Fh, 80E4100h, 0D420285h, 3874605h,	5830486h, 28h
		dd 24Ch
		dd offset loc_80012C6-8002789h
		dd 59Ah, 10C4400h, 5104700h, 45007502h,	7475030Fh, 2061006h
		dd 3107C75h, 787502h
_eh_frame	ends

; ===========================================================================

; Segment type:	Externs
; extern
		extrn program_name:dword ; DATA	XREF: emit_ancillary_info+7r
					; emit_ancillary_info+B6r ...
		extrn last_component:near ; CODE XREF: emit_ancillary_info+10p
					; emit_ancillary_info+BFp ...
; char *gettext(const char *msgid)
		extrn gettext:near	; CODE XREF: emit_ancillary_info+22p
					; emit_ancillary_info+44p ...
; int printf(const char	*format, ...)
		extrn printf:near	; CODE XREF: emit_ancillary_info+34p
					; emit_ancillary_info+5Ap ...
; struct _IO_FILE *stdout
		extrn stdout:dword	; DATA XREF: emit_ancillary_info+62r
					; usage+6Dr ...
		extrn fputs_unlocked:near ; CODE XREF: emit_ancillary_info+7Dp
					; usage+88p ...
; char *setlocale(int category,	const char *locale)
		extrn setlocale:near	; CODE XREF: emit_ancillary_info+8Cp
					; main+65p
; int strncmp(const char *s1, const char *s2, size_t n)
		extrn strncmp:near	; CODE XREF: emit_ancillary_info+AAp
; int *_errno_location(void)
		extrn __errno_location:near ; CODE XREF: getfilecon+6p
					; context_new+6p ...
		extrn quotearg_colon:near ; CODE XREF: compute_context_from_mask+29p
					; main+474p
; void error(int status, int errnum, const char	*format, ...)
		extrn error:near	; CODE XREF: compute_context_from_mask+51p
					; compute_context_from_mask+BDp ...
		extrn quote:near	; CODE XREF: compute_context_from_mask+8Dp
					; compute_context_from_mask+F3p ...
		extrn getfileconat:near	; CODE XREF: change_file_context+4Dp
		extrn lgetfileconat:near ; CODE	XREF: change_file_context+64p
; void abort(void)
		extrn abort:near	; CODE XREF: change_file_context+13Cp
; int strcmp(const char	*s1, const char	*s2)
		extrn strcmp:near	; CODE XREF: change_file_context+164p
					; process_file+B7p ...
		extrn setfileconat:near	; CODE XREF: change_file_context+18Bp
		extrn lsetfileconat:near ; CODE	XREF: change_file_context+1A1p
		extrn quote_n:near	; CODE XREF: change_file_context+1C1p
					; change_file_context+1D3p ...
		extrn __stack_chk_fail:near ; CODE XREF: change_file_context+234p
; int fts_set(FTS *, FTSENT *, int)
		extrn fts_set:near	; CODE XREF: process_file+166p
					; process_file+1E1p ...
; FTSENT *fts_read(FTS *)
		extrn fts_read:near	; CODE XREF: process_file+174p
					; process_files+27p
		extrn cycle_warning_required:near ; CODE XREF: process_file+2B3p
		extrn xfts_open:near	; CODE XREF: process_files+16p
; int fts_close(FTS *)
		extrn fts_close:near	; CODE XREF: process_files+9Cp
; struct _IO_FILE *stderr
		extrn stderr:dword	; DATA XREF: usage+27r
; int fprintf(FILE *stream, const char *format,	...)
		extrn fprintf:near	; CODE XREF: usage+32p
; void exit(int	status)
		extrn exit:near		; CODE XREF: usage+14Ap main+268p ...
		extrn set_program_name:near ; CODE XREF: main+53p
; char *bindtextdomain(const char *domainname, const char *dirname)
		extrn bindtextdomain:near ; CODE XREF: main+7Ap
; char *textdomain(const char *domainname)
		extrn textdomain:near	; CODE XREF: main+8Ap
; void close_stdout(void)
		extrn close_stdout	; DATA XREF: main+95o
; int atexit(void (*func)(void))
		extrn atexit:near	; CODE XREF: main+9Ap
; char *optarg
		extrn optarg:dword	; DATA XREF: main:loc_8000EF7r
					; main:loc_8000F1Cr ...
		extrn Version:dword	; DATA XREF: main:loc_8000F66r
		extrn version_etc:near	; CODE XREF: main+25Bp
; int getopt_long(int argc, char *const	*argv, const char *shortopts, const struct option *longopts, int *longind)
		extrn getopt_long:near	; CODE XREF: main+28Bp
; int optind
		extrn optind:dword	; DATA XREF: main:loc_8001053r
					; main+349r ...
		extrn get_root_dev_ino:near ; CODE XREF: main+4F9p


		end
