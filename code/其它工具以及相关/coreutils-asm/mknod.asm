;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B611-7234-BB			    |
; |		Doskey Lee, Kingsoft Internet Security Software		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	9773A977F628244C6B879CCF168A8124
; Input	CRC32 :	7E0FD7D4

; File Name   :	D:\coreutils-o\mknod.o
; Format      :	ELF for	Intel 386 (Relocatable)
;
; Source File :	'mknod.c'

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	byte public 'CODE' use32
		assume cs:_text
		;org 8000000h
		assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; int __cdecl setfscreatecon(char *con)
setfscreatecon	proc near		; CODE XREF: main+397p

con		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		call	__errno_location
		mov	dword ptr [eax], 5Fh
		mov	eax, 0FFFFFFFFh
		leave
		retn
setfscreatecon	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void emit_ancillary_info()
emit_ancillary_info proc near		; CODE XREF: usage+199p

lc_messages	= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset msgid	; "\nReport %s bugs to %s\n"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset aBugCoreutils@g ; "bug-coreutils@gnu.org"
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	offset aSHomePageHttpW ; "%s home page:	<http://www.gnu.org/softw"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset domainname ; "coreutils"
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aGeneralHelpUsi ; "General help using GNU software: <http:"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		sub	esp, 8
		push	0		; locale
		push	5		; category
		call	setlocale
		add	esp, 10h
		mov	[ebp+lc_messages], eax
		cmp	[ebp+lc_messages], 0
		jz	short loc_80000FE
		sub	esp, 4
		push	3		; n
		push	offset s2	; "en_"
		push	[ebp+lc_messages] ; s1
		call	strncmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_80000FE
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aReportSTransla ; "Report %s translation	bugs to	<http://t"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h

loc_80000FE:				; CODE XREF: emit_ancillary_info+9Bj
					; emit_ancillary_info+B4j
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aForCompleteDoc ; "For complete documentation, run: info	c"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		nop
		mov	ebx, [ebp+var_4]
		leave
		retn
emit_ancillary_info endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; void __cdecl usage(int status)
		public usage
usage		proc near		; CODE XREF: main+CCp main+109p ...

status		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 4
		cmp	[ebp+status], 0
		jz	short loc_8000171
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, ds:stderr
		sub	esp, 4
		push	ebx
		push	edx		; format
		push	eax		; stream
		call	fprintf
		add	esp, 10h
		jmp	loc_80002D2
; ---------------------------------------------------------------------------

loc_8000171:				; CODE XREF: usage+Bj
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aUsageSOption__ ; "Usage: %s [OPTION]...	NAME TYPE [MAJOR "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aCreateTheSpeci ; "Create the special file NAME of the giv"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aMandatoryArgum ; "Mandatory arguments to long options are"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aMModeModeSetFi ; "  -m,	--mode=MODE    set file	permissio"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aZContextCtxSet ; "  -Z,	--context=CTX  set the SELinux se"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aHelpDisplayThi ; "	--help	   display this	help and "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aVersionOutputV ; "	--version  output version informa"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aBothMajorAndMi ; "\nBoth MAJOR and MINOR must be specifie"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aBCreateABlockB ; "\n  b	     create a block (buffered) sp"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		sub	esp, 0Ch
		push	offset aNoteYourShellM ; "\nNOTE: your shell may have its own ver"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	offset aMknod	; "mknod"
		push	eax		; format
		call	printf
		add	esp, 10h
		call	emit_ancillary_info

loc_80002D2:				; CODE XREF: usage+38j
		sub	esp, 0Ch
		push	[ebp+status]	; status
		call	exit
usage		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public main
main		proc near

var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
argv		= dword	ptr -6Ch
newmode		= dword	ptr -5Ch
specified_mode	= dword	ptr -58h
node_type	= dword	ptr -54h
scontext	= dword	ptr -50h
optc		= dword	ptr -4Ch
change		= dword	ptr -48h
expected_operands= dword ptr -44h
s_major		= dword	ptr -40h
s_minor		= dword	ptr -3Ch
i_major		= qword	ptr -38h
i_minor		= qword	ptr -30h
device		= qword	ptr -28h
var_1C		= dword	ptr -1Ch
argc		= dword	ptr  0Ch
envp		= dword	ptr  14h

		lea	ecx, [esp+4]
		and	esp, 0FFFFFFF0h
		push	dword ptr [ecx-4]
		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		push	ecx
		sub	esp, 68h
		mov	ebx, ecx
		mov	eax, [ebx+4]
		mov	[ebp+argv], eax
		mov	eax, large gs:14h
		mov	[ebp+var_1C], eax
		xor	eax, eax
		mov	[ebp+specified_mode], 0
		mov	[ebp+scontext],	0
		mov	eax, [ebp+argv]
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	set_program_name
		add	esp, 10h
		sub	esp, 8
		push	offset locale	; locale
		push	6		; category
		call	setlocale
		add	esp, 10h
		sub	esp, 8
		push	offset dirname	; "/usr/local/share/locale"
		push	offset domainname ; "coreutils"
		call	bindtextdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset domainname ; "coreutils"
		call	textdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset close_stdout ; func
		call	atexit
		add	esp, 10h
		jmp	short loc_80003EB
; ---------------------------------------------------------------------------

loc_800036C:				; CODE XREF: main+131j
		mov	eax, [ebp+optc]
		cmp	eax, 0FFFFFF7Eh
		jz	short loc_80003A4
		cmp	eax, 0FFFFFF7Eh
		jg	short loc_8000386
		cmp	eax, 0FFFFFF7Dh
		jz	short loc_80003AE
		jmp	short loc_80003E1
; ---------------------------------------------------------------------------

loc_8000386:				; CODE XREF: main+9Ej
		cmp	eax, 5Ah
		jz	short loc_800039A
		cmp	eax, 6Dh
		jnz	short loc_80003E1
		mov	eax, ds:optarg
		mov	[ebp+specified_mode], eax
		jmp	short loc_80003EB
; ---------------------------------------------------------------------------

loc_800039A:				; CODE XREF: main+ACj
		mov	eax, ds:optarg
		mov	[ebp+scontext],	eax
		jmp	short loc_80003EB
; ---------------------------------------------------------------------------

loc_80003A4:				; CODE XREF: main+97j
		sub	esp, 0Ch
		push	0		; status
		call	usage
; ---------------------------------------------------------------------------

loc_80003AE:				; CODE XREF: main+A5j
		mov	edx, ds:Version
		mov	eax, ds:stdout
		sub	esp, 8
		push	0
		push	offset aDavidMackenzie ; "David	MacKenzie"
		push	edx
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	offset aMknod	; "mknod"
		push	eax
		call	version_etc
		add	esp, 20h
		sub	esp, 0Ch
		push	0		; status
		call	exit
; ---------------------------------------------------------------------------

loc_80003E1:				; CODE XREF: main+A7j main+B1j
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_80003EB:				; CODE XREF: main+8Dj main+BBj ...
		sub	esp, 0Ch
		push	0		; longind
		push	offset longopts	; longopts
		push	offset shortopts ; "m:Z:"
		push	[ebp+argv]	; argv
		push	dword ptr [ebx]	; argc
		call	getopt_long
		add	esp, 20h
		mov	[ebp+optc], eax
		cmp	[ebp+optc], 0FFFFFFFFh
		jnz	loc_800036C
		mov	[ebp+newmode], 1B6h
		cmp	[ebp+specified_mode], 0
		jz	loc_80004BC
		sub	esp, 0Ch
		push	[ebp+specified_mode]
		call	mode_compile
		add	esp, 10h
		mov	[ebp+change], eax
		cmp	[ebp+change], 0
		jnz	short loc_800045C
		sub	esp, 0Ch
		push	offset aInvalidMode ; "invalid mode"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_800045C:				; CODE XREF: main+15Dj
		sub	esp, 0Ch
		push	0		; mask
		call	umask
		add	esp, 10h
		sub	esp, 0Ch
		push	0
		push	[ebp+change]
		push	eax
		push	0
		push	[ebp+newmode]
		call	mode_adjust
		add	esp, 20h
		mov	[ebp+newmode], eax
		sub	esp, 0Ch
		push	[ebp+change]	; ptr
		call	free
		add	esp, 10h
		mov	eax, [ebp+newmode]
		and	eax, 0FFFFFE00h
		test	eax, eax
		jz	short loc_80004BC
		sub	esp, 0Ch
		push	offset aModeMustSpecif ; "mode must specify only file permission "...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_80004BC:				; CODE XREF: main+142j	main+1BDj
		mov	eax, ds:optind
		cmp	[ebx], eax
		jle	short loc_80004EE
		mov	eax, ds:optind
		add	eax, 1
		cmp	eax, [ebx]
		jge	short loc_80004F5
		mov	eax, ds:optind
		add	eax, 1
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		mov	eax, [eax]
		movzx	eax, byte ptr [eax]
		cmp	al, 70h
		jnz	short loc_80004F5

loc_80004EE:				; CODE XREF: main+1E6j
		mov	eax, 2
		jmp	short loc_80004FA
; ---------------------------------------------------------------------------

loc_80004F5:				; CODE XREF: main+1F2j	main+20Fj
		mov	eax, 4

loc_80004FA:				; CODE XREF: main+216j
		mov	[ebp+expected_operands], eax
		mov	eax, ds:optind
		mov	edx, [ebx]
		sub	edx, eax
		mov	eax, edx
		cmp	eax, [ebp+expected_operands]
		jge	loc_80005C6
		mov	eax, ds:optind
		cmp	[ebx], eax
		jg	short loc_800053C
		sub	esp, 0Ch
		push	offset aMissingOperand ; "missing operand"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		jmp	short loc_800057D
; ---------------------------------------------------------------------------

loc_800053C:				; CODE XREF: main+23Bj
		mov	eax, [ebx]
		add	eax, 3FFFFFFFh
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aMissingOpera_0 ; "missing operand after	%s"
		call	gettext
		add	esp, 10h
		push	esi
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h

loc_800057D:				; CODE XREF: main+25Dj
		cmp	[ebp+expected_operands], 4
		jnz	short loc_80005BC
		mov	eax, ds:optind
		mov	edx, [ebx]
		sub	edx, eax
		mov	eax, edx
		cmp	eax, 2
		jnz	short loc_80005BC
		sub	esp, 0Ch
		push	offset aSpecialFilesRe ; "Special files	require	major and minor	d"...
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, ds:stderr
		sub	esp, 4
		push	edx
		push	offset format	; "%s\n"
		push	eax		; stream
		call	fprintf
		add	esp, 10h

loc_80005BC:				; CODE XREF: main+2A4j	main+2B4j
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_80005C6:				; CODE XREF: main+22Ej
		mov	eax, ds:optind
		mov	edx, [ebx]
		sub	edx, eax
		mov	eax, edx
		cmp	eax, [ebp+expected_operands]
		jle	loc_8000668
		mov	edx, ds:optind
		mov	eax, [ebp+expected_operands]
		add	eax, edx
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aExtraOperandS ;	"extra operand %s"
		call	gettext
		add	esp, 10h
		push	esi
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		cmp	[ebp+expected_operands], 2
		jnz	short loc_800065E
		mov	eax, ds:optind
		mov	edx, [ebx]
		sub	edx, eax
		mov	eax, edx
		cmp	eax, 4
		jnz	short loc_800065E
		sub	esp, 0Ch
		push	offset aFifosDoNotHave ; "Fifos	do not have major and minor devic"...
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, ds:stderr
		sub	esp, 4
		push	edx
		push	offset format	; "%s\n"
		push	eax		; stream
		call	fprintf
		add	esp, 10h

loc_800065E:				; CODE XREF: main+346j	main+356j
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8000668:				; CODE XREF: main+2F7j
		cmp	[ebp+scontext],	0
		jz	short loc_80006B9
		sub	esp, 0Ch
		push	[ebp+scontext]	; con
		call	setfscreatecon
		add	esp, 10h
		test	eax, eax
		jns	short loc_80006B9
		sub	esp, 0Ch
		push	[ebp+scontext]
		call	quote
		add	esp, 10h
		mov	[ebp+var_70], eax
		sub	esp, 0Ch
		push	offset aFailedToSetDef ; "failed to set	default	file creation con"...
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		push	[ebp+var_70]
		push	ebx		; format
		push	eax		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_80006B9:				; CODE XREF: main+38Fj	main+3A1j
		mov	eax, ds:optind
		add	eax, 1
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		mov	eax, [eax]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		cmp	eax, 63h
		jz	short loc_8000705
		cmp	eax, 63h
		jg	short loc_80006E9
		cmp	eax, 62h
		jz	short loc_80006FC
		jmp	loc_8000954
; ---------------------------------------------------------------------------

loc_80006E9:				; CODE XREF: main+400j
		cmp	eax, 70h
		jz	loc_80008EF
		cmp	eax, 75h
		jz	short loc_8000705
		jmp	loc_8000954
; ---------------------------------------------------------------------------

loc_80006FC:				; CODE XREF: main+405j
		mov	[ebp+node_type], 6000h
		jmp	short block_or_character
; ---------------------------------------------------------------------------

loc_8000705:				; CODE XREF: main+3FBj	main+418j
		mov	[ebp+node_type], 2000h
		nop

block_or_character:			; CODE XREF: main+426j
		mov	eax, ds:optind
		add	eax, 2
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		mov	eax, [eax]
		mov	[ebp+s_major], eax
		mov	eax, ds:optind
		add	eax, 3
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		mov	eax, [eax]
		mov	[ebp+s_minor], eax
		sub	esp, 0Ch
		push	0
		lea	eax, [ebp+i_major]
		push	eax
		push	0
		push	0
		push	[ebp+s_major]
		call	xstrtoumax
		add	esp, 20h
		test	eax, eax
		jnz	short loc_8000785
		mov	eax, dword ptr [ebp+i_major]
		mov	edx, dword ptr [ebp+i_major+4]
		mov	ecx, eax
		and	ch, 0FFh
		mov	[ebp+var_78], ecx
		mov	eax, edx
		and	eax, 0
		mov	[ebp+var_74], eax
		mov	eax, dword ptr [ebp+i_major]
		mov	edx, dword ptr [ebp+i_major+4]
		mov	ecx, [ebp+var_74]
		xor	ecx, edx
		xor	eax, [ebp+var_78]
		or	eax, ecx
		test	eax, eax
		jz	short loc_80007B3

loc_8000785:				; CODE XREF: main+47Cj
		sub	esp, 0Ch
		push	[ebp+s_major]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aInvalidMajorDe ; "invalid major	device number %s"
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_80007B3:				; CODE XREF: main+4A6j
		sub	esp, 0Ch
		push	0
		lea	eax, [ebp+i_minor]
		push	eax
		push	0
		push	0
		push	[ebp+s_minor]
		call	xstrtoumax
		add	esp, 20h
		test	eax, eax
		jnz	short loc_80007F5
		mov	eax, dword ptr [ebp+i_minor]
		mov	edx, dword ptr [ebp+i_minor+4]
		mov	ecx, eax
		and	ch, 0FFh
		mov	esi, ecx
		mov	eax, edx
		and	eax, 0
		mov	edi, eax
		mov	eax, dword ptr [ebp+i_minor]
		mov	edx, dword ptr [ebp+i_minor+4]
		mov	ecx, edi
		xor	ecx, edx
		xor	eax, esi
		or	eax, ecx
		test	eax, eax
		jz	short loc_8000823

loc_80007F5:				; CODE XREF: main+4F0j
		sub	esp, 0Ch
		push	[ebp+s_minor]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aInvalidMinorDe ; "invalid minor	device number %s"
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_8000823:				; CODE XREF: main+516j
		mov	eax, dword ptr [ebp+i_minor]
		mov	edx, dword ptr [ebp+i_minor+4]
		mov	ecx, eax
		mov	eax, dword ptr [ebp+i_major]
		mov	edx, dword ptr [ebp+i_major+4]
		sub	esp, 8
		push	ecx		; minor
		push	eax		; major
		call	gnu_dev_makedev
		add	esp, 10h
		mov	dword ptr [ebp+device],	eax
		mov	dword ptr [ebp+device+4], edx
		mov	eax, dword ptr [ebp+device+4]
		xor	eax, 0FFFFFFFFh
		mov	edx, eax
		mov	eax, dword ptr [ebp+device]
		xor	eax, 0FFFFFFFFh
		or	eax, edx
		test	eax, eax
		jnz	short loc_800087E
		sub	esp, 0Ch
		push	offset aInvalidDeviceS ; "invalid device %s %s"
		call	gettext
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+s_minor]
		push	[ebp+s_major]
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 20h

loc_800087E:				; CODE XREF: main+579j
		mov	eax, [ebp+newmode]
		or	eax, [ebp+node_type]
		mov	edx, eax
		mov	eax, ds:optind
		lea	ecx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, ecx
		mov	eax, [eax]
		push	dword ptr [ebp+device+4]
		push	dword ptr [ebp+device] ; dev
		push	edx		; mode
		push	eax		; path
		call	mknod
		add	esp, 10h
		test	eax, eax
		jz	loc_80009A0
		mov	eax, ds:optind
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		push	ebx
		push	offset aS_0	; "%s"
		push	eax		; errnum
		push	1		; status
		call	error
		add	esp, 10h
		jmp	loc_80009A0
; ---------------------------------------------------------------------------

loc_80008EF:				; CODE XREF: main+40Fj
		mov	eax, ds:optind
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 8
		push	[ebp+newmode]	; mode
		push	eax		; path
		call	mkfifo
		add	esp, 10h
		test	eax, eax
		jz	loc_80009A3
		mov	eax, ds:optind
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		push	ebx
		push	offset aS_0	; "%s"
		push	eax		; errnum
		push	1		; status
		call	error
		add	esp, 10h
		jmp	short loc_80009A3
; ---------------------------------------------------------------------------

loc_8000954:				; CODE XREF: main+407j	main+41Aj
		mov	eax, ds:optind
		add	eax, 1
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aInvalidDeviceT ; "invalid device type %s"
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_80009A0:				; CODE XREF: main+5CEj	main+60Dj
		nop
		jmp	short loc_80009A4
; ---------------------------------------------------------------------------

loc_80009A3:				; CODE XREF: main+636j	main+675j
		nop

loc_80009A4:				; CODE XREF: main+6C4j
		sub	esp, 0Ch
		push	0		; status

loc_80009A9:				; DATA XREF: .eh_frame:08001188o
					; .eh_frame:080011A8o ...
		call	exit
main		endp

_text		ends

; ===========================================================================

; Segment type:	Zero-length
; Segment permissions: Read/Write
_data		segment	byte public 'DATA' use32
_data		ends

; ===========================================================================

; Segment type:	Zero-length
; Segment permissions: Read/Write
_bss		segment	byte public 'BSS' use32
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment '32byte' can not be represented in assembly
_rodata		segment	para public 'CONST' use32
		assume cs:_rodata
		;org 80009C0h
; char msgid[]
msgid		db 0Ah			; DATA XREF: emit_ancillary_info+1Do
		db 'Report %s bugs to %s',0Ah,0
aBugCoreutils@g	db 'bug-coreutils@gnu.org',0 ; DATA XREF: emit_ancillary_info+2Do
		align 10h
; char aSHomePageHttpW[]
aSHomePageHttpW	db '%s home page: <http://www.gnu.org/software/%s/>',0Ah,0
					; DATA XREF: emit_ancillary_info+3Fo
; char domainname[]
domainname	db 'coreutils',0        ; DATA XREF: emit_ancillary_info+4Fo
					; main+60o ...
aGnuCoreutils	db 'GNU coreutils',0    ; DATA XREF: emit_ancillary_info+54o
					; main+E7o
		align 4
; char aGeneralHelpUsi[]
aGeneralHelpUsi	db 'General help using GNU software: <http://www.gnu.org/gethelp/>',0Ah,0
					; DATA XREF: emit_ancillary_info+6Bo
; char s2[]
s2		db 'en_',0              ; DATA XREF: emit_ancillary_info+A2o
; char aReportSTransla[]
aReportSTransla	db 'Report %s translation bugs to <http://translationproject.org/team'
					; DATA XREF: emit_ancillary_info+CCo
		db '/>',0Ah,0
		align 4
; char aForCompleteDoc[]
aForCompleteDoc	db 'For complete documentation, run: info coreutils ',27h,'%s invocation'
					; DATA XREF: emit_ancillary_info+FCo
		db 27h,0Ah,0
aContext	db 'context',0          ; DATA XREF: .rodata:longoptso
aMode		db 'mode',0             ; DATA XREF: .rodata:longoptso
aHelp		db 'help',0             ; DATA XREF: .rodata:longoptso
aVersion	db 'version',0          ; DATA XREF: .rodata:longoptso
		align 20h
; const	option longopts[5]
longopts	option <offset aContext, 1, 0, 5Ah> ; DATA XREF: main+113o
		option <offset aMode, 1, 0, 6Dh> ; "context"
		option <offset aHelp, 0, 0, 0FFFFFF7Eh>
		option <offset aVersion, 0, 0, 0FFFFFF7Dh>
		option	<0>
; char aTrySHelpForMor[]
aTrySHelpForMor	db 'Try `%s --help',27h,' for more information.',0Ah,0
					; DATA XREF: usage+16o
		align 4
; char aUsageSOption__[]
aUsageSOption__	db 'Usage: %s [OPTION]... NAME TYPE [MAJOR MINOR]',0Ah,0
					; DATA XREF: usage+46o
		align 4
; char aCreateTheSpeci[]
aCreateTheSpeci	db 'Create the special file NAME of the given TYPE.',0Ah
					; DATA XREF: usage+69o
		db 0Ah,0
		align 4
; char aMandatoryArgum[]
aMandatoryArgum	db 'Mandatory arguments to long options are mandatory for short optio'
					; DATA XREF: usage+8Co
		db 'ns too.',0Ah,0
		align 4
; char aMModeModeSetFi[]
aMModeModeSetFi	db '  -m, --mode=MODE    set file permission bits to MODE, not a=rw -'
					; DATA XREF: usage+AFo
		db ' umask',0Ah,0
		align 4
; char aZContextCtxSet[]
aZContextCtxSet	db '  -Z, --context=CTX  set the SELinux security context of NAME to '
					; DATA XREF: usage+D2o
		db 'CTX',0Ah,0
		align 4
; char aHelpDisplayThi[]
aHelpDisplayThi	db '      --help     display this help and exit',0Ah,0
					; DATA XREF: usage+F5o
		align 4
; char aVersionOutputV[]
aVersionOutputV	db '      --version  output version information and exit',0Ah,0
					; DATA XREF: usage+118o
		align 4
; char aBothMajorAndMi[]
aBothMajorAndMi	db 0Ah			; DATA XREF: usage+13Bo
		db 'Both MAJOR and MINOR must be specified when TYPE is b, c, or u, a'
		db 'nd they',0Ah
		db 'must be omitted when TYPE is p.  If MAJOR or MINOR begins with 0x'
		db ' or 0X,',0Ah
		db 'it is interpreted as hexadecimal; otherwise, if it begins with 0,'
		db ' as octal;',0Ah
		db 'otherwise, as decimal.  TYPE may be:',0Ah,0
		align 4
; char aBCreateABlockB[]
aBCreateABlockB	db 0Ah			; DATA XREF: usage+15Eo
		db '  b      create a block (buffered) special file',0Ah
		db '  c, u   create a character (unbuffered) special file',0Ah
		db '  p      create a FIFO',0Ah,0
		align 4
; char aNoteYourShellM[]
aNoteYourShellM	db 0Ah			; DATA XREF: usage+17Bo
		db 'NOTE: your shell may have its own version of %s, which usually su'
		db 'persedes',0Ah
		db 'the version described here.  Please refer to your shell',27h,'s docu'
		db 'mentation',0Ah
		db 'for details about the options it supports.',0Ah,0
aMknod		db 'mknod',0            ; DATA XREF: usage+18Bo main+ECo
; char locale
locale		db 0			; DATA XREF: main+49o
; char dirname[]
dirname		db '/usr/local/share/locale',0 ; DATA XREF: main+5Bo
aDavidMackenzie	db 'David MacKenzie',0  ; DATA XREF: main+E1o
; char shortopts[]
shortopts	db 'm:Z:',0             ; DATA XREF: main+118o
; char aInvalidMode[]
aInvalidMode	db 'invalid mode',0     ; DATA XREF: main+162o
; char aModeMustSpecif[]
aModeMustSpecif	db 'mode must specify only file permission bits',0 ; DATA XREF: main+1C2o
; char aMissingOperand[]
aMissingOperand	db 'missing operand',0  ; DATA XREF: main+240o
; char aMissingOpera_0[]
aMissingOpera_0	db 'missing operand after %s',0 ; DATA XREF: main+285o
		align 4
; char aSpecialFilesRe[]
aSpecialFilesRe	db 'Special files require major and minor device numbers.',0
					; DATA XREF: main+2B9o
; char format[]
format		db '%s',0Ah,0           ; DATA XREF: main+2D1o main+373o
; char aExtraOperandS[]
aExtraOperandS	db 'extra operand %s',0 ; DATA XREF: main+327o
		align 10h
; char aFifosDoNotHave[]
aFifosDoNotHave	db 'Fifos do not have major and minor device numbers.',0
					; DATA XREF: main+35Bo
		align 4
; char aFailedToSetDef[]
aFailedToSetDef	db 'failed to set default file creation context to %s',0
					; DATA XREF: main+3B7o
		align 4
; char aInvalidMajorDe[]
aInvalidMajorDe	db 'invalid major device number %s',0 ; DATA XREF: main+4BBo
		align 4
; char aInvalidMinorDe[]
aInvalidMinorDe	db 'invalid minor device number %s',0 ; DATA XREF: main+52Bo
; char aInvalidDeviceS[]
aInvalidDeviceS	db 'invalid device %s %s',0 ; DATA XREF: main+57Eo
; char aS_0[]
aS_0		db '%s',0               ; DATA XREF: main+5FDo main+665o
; char aInvalidDeviceT[]
aInvalidDeviceT	db 'invalid device type %s',0 ; DATA XREF: main+69Eo
_rodata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_eh_frame	segment	dword public 'CONST' use32
		assume cs:_eh_frame
		;org 8001168h
		dd 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 2	dup(1Ch)
		dd offset loc_80009A9-8001B31h
		dd 18h,	80E4100h, 0D420285h, 0CC55405h,	404h, 20h, 3Ch
		dd offset loc_80009A9-8001B39h
		dd 11Ch, 80E4100h, 0D420285h, 3834405h,	0C5011403h, 4040CC3h
		dd 18h,	60h
		dd offset loc_80009A9-8001A41h
		dd 1A9h, 80E4100h, 0D420285h, 3834405h,	2Ch, 7Ch
		dd offset loc_80009A9-80018B4h
		dd 6D1h, 10C4400h, 5104700h, 46007502h,	7075030Fh, 2071006h
		dd 6107C75h, 10787502h,	74750203h
_eh_frame	ends

; ===========================================================================

; Segment type:	Externs
; extern
; int *_errno_location(void)
		extrn __errno_location:near ; CODE XREF: setfscreatecon+6p
					; main+3C6p ...
		extrn program_name:dword ; DATA	XREF: emit_ancillary_info+7r
					; emit_ancillary_info+B6r ...
		extrn last_component:near ; CODE XREF: emit_ancillary_info+10p
					; emit_ancillary_info+BFp ...
; char *gettext(const char *msgid)
		extrn gettext:near	; CODE XREF: emit_ancillary_info+22p
					; emit_ancillary_info+44p ...
; int printf(const char	*format, ...)
		extrn printf:near	; CODE XREF: emit_ancillary_info+34p
					; emit_ancillary_info+5Ap ...
; struct _IO_FILE *stdout
		extrn stdout:dword	; DATA XREF: emit_ancillary_info+62r
					; usage+60r ...
		extrn fputs_unlocked:near ; CODE XREF: emit_ancillary_info+7Dp
					; usage+7Bp ...
; char *setlocale(int category,	const char *locale)
		extrn setlocale:near	; CODE XREF: emit_ancillary_info+8Cp
					; main+50p
; int strncmp(const char *s1, const char *s2, size_t n)
		extrn strncmp:near	; CODE XREF: emit_ancillary_info+AAp
; struct _IO_FILE *stderr
		extrn stderr:dword	; DATA XREF: usage+25r	main+2C8r ...
; int fprintf(FILE *stream, const char *format,	...)
		extrn fprintf:near	; CODE XREF: usage+30p	main+2D7p ...
; void exit(int	status)
		extrn exit:near		; CODE XREF: usage+1A4p main+FFp ...
		extrn set_program_name:near ; CODE XREF: main+3Ep
; char *bindtextdomain(const char *domainname, const char *dirname)
		extrn bindtextdomain:near ; CODE XREF: main+65p
; char *textdomain(const char *domainname)
		extrn textdomain:near	; CODE XREF: main+75p
; void close_stdout(void)
		extrn close_stdout	; DATA XREF: main+80o
; int atexit(void (*func)(void))
		extrn atexit:near	; CODE XREF: main+85p
; char *optarg
		extrn optarg:dword	; DATA XREF: main+B3r
					; main:loc_800039Ar
		extrn Version:dword	; DATA XREF: main:loc_80003AEr
		extrn version_etc:near	; CODE XREF: main+F2p
; int getopt_long(int argc, char *const	*argv, const char *shortopts, const struct option *longopts, int *longind)
		extrn getopt_long:near	; CODE XREF: main+122p
		extrn mode_compile:near	; CODE XREF: main+14Ep
; void error(int status, int errnum, const char	*format, ...)
		extrn error:near	; CODE XREF: main+177p	main+1D7p ...
; __mode_t umask(__mode_t mask)
		extrn umask:near	; CODE XREF: main+184p
		extrn mode_adjust:near	; CODE XREF: main+19Ap
; void free(void *ptr)
		extrn free:near		; CODE XREF: main+1ABp
; int optind
		extrn optind:dword	; DATA XREF: main:loc_80004BCr
					; main+1E8r ...
		extrn quote:near	; CODE XREF: main+278p	main+31Ap ...
		extrn xstrtoumax:near	; CODE XREF: main+472p	main+4E6p
; unsigned __int64 gnu_dev_makedev(unsigned int	major, unsigned	int minor)
		extrn gnu_dev_makedev:near ; CODE XREF:	main+559p
; int mknod(const char *path, __mode_t mode, __dev_t dev)
		extrn mknod:near	; CODE XREF: main+5C4p
; int mkfifo(const char	*path, __mode_t	mode)
		extrn mkfifo:near	; CODE XREF: main+62Cp


		end
