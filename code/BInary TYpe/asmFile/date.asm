;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B611-7234-BB			    |
; |		Doskey Lee, Kingsoft Internet Security Software		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	D3CE18129EB4096425EACD500999D127
; Input	CRC32 :	93422657

; File Name   :	D:\coreutils-o\date.o
; Format      :	ELF for	Intel 386 (Relocatable)
;
; Source File :	'date.c'

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	byte public 'CODE' use32
		assume cs:_text
		;org 8000000h
		assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void emit_ancillary_info()
emit_ancillary_info proc near		; CODE XREF: usage+2DBp

lc_messages	= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset msgid	; "\nReport %s bugs to %s\n"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset aBugCoreutils@g ; "bug-coreutils@gnu.org"
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	offset aSHomePageHttpW ; "%s home page:	<http://www.gnu.org/softw"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset domainname ; "coreutils"
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aGeneralHelpUsi ; "General help using GNU software: <http:"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		sub	esp, 8
		push	0		; locale
		push	5		; category
		call	setlocale
		add	esp, 10h
		mov	[ebp+lc_messages], eax
		cmp	[ebp+lc_messages], 0
		jz	short loc_80000E6
		sub	esp, 4
		push	3		; n
		push	offset s2	; "en_"
		push	[ebp+lc_messages] ; s1
		call	strncmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_80000E6
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aReportSTransla ; "Report %s translation	bugs to	<http://t"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h

loc_80000E6:				; CODE XREF: emit_ancillary_info+9Bj
					; emit_ancillary_info+B4j
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aForCompleteDoc ; "For complete documentation, run: info	c"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		nop
		mov	ebx, [ebp+var_4]
		leave
		retn
emit_ancillary_info endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; char *__cdecl	timetostr(time_t t, char *buf)
timetostr	proc near		; CODE XREF: show_date+3Bp

t		= dword	ptr  8
buf		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	eax, [ebp+t]
		cdq
		sub	esp, 4
		push	[ebp+buf]
		push	edx
		push	eax
		call	imaxtostr
		add	esp, 10h
		leave
		retn
timetostr	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; char *__cdecl	bad_cast(const char *s)
bad_cast	proc near		; CODE XREF: main+25Fp

s		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+s]
		pop	ebp
		retn
bad_cast	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; timespec *get_stat_mtime(timespec *__return_ptr __struct_ptr retstr, const stat *st)
get_stat_mtime	proc near		; CODE XREF: main+64Cp

retstr		= dword	ptr  8
st		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+retstr]
		mov	eax, [ebp+st]
		mov	edx, [eax+4Ch]
		mov	eax, [eax+48h]
		mov	[ecx], eax
		mov	[ecx+4], edx
		mov	eax, [ebp+retstr]
		pop	ebp
		retn	4
get_stat_mtime	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; void __cdecl usage(int status)
		public usage
usage		proc near		; CODE XREF: main+281p	main+2BEp ...

status		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		cmp	[ebp+status], 0
		jz	short loc_8000196
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, ds:stderr
		sub	esp, 4
		push	ebx
		push	edx		; format
		push	eax		; stream
		call	fprintf
		add	esp, 10h
		jmp	loc_800043B
; ---------------------------------------------------------------------------

loc_8000196:				; CODE XREF: usage+9j
		mov	esi, ds:program_name
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aUsageSOption__ ; "Usage: %s [OPTION]...	[+FORMAT]\n  or: "...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	esi
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aDisplayTheCurr ; "Display the current time in the given	F"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aRReferenceFile ; "  -r,	--reference=FILE      display the"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aRfc3339Timespe ; "	--rfc-3339=TIMESPEC   output date"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aHelpDisplayThi ; "	--help	   display this	help and "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aVersionOutputV ; "	--version  output version informa"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aFormatControls ; "\nFORMAT controls the	output.	 Interpre"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aALocaleSFullWe ; "  %A	 locale's full weekday name (e.g."...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aCCenturyLikeYE ; "  %C	 century; like %Y, except omit la"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aFFullDateSameA ; "  %F	 full date; same as %Y-%m-%d\n	%"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aHSameAsBHHour0 ; "  %h	 same as %b\n  %H   hour (00..23)"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aKHour0__23LHou ; "  %k	 hour (	0..23)\n  %l   hour ( 1.."...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aNANewlineNNano ; "  %n	 a newline\n  %N   nanoseconds (0"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aSSecond00__60T ; "  %S	 second	(00..60)\n  %t	 a tab\n "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aUWeekNumberOfY ; "  %U	 week number of	year, with Sunday"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aXLocaleSDateRe ; "  %x	 locale's date representation (e."...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aZHhmmNumericTi ; "  %z	 +hhmm numeric timezone	(e.g., -0"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aTheFollowingOp ; "The following	optional flags may follow"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aAfterAnyFlagsC ; "\nAfter any flags comes an optional fie"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		call	emit_ancillary_info

loc_800043B:				; CODE XREF: usage+36j
		sub	esp, 0Ch
		push	[ebp+status]	; status
		call	exit
usage		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; _Bool	__cdecl	batch_convert(const char *input_filename, const	char *format)
batch_convert	proc near		; CODE XREF: main+558p

format		= dword	ptr -30h
input_filename	= dword	ptr -2Ch
ok		= byte ptr -25h
line		= dword	ptr -24h
buflen		= dword	ptr -20h
in_stream	= dword	ptr -1Ch
line_length	= dword	ptr -18h
when		= timespec ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 34h
		mov	eax, [ebp+arg_0]
		mov	[ebp+input_filename], eax
		mov	eax, [ebp+arg_4]
		mov	[ebp+format], eax
		mov	eax, large gs:14h
		mov	[ebp+var_C], eax
		xor	eax, eax
		sub	esp, 8
		push	offset asc_8001F94 ; "-"
		push	[ebp+input_filename] ; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		jnz	short loc_8000498
		sub	esp, 0Ch
		push	offset aStandardInput ;	"standard input"
		call	gettext
		add	esp, 10h
		mov	[ebp+input_filename], eax
		mov	eax, ds:stdin
		mov	[ebp+in_stream], eax
		jmp	short loc_80004DC
; ---------------------------------------------------------------------------

loc_8000498:				; CODE XREF: batch_convert+33j
		sub	esp, 8
		push	offset aR	; "r"
		push	[ebp+input_filename]
		call	fopen64
		add	esp, 10h
		mov	[ebp+in_stream], eax
		cmp	[ebp+in_stream], 0
		jnz	short loc_80004DC
		sub	esp, 0Ch
		push	[ebp+input_filename]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		push	ebx
		push	offset format	; "%s"
		push	eax		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_80004DC:				; CODE XREF: batch_convert+50j
					; batch_convert+6Cj
		mov	[ebp+line], 0
		mov	[ebp+buflen], 0
		mov	[ebp+ok], 1

loc_80004EE:				; CODE XREF: batch_convert+13Aj
					; batch_convert+164j
		sub	esp, 4
		push	[ebp+in_stream]
		lea	eax, [ebp+buflen]
		push	eax
		lea	eax, [ebp+line]
		push	eax
		call	getline
		add	esp, 10h
		mov	[ebp+line_length], eax
		cmp	[ebp+line_length], 0
		js	loc_80005AF
		mov	eax, [ebp+line]
		sub	esp, 4
		push	0
		push	eax
		lea	eax, [ebp+when]
		push	eax
		call	get_date
		add	esp, 10h
		xor	eax, 1
		test	al, al
		jz	short loc_8000585
		mov	eax, [ebp+line]
		mov	edx, [ebp+line_length]
		sub	edx, 1
		add	eax, edx
		movzx	eax, byte ptr [eax]
		cmp	al, 0Ah
		jnz	short loc_800054D
		mov	eax, [ebp+line]
		mov	edx, [ebp+line_length]
		sub	edx, 1
		add	eax, edx
		mov	byte ptr [eax],	0

loc_800054D:				; CODE XREF: batch_convert+F7j
		mov	eax, [ebp+line]
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aInvalidDateS ; "invalid	date %s"
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	[ebp+ok], 0
		jmp	loc_80004EE
; ---------------------------------------------------------------------------

loc_8000585:				; CODE XREF: batch_convert+E5j
		sub	esp, 4
		push	[ebp+when.tv_nsec]
		push	[ebp+when.tv_sec] ; when
		push	[ebp+format]	; format
		call	show_date
		add	esp, 10h
		movzx	edx, [ebp+ok]
		movzx	eax, al
		and	eax, edx
		test	eax, eax
		setnz	al
		mov	[ebp+ok], al
		jmp	loc_80004EE
; ---------------------------------------------------------------------------

loc_80005AF:				; CODE XREF: batch_convert+C5j
		nop
		sub	esp, 0Ch
		push	[ebp+in_stream]	; stream
		call	fclose
		add	esp, 10h
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_80005EB
		sub	esp, 0Ch
		push	[ebp+input_filename]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		push	ebx
		push	offset format	; "%s"
		push	eax		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_80005EB:				; CODE XREF: batch_convert+17Bj
		mov	eax, [ebp+line]
		sub	esp, 0Ch
		push	eax		; ptr
		call	free
		add	esp, 10h
		movzx	eax, [ebp+ok]
		mov	ecx, [ebp+var_C]
		xor	ecx, large gs:14h
		jz	short loc_800060F
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_800060F:				; CODE XREF: batch_convert+1C2j
		mov	ebx, [ebp+var_4]
		leave
		retn
batch_convert	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public main
main		proc near

var_C8		= timespec ptr -0C8h
argv		= dword	ptr -0BCh
set_date	= byte ptr -0AFh
ok		= byte ptr -0AEh
valid_date	= byte ptr -0ADh
datestr		= dword	ptr -0ACh
set_datestr	= dword	ptr -0A8h
format		= dword	ptr -0A4h
batch_file	= dword	ptr -0A0h
reference	= dword	ptr -9Ch
new_format	= dword	ptr -98h
optc		= dword	ptr -94h
i		= dword	ptr -90h
i_0		= dword	ptr -8Ch
option_specified_date= dword ptr -88h
when		= timespec ptr -84h
refstats	= stat ptr -7Ch
var_1C		= dword	ptr -1Ch
argc		= dword	ptr  0Ch
envp		= dword	ptr  14h

		lea	ecx, [esp+4]
		and	esp, 0FFFFFFF0h
		push	dword ptr [ecx-4]
		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		push	ecx
		sub	esp, 0BCh
		mov	ebx, ecx
		mov	eax, [ebx+4]
		mov	[ebp+argv], eax
		mov	eax, large gs:14h
		mov	[ebp+var_1C], eax
		xor	eax, eax
		mov	[ebp+datestr], 0
		mov	[ebp+set_datestr], 0
		mov	[ebp+set_date],	0
		mov	[ebp+format], 0
		mov	[ebp+batch_file], 0
		mov	[ebp+reference], 0
		mov	eax, [ebp+argv]
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	set_program_name
		add	esp, 10h
		sub	esp, 8
		push	offset locale	; locale
		push	6		; category
		call	setlocale
		add	esp, 10h
		sub	esp, 8
		push	offset dirname	; "/usr/local/share/locale"
		push	offset domainname ; "coreutils"
		call	bindtextdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset domainname ; "coreutils"
		call	textdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset close_stdout ; func
		call	atexit
		add	esp, 10h
		jmp	loc_8000916
; ---------------------------------------------------------------------------

loc_80006D9:				; CODE XREF: main+32Ej
		mov	[ebp+new_format], 0
		mov	eax, [ebp+optc]
		cmp	eax, 64h
		jz	short loc_8000762
		cmp	eax, 64h
		jg	short loc_800072C
		cmp	eax, 0FFFFFF7Eh
		jz	loc_8000890
		cmp	eax, 0FFFFFF7Eh
		jg	short loc_8000715
		cmp	eax, 0FFFFFF7Dh
		jz	loc_800089A
		jmp	loc_80008CD
; ---------------------------------------------------------------------------

loc_8000715:				; CODE XREF: main+EFj
		cmp	eax, 49h
		jz	loc_80007D9
		cmp	eax, 52h
		jz	loc_8000848
		jmp	loc_80008CD
; ---------------------------------------------------------------------------

loc_800072C:				; CODE XREF: main+DDj
		cmp	eax, 73h
		jz	loc_8000857
		cmp	eax, 73h
		jg	short loc_800074D
		cmp	eax, 66h
		jz	short loc_8000772
		cmp	eax, 72h
		jz	loc_8000838
		jmp	loc_80008CD
; ---------------------------------------------------------------------------

loc_800074D:				; CODE XREF: main+124j
		cmp	eax, 75h
		jz	loc_800086B
		cmp	eax, 80h
		jz	short loc_8000782
		jmp	loc_80008CD
; ---------------------------------------------------------------------------

loc_8000762:				; CODE XREF: main+D8j
		mov	eax, ds:optarg
		mov	[ebp+datestr], eax
		jmp	loc_80008D8
; ---------------------------------------------------------------------------

loc_8000772:				; CODE XREF: main+129j
		mov	eax, ds:optarg
		mov	[ebp+batch_file], eax
		jmp	loc_80008D8
; ---------------------------------------------------------------------------

loc_8000782:				; CODE XREF: main+147j
		mov	edx, ds:argmatch_die
		mov	esi, (offset time_spec+8)
		mov	ecx, (offset time_spec_string+8)
		mov	eax, ds:optarg
		sub	esp, 8
		push	edx
		push	4
		push	esi
		push	ecx
		push	eax
		push	offset aRfc3339	; "--rfc-3339"
		call	__xargmatch_internal
		add	esp, 20h
		add	eax, 2
		shl	eax, 2
		add	eax, offset time_spec
		mov	eax, [eax]
		mov	[ebp+i], eax
		mov	eax, [ebp+i]
		shl	eax, 5
		add	eax, offset rfc_3339_format_5555 ; "%Y-%m-%d"
		mov	[ebp+new_format], eax
		jmp	loc_80008D8
; ---------------------------------------------------------------------------

loc_80007D9:				; CODE XREF: main+104j
		mov	eax, ds:optarg
		test	eax, eax
		jz	short loc_8000814
		mov	edx, ds:argmatch_die
		mov	eax, ds:optarg
		sub	esp, 8
		push	edx
		push	4
		push	offset time_spec
		push	offset time_spec_string
		push	eax
		push	offset aIso8601	; "--iso-8601"
		call	__xargmatch_internal
		add	esp, 20h
		mov	eax, ds:time_spec[eax*4]
		jmp	short loc_8000819
; ---------------------------------------------------------------------------

loc_8000814:				; CODE XREF: main+1CCj
		mov	eax, 0

loc_8000819:				; CODE XREF: main+1FEj
		mov	[ebp+i_0], eax
		mov	eax, [ebp+i_0]
		shl	eax, 5
		add	eax, offset iso_8601_format_5558 ; "%Y-%m-%d"
		mov	[ebp+new_format], eax
		jmp	loc_80008D8
; ---------------------------------------------------------------------------

loc_8000838:				; CODE XREF: main+12Ej
		mov	eax, ds:optarg
		mov	[ebp+reference], eax
		jmp	loc_80008D8
; ---------------------------------------------------------------------------

loc_8000848:				; CODE XREF: main+10Dj
		mov	[ebp+new_format], offset rfc_2822_format ; "%a,	%d %b %Y %H:%M:%S %z"
		jmp	loc_80008D8
; ---------------------------------------------------------------------------

loc_8000857:				; CODE XREF: main+11Bj
		mov	eax, ds:optarg
		mov	[ebp+set_datestr], eax
		mov	[ebp+set_date],	1
		jmp	short loc_80008D8
; ---------------------------------------------------------------------------

loc_800086B:				; CODE XREF: main+13Cj
		sub	esp, 0Ch
		push	offset s	; "TZ=UTC0"
		call	bad_cast
		add	esp, 10h
		sub	esp, 0Ch
		push	eax		; string
		call	putenv
		add	esp, 10h
		test	eax, eax
		jz	short loc_80008D7
		call	xalloc_die

loc_8000890:				; CODE XREF: main+E4j
		sub	esp, 0Ch
		push	0		; status
		call	usage
; ---------------------------------------------------------------------------

loc_800089A:				; CODE XREF: main+F6j
		mov	edx, ds:Version
		mov	eax, ds:stdout
		sub	esp, 8
		push	0
		push	offset aDavidMackenzie ; "David	MacKenzie"
		push	edx
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	offset aDate	; "date"
		push	eax
		call	version_etc
		add	esp, 20h
		sub	esp, 0Ch
		push	0		; status
		call	exit
; ---------------------------------------------------------------------------

loc_80008CD:				; CODE XREF: main+FCj main+113j ...
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_80008D7:				; CODE XREF: main+275j
		nop

loc_80008D8:				; CODE XREF: main+159j	main+169j ...
		cmp	[ebp+new_format], 0
		jz	short loc_8000916
		cmp	[ebp+format], 0
		jz	short loc_800090A
		sub	esp, 0Ch
		push	offset aMultipleOutput ; "multiple output formats specified"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_800090A:				; CODE XREF: main+2D4j
		mov	eax, [ebp+new_format]
		mov	[ebp+format], eax

loc_8000916:				; CODE XREF: main+C0j main+2CBj
		sub	esp, 0Ch
		push	0		; longind
		push	offset long_options ; longopts
		push	offset short_options ; "d:f:I::r:Rs:u"
		push	[ebp+argv]	; argv
		push	dword ptr [ebx]	; argc
		call	getopt_long
		add	esp, 20h
		mov	[ebp+optc], eax
		cmp	[ebp+optc], 0FFFFFFFFh
		jnz	loc_80006D9
		cmp	[ebp+datestr], 0
		setnz	al
		movzx	edx, al
		cmp	[ebp+batch_file], 0
		setnz	al
		movzx	eax, al
		add	edx, eax
		cmp	[ebp+reference], 0
		setnz	al
		movzx	eax, al
		add	eax, edx
		mov	[ebp+option_specified_date], eax
		cmp	[ebp+option_specified_date], 1
		jle	short loc_80009AC
		sub	esp, 0Ch
		push	offset aTheOptionsToSp ; "the options to specify dates for printi"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_80009AC:				; CODE XREF: main+36Cj
		cmp	[ebp+set_date],	0
		jz	short loc_80009E8
		cmp	[ebp+option_specified_date], 0
		jz	short loc_80009E8
		sub	esp, 0Ch
		push	offset aTheOptionsToPr ; "the options to print and set the time	m"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_80009E8:				; CODE XREF: main+39Fj	main+3A8j
		mov	eax, ds:optind
		cmp	eax, [ebx]
		jge	loc_8000B1E
		mov	eax, ds:optind
		add	eax, 1
		cmp	eax, [ebx]
		jge	short loc_8000A50
		mov	eax, ds:optind
		add	eax, 1
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aExtraOperandS ;	"extra operand %s"
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8000A50:				; CODE XREF: main+3EBj
		mov	eax, ds:optind
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		mov	eax, [eax]
		movzx	eax, byte ptr [eax]
		cmp	al, 2Bh
		jnz	short loc_8000AC0
		cmp	[ebp+format], 0
		jz	short loc_8000A96
		sub	esp, 0Ch
		push	offset aMultipleOutput ; "multiple output formats specified"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_8000A96:				; CODE XREF: main+460j
		mov	eax, ds:optind
		lea	edx, [eax+1]
		mov	ds:optind, edx
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		mov	eax, [eax]
		add	eax, 1
		mov	[ebp+format], eax
		jmp	short loc_8000B1E
; ---------------------------------------------------------------------------

loc_8000AC0:				; CODE XREF: main+457j
		cmp	[ebp+set_date],	0
		jnz	short loc_8000AD2
		cmp	[ebp+option_specified_date], 0
		jz	short loc_8000B1E

loc_8000AD2:				; CODE XREF: main+4B3j
		mov	eax, ds:optind
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aTheArgumentSLa ; "the argument %s lacks	a leading `+';\nw"...
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8000B1E:				; CODE XREF: main+3DBj	main+4AAj ...
		cmp	[ebp+format], 0
		jnz	short loc_8000B54
		sub	esp, 0Ch
		push	2006Ch		; item
		call	nl_langinfo
		add	esp, 10h
		mov	[ebp+format], eax
		mov	eax, [ebp+format]
		movzx	eax, byte ptr [eax]
		test	al, al
		jnz	short loc_8000B54
		mov	[ebp+format], offset aABEHMSZY ; "%a %b	%e %H:%M:%S %Z %Y"

loc_8000B54:				; CODE XREF: main+511j	main+534j
		cmp	[ebp+batch_file], 0
		jz	short loc_8000B7F
		sub	esp, 8
		push	[ebp+format]	; format
		push	[ebp+batch_file] ; input_filename
		call	batch_convert
		add	esp, 10h
		mov	[ebp+ok], al
		jmp	loc_8000D72
; ---------------------------------------------------------------------------

loc_8000B7F:				; CODE XREF: main+547j
		mov	[ebp+valid_date], 1
		mov	[ebp+ok], 1
		cmp	[ebp+option_specified_date], 0
		jnz	short loc_8000C13
		movzx	eax, [ebp+set_date]
		xor	eax, 1
		test	al, al
		jz	short loc_8000C13
		mov	eax, ds:optind
		cmp	eax, [ebx]
		jge	short loc_8000BFC
		mov	[ebp+set_date],	1
		mov	eax, ds:optind
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		mov	eax, [eax]
		mov	[ebp+datestr], eax
		sub	esp, 4
		push	0Eh
		push	[ebp+datestr]
		lea	eax, [ebp+when]
		push	eax
		call	posixtime
		add	esp, 10h
		mov	[ebp+valid_date], al
		mov	[ebp+when.tv_nsec], 0
		jmp	loc_8000CB4
; ---------------------------------------------------------------------------

loc_8000BFC:				; CODE XREF: main+597j
		sub	esp, 0Ch
		lea	eax, [ebp+when]
		push	eax
		call	gettime
		add	esp, 10h
		jmp	loc_8000CB4
; ---------------------------------------------------------------------------

loc_8000C13:				; CODE XREF: main+580j	main+58Ej
		cmp	[ebp+reference], 0
		jz	short loc_8000C7F
		sub	esp, 8
		lea	eax, [ebp+refstats]
		push	eax
		push	[ebp+reference]
		call	stat64
		add	esp, 10h
		test	eax, eax
		jz	short loc_8000C52
		call	__errno_location
		mov	eax, [eax]
		push	[ebp+reference]
		push	offset format	; "%s"
		push	eax		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_8000C52:				; CODE XREF: main+61Fj
		lea	eax, [ebp+var_C8]
		sub	esp, 8
		lea	edx, [ebp+refstats]
		push	edx		; st
		push	eax		; retstr
		call	get_stat_mtime
		add	esp, 0Ch
		mov	eax, [ebp+var_C8.tv_sec]
		mov	edx, [ebp+var_C8.tv_nsec]
		mov	[ebp+when.tv_sec], eax
		mov	[ebp+when.tv_nsec], edx
		jmp	short loc_8000CB4
; ---------------------------------------------------------------------------

loc_8000C7F:				; CODE XREF: main+606j
		cmp	[ebp+set_datestr], 0
		jz	short loc_8000C94
		mov	eax, [ebp+set_datestr]
		mov	[ebp+datestr], eax

loc_8000C94:				; CODE XREF: main+672j
		sub	esp, 4
		push	0
		push	[ebp+datestr]
		lea	eax, [ebp+when]
		push	eax
		call	get_date
		add	esp, 10h
		mov	[ebp+valid_date], al

loc_8000CB4:				; CODE XREF: main+5E3j	main+5FAj ...
		movzx	eax, [ebp+valid_date]
		xor	eax, 1
		test	al, al
		jz	short loc_8000CF3
		sub	esp, 0Ch
		push	[ebp+datestr]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aInvalidDateS ; "invalid	date %s"
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_8000CF3:				; CODE XREF: main+6ACj
		cmp	[ebp+set_date],	0
		jz	short loc_8000D41
		sub	esp, 0Ch
		lea	eax, [ebp+when]
		push	eax
		call	settime
		add	esp, 10h
		test	eax, eax
		jz	short loc_8000D41
		sub	esp, 0Ch
		push	offset aCannotSetDate ;	"cannot	set date"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		sub	esp, 4
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	[ebp+ok], 0

loc_8000D41:				; CODE XREF: main+6E6j	main+6FCj
		sub	esp, 4
		push	[ebp+when.tv_nsec]
		push	[ebp+when.tv_sec] ; when
		push	[ebp+format]	; format
		call	show_date
		add	esp, 10h
		movzx	edx, [ebp+ok]
		movzx	eax, al
		and	eax, edx
		test	eax, eax
		setnz	al
		mov	[ebp+ok], al

loc_8000D72:				; CODE XREF: main+566j
		cmp	[ebp+ok], 0
		jz	short loc_8000D82
		mov	eax, 0
		jmp	short loc_8000D87
; ---------------------------------------------------------------------------

loc_8000D82:				; CODE XREF: main+765j
		mov	eax, 1

loc_8000D87:				; CODE XREF: main+76Cj
		sub	esp, 0Ch
		push	eax		; status
		call	exit
main		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; _Bool	__cdecl	show_date(const	char *format, timespec when)
show_date	proc near		; CODE XREF: batch_convert+14Bp
					; main+73Fp

format		= dword	ptr -2Ch
tm		= dword	ptr -28h
buf		= byte ptr -21h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
when		= timespec ptr	0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 34h
		mov	eax, [ebp+arg_0]
		mov	[ebp+format], eax
		mov	eax, large gs:14h
		mov	[ebp+var_C], eax
		xor	eax, eax
		sub	esp, 0Ch
		lea	eax, [ebp+when]
		push	eax		; timer
		call	localtime
		add	esp, 10h
		mov	[ebp+tm], eax
		cmp	[ebp+tm], 0
		jnz	short loc_8000DFA
		mov	eax, [ebp+when.tv_sec]
		sub	esp, 8
		lea	edx, [ebp+buf]
		push	edx		; buf
		push	eax		; t
		call	timetostr
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aTimeSIsOutOfRa ; "time %s is out of range"
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	eax, 0
		jmp	short loc_8000E65
; ---------------------------------------------------------------------------

loc_8000DFA:				; CODE XREF: show_date+2Ej
		cmp	[ebp+format], offset rfc_2822_format ; "%a, %d %b %Y %H:%M:%S %z"
		jnz	short loc_8000E15
		sub	esp, 8
		push	offset aC	; "C"
		push	2		; category
		call	setlocale
		add	esp, 10h

loc_8000E15:				; CODE XREF: show_date+71j
		mov	edx, [ebp+when.tv_nsec]
		mov	eax, ds:stdout
		sub	esp, 0Ch
		push	edx
		push	0
		push	[ebp+tm]
		push	[ebp+format]
		push	eax
		call	fprintftime
		add	esp, 20h
		mov	eax, ds:stdout
		sub	esp, 8
		push	eax		; stream
		push	0Ah		; c
		call	fputc_unlocked
		add	esp, 10h
		cmp	[ebp+format], offset rfc_2822_format ; "%a, %d %b %Y %H:%M:%S %z"
		jnz	short loc_8000E60
		sub	esp, 8
		push	offset locale	; locale
		push	2		; category
		call	setlocale
		add	esp, 10h

loc_8000E60:				; CODE XREF: show_date+BCj
		mov	eax, 1

loc_8000E65:				; CODE XREF: show_date+68j
		mov	ecx, [ebp+var_C]
		xor	ecx, large gs:14h
		jz	short loc_8000E76
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_8000E76:				; CODE XREF: show_date+DFj
		mov	ebx, [ebp+var_4]
		leave

locret_8000E7A:				; DATA XREF: .eh_frame:080022C0o
					; .eh_frame:080022E4o ...
		retn
show_date	endp

_text		ends

; ===========================================================================

; Segment type:	Zero-length
; Segment permissions: Read/Write
_data		segment	byte public 'DATA' use32
_data		ends

; ===========================================================================

; Segment type:	Zero-length
; Segment permissions: Read/Write
_bss		segment	byte public 'BSS' use32
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment '32byte' can not be represented in assembly
_rodata		segment	para public 'CONST' use32
		assume cs:_rodata
		;org 8000E80h
; char msgid[]
msgid		db 0Ah			; DATA XREF: emit_ancillary_info+1Do
		db 'Report %s bugs to %s',0Ah,0
aBugCoreutils@g	db 'bug-coreutils@gnu.org',0 ; DATA XREF: emit_ancillary_info+2Do
		align 10h
; char aSHomePageHttpW[]
aSHomePageHttpW	db '%s home page: <http://www.gnu.org/software/%s/>',0Ah,0
					; DATA XREF: emit_ancillary_info+3Fo
; char domainname[]
domainname	db 'coreutils',0        ; DATA XREF: emit_ancillary_info+4Fo
					; main+93o ...
aGnuCoreutils	db 'GNU coreutils',0    ; DATA XREF: emit_ancillary_info+54o
					; main+29Co
		align 4
; char aGeneralHelpUsi[]
aGeneralHelpUsi	db 'General help using GNU software: <http://www.gnu.org/gethelp/>',0Ah,0
					; DATA XREF: emit_ancillary_info+6Bo
; char s2[]
s2		db 'en_',0              ; DATA XREF: emit_ancillary_info+A2o
; char aReportSTransla[]
aReportSTransla	db 'Report %s translation bugs to <http://translationproject.org/team'
					; DATA XREF: emit_ancillary_info+CCo
		db '/>',0Ah,0
		align 4
; char aForCompleteDoc[]
aForCompleteDoc	db 'For complete documentation, run: info coreutils ',27h,'%s invocation'
					; DATA XREF: emit_ancillary_info+FCo
		db 27h,0Ah,0
aHours		db 'hours',0            ; DATA XREF: .rodata:time_spec_stringo
aMinutes	db 'minutes',0          ; DATA XREF: .rodata:time_spec_stringo
aDate		db 'date',0             ; DATA XREF: main+2A1o
					; .rodata:time_spec_stringo ...
aSeconds	db 'seconds',0          ; DATA XREF: .rodata:time_spec_stringo
aNs		db 'ns',0               ; DATA XREF: .rodata:time_spec_stringo
		align 4
; const	char *const time_spec_string[6]
time_spec_string dd offset aHours, offset aMinutes, offset aDate, offset aSeconds
					; DATA XREF: main+1E4o	main+179o
		dd offset aNs, 0	; "hours"
; const	Time_spec time_spec[5]
time_spec	dd TIME_SPEC_HOURS, TIME_SPEC_MINUTES, TIME_SPEC_DATE ;	DATA XREF: main+19Fo
					; main+1DFo ...
		dd TIME_SPEC_SECONDS, TIME_SPEC_NS
; char rfc_2822_format[25]
rfc_2822_format	db '%a, %d %b %Y %H:%M:%S %z',0 ; DATA XREF: main:loc_8000848o
					; show_date:loc_8000DFAo ...
		align 10h
; char short_options[14]
short_options	db 'd:f:I::r:Rs:u',0    ; DATA XREF: main+30Co
aFile		db 'file',0             ; DATA XREF: .rodata:long_optionso
aIso8601_0	db 'iso-8601',0         ; DATA XREF: .rodata:long_optionso
aReference	db 'reference',0        ; DATA XREF: .rodata:long_optionso
aRfc822		db 'rfc-822',0          ; DATA XREF: .rodata:long_optionso
aRfc2822	db 'rfc-2822',0         ; DATA XREF: .rodata:long_optionso
aRfc3339_0	db 'rfc-3339',0         ; DATA XREF: .rodata:long_optionso
aSet		db 'set',0              ; DATA XREF: .rodata:long_optionso
aUct		db 'uct',0              ; DATA XREF: .rodata:long_optionso
aUtc		db 'utc',0              ; DATA XREF: .rodata:long_optionso
aUniversal	db 'universal',0        ; DATA XREF: .rodata:long_optionso
aHelp		db 'help',0             ; DATA XREF: .rodata:long_optionso
aVersion	db 'version',0          ; DATA XREF: .rodata:long_optionso
		align 10h
; const	option long_options[14]
long_options	option <offset aDate, 1, 0, 64h> ; DATA	XREF: main+307o
		option <offset aFile, 1, 0, 66h> ; "date"
		option <offset aIso8601_0, 2, 0, 49h>
		option <offset aReference, 1, 0, 72h>
		option <offset aRfc822,	0, 0, 52h>
		option <offset aRfc2822, 0, 0, 52h>
		option <offset aRfc3339_0, 1, 0, 80h>
		option <offset aSet, 1,	0, 73h>
		option <offset aUct, 0,	0, 75h>
		option <offset aUtc, 0,	0, 75h>
		option <offset aUniversal, 0, 0, 75h>
		option <offset aHelp, 0, 0, 0FFFFFF7Eh>
		option <offset aVersion, 0, 0, 0FFFFFF7Dh>
		option	<0>
; char aTrySHelpForMor[]
aTrySHelpForMor	db 'Try `%s --help',27h,' for more information.',0Ah,0
					; DATA XREF: usage+14o
		align 4
; char aUsageSOption__[]
aUsageSOption__	db 'Usage: %s [OPTION]... [+FORMAT]',0Ah ; DATA XREF: usage+4Ao
		db '  or:  %s [-u|--utc|--universal] [MMDDhhmm[[CC]YY][.ss]]',0Ah,0
		align 4
; char aDisplayTheCurr[]
aDisplayTheCurr	db 'Display the current time in the given FORMAT, or set the system d'
					; DATA XREF: usage+6Eo
		db 'ate.',0Ah
		db 0Ah
		db '  -d, --date=STRING         display time described by STRING, not'
		db ' `now',27h,0Ah
		db '  -f, --file=DATEFILE       like --date once for each line of DAT'
		db 'EFILE',0Ah,0
		align 4
; char aRReferenceFile[]
aRReferenceFile	db '  -r, --reference=FILE      display the last modification time of'
					; DATA XREF: usage+91o
		db ' FILE',0Ah
		db '  -R, --rfc-2822            output date and time in RFC 2822 form'
		db 'at.',0Ah
		db '                            Example: Mon, 07 Aug 2006 12:34:56 -0'
		db '600',0Ah,0
		align 10h
; char aRfc3339Timespe[]
aRfc3339Timespe	db '      --rfc-3339=TIMESPEC   output date and time in RFC 3339 form'
					; DATA XREF: usage+B4o
		db 'at.',0Ah
		db '                            TIMESPEC=`date',27h,', `seconds',27h,', or '
		db '`ns',27h,' for',0Ah
		db '                            date and time to the indicated precis'
		db 'ion.',0Ah
		db '                            Date and time components are separate'
		db 'd by',0Ah
		db '                            a single space: 2006-08-07 12:34:56-0'
		db '6:00',0Ah
		db '  -s, --set=STRING          set time described by STRING',0Ah
		db '  -u, --utc, --universal    print or set Coordinated Universal Ti'
		db 'me',0Ah,0
		align 4
; char aHelpDisplayThi[]
aHelpDisplayThi	db '      --help     display this help and exit',0Ah,0
					; DATA XREF: usage+D7o
		align 4
; char aVersionOutputV[]
aVersionOutputV	db '      --version  output version information and exit',0Ah,0
					; DATA XREF: usage+FAo
		align 4
; char aFormatControls[]
aFormatControls	db 0Ah			; DATA XREF: usage+11Do
		db 'FORMAT controls the output.  Interpreted sequences are:',0Ah
		db 0Ah
		db '  %%   a literal %',0Ah
		db '  %a   locale',27h,'s abbreviated weekday name (e.g., Sun)',0Ah,0
		align 4
; char aALocaleSFullWe[]
aALocaleSFullWe	db '  %A   locale',27h,'s full weekday name (e.g., Sunday)',0Ah
					; DATA XREF: usage+140o
		db '  %b   locale',27h,'s abbreviated month name (e.g., Jan)',0Ah
		db '  %B   locale',27h,'s full month name (e.g., January)',0Ah
		db '  %c   locale',27h,'s date and time (e.g., Thu Mar  3 23:05:25 2005)'
		db 0Ah,0
; char aCCenturyLikeYE[]
aCCenturyLikeYE	db '  %C   century; like %Y, except omit last two digits (e.g., 20)',0Ah
					; DATA XREF: usage+163o
		db '  %d   day of month (e.g, 01)',0Ah
		db '  %D   date; same as %m/%d/%y',0Ah
		db '  %e   day of month, space padded; same as %_d',0Ah,0
; char aFFullDateSameA[]
aFFullDateSameA	db '  %F   full date; same as %Y-%m-%d',0Ah ; DATA XREF: usage+186o
		db '  %g   last two digits of year of ISO week number (see %G)',0Ah
		db '  %G   year of ISO week number (see %V); normally useful only wit'
		db 'h %V',0Ah,0
		align 10h
; char aHSameAsBHHour0[]
aHSameAsBHHour0	db '  %h   same as %b',0Ah ; DATA XREF: usage+1A9o
		db '  %H   hour (00..23)',0Ah
		db '  %I   hour (01..12)',0Ah
		db '  %j   day of year (001..366)',0Ah,0
		align 4
; char aKHour0__23LHou[]
aKHour0__23LHou	db '  %k   hour ( 0..23)',0Ah ; DATA XREF: usage+1CCo
		db '  %l   hour ( 1..12)',0Ah
		db '  %m   month (01..12)',0Ah
		db '  %M   minute (00..59)',0Ah,0
; char aNANewlineNNano[]
aNANewlineNNano	db '  %n   a newline',0Ah ; DATA XREF: usage+1EFo
		db '  %N   nanoseconds (000000000..999999999)',0Ah
		db '  %p   locale',27h,'s equivalent of either AM or PM; blank if not kn'
		db 'own',0Ah
		db '  %P   like %p, but lower case',0Ah
		db '  %r   locale',27h,'s 12-hour clock time (e.g., 11:11:04 PM)',0Ah
		db '  %R   24-hour hour and minute; same as %H:%M',0Ah
		db '  %s   seconds since 1970-01-01 00:00:00 UTC',0Ah,0
		align 4
; char aSSecond00__60T[]
aSSecond00__60T	db '  %S   second (00..60)',0Ah ; DATA XREF: usage+212o
		db '  %t   a tab',0Ah
		db '  %T   time; same as %H:%M:%S',0Ah
		db '  %u   day of week (1..7); 1 is Monday',0Ah,0
		align 10h
; char aUWeekNumberOfY[]
aUWeekNumberOfY	db '  %U   week number of year, with Sunday as first day of week (00.'
					; DATA XREF: usage+235o
		db '.53)',0Ah
		db '  %V   ISO week number, with Monday as first day of week (01..53)'
		db 0Ah
		db '  %w   day of week (0..6); 0 is Sunday',0Ah
		db '  %W   week number of year, with Monday as first day of week (00.'
		db '.53)',0Ah,0
		align 4
; char aXLocaleSDateRe[]
aXLocaleSDateRe	db '  %x   locale',27h,'s date representation (e.g., 12/31/99)',0Ah
					; DATA XREF: usage+258o
		db '  %X   locale',27h,'s time representation (e.g., 23:13:48)',0Ah
		db '  %y   last two digits of year (00..99)',0Ah
		db '  %Y   year',0Ah,0
		align 4
; char aZHhmmNumericTi[]
aZHhmmNumericTi	db '  %z   +hhmm numeric timezone (e.g., -0400)',0Ah ; DATA XREF: usage+27Bo
		db '  %:z  +hh:mm numeric timezone (e.g., -04:00)',0Ah
		db '  %::z  +hh:mm:ss numeric time zone (e.g., -04:00:00)',0Ah
		db '  %:::z  numeric time zone with : to necessary precision (e.g., -'
		db '04, +05:30)',0Ah
		db '  %Z   alphabetic time zone abbreviation (e.g., EDT)',0Ah
		db 0Ah
		db 'By default, date pads numeric fields with zeroes.',0Ah,0
		align 10h
; char aTheFollowingOp[]
aTheFollowingOp	db 'The following optional flags may follow `%',27h,':',0Ah
					; DATA XREF: usage+29Eo
		db 0Ah
		db '  -  (hyphen) do not pad the field',0Ah
		db '  _  (underscore) pad with spaces',0Ah
		db '  0  (zero) pad with zeros',0Ah
		db '  ^  use upper case if possible',0Ah
		db '  #  use opposite case if possible',0Ah,0
		align 4
; char aAfterAnyFlagsC[]
aAfterAnyFlagsC	db 0Ah			; DATA XREF: usage+2C1o
		db 'After any flags comes an optional field width, as a decimal numbe'
		db 'r;',0Ah
		db 'then an optional modifier, which is either',0Ah
		db 'E to use the locale',27h,'s alternate representations if available, '
		db 'or',0Ah
		db 'O to use the locale',27h,'s alternate numeric symbols if available.',0Ah
		db 0
; char asc_8001F94[]
asc_8001F94	db '-',0                ; DATA XREF: batch_convert+21o
; char aStandardInput[]
aStandardInput	db 'standard input',0   ; DATA XREF: batch_convert+38o
aR		db 'r',0                ; DATA XREF: batch_convert+55o
; char format[]
format		db '%s',0               ; DATA XREF: batch_convert+86o
					; batch_convert+195o ...
; char aInvalidDateS[]
aInvalidDateS	db 'invalid date %s',0  ; DATA XREF: batch_convert+11Bo
					; main+6C4o
; char locale
locale		db 0			; DATA XREF: main+7Co show_date+C1o
; char dirname[]
dirname		db '/usr/local/share/locale',0 ; DATA XREF: main+8Eo
aRfc3339	db '--rfc-3339',0       ; DATA XREF: main+18Co
aIso8601	db '--iso-8601',0       ; DATA XREF: main+1EAo
; char s[]
s		db 'TZ=UTC0',0          ; DATA XREF: main+25Ao
aDavidMackenzie	db 'David MacKenzie',0  ; DATA XREF: main+296o
		align 4
; char aMultipleOutput[]
aMultipleOutput	db 'multiple output formats specified',0 ; DATA XREF: main+2D9o
					; main+465o
		align 4
; char aTheOptionsToSp[]
aTheOptionsToSp	db 'the options to specify dates for printing are mutually exclusive',0
					; DATA XREF: main+371o
		align 4
; char aTheOptionsToPr[]
aTheOptionsToPr	db 'the options to print and set the time may not be used together',0
					; DATA XREF: main+3ADo
; char aExtraOperandS[]
aExtraOperandS	db 'extra operand %s',0 ; DATA XREF: main+417o
; char aTheArgumentSLa[]
aTheArgumentSLa	db 'the argument %s lacks a leading `+',27h,';',0Ah ; DATA XREF: main+4E5o
		db 'when using an option to specify date(s), any non-option',0Ah
		db 'argument must be a format string beginning with `+',27h,0
aABEHMSZY	db '%a %b %e %H:%M:%S %Z %Y',0 ; DATA XREF: main+536o
; char aCannotSetDate[]
aCannotSetDate	db 'cannot set date',0  ; DATA XREF: main+701o
; char aTimeSIsOutOfRa[]
aTimeSIsOutOfRa	db 'time %s is out of range',0 ; DATA XREF: show_date+48o
; char aC[]
aC		db 'C',0                ; DATA XREF: show_date+76o
		align 20h
; Function-local static	variable
; const	char rfc_3339_format_5555[3][32]
rfc_3339_format_5555 db	'%Y-%m-%d',0    ; DATA XREF: main+1B5o
		align 20h
aYMDHMSZ	db '%Y-%m-%d %H:%M:%S%:z',0
		align 10h
aYMDHMS_NZ	db '%Y-%m-%d %H:%M:%S.%N%:z',0
		align 10h
; Function-local static	variable
; const	char iso_8601_format_5558[5][32]
iso_8601_format_5558 db	'%Y-%m-%d',0    ; DATA XREF: main+214o
		align 20h
aYMDtHMSZ	db '%Y-%m-%dT%H:%M:%S%z',0
		align 10h
aYMDtHMSNZ	db '%Y-%m-%dT%H:%M:%S,%N%z',0
		align 10h
aYMDtHZ		db '%Y-%m-%dT%H%z',0
		align 20h
aYMDtHMZ	db '%Y-%m-%dT%H:%M%z',0
		align 10h
_rodata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_eh_frame	segment	dword public 'CONST' use32
		assume cs:_eh_frame
		;org 80022A0h
		dd 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 20h, 1Ch
		dd offset locret_8000E7A-800313Ah
		dd 11Ch, 80E4100h, 0D420285h, 3834405h,	0C5011403h, 4040CC3h
		dd 1Ch,	40h
		dd offset locret_8000E7A-8003042h
		dd 1Ch,	80E4100h, 0D420285h, 0CC55805h,	404h, 1Ch, 60h
		dd offset locret_8000E7A-8003046h
		dd 8, 80E4100h,	0D420285h, 0CC54405h, 404h, 1Ch, 80h
		dd offset locret_8000E7A-800305Eh
		dd 1Bh,	80E4100h, 0D420285h, 0CC55505h,	404h, 1Ch, 0A0h
		dd offset locret_8000E7A-8003063h
		dd 2EBh, 80E4100h, 0D420285h, 3864205h,	483h, 20h, 0C0h
		dd offset locret_8000E7A-8002D98h
		dd 1CEh, 80E4100h, 0D420285h, 3834405h,	0C501C603h, 4040CC3h
		dd 28h,	0E4h
		dd offset locret_8000E7A-8002BEEh
		dd 77Ch, 10C4400h, 5104700h, 45007502h,	7475030Fh, 2061006h
		dd 3107C75h, 787502h, 20h, 110h
		dd offset locret_8000E7A-800249Eh
		dd 0EBh, 80E4100h, 0D420285h, 3834405h,	0C3C5E302h, 4040Ch
_eh_frame	ends

; ===========================================================================

; Segment type:	Externs
; extern
		extrn program_name:dword ; DATA	XREF: emit_ancillary_info+7r
					; emit_ancillary_info+B6r ...
		extrn last_component:near ; CODE XREF: emit_ancillary_info+10p
					; emit_ancillary_info+BFp ...
; char *gettext(const char *msgid)
		extrn gettext:near	; CODE XREF: emit_ancillary_info+22p
					; emit_ancillary_info+44p ...
; int printf(const char	*format, ...)
		extrn printf:near	; CODE XREF: emit_ancillary_info+34p
					; emit_ancillary_info+5Ap ...
; struct _IO_FILE *stdout
		extrn stdout:dword	; DATA XREF: emit_ancillary_info+62r
					; usage+65r ...
		extrn fputs_unlocked:near ; CODE XREF: emit_ancillary_info+7Dp
					; usage+80p ...
; char *setlocale(int category,	const char *locale)
		extrn setlocale:near	; CODE XREF: emit_ancillary_info+8Cp
					; main+83p ...
; int strncmp(const char *s1, const char *s2, size_t n)
		extrn strncmp:near	; CODE XREF: emit_ancillary_info+AAp
		extrn imaxtostr:near	; CODE XREF: timetostr+12p
; struct _IO_FILE *stderr
		extrn stderr:dword	; DATA XREF: usage+23r
; int fprintf(FILE *stream, const char *format,	...)
		extrn fprintf:near	; CODE XREF: usage+2Ep
; void exit(int	status)
		extrn exit:near		; CODE XREF: usage+2E6p main+2B4p ...
; int strcmp(const char	*s1, const char	*s2)
		extrn strcmp:near	; CODE XREF: batch_convert+29p
; struct _IO_FILE *stdin
		extrn stdin:dword	; DATA XREF: batch_convert+48r
		extrn fopen64:near	; CODE XREF: batch_convert+5Dp
		extrn quote:near	; CODE XREF: batch_convert+74p
					; batch_convert+10Ep ...
; int *_errno_location(void)
		extrn __errno_location:near ; CODE XREF: batch_convert+7Ep
					; batch_convert+18Dp ...
; void error(int status, int errnum, const char	*format, ...)
		extrn error:near	; CODE XREF: batch_convert+8Ep
					; batch_convert+12Ep ...
		extrn getline:near	; CODE XREF: batch_convert+B6p
		extrn get_date:near	; CODE XREF: batch_convert+D8p
					; main+692p
; int fclose(FILE *stream)
		extrn fclose:near	; CODE XREF: batch_convert+170p
; void free(void *ptr)
		extrn free:near		; CODE XREF: batch_convert+1ACp
		extrn __stack_chk_fail:near ; CODE XREF: batch_convert+1C4p
					; show_date+E1p
		extrn set_program_name:near ; CODE XREF: main+71p
; char *bindtextdomain(const char *domainname, const char *dirname)
		extrn bindtextdomain:near ; CODE XREF: main+98p
; char *textdomain(const char *domainname)
		extrn textdomain:near	; CODE XREF: main+A8p
; void close_stdout(void)
		extrn close_stdout	; DATA XREF: main+B3o
; int atexit(void (*func)(void))
		extrn atexit:near	; CODE XREF: main+B8p
; char *optarg
		extrn optarg:dword	; DATA XREF: main:loc_8000762r
					; main:loc_8000772r ...
		extrn argmatch_die:dword ; DATA	XREF: main:loc_8000782r
					; main+1CEr
		extrn __xargmatch_internal:near	; CODE XREF: main+191p
					; main+1EFp
; int putenv(char *string)
		extrn putenv:near	; CODE XREF: main+26Bp
		extrn xalloc_die:near	; CODE XREF: main+277p
		extrn Version:dword	; DATA XREF: main:loc_800089Ar
		extrn version_etc:near	; CODE XREF: main+2A7p
; int getopt_long(int argc, char *const	*argv, const char *shortopts, const struct option *longopts, int *longind)
		extrn getopt_long:near	; CODE XREF: main+319p
; int optind
		extrn optind:dword	; DATA XREF: main:loc_80009E8r
					; main+3E1r ...
; char *nl_langinfo(nl_item item)
		extrn nl_langinfo:near	; CODE XREF: main+51Bp
		extrn posixtime:near	; CODE XREF: main+5CEp
		extrn gettime:near	; CODE XREF: main+5F2p
		extrn stat64:near	; CODE XREF: main+615p
		extrn settime:near	; CODE XREF: main+6F2p
; struct tm *localtime(const time_t *timer)
		extrn localtime:near	; CODE XREF: show_date+1Fp
		extrn fprintftime:near	; CODE XREF: show_date+9Ap
; int fputc_unlocked(int c, FILE *stream)
		extrn fputc_unlocked:near ; CODE XREF: show_date+ADp


		end
