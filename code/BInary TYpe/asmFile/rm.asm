;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B611-7234-BB			    |
; |		Doskey Lee, Kingsoft Internet Security Software		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	4657348D9436345738F2460967CD4F02
; Input	CRC32 :	52838226

; File Name   :	D:\coreutils-o\rm.o
; Format      :	ELF for	Intel 386 (Relocatable)
;
; Source File :	'rm.c'

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	byte public 'CODE' use32
		assume cs:_text
		;org 8000000h
		assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void emit_ancillary_info()
emit_ancillary_info proc near		; CODE XREF: usage+1A0p

lc_messages	= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset msgid	; "\nReport %s bugs to %s\n"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset aBugCoreutils@g ; "bug-coreutils@gnu.org"
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	offset aSHomePageHttpW ; "%s home page:	<http://www.gnu.org/softw"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset domainname ; "coreutils"
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aGeneralHelpUsi ; "General help using GNU software: <http:"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		sub	esp, 8
		push	0		; locale
		push	5		; category
		call	setlocale
		add	esp, 10h
		mov	[ebp+lc_messages], eax
		cmp	[ebp+lc_messages], 0
		jz	short loc_80000E6
		sub	esp, 4
		push	3		; n
		push	offset s2	; "en_"
		push	[ebp+lc_messages] ; s1
		call	strncmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_80000E6
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aReportSTransla ; "Report %s translation	bugs to	<http://t"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h

loc_80000E6:				; CODE XREF: emit_ancillary_info+9Bj
					; emit_ancillary_info+B4j
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aForCompleteDoc ; "For complete documentation, run: info	c"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		nop
		mov	ebx, [ebp+var_4]
		leave
		retn
emit_ancillary_info endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; int priv_set_remove_linkdir()
priv_set_remove_linkdir	proc near	; CODE XREF: main+96p
		push	ebp
		mov	ebp, esp
		mov	eax, 0FFFFFFFFh
		pop	ebp
		retn
priv_set_remove_linkdir	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl diagnose_leading_hyphen(int argc, char **argv)
diagnose_leading_hyphen	proc near	; CODE XREF: main+288p

argv		= dword	ptr -8Ch
i		= dword	ptr -84h
arg		= dword	ptr -80h
st		= stat ptr -7Ch
var_1C		= dword	ptr -1Ch
argc		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 8Ch
		mov	eax, [ebp+arg_4]
		mov	[ebp+argv], eax
		mov	eax, large gs:14h
		mov	[ebp+var_1C], eax
		xor	eax, eax
		mov	[ebp+i], 1
		jmp	loc_80001F8
; ---------------------------------------------------------------------------

loc_8000155:				; CODE XREF: diagnose_leading_hyphen+DBj
		mov	eax, [ebp+i]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		mov	eax, [eax]
		mov	[ebp+arg], eax
		mov	eax, [ebp+arg]
		movzx	eax, byte ptr [eax]
		cmp	al, 2Dh
		jnz	short loc_80001F1
		mov	eax, [ebp+arg]
		add	eax, 1
		movzx	eax, byte ptr [eax]
		test	al, al
		jz	short loc_80001F1
		sub	esp, 8
		lea	eax, [ebp+st]
		push	eax
		push	[ebp+arg]
		call	lstat64
		add	esp, 10h
		test	eax, eax
		jnz	short loc_80001F1
		sub	esp, 0Ch
		push	[ebp+arg]
		call	quote
		add	esp, 10h
		mov	edi, eax
		sub	esp, 4
		push	[ebp+arg]
		push	1
		push	1
		call	quotearg_n_style
		add	esp, 10h
		mov	esi, eax
		mov	eax, [ebp+argv]
		mov	ebx, [eax]
		sub	esp, 0Ch
		push	offset aTryS_SToRemove ; "Try `%s ./%s' to remove the file %s.\n"
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, ds:stderr
		sub	esp, 0Ch
		push	edi
		push	esi
		push	ebx
		push	edx		; format
		push	eax		; stream
		call	fprintf
		add	esp, 20h
		jmp	short loc_8000207
; ---------------------------------------------------------------------------

loc_80001F1:				; CODE XREF: diagnose_leading_hyphen+51j
					; diagnose_leading_hyphen+5Ej ...
		add	[ebp+i], 1

loc_80001F8:				; CODE XREF: diagnose_leading_hyphen+2Aj
		mov	eax, [ebp+i]
		cmp	eax, [ebp+argc]
		jl	loc_8000155

loc_8000207:				; CODE XREF: diagnose_leading_hyphen+C9j
		nop
		mov	eax, [ebp+var_1C]
		xor	eax, large gs:14h
		jz	short loc_8000219
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_8000219:				; CODE XREF: diagnose_leading_hyphen+ECj
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
diagnose_leading_hyphen	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; void __cdecl usage(int status)
		public usage
usage		proc near		; CODE XREF: main+239p	main+295p ...

status		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		cmp	[ebp+status], 0
		jz	short loc_800025C
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, ds:stderr
		sub	esp, 4
		push	ebx
		push	edx		; format
		push	eax		; stream
		call	fprintf
		add	esp, 10h
		jmp	loc_80003C6
; ---------------------------------------------------------------------------

loc_800025C:				; CODE XREF: usage+9j
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aUsageSOption__ ; "Usage: %s [OPTION]...	FILE...\n"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aRemoveUnlinkTh ; "Remove (unlink) the FILE(s).\n\n  -f,	-"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aIPromptOnceBef ; "  -I			  prompt once bef"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aOneFileSystemW ; "	--one-file-system  when	removing "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aNoPreserveRoot ; "	--no-preserve-root  do not treat "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aHelpDisplayThi ; "	--help	   display this	help and "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aVersionOutputV ; "	--version  output version informa"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aByDefaultRmDoe ; "\nBy default,	rm does	not remove direct"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	esi, ds:program_name
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aToRemoveAFileW ; "\nTo remove a	file whose name	starts wi"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	esi
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aNoteThatIfYouU ; "\nNote that if you use rm to remove a	f"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		call	emit_ancillary_info

loc_80003C6:				; CODE XREF: usage+36j
		sub	esp, 0Ch
		push	[ebp+status]	; status
		call	exit
usage		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl rm_option_init(rm_options *x)
rm_option_init	proc near		; CODE XREF: main+8Ep

x		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	eax, [ebp+x]
		mov	byte ptr [eax],	0
		mov	eax, [ebp+x]
		mov	dword ptr [eax+4], 4
		mov	eax, [ebp+x]
		mov	byte ptr [eax+8], 0
		mov	eax, [ebp+x]
		mov	byte ptr [eax+9], 0
		mov	eax, [ebp+x]
		mov	dword ptr [eax+0Ch], 0
		sub	esp, 0Ch
		push	0		; fd
		call	isatty
		add	esp, 10h
		test	eax, eax
		setnz	dl
		mov	eax, [ebp+x]
		mov	[eax+10h], dl
		mov	eax, [ebp+x]
		mov	byte ptr [eax+11h], 0
		mov	eax, [ebp+x]
		mov	byte ptr [eax+12h], 0
		nop
		leave
		retn
rm_option_init	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public main
main		proc near

argv		= dword	ptr -4Ch
preserve_root	= byte ptr -46h
prompt_once	= byte ptr -45h
i		= dword	ptr -44h
c		= dword	ptr -40h
n_files		= dword	ptr -3Ch
file		= dword	ptr -38h
status		= dword	ptr -34h
x		= rm_options ptr -30h
var_1C		= dword	ptr -1Ch
argc		= dword	ptr  0Ch
envp		= dword	ptr  14h

		lea	ecx, [esp+4]
		and	esp, 0FFFFFFF0h
		push	dword ptr [ecx-4]
		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		push	ecx
		sub	esp, 48h
		mov	ebx, ecx
		mov	eax, [ebx+4]
		mov	[ebp+argv], eax
		mov	eax, large gs:14h
		mov	[ebp+var_1C], eax
		xor	eax, eax
		mov	[ebp+preserve_root], 1
		mov	[ebp+prompt_once], 0
		mov	eax, [ebp+argv]
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	set_program_name
		add	esp, 10h
		sub	esp, 8
		push	offset locale	; locale
		push	6		; category
		call	setlocale
		add	esp, 10h
		sub	esp, 8
		push	offset dirname	; "/usr/local/share/locale"
		push	offset domainname ; "coreutils"
		call	bindtextdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset domainname ; "coreutils"
		call	textdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset close_stdin ; func
		call	atexit
		add	esp, 10h
		sub	esp, 0Ch
		lea	eax, [ebp+x]
		push	eax		; x
		call	rm_option_init
		add	esp, 10h
		call	priv_set_remove_linkdir
		jmp	loc_80006C2
; ---------------------------------------------------------------------------

loc_80004C8:				; CODE XREF: main+2BDj
		mov	eax, [ebp+c]
		cmp	eax, 69h
		jz	loc_8000584
		cmp	eax, 69h
		jg	short loc_800051E
		cmp	eax, 49h
		jz	loc_8000598
		cmp	eax, 49h
		jg	short loc_8000502
		cmp	eax, 0FFFFFF7Dh
		jz	loc_8000666
		cmp	eax, 0FFFFFF7Eh
		jz	loc_800065C
		jmp	loc_80006A8
; ---------------------------------------------------------------------------

loc_8000502:				; CODE XREF: main+BDj
		cmp	eax, 64h
		jz	loc_80006C2
		cmp	eax, 66h
		jz	short loc_8000570
		cmp	eax, 52h
		jz	loc_80005AC
		jmp	loc_80006A8
; ---------------------------------------------------------------------------

loc_800051E:				; CODE XREF: main+AFj
		cmp	eax, 81h
		jz	loc_800063E
		cmp	eax, 81h
		jg	short loc_800054A
		cmp	eax, 76h
		jz	loc_8000656
		cmp	eax, 80h
		jz	short loc_80005B5
		cmp	eax, 72h
		jz	short loc_80005AC
		jmp	loc_80006A8
; ---------------------------------------------------------------------------

loc_800054A:				; CODE XREF: main+106j
		cmp	eax, 83h
		jz	loc_800064A
		cmp	eax, 83h
		jl	loc_8000644
		cmp	eax, 84h
		jz	loc_8000650
		jmp	loc_80006A8
; ---------------------------------------------------------------------------

loc_8000570:				; CODE XREF: main+E6j
		mov	[ebp+x.interactive], 5
		mov	[ebp+x.ignore_missing_files], 1
		mov	[ebp+prompt_once], 0
		jmp	loc_80006C2
; ---------------------------------------------------------------------------

loc_8000584:				; CODE XREF: main+A6j
		mov	[ebp+x.interactive], 3
		mov	[ebp+x.ignore_missing_files], 0
		mov	[ebp+prompt_once], 0
		jmp	loc_80006C2
; ---------------------------------------------------------------------------

loc_8000598:				; CODE XREF: main+B4j
		mov	[ebp+x.interactive], 5
		mov	[ebp+x.ignore_missing_files], 0
		mov	[ebp+prompt_once], 1
		jmp	loc_80006C2
; ---------------------------------------------------------------------------

loc_80005AC:				; CODE XREF: main+EBj main+11Bj
		mov	[ebp+x.recursive], 1
		jmp	loc_80006C2
; ---------------------------------------------------------------------------

loc_80005B5:				; CODE XREF: main+116j
		mov	eax, ds:optarg
		test	eax, eax
		jz	short loc_80005F3
		mov	edx, ds:argmatch_die
		mov	eax, ds:optarg
		sub	esp, 8
		push	edx
		push	4
		push	offset interactive_types
		push	offset interactive_args
		push	eax
		push	offset aInteractive ; "--interactive"
		call	__xargmatch_internal
		add	esp, 20h
		mov	eax, ds:interactive_types[eax*4]
		mov	[ebp+i], eax
		jmp	short loc_80005FA
; ---------------------------------------------------------------------------

loc_80005F3:				; CODE XREF: main+194j
		mov	[ebp+i], 2

loc_80005FA:				; CODE XREF: main+1C9j
		mov	eax, [ebp+i]
		cmp	eax, 1
		jz	short loc_8000618
		cmp	eax, 2
		jz	short loc_8000629
		test	eax, eax
		jnz	short loc_8000639
		mov	[ebp+x.interactive], 5
		mov	[ebp+prompt_once], 0
		jmp	short loc_8000639
; ---------------------------------------------------------------------------

loc_8000618:				; CODE XREF: main+1D8j
		mov	[ebp+x.interactive], 4
		mov	[ebp+x.ignore_missing_files], 0
		mov	[ebp+prompt_once], 1
		jmp	short loc_8000639
; ---------------------------------------------------------------------------

loc_8000629:				; CODE XREF: main+1DDj
		mov	[ebp+x.interactive], 3
		mov	[ebp+x.ignore_missing_files], 0
		mov	[ebp+prompt_once], 0
		nop

loc_8000639:				; CODE XREF: main+1E1j	main+1EEj ...
		jmp	loc_80006C2
; ---------------------------------------------------------------------------

loc_800063E:				; CODE XREF: main+FBj
		mov	[ebp+x.one_file_system], 1
		jmp	short loc_80006C2
; ---------------------------------------------------------------------------

loc_8000644:				; CODE XREF: main+132j
		mov	[ebp+preserve_root], 0
		jmp	short loc_80006C2
; ---------------------------------------------------------------------------

loc_800064A:				; CODE XREF: main+127j
		mov	[ebp+preserve_root], 1
		jmp	short loc_80006C2
; ---------------------------------------------------------------------------

loc_8000650:				; CODE XREF: main+13Dj
		mov	[ebp+x.stdin_tty], 1
		jmp	short loc_80006C2
; ---------------------------------------------------------------------------

loc_8000656:				; CODE XREF: main+10Bj
		mov	[ebp+x.verbose], 1
		jmp	short loc_80006C2
; ---------------------------------------------------------------------------

loc_800065C:				; CODE XREF: main+CFj
		sub	esp, 0Ch
		push	0		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8000666:				; CODE XREF: main+C4j
		mov	edx, ds:Version
		mov	eax, ds:stdout
		sub	esp, 0Ch
		push	0
		push	offset aJimMeyering ; "Jim Meyering"
		push	offset aRichardM_Stall ; "Richard M. Stallman"
		push	offset aDavidMackenzie ; "David	MacKenzie"
		push	offset aPaulRubin ; "Paul Rubin"
		push	edx
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	offset aRm	; "rm"
		push	eax
		call	version_etc
		add	esp, 30h
		sub	esp, 0Ch
		push	0		; status
		call	exit
; ---------------------------------------------------------------------------

loc_80006A8:				; CODE XREF: main+D5j main+F1j ...
		sub	esp, 8
		push	[ebp+argv]	; argv
		push	dword ptr [ebx]	; argc
		call	diagnose_leading_hyphen
		add	esp, 10h
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_80006C2:				; CODE XREF: main+9Bj main+DDj ...
		sub	esp, 0Ch
		push	0		; longind
		push	offset long_opts ; longopts
		push	offset shortopts ; "dfirvIR"
		push	[ebp+argv]	; argv
		push	dword ptr [ebx]	; argc
		call	getopt_long
		add	esp, 20h
		mov	[ebp+c], eax
		cmp	[ebp+c], 0FFFFFFFFh
		jnz	loc_80004C8
		mov	eax, ds:optind
		cmp	[ebx], eax
		jg	short loc_8000730
		movzx	eax, [ebp+x.ignore_missing_files]
		test	al, al
		jz	short loc_8000706
		sub	esp, 0Ch
		push	0		; status
		call	exit
; ---------------------------------------------------------------------------

loc_8000706:				; CODE XREF: main+2D2j
		sub	esp, 0Ch
		push	offset aMissingOperand ; "missing operand"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8000730:				; CODE XREF: main+2CAj
		movzx	eax, [ebp+x.recursive]
		test	al, al
		jz	short loc_8000790
		cmp	[ebp+preserve_root], 0
		jz	short loc_8000790
		sub	esp, 0Ch
		push	offset dev_ino_buf_5333
		call	get_root_dev_ino
		add	esp, 10h
		mov	[ebp+x.root_dev_ino], eax
		mov	eax, [ebp+x.root_dev_ino]
		test	eax, eax
		jnz	short loc_8000790
		sub	esp, 0Ch
		push	offset asc_80012A0 ; "/"
		call	quote
		add	esp, 10h
		mov	edi, eax
		sub	esp, 0Ch
		push	offset aFailedToGetAtt ; "failed to get	attributes of %s"
		call	gettext
		add	esp, 10h
		mov	esi, eax
		call	__errno_location
		mov	eax, [eax]
		push	edi
		push	esi		; format
		push	eax		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_8000790:				; CODE XREF: main+30Ej	main+314j ...
		mov	eax, ds:optind
		mov	edx, [ebx]
		sub	edx, eax
		mov	eax, edx
		mov	[ebp+n_files], eax
		mov	eax, ds:optind
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		mov	[ebp+file], eax
		cmp	[ebp+prompt_once], 0
		jz	short loc_8000823
		movzx	eax, [ebp+x.recursive]
		test	al, al
		jnz	short loc_80007C6
		cmp	[ebp+n_files], 3
		jbe	short loc_8000823

loc_80007C6:				; CODE XREF: main+396j
		mov	ebx, ds:program_name
		movzx	eax, [ebp+x.recursive]
		test	al, al
		jz	short loc_80007E8
		sub	esp, 0Ch
		push	offset aSRemoveAllArgu ; "%s: remove all arguments recursively?	"
		call	gettext
		add	esp, 10h
		mov	edx, eax
		jmp	short loc_80007FA
; ---------------------------------------------------------------------------

loc_80007E8:				; CODE XREF: main+3AAj
		sub	esp, 0Ch
		push	offset aSRemoveAllAr_0 ; "%s: remove all arguments? "
		call	gettext
		add	esp, 10h
		mov	edx, eax

loc_80007FA:				; CODE XREF: main+3BEj
		mov	eax, ds:stderr
		sub	esp, 4
		push	ebx
		push	edx		; format
		push	eax		; stream
		call	fprintf
		add	esp, 10h
		call	yesno
		xor	eax, 1
		test	al, al
		jz	short loc_8000823
		sub	esp, 0Ch
		push	0		; status
		call	exit
; ---------------------------------------------------------------------------

loc_8000823:				; CODE XREF: main+38Ej	main+39Cj ...
		sub	esp, 8
		lea	eax, [ebp+x]
		push	eax
		push	[ebp+file]
		call	rm
		add	esp, 10h
		mov	[ebp+status], eax
		cmp	[ebp+status], 2
		jz	short loc_8000863
		cmp	[ebp+status], 3
		jz	short loc_8000863
		cmp	[ebp+status], 4
		jz	short loc_8000863
		push	offset __PRETTY_FUNCTION___5337	; "main"
		push	160h		; line
		push	offset file	; "rm.c"
		push	offset assertion ; "VALID_STATUS (status)"
		call	__assert_fail
; ---------------------------------------------------------------------------

loc_8000863:				; CODE XREF: main+414j	main+41Aj ...
		cmp	[ebp+status], 4
		setz	al
		movzx	eax, al
		sub	esp, 0Ch
		push	eax		; status

loc_8000871:				; DATA XREF: .eh_frame:0800134Co
					; .eh_frame:08001370o ...
		call	exit
main		endp

_text		ends

; ===========================================================================

; Segment type:	Zero-length
; Segment permissions: Read/Write
_data		segment	byte public 'DATA' use32
_data		ends

; Function-local static	variable
; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
		assume cs:_bss
		;org 8000878h
		assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing
; dev_ino dev_ino_buf_5333
dev_ino_buf_5333 dev_ino <?>		; DATA XREF: main+319o
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment '32byte' can not be represented in assembly
_rodata		segment	para public 'CONST' use32
		assume cs:_rodata
		;org 80008A0h
; char msgid[]
msgid		db 0Ah			; DATA XREF: emit_ancillary_info+1Do
		db 'Report %s bugs to %s',0Ah,0
aBugCoreutils@g	db 'bug-coreutils@gnu.org',0 ; DATA XREF: emit_ancillary_info+2Do
		align 10h
; char aSHomePageHttpW[]
aSHomePageHttpW	db '%s home page: <http://www.gnu.org/software/%s/>',0Ah,0
					; DATA XREF: emit_ancillary_info+3Fo
; char domainname[]
domainname	db 'coreutils',0        ; DATA XREF: emit_ancillary_info+4Fo
					; main+5Ao ...
aGnuCoreutils	db 'GNU coreutils',0    ; DATA XREF: emit_ancillary_info+54o
					; main+263o
		align 4
; char aGeneralHelpUsi[]
aGeneralHelpUsi	db 'General help using GNU software: <http://www.gnu.org/gethelp/>',0Ah,0
					; DATA XREF: emit_ancillary_info+6Bo
; char s2[]
s2		db 'en_',0              ; DATA XREF: emit_ancillary_info+A2o
; char aReportSTransla[]
aReportSTransla	db 'Report %s translation bugs to <http://translationproject.org/team'
					; DATA XREF: emit_ancillary_info+CCo
		db '/>',0Ah,0
		align 4
; char aForCompleteDoc[]
aForCompleteDoc	db 'For complete documentation, run: info coreutils ',27h,'%s invocation'
					; DATA XREF: emit_ancillary_info+FCo
		db 27h,0Ah,0
aDirectory	db 'directory',0        ; DATA XREF: .rodata:long_optso
aForce		db 'force',0            ; DATA XREF: .rodata:long_optso
aInteractive_0	db 'interactive',0      ; DATA XREF: .rodata:long_optso
aOneFileSystem	db 'one-file-system',0  ; DATA XREF: .rodata:long_optso
aNoPreserveRo_0	db 'no-preserve-root',0 ; DATA XREF: .rodata:long_optso
aPreserveRoot	db 'preserve-root',0    ; DATA XREF: .rodata:long_optso
aPresumeInputTt	db '-presume-input-tty',0 ; DATA XREF: .rodata:long_optso
aRecursive	db 'recursive',0        ; DATA XREF: .rodata:long_optso
aVerbose	db 'verbose',0          ; DATA XREF: .rodata:long_optso
aHelp		db 'help',0             ; DATA XREF: .rodata:long_optso
aVersion	db 'version',0          ; DATA XREF: .rodata:long_optso
		align 20h
; const	option long_opts[12]
long_opts	option <offset aDirectory, 0, 0, 64h> ;	DATA XREF: main+29Fo
		option <offset aForce, 0, 0, 66h> ; "directory"
		option <offset aInteractive_0, 2, 0, 80h>
		option <offset aOneFileSystem, 0, 0, 81h>
		option <offset aNoPreserveRo_0,	0, 0, 82h>
		option <offset aPreserveRoot, 0, 0, 83h>
		option <offset aPresumeInputTt,	0, 0, 84h>
		option <offset aRecursive, 0, 0, 72h>
		option <offset aVerbose, 0, 0, 76h>
		option <offset aHelp, 0, 0, 0FFFFFF7Eh>
		option <offset aVersion, 0, 0, 0FFFFFF7Dh>
		option	<0>
aNever		db 'never',0            ; DATA XREF: .rodata:interactive_argso
aNo		db 'no',0               ; DATA XREF: .rodata:interactive_argso
aNone		db 'none',0             ; DATA XREF: .rodata:interactive_argso
aOnce		db 'once',0             ; DATA XREF: .rodata:interactive_argso
aAlways		db 'always',0           ; DATA XREF: .rodata:interactive_argso
aYes		db 'yes',0              ; DATA XREF: .rodata:interactive_argso
		align 10h
; const	char *const interactive_args[7]
interactive_args dd offset aNever, offset aNo, offset aNone, offset aOnce
					; DATA XREF: main+1ACo
		dd offset aAlways, offset aYes,	0 ; "never"
; const	interactive_type interactive_types[6]
interactive_types dd 3 dup(interactive_never), interactive_once, 2 dup(interactive_always)
					; DATA XREF: main+1A7o	main+1BFr
; char aTryS_SToRemove[]
aTryS_SToRemove	db 'Try `%s ./%s',27h,' to remove the file %s.',0Ah,0
					; DATA XREF: diagnose_leading_hyphen+A5o
		align 4
; char aTrySHelpForMor[]
aTrySHelpForMor	db 'Try `%s --help',27h,' for more information.',0Ah,0
					; DATA XREF: usage+14o
		align 4
; char aUsageSOption__[]
aUsageSOption__	db 'Usage: %s [OPTION]... FILE...',0Ah,0 ; DATA XREF: usage+44o
		align 4
; char aRemoveUnlinkTh[]
aRemoveUnlinkTh	db 'Remove (unlink) the FILE(s).',0Ah ; DATA XREF: usage+67o
		db 0Ah
		db '  -f, --force           ignore nonexistent files, never prompt',0Ah
		db '  -i                    prompt before every removal',0Ah,0
		align 4
; char aIPromptOnceBef[]
aIPromptOnceBef	db '  -I                    prompt once before removing more than thr'
					; DATA XREF: usage+8Ao
		db 'ee files, or',0Ah
		db '                          when removing recursively.  Less intrus'
		db 'ive than -i,',0Ah
		db '                          while still giving protection against m'
		db 'ost mistakes',0Ah
		db '      --interactive[=WHEN]  prompt according to WHEN: never, once'
		db ' (-I), or',0Ah
		db '                          always (-i).  Without WHEN, prompt alwa'
		db 'ys',0Ah,0
		align 4
; char aOneFileSystemW[]
aOneFileSystemW	db '      --one-file-system  when removing a hierarchy recursively, s'
					; DATA XREF: usage+ADo
		db 'kip any',0Ah
		db '                          directory that is on a file system diff'
		db 'erent from',0Ah
		db '                          that of the corresponding command line '
		db 'argument',0Ah,0
; char aNoPreserveRoot[]
aNoPreserveRoot	db '      --no-preserve-root  do not treat `/',27h,' specially',0Ah
					; DATA XREF: usage+D0o
		db '      --preserve-root   do not remove `/',27h,' (default)',0Ah
		db '  -r, -R, --recursive   remove directories and their contents rec'
		db 'ursively',0Ah
		db '  -v, --verbose         explain what is being done',0Ah,0
		align 4
; char aHelpDisplayThi[]
aHelpDisplayThi	db '      --help     display this help and exit',0Ah,0
					; DATA XREF: usage+F3o
		align 4
; char aVersionOutputV[]
aVersionOutputV	db '      --version  output version information and exit',0Ah,0
					; DATA XREF: usage+116o
		align 4
; char aByDefaultRmDoe[]
aByDefaultRmDoe	db 0Ah			; DATA XREF: usage+139o
		db 'By default, rm does not remove directories.  Use the --recursive '
		db '(-r or -R)',0Ah
		db 'option to remove each listed directory, too, along with all of it'
		db 's contents.',0Ah,0
		align 10h
; char aToRemoveAFileW[]
aToRemoveAFileW	db 0Ah			; DATA XREF: usage+162o
		db 'To remove a file whose name starts with a `-',27h,', for example `-f'
		db 'oo',27h,',',0Ah
		db 'use one of these commands:',0Ah
		db '  %s -- -foo',0Ah
		db 0Ah
		db '  %s ./-foo',0Ah,0
		align 4
; char aNoteThatIfYouU[]
aNoteThatIfYouU	db 0Ah			; DATA XREF: usage+186o
		db 'Note that if you use rm to remove a file, it is usually possible '
		db 'to recover',0Ah
		db 'the contents of that file.  If you want more assurance that the c'
		db 'ontents are',0Ah
		db 'truly unrecoverable, consider using shred.',0Ah,0
; char locale
locale		db 0			; DATA XREF: main+43o
; char dirname[]
dirname		db '/usr/local/share/locale',0 ; DATA XREF: main+55o
aInteractive	db '--interactive',0    ; DATA XREF: main+1B2o
aJimMeyering	db 'Jim Meyering',0     ; DATA XREF: main+24Eo
aRichardM_Stall	db 'Richard M. Stallman',0 ; DATA XREF: main+253o
aDavidMackenzie	db 'David MacKenzie',0  ; DATA XREF: main+258o
aPaulRubin	db 'Paul Rubin',0       ; DATA XREF: main+25Do
aRm		db 'rm',0               ; DATA XREF: main+268o
; char shortopts[]
shortopts	db 'dfirvIR',0          ; DATA XREF: main+2A4o
; char aMissingOperand[]
aMissingOperand	db 'missing operand',0  ; DATA XREF: main+2E1o
asc_80012A0	db '/',0                ; DATA XREF: main+333o
		align 4
; char aFailedToGetAtt[]
aFailedToGetAtt	db 'failed to get attributes of %s',0 ; DATA XREF: main+345o
		align 4
; char aSRemoveAllArgu[]
aSRemoveAllArgu	db '%s: remove all arguments recursively? ',0 ; DATA XREF: main+3AFo
; char aSRemoveAllAr_0[]
aSRemoveAllAr_0	db '%s: remove all arguments? ',0 ; DATA XREF: main+3C3o
; char file[]
file		db 'rm.c',0             ; DATA XREF: main+42Co
; char assertion[]
assertion	db 'VALID_STATUS (status)',0 ; DATA XREF: main+431o
		align 4
; Function-local static	variable
; const	char _PRETTY_FUNCTION___5337[5]
__PRETTY_FUNCTION___5337 db 'main',0    ; DATA XREF: main+422o
_rodata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_eh_frame	segment	dword public 'CONST' use32
		assume cs:_eh_frame
		;org 800132Ch
		dd 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 20h, 1Ch
		dd offset loc_8000871-8001BBDh
		dd 11Ch, 80E4100h, 0D420285h, 3834405h,	0C5011403h, 4040CC3h
		dd 1Ch,	40h
		dd offset loc_8000871-8001AC5h
		dd 0Ah,	80E4100h, 0D420285h, 0CC54605h,	404h, 28h, 60h
		dd offset loc_8000871-8001ADBh
		dd 0FBh, 80E4100h, 0D420285h, 3874905h,	5830486h, 41C3EB02h
		dd 41C741C6h, 4040CC5h,	1Ch, 8Ch
		dd offset loc_8000871-8001A0Ch
		dd 1B0h, 80E4100h, 0D420285h, 3864205h,	483h, 1Ch, 0ACh
		dd offset loc_8000871-800187Ch
		dd 57h,	80E4100h, 0D420285h, 0C5530205h, 4040Ch, 2Ch, 0CCh
		dd offset loc_8000871-8001845h
		dd 44Eh, 10C4400h, 5104700h, 46007502h,	7075030Fh, 2071006h
		dd 6107C75h, 10787502h,	74750203h
_eh_frame	ends

; ===========================================================================

; Segment type:	Externs
; extern
		extrn program_name:dword ; DATA	XREF: emit_ancillary_info+7r
					; emit_ancillary_info+B6r ...
		extrn last_component:near ; CODE XREF: emit_ancillary_info+10p
					; emit_ancillary_info+BFp ...
; char *gettext(const char *msgid)
		extrn gettext:near	; CODE XREF: emit_ancillary_info+22p
					; emit_ancillary_info+44p ...
; int printf(const char	*format, ...)
		extrn printf:near	; CODE XREF: emit_ancillary_info+34p
					; emit_ancillary_info+5Ap ...
; struct _IO_FILE *stdout
		extrn stdout:dword	; DATA XREF: emit_ancillary_info+62r
					; usage+5Er ...
		extrn fputs_unlocked:near ; CODE XREF: emit_ancillary_info+7Dp
					; usage+79p ...
; char *setlocale(int category,	const char *locale)
		extrn setlocale:near	; CODE XREF: emit_ancillary_info+8Cp
					; main+4Ap
; int strncmp(const char *s1, const char *s2, size_t n)
		extrn strncmp:near	; CODE XREF: emit_ancillary_info+AAp
		extrn lstat64:near	; CODE XREF: diagnose_leading_hyphen+6Ap
		extrn quote:near	; CODE XREF: diagnose_leading_hyphen+7Cp
					; main+338p
		extrn quotearg_n_style:near ; CODE XREF: diagnose_leading_hyphen+90p
; struct _IO_FILE *stderr
		extrn stderr:dword	; DATA XREF: diagnose_leading_hyphen+B4r
					; usage+23r ...
; int fprintf(FILE *stream, const char *format,	...)
		extrn fprintf:near	; CODE XREF: diagnose_leading_hyphen+C1p
					; usage+2Ep ...
		extrn __stack_chk_fail:near ; CODE XREF: diagnose_leading_hyphen+EEp
; void exit(int	status)
		extrn exit:near		; CODE XREF: usage+1ABp main+27Bp ...
; int isatty(int fd)
		extrn isatty:near	; CODE XREF: rm_option_init+33p
		extrn set_program_name:near ; CODE XREF: main+38p
; char *bindtextdomain(const char *domainname, const char *dirname)
		extrn bindtextdomain:near ; CODE XREF: main+5Fp
; char *textdomain(const char *domainname)
		extrn textdomain:near	; CODE XREF: main+6Fp
; void close_stdin(void)
		extrn close_stdin	; DATA XREF: main+7Ao
; int atexit(void (*func)(void))
		extrn atexit:near	; CODE XREF: main+7Fp
; char *optarg
		extrn optarg:dword	; DATA XREF: main:loc_80005B5r
					; main+19Cr
		extrn argmatch_die:dword ; DATA	XREF: main+196r
		extrn __xargmatch_internal:near	; CODE XREF: main+1B7p
		extrn Version:dword	; DATA XREF: main:loc_8000666r
		extrn version_etc:near	; CODE XREF: main+26Ep
; int getopt_long(int argc, char *const	*argv, const char *shortopts, const struct option *longopts, int *longind)
		extrn getopt_long:near	; CODE XREF: main+2AEp
; int optind
		extrn optind:dword	; DATA XREF: main+2C3r
					; main:loc_8000790r ...
; void error(int status, int errnum, const char	*format, ...)
		extrn error:near	; CODE XREF: main+2F6p	main+360p
		extrn get_root_dev_ino:near ; CODE XREF: main+31Ep
; int *_errno_location(void)
		extrn __errno_location:near ; CODE XREF: main+354p
		extrn yesno:near	; CODE XREF: main+3E5p
		extrn rm:near		; CODE XREF: main+405p
; void _assert_fail(const char *assertion, const char *file, unsigned int line,	const char *function)
		extrn __assert_fail:near ; CODE	XREF: main+436p


		end
