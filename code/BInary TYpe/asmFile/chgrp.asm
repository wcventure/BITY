;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B611-7234-BB			    |
; |		Doskey Lee, Kingsoft Internet Security Software		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	0DE55066C84F55354959953DB93DCE0A
; Input	CRC32 :	825E4C82

; File Name   :	D:\coreutils-o\chgrp.o
; Format      :	ELF for	Intel 386 (Relocatable)
;
; Source File :	'chgrp.c'

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	byte public 'CODE' use32
		assume cs:_text
		;org 8000000h
		assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void emit_ancillary_info()
emit_ancillary_info proc near		; CODE XREF: usage+184p

lc_messages	= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset msgid	; "\nReport %s bugs to %s\n"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset aBugCoreutils@g ; "bug-coreutils@gnu.org"
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	offset aSHomePageHttpW ; "%s home page:	<http://www.gnu.org/softw"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset domainname ; "coreutils"
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aGeneralHelpUsi ; "General help using GNU software: <http:"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		sub	esp, 8
		push	0		; locale
		push	5		; category
		call	setlocale
		add	esp, 10h
		mov	[ebp+lc_messages], eax
		cmp	[ebp+lc_messages], 0
		jz	short loc_80000E6
		sub	esp, 4
		push	3		; n
		push	offset s2	; "en_"
		push	[ebp+lc_messages] ; s1
		call	strncmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_80000E6
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aReportSTransla ; "Report %s translation	bugs to	<http://t"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h

loc_80000E6:				; CODE XREF: emit_ancillary_info+9Bj
					; emit_ancillary_info+B4j
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aForCompleteDoc ; "For complete documentation, run: info	c"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		nop
		mov	ebx, [ebp+var_4]
		leave
		retn
emit_ancillary_info endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; gid_t	__cdecl	parse_group(const char *name)
parse_group	proc near		; CODE XREF: main+426p

name		= dword	ptr -1Ch
tmp		= dword	ptr -18h
gid		= dword	ptr -14h
grp		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 24h
		mov	eax, [ebp+arg_0]
		mov	[ebp+name], eax
		mov	eax, large gs:14h
		mov	[ebp+var_C], eax
		xor	eax, eax
		mov	[ebp+gid], 0FFFFFFFFh
		mov	eax, [ebp+name]
		movzx	eax, byte ptr [eax]
		test	al, al
		jz	short loc_80001BF
		sub	esp, 0Ch
		push	[ebp+name]	; name
		call	getgrnam
		add	esp, 10h
		mov	[ebp+grp], eax
		cmp	[ebp+grp], 0
		jz	short loc_8000167
		mov	eax, [ebp+grp]
		mov	eax, [eax+8]
		mov	[ebp+gid], eax
		jmp	short loc_80001BA
; ---------------------------------------------------------------------------

loc_8000167:				; CODE XREF: parse_group+3Ej
		sub	esp, 0Ch
		push	offset locale
		lea	eax, [ebp+tmp]
		push	eax
		push	0Ah
		push	0
		push	[ebp+name]
		call	xstrtoul
		add	esp, 20h
		test	eax, eax
		jz	short loc_80001B4
		sub	esp, 0Ch
		push	[ebp+name]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aInvalidGroupS ;	"invalid group:	%s"
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_80001B4:				; CODE XREF: parse_group+68j
		mov	eax, [ebp+tmp]
		mov	[ebp+gid], eax

loc_80001BA:				; CODE XREF: parse_group+49j
		call	endgrent

loc_80001BF:				; CODE XREF: parse_group+27j
		mov	eax, [ebp+gid]
		mov	edx, [ebp+var_C]
		xor	edx, large gs:14h
		jz	short loc_80001D3
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_80001D3:				; CODE XREF: parse_group+B0j
		mov	ebx, [ebp+var_4]
		leave
		retn
parse_group	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; void __cdecl usage(int status)
		public usage
usage		proc near		; CODE XREF: main+1ECp	main+22Ep ...

status		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		cmp	[ebp+status], 0
		jz	short loc_8000213
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, ds:stderr
		sub	esp, 4
		push	ebx
		push	edx		; format
		push	eax		; stream
		call	fprintf
		add	esp, 10h
		jmp	loc_8000361
; ---------------------------------------------------------------------------

loc_8000213:				; CODE XREF: usage+9j
		mov	esi, ds:program_name
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aUsageSOption__ ; "Usage: %s [OPTION]...	GROUP FILE...\n	 "...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	esi
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aChangeTheGroup ; "Change the group of each FILE	to GROUP."...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aHNoDereference ; "  -h,	--no-dereference   affect each sy"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aNoPreserveRoot ; "	--no-preserve-root  do not treat "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aFSilentQuietSu ; "  -f,	--silent, --quiet  suppress most "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aTheFollowingOp ; "The following	options	modify how a hier"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aHelpDisplayThi ; "	--help	   display this	help and "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aVersionOutputV ; "	--version  output version informa"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	esi, ds:program_name
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aExamplesSStaff ; "\nExamples:\n	 %s staff /u	  Change "...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	esi
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		call	emit_ancillary_info

loc_8000361:				; CODE XREF: usage+36j
		sub	esp, 0Ch
		push	[ebp+status]	; status
		call	exit
usage		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public main
main		proc near

argv		= dword	ptr -0BCh
preserve_root	= byte ptr -0AAh
ok		= byte ptr -0A9h
gid		= dword	ptr -0A8h
bit_flags	= dword	ptr -0A4h
dereference	= dword	ptr -0A0h
optc		= dword	ptr -9Ch
group_name	= dword	ptr -98h
chopt		= Chown_option ptr -94h
ref_stats	= stat ptr -7Ch
var_1C		= dword	ptr -1Ch
argc		= dword	ptr  0Ch
envp		= dword	ptr  14h

		lea	ecx, [esp+4]
		and	esp, 0FFFFFFF0h
		push	dword ptr [ecx-4]
		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		push	ecx
		sub	esp, 0BCh
		mov	ebx, ecx
		mov	eax, [ebx+4]
		mov	[ebp+argv], eax
		mov	eax, large gs:14h
		mov	[ebp+var_1C], eax
		xor	eax, eax
		mov	[ebp+preserve_root], 0
		mov	[ebp+bit_flags], 10h
		mov	[ebp+dereference], 0FFFFFFFFh
		mov	eax, [ebp+argv]
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	set_program_name
		add	esp, 10h
		sub	esp, 8
		push	offset locale	; locale
		push	6		; category
		call	setlocale
		add	esp, 10h
		sub	esp, 8
		push	offset dirname	; "/usr/local/share/locale"
		push	offset domainname ; "coreutils"
		call	bindtextdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset domainname ; "coreutils"
		call	textdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset close_stdout ; func
		call	atexit
		add	esp, 10h
		sub	esp, 0Ch
		lea	eax, [ebp+chopt]
		push	eax
		call	chopt_init
		add	esp, 10h
		jmp	loc_800059F
; ---------------------------------------------------------------------------

loc_8000425:				; CODE XREF: main+25Fj
		mov	eax, [ebp+optc]
		cmp	eax, 63h
		jz	loc_8000532
		cmp	eax, 63h
		jg	short loc_8000476
		cmp	eax, 48h
		jz	short loc_80004BA
		cmp	eax, 48h
		jg	short loc_800045E
		cmp	eax, 0FFFFFF7Dh
		jz	loc_800055D
		cmp	eax, 0FFFFFF7Eh
		jz	loc_8000553
		jmp	loc_8000595
; ---------------------------------------------------------------------------

loc_800045E:				; CODE XREF: main+D5j
		cmp	eax, 50h
		jz	short loc_80004D8
		cmp	eax, 52h
		jz	loc_8000529
		cmp	eax, 4Ch
		jz	short loc_80004C9
		jmp	loc_8000595
; ---------------------------------------------------------------------------

loc_8000476:				; CODE XREF: main+CBj
		cmp	eax, 80h
		jz	short loc_80004F6
		cmp	eax, 80h
		jg	short loc_80004A0
		cmp	eax, 68h
		jz	short loc_80004E7
		cmp	eax, 76h
		jz	loc_8000547
		cmp	eax, 66h
		jz	loc_800053E
		jmp	loc_8000595
; ---------------------------------------------------------------------------

loc_80004A0:				; CODE XREF: main+116j
		cmp	eax, 82h
		jz	short loc_8000511
		cmp	eax, 82h
		jl	short loc_8000505
		cmp	eax, 83h
		jz	short loc_800051D
		jmp	loc_8000595
; ---------------------------------------------------------------------------

loc_80004BA:				; CODE XREF: main+D0j
		mov	[ebp+bit_flags], 11h
		jmp	loc_800059F
; ---------------------------------------------------------------------------

loc_80004C9:				; CODE XREF: main+103j
		mov	[ebp+bit_flags], 2
		jmp	loc_800059F
; ---------------------------------------------------------------------------

loc_80004D8:				; CODE XREF: main+F5j
		mov	[ebp+bit_flags], 10h
		jmp	loc_800059F
; ---------------------------------------------------------------------------

loc_80004E7:				; CODE XREF: main+11Bj
		mov	[ebp+dereference], 0
		jmp	loc_800059F
; ---------------------------------------------------------------------------

loc_80004F6:				; CODE XREF: main+10Fj
		mov	[ebp+dereference], 1
		jmp	loc_800059F
; ---------------------------------------------------------------------------

loc_8000505:				; CODE XREF: main+140j
		mov	[ebp+preserve_root], 0
		jmp	loc_800059F
; ---------------------------------------------------------------------------

loc_8000511:				; CODE XREF: main+139j
		mov	[ebp+preserve_root], 1
		jmp	loc_800059F
; ---------------------------------------------------------------------------

loc_800051D:				; CODE XREF: main+147j
		mov	eax, ds:optarg
		mov	ds:reference_file, eax
		jmp	short loc_800059F
; ---------------------------------------------------------------------------

loc_8000529:				; CODE XREF: main+FAj
		mov	[ebp+chopt.recurse], 1
		jmp	short loc_800059F
; ---------------------------------------------------------------------------

loc_8000532:				; CODE XREF: main+C2j
		mov	[ebp+chopt.verbosity], 1
		jmp	short loc_800059F
; ---------------------------------------------------------------------------

loc_800053E:				; CODE XREF: main+129j
		mov	[ebp+chopt.force_silent], 1
		jmp	short loc_800059F
; ---------------------------------------------------------------------------

loc_8000547:				; CODE XREF: main+120j
		mov	[ebp+chopt.verbosity], 0
		jmp	short loc_800059F
; ---------------------------------------------------------------------------

loc_8000553:				; CODE XREF: main+E7j
		sub	esp, 0Ch
		push	0		; status
		call	usage
; ---------------------------------------------------------------------------

loc_800055D:				; CODE XREF: main+DCj
		mov	edx, ds:Version
		mov	eax, ds:stdout
		sub	esp, 4
		push	0
		push	offset aJimMeyering ; "Jim Meyering"
		push	offset aDavidMackenzie ; "David	MacKenzie"
		push	edx
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	offset aChgrp	; "chgrp"
		push	eax
		call	version_etc
		add	esp, 20h
		sub	esp, 0Ch
		push	0		; status
		call	exit
; ---------------------------------------------------------------------------

loc_8000595:				; CODE XREF: main+EDj main+105j ...
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_800059F:				; CODE XREF: main+B4j main+158j ...
		sub	esp, 0Ch
		push	0		; longind
		push	offset long_options ; longopts
		push	offset shortopts ; "HLPRcfhv"
		push	[ebp+argv]	; argv
		push	dword ptr [ebx]	; argc
		call	getopt_long
		add	esp, 20h
		mov	[ebp+optc], eax
		cmp	[ebp+optc], 0FFFFFFFFh
		jnz	loc_8000425
		movzx	eax, [ebp+chopt.recurse]
		test	al, al
		jz	short loc_800061A
		cmp	[ebp+bit_flags], 10h
		jnz	short loc_8000624
		cmp	[ebp+dereference], 1
		jnz	short loc_800060E
		sub	esp, 0Ch
		push	offset aRDereferenceRe ; "-R --dereference requires either -H or "...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_800060E:				; CODE XREF: main+280j
		mov	[ebp+dereference], 0
		jmp	short loc_8000624
; ---------------------------------------------------------------------------

loc_800061A:				; CODE XREF: main+26Ej
		mov	[ebp+bit_flags], 10h

loc_8000624:				; CODE XREF: main+277j	main+2ACj
		cmp	[ebp+dereference], 0
		setnz	al
		mov	[ebp+chopt.affect_symlink_referent], al
		mov	eax, ds:optind
		mov	edx, [ebx]
		sub	edx, eax
		mov	eax, ds:reference_file
		test	eax, eax
		jz	short loc_800064D
		mov	eax, 1
		jmp	short loc_8000652
; ---------------------------------------------------------------------------

loc_800064D:				; CODE XREF: main+2D8j
		mov	eax, 2

loc_8000652:				; CODE XREF: main+2DFj
		cmp	edx, eax
		jge	short loc_80006CF
		mov	eax, ds:optind
		cmp	[ebx], eax
		jg	short loc_8000681
		sub	esp, 0Ch
		push	offset aMissingOperand ; "missing operand"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		jmp	short loc_80006C5
; ---------------------------------------------------------------------------

loc_8000681:				; CODE XREF: main+2F1j
		mov	eax, [ebx]
		add	eax, 3FFFFFFFh
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aMissingOpera_0 ; "missing operand after	%s"
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h

loc_80006C5:				; CODE XREF: main+313j
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_80006CF:				; CODE XREF: main+2E8j
		mov	eax, ds:reference_file
		test	eax, eax
		jz	short loc_8000747
		mov	eax, ds:reference_file
		sub	esp, 8
		lea	edx, [ebp+ref_stats]
		push	edx
		push	eax
		call	stat64
		add	esp, 10h
		test	eax, eax
		jz	short loc_800072A
		mov	eax, ds:reference_file
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aFailedToGetAtt ; "failed to get	attributes of %s"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		push	esi
		push	ebx		; format
		push	eax		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_800072A:				; CODE XREF: main+383j
		mov	eax, [ebp+ref_stats.st_gid]
		mov	[ebp+gid], eax
		mov	eax, [ebp+ref_stats.st_gid]
		sub	esp, 0Ch
		push	eax
		call	gid_to_name
		add	esp, 10h
		mov	[ebp+chopt.group_name],	eax
		jmp	short loc_80007A0
; ---------------------------------------------------------------------------

loc_8000747:				; CODE XREF: main+36Aj
		mov	eax, ds:optind
		lea	edx, [eax+1]
		mov	ds:optind, edx
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		mov	eax, [eax]
		mov	[ebp+group_name], eax
		mov	eax, [ebp+group_name]
		movzx	eax, byte ptr [eax]
		test	al, al
		jz	short loc_8000781
		mov	eax, [ebp+group_name]
		jmp	short loc_8000786
; ---------------------------------------------------------------------------

loc_8000781:				; CODE XREF: main+40Bj
		mov	eax, 0

loc_8000786:				; CODE XREF: main+413j
		mov	[ebp+chopt.group_name],	eax
		sub	esp, 0Ch
		push	[ebp+group_name] ; name
		call	parse_group
		add	esp, 10h
		mov	[ebp+gid], eax

loc_80007A0:				; CODE XREF: main+3D9j
		movzx	eax, [ebp+chopt.recurse]
		test	al, al
		jz	short loc_800080C
		cmp	[ebp+preserve_root], 0
		jz	short loc_800080C
		sub	esp, 0Ch
		push	offset dev_ino_buf_5343
		call	get_root_dev_ino
		add	esp, 10h
		mov	[ebp+chopt.root_dev_ino], eax
		mov	eax, [ebp+chopt.root_dev_ino]
		test	eax, eax
		jnz	short loc_800080C
		sub	esp, 0Ch
		push	offset asc_8001327 ; "/"
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aFailedToGetAtt ; "failed to get	attributes of %s"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		push	esi
		push	ebx		; format
		push	eax		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_800080C:				; CODE XREF: main+43Dj	main+446j ...
		or	[ebp+bit_flags], 400h
		mov	eax, ds:optind
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	edx, eax
		sub	esp, 4
		lea	eax, [ebp+chopt]
		push	eax
		push	0FFFFFFFFh
		push	0FFFFFFFFh
		push	[ebp+gid]
		push	0FFFFFFFFh
		push	[ebp+bit_flags]
		push	edx
		call	chown_files
		add	esp, 20h
		mov	[ebp+ok], al
		sub	esp, 0Ch
		lea	eax, [ebp+chopt]
		push	eax
		call	chopt_free
		add	esp, 10h
		cmp	[ebp+ok], 0
		jz	short loc_8000877
		mov	eax, 0
		jmp	short loc_800087C
; ---------------------------------------------------------------------------

loc_8000877:				; CODE XREF: main+502j
		mov	eax, 1

loc_800087C:				; CODE XREF: main+509j
		sub	esp, 0Ch
		push	eax		; status

loc_8000880:				; DATA XREF: .eh_frame:0800134Co
					; .eh_frame:08001370o ...
		call	exit
main		endp

_text		ends

; ===========================================================================

; Segment type:	Zero-length
; Segment permissions: Read/Write
_data		segment	byte public 'DATA' use32
_data		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
		assume cs:_bss
		;org 8000888h
		assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing
; char *reference_file
reference_file	dd ?			; DATA XREF: main+1B6w	main+2D1r ...
; Function-local static	variable
; dev_ino dev_ino_buf_5343
dev_ino_buf_5343 dev_ino <?>		; DATA XREF: main+44Bo
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment '32byte' can not be represented in assembly
_rodata		segment	para public 'CONST' use32
		assume cs:_rodata
		;org 80008A0h
; char msgid[]
msgid		db 0Ah			; DATA XREF: emit_ancillary_info+1Do
		db 'Report %s bugs to %s',0Ah,0
aBugCoreutils@g	db 'bug-coreutils@gnu.org',0 ; DATA XREF: emit_ancillary_info+2Do
		align 10h
; char aSHomePageHttpW[]
aSHomePageHttpW	db '%s home page: <http://www.gnu.org/software/%s/>',0Ah,0
					; DATA XREF: emit_ancillary_info+3Fo
; char domainname[]
domainname	db 'coreutils',0        ; DATA XREF: emit_ancillary_info+4Fo
					; main+75o ...
aGnuCoreutils	db 'GNU coreutils',0    ; DATA XREF: emit_ancillary_info+54o
					; main+20Co
		align 4
; char aGeneralHelpUsi[]
aGeneralHelpUsi	db 'General help using GNU software: <http://www.gnu.org/gethelp/>',0Ah,0
					; DATA XREF: emit_ancillary_info+6Bo
; char s2[]
s2		db 'en_',0              ; DATA XREF: emit_ancillary_info+A2o
; char aReportSTransla[]
aReportSTransla	db 'Report %s translation bugs to <http://translationproject.org/team'
					; DATA XREF: emit_ancillary_info+CCo
		db '/>',0Ah,0
		align 4
; char aForCompleteDoc[]
aForCompleteDoc	db 'For complete documentation, run: info coreutils ',27h,'%s invocation'
					; DATA XREF: emit_ancillary_info+FCo
		db 27h,0Ah,0
aRecursive	db 'recursive',0        ; DATA XREF: .rodata:long_optionso
aChanges	db 'changes',0          ; DATA XREF: .rodata:long_optionso
aDereference	db 'dereference',0      ; DATA XREF: .rodata:long_optionso
aNoDereference	db 'no-dereference',0   ; DATA XREF: .rodata:long_optionso
aNoPreserveRo_0	db 'no-preserve-root',0 ; DATA XREF: .rodata:long_optionso
aPreserveRoot	db 'preserve-root',0    ; DATA XREF: .rodata:long_optionso
aQuiet		db 'quiet',0            ; DATA XREF: .rodata:long_optionso
aSilent		db 'silent',0           ; DATA XREF: .rodata:long_optionso
aReference	db 'reference',0        ; DATA XREF: .rodata:long_optionso
aVerbose	db 'verbose',0          ; DATA XREF: .rodata:long_optionso
aHelp		db 'help',0             ; DATA XREF: .rodata:long_optionso
aVersion	db 'version',0          ; DATA XREF: .rodata:long_optionso
		align 20h
; const	option long_options[13]
long_options	option <offset aRecursive, 0, 0, 52h> ;	DATA XREF: main+238o
		option <offset aChanges, 0, 0, 63h> ; "recursive"
		option <offset aDereference, 0,	0, 80h>
		option <offset aNoDereference, 0, 0, 68h>
		option <offset aNoPreserveRo_0,	0, 0, 81h>
		option <offset aPreserveRoot, 0, 0, 82h>
		option <offset aQuiet, 0, 0, 66h>
		option <offset aSilent,	0, 0, 66h>
		option <offset aReference, 1, 0, 83h>
		option <offset aVerbose, 0, 0, 76h>
		option <offset aHelp, 0, 0, 0FFFFFF7Eh>
		option <offset aVersion, 0, 0, 0FFFFFF7Dh>
		option	<0>
; char locale
locale		db 0			; DATA XREF: parse_group+4Eo main+5Eo
; char aInvalidGroupS[]
aInvalidGroupS	db 'invalid group: %s',0 ; DATA XREF: parse_group+7Do
		align 4
; char aTrySHelpForMor[]
aTrySHelpForMor	db 'Try `%s --help',27h,' for more information.',0Ah,0
					; DATA XREF: usage+14o
		align 4
; char aUsageSOption__[]
aUsageSOption__	db 'Usage: %s [OPTION]... GROUP FILE...',0Ah ; DATA XREF: usage+4Ao
		db '  or:  %s [OPTION]... --reference=RFILE FILE...',0Ah,0
		align 4
; char aChangeTheGroup[]
aChangeTheGroup	db 'Change the group of each FILE to GROUP.',0Ah ; DATA XREF: usage+6Eo
		db 'With --reference, change the group of each FILE to that of RFILE.'
		db 0Ah
		db 0Ah
		db '  -c, --changes          like verbose but report only when a chan'
		db 'ge is made',0Ah
		db '      --dereference      affect the referent of each symbolic lin'
		db 'k (this is',0Ah
		db '                         the default), rather than the symbolic l'
		db 'ink itself',0Ah,0
; char aHNoDereference[]
aHNoDereference	db '  -h, --no-dereference   affect each symbolic link instead of any'
					; DATA XREF: usage+91o
		db ' referenced',0Ah
		db '                         file (useful only on systems that can ch'
		db 'ange the',0Ah
		db '                         ownership of a symlink)',0Ah,0
		align 10h
; char aNoPreserveRoot[]
aNoPreserveRoot	db '      --no-preserve-root  do not treat `/',27h,' specially (the defa'
					; DATA XREF: usage+B4o
		db 'ult)',0Ah
		db '      --preserve-root    fail to operate recursively on `/',27h,0Ah,0
; char aFSilentQuietSu[]
aFSilentQuietSu	db '  -f, --silent, --quiet  suppress most error messages',0Ah
					; DATA XREF: usage+D7o
		db '      --reference=RFILE  use RFILE',27h,'s group rather than specify'
		db 'ing a',0Ah
		db '                         GROUP value',0Ah
		db '  -R, --recursive        operate on files and directories recursi'
		db 'vely',0Ah
		db '  -v, --verbose          output a diagnostic for every file proce'
		db 'ssed',0Ah
		db 0Ah,0
		align 10h
; char aTheFollowingOp[]
aTheFollowingOp	db 'The following options modify how a hierarchy is traversed when th'
					; DATA XREF: usage+FAo
		db 'e -R',0Ah
		db 'option is also specified.  If more than one is specified, only th'
		db 'e final',0Ah
		db 'one takes effect.',0Ah
		db 0Ah
		db '  -H                     if a command line argument is a symbolic'
		db ' link',0Ah
		db '                         to a directory, traverse it',0Ah
		db '  -L                     traverse every symbolic link to a direct'
		db 'ory',0Ah
		db '                         encountered',0Ah
		db '  -P                     do not traverse any symbolic links (defa'
		db 'ult)',0Ah
		db 0Ah,0
; char aHelpDisplayThi[]
aHelpDisplayThi	db '      --help     display this help and exit',0Ah,0
					; DATA XREF: usage+11Do
		align 10h
; char aVersionOutputV[]
aVersionOutputV	db '      --version  output version information and exit',0Ah,0
					; DATA XREF: usage+140o
		align 4
; char aExamplesSStaff[]
aExamplesSStaff	db 0Ah			; DATA XREF: usage+169o
		db 'Examples:',0Ah
		db '  %s staff /u      Change the group of /u to "staff".',0Ah
		db '  %s -hR staff /u  Change the group of /u and subfiles to "staff"'
		db '.',0Ah,0
; char dirname[]
dirname		db '/usr/local/share/locale',0 ; DATA XREF: main+70o
aJimMeyering	db 'Jim Meyering',0     ; DATA XREF: main+201o
aDavidMackenzie	db 'David MacKenzie',0  ; DATA XREF: main+206o
aChgrp		db 'chgrp',0            ; DATA XREF: main+211o
; char shortopts[]
shortopts	db 'HLPRcfhv',0         ; DATA XREF: main+23Do
		align 4
; char aRDereferenceRe[]
aRDereferenceRe	db '-R --dereference requires either -H or -L',0 ; DATA XREF: main+285o
; char aMissingOperand[]
aMissingOperand	db 'missing operand',0  ; DATA XREF: main+2F6o
; char aMissingOpera_0[]
aMissingOpera_0	db 'missing operand after %s',0 ; DATA XREF: main+33Eo
		align 4
; char aFailedToGetAtt[]
aFailedToGetAtt	db 'failed to get attributes of %s',0 ; DATA XREF: main+39Bo
					; main+47Do
asc_8001327	db '/',0                ; DATA XREF: main+46Bo
_rodata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_eh_frame	segment	dword public 'CONST' use32
		assume cs:_eh_frame
		;org 800132Ch
		dd 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 20h, 1Ch
		dd offset loc_8000880-8001BCCh
		dd 11Ch, 80E4100h, 0D420285h, 3834405h,	0C5011403h, 4040CC3h
		dd 20h,	40h
		dd offset loc_8000880-8001AD4h
		dd 0BCh, 80E4100h, 0D420285h, 3834405h,	0C3C5B402h, 4040Ch
		dd 1Ch,	64h
		dd offset loc_8000880-8001A3Ch
		dd 194h, 80E4100h, 0D420285h, 3864205h,	483h, 28h, 84h
		dd offset loc_8000880-80018C8h
		dd 519h, 10C4400h, 5104700h, 45007502h,	7475030Fh, 2061006h
		dd 3107C75h, 787502h
_eh_frame	ends

; ===========================================================================

; Segment type:	Externs
; extern
		extrn program_name:dword ; DATA	XREF: emit_ancillary_info+7r
					; emit_ancillary_info+B6r ...
		extrn last_component:near ; CODE XREF: emit_ancillary_info+10p
					; emit_ancillary_info+BFp ...
; char *gettext(const char *msgid)
		extrn gettext:near	; CODE XREF: emit_ancillary_info+22p
					; emit_ancillary_info+44p ...
; int printf(const char	*format, ...)
		extrn printf:near	; CODE XREF: emit_ancillary_info+34p
					; emit_ancillary_info+5Ap ...
; struct _IO_FILE *stdout
		extrn stdout:dword	; DATA XREF: emit_ancillary_info+62r
					; usage+65r ...
		extrn fputs_unlocked:near ; CODE XREF: emit_ancillary_info+7Dp
					; usage+80p ...
; char *setlocale(int category,	const char *locale)
		extrn setlocale:near	; CODE XREF: emit_ancillary_info+8Cp
					; main+65p
; int strncmp(const char *s1, const char *s2, size_t n)
		extrn strncmp:near	; CODE XREF: emit_ancillary_info+AAp
; struct group *getgrnam(const char *name)
		extrn getgrnam:near	; CODE XREF: parse_group+2Fp
		extrn xstrtoul:near	; CODE XREF: parse_group+5Ep
		extrn quote:near	; CODE XREF: parse_group+70p main+331p ...
; void error(int status, int errnum, const char	*format, ...)
		extrn error:near	; CODE XREF: parse_group+90p main+29Ap ...
; void endgrent(void)
		extrn endgrent:near	; CODE XREF: parse_group:loc_80001BAp
		extrn __stack_chk_fail:near ; CODE XREF: parse_group+B2p
; struct _IO_FILE *stderr
		extrn stderr:dword	; DATA XREF: usage+23r
; int fprintf(FILE *stream, const char *format,	...)
		extrn fprintf:near	; CODE XREF: usage+2Ep
; void exit(int	status)
		extrn exit:near		; CODE XREF: usage+18Fp main+224p ...
		extrn set_program_name:near ; CODE XREF: main+53p
; char *bindtextdomain(const char *domainname, const char *dirname)
		extrn bindtextdomain:near ; CODE XREF: main+7Ap
; char *textdomain(const char *domainname)
		extrn textdomain:near	; CODE XREF: main+8Ap
; void close_stdout(void)
		extrn close_stdout	; DATA XREF: main+95o
; int atexit(void (*func)(void))
		extrn atexit:near	; CODE XREF: main+9Ap
		extrn chopt_init:near	; CODE XREF: main+ACp
; char *optarg
		extrn optarg:dword	; DATA XREF: main:loc_800051Dr
		extrn Version:dword	; DATA XREF: main:loc_800055Dr
		extrn version_etc:near	; CODE XREF: main+217p
; int getopt_long(int argc, char *const	*argv, const char *shortopts, const struct option *longopts, int *longind)
		extrn getopt_long:near	; CODE XREF: main+24Ap
; int optind
		extrn optind:dword	; DATA XREF: main+2C8r	main+2EAr ...
		extrn stat64:near	; CODE XREF: main+379p
; int *_errno_location(void)
		extrn __errno_location:near ; CODE XREF: main+3AAp main+48Cp
		extrn gid_to_name:near	; CODE XREF: main+3CEp
		extrn get_root_dev_ino:near ; CODE XREF: main+450p
		extrn chown_files:near	; CODE XREF: main+4DBp
		extrn chopt_free:near	; CODE XREF: main+4F3p


		end
