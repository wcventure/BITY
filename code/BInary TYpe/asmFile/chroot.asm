;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B611-7234-BB			    |
; |		Doskey Lee, Kingsoft Internet Security Software		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	BF3CCE3572A174D73AE93A53B0DCC5AA
; Input	CRC32 :	70D959ED

; File Name   :	D:\coreutils-o\chroot.o
; Format      :	ELF for	Intel 386 (Relocatable)
;
; Source File :	'chroot.c'

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	byte public 'CODE' use32
		assume cs:_text
		;org 8000000h
		assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl initialize_exit_failure(int status)
initialize_exit_failure	proc near	; CODE XREF: main+82p

status		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		cmp	[ebp+status], 1
		jz	short loc_8000011
		mov	eax, [ebp+status]
		mov	ds:exit_failure, eax

loc_8000011:				; CODE XREF: initialize_exit_failure+7j
		nop
		pop	ebp
		retn
initialize_exit_failure	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void emit_ancillary_info()
emit_ancillary_info proc near		; CODE XREF: usage+114p

lc_messages	= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset msgid	; "\nReport %s bugs to %s\n"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset aBugCoreutils@g ; "bug-coreutils@gnu.org"
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	offset aSHomePageHttpW ; "%s home page:	<http://www.gnu.org/softw"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset domainname ; "coreutils"
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aGeneralHelpUsi ; "General help using GNU software: <http:"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		sub	esp, 8
		push	0		; locale
		push	5		; category
		call	setlocale
		add	esp, 10h
		mov	[ebp+lc_messages], eax
		cmp	[ebp+lc_messages], 0
		jz	short loc_80000FA
		sub	esp, 4
		push	3		; n
		push	offset s2	; "en_"
		push	[ebp+lc_messages] ; s1
		call	strncmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_80000FA
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aReportSTransla ; "Report %s translation	bugs to	<http://t"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h

loc_80000FA:				; CODE XREF: emit_ancillary_info+9Bj
					; emit_ancillary_info+B4j
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aForCompleteDoc ; "For complete documentation, run: info	c"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		nop
		mov	ebx, [ebp+var_4]
		leave
		retn
emit_ancillary_info endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; char *__cdecl	bad_cast(const char *s)
bad_cast	proc near		; CODE XREF: main+211p	main+232p

s		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+s]
		pop	ebp
		retn
bad_cast	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; int __cdecl set_additional_groups(const char *groups)
set_additional_groups proc near		; CODE XREF: main+2DFp	main+38Bp

groups		= dword	ptr -3Ch
n_gids_allocated= dword	ptr -2Ch
value		= dword	ptr -28h
gids		= dword	ptr -24h
n_gids		= dword	ptr -20h
tmp		= dword	ptr -1Ch
ret		= dword	ptr -18h
g		= dword	ptr -14h
buffer		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 40h
		mov	eax, [ebp+arg_0]
		mov	[ebp+groups], eax
		mov	eax, large gs:14h
		mov	[ebp+var_C], eax
		xor	eax, eax
		mov	[ebp+gids], 0
		mov	[ebp+n_gids_allocated],	0
		mov	[ebp+n_gids], 0
		sub	esp, 0Ch
		push	[ebp+groups]	; char *
		call	xstrdup
		add	esp, 10h
		mov	[ebp+buffer], eax
		mov	[ebp+ret], 0
		sub	esp, 8
		push	offset delim	; ","
		push	[ebp+buffer]	; s
		call	strtok
		add	esp, 10h
		mov	[ebp+tmp], eax
		jmp	loc_800027F
; ---------------------------------------------------------------------------

loc_8000199:				; CODE XREF: set_additional_groups+14Bj
		sub	esp, 0Ch
		push	offset locale
		lea	eax, [ebp+value]
		push	eax
		push	0Ah
		push	0
		push	[ebp+tmp]
		call	xstrtoul
		add	esp, 20h
		test	eax, eax
		jnz	short loc_80001CC
		mov	eax, [ebp+value]
		sub	esp, 0Ch
		push	eax		; gid
		call	getgrgid
		add	esp, 10h
		mov	[ebp+g], eax
		jmp	short loc_80001EC
; ---------------------------------------------------------------------------

loc_80001CC:				; CODE XREF: set_additional_groups+7Ej
		sub	esp, 0Ch
		push	[ebp+tmp]	; name
		call	getgrnam
		add	esp, 10h
		mov	[ebp+g], eax
		cmp	[ebp+g], 0
		jz	short loc_80001EC
		mov	eax, [ebp+g]
		mov	eax, [eax+8]
		mov	[ebp+value], eax

loc_80001EC:				; CODE XREF: set_additional_groups+92j
					; set_additional_groups+A9j
		cmp	[ebp+g], 0
		jnz	short loc_8000231
		sub	esp, 0Ch
		push	[ebp+tmp]
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aInvalidGroupS ;	"invalid group %s"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		push	esi
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	[ebp+ret], 0FFFFFFFFh
		jmp	short loc_800026A
; ---------------------------------------------------------------------------

loc_8000231:				; CODE XREF: set_additional_groups+B8j
		mov	eax, [ebp+n_gids_allocated]
		cmp	[ebp+n_gids], eax
		jnz	short loc_8000250
		sub	esp, 4
		push	4
		lea	eax, [ebp+n_gids_allocated]
		push	eax
		push	[ebp+gids]
		call	x2nrealloc
		add	esp, 10h
		mov	[ebp+gids], eax

loc_8000250:				; CODE XREF: set_additional_groups+FFj
		mov	eax, [ebp+n_gids]
		lea	edx, [eax+1]
		mov	[ebp+n_gids], edx
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+gids]
		add	edx, eax
		mov	eax, [ebp+value]
		mov	[edx], eax

loc_800026A:				; CODE XREF: set_additional_groups+F7j
		sub	esp, 8
		push	offset delim	; ","
		push	0		; s
		call	strtok
		add	esp, 10h
		mov	[ebp+tmp], eax

loc_800027F:				; CODE XREF: set_additional_groups+5Cj
		cmp	[ebp+tmp], 0
		jnz	loc_8000199
		cmp	[ebp+ret], 0
		jnz	short loc_80002CA
		cmp	[ebp+n_gids], 0
		jnz	short loc_80002CA
		sub	esp, 0Ch
		push	[ebp+groups]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aInvalidGroupLi ; "invalid group	list %s"
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	[ebp+ret], 0FFFFFFFFh

loc_80002CA:				; CODE XREF: set_additional_groups+155j
					; set_additional_groups+15Bj
		cmp	[ebp+ret], 0
		jnz	short loc_8000312
		sub	esp, 8
		push	[ebp+gids]	; groups
		push	[ebp+n_gids]	; n
		call	setgroups
		add	esp, 10h
		mov	[ebp+ret], eax
		cmp	[ebp+ret], 0
		jz	short loc_8000312
		sub	esp, 0Ch
		push	offset aFailedToSetAdd ; "failed to set	additional groups"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		sub	esp, 4
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h

loc_8000312:				; CODE XREF: set_additional_groups+196j
					; set_additional_groups+1B0j
		sub	esp, 0Ch
		push	[ebp+buffer]	; ptr
		call	free
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+gids]	; ptr
		call	free
		add	esp, 10h
		mov	eax, [ebp+ret]
		mov	ecx, [ebp+var_C]
		xor	ecx, large gs:14h
		jz	short loc_8000342
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_8000342:				; CODE XREF: set_additional_groups+203j
		lea	esp, [ebp-8]
		pop	ebx
		pop	esi
		pop	ebp
		retn
set_additional_groups endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; void __cdecl usage(int status)
		public usage
usage		proc near		; CODE XREF: main+EFp main+147p
					; DATA XREF: ...

status		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		cmp	[ebp+status], 0
		jz	short loc_8000384
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, ds:stderr
		sub	esp, 4
		push	ebx
		push	edx		; format
		push	eax		; stream
		call	fprintf
		add	esp, 10h
		jmp	loc_8000462
; ---------------------------------------------------------------------------

loc_8000384:				; CODE XREF: usage+9j
		mov	esi, ds:program_name
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aUsageSOptionNe ; "Usage: %s [OPTION] NEWROOT [COMMAND [AR"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	esi
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aRunCommandWith ; "Run COMMAND with root	directory set to "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aUserspecUserGr ; "  --userspec=USER:GROUP  specify user	a"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aHelpDisplayThi ; "	--help	   display this	help and "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aVersionOutputV ; "	--version  output version informa"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aIfNoCommandIsG ; "\nIf no command is given, run	``${SHELL"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		call	emit_ancillary_info

loc_8000462:				; CODE XREF: usage+36j
		sub	esp, 0Ch
		push	[ebp+status]	; status
		call	exit
usage		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public main
main		proc near

argv		= dword	ptr -4Ch
fail		= byte ptr -45h
uid		= dword	ptr -44h
gid		= dword	ptr -40h
user		= dword	ptr -3Ch
group		= dword	ptr -38h
userspec	= dword	ptr -34h
groups		= dword	ptr -30h
shell		= dword	ptr -2Ch
c		= dword	ptr -28h
err		= dword	ptr -24h
exit_status	= dword	ptr -20h
var_1C		= dword	ptr -1Ch
argc		= dword	ptr  0Ch
envp		= dword	ptr  14h

		lea	ecx, [esp+4]
		and	esp, 0FFFFFFF0h
		push	dword ptr [ecx-4]
		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		push	ecx
		sub	esp, 48h
		mov	ebx, ecx
		mov	eax, [ebx+4]
		mov	[ebp+argv], eax
		mov	eax, large gs:14h
		mov	[ebp+var_1C], eax
		xor	eax, eax
		mov	[ebp+userspec],	0
		mov	[ebp+groups], 0
		mov	eax, [ebp+argv]
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	set_program_name
		add	esp, 10h
		sub	esp, 8
		push	offset locale	; locale
		push	6		; category
		call	setlocale
		add	esp, 10h
		sub	esp, 8
		push	offset dirname	; "/usr/local/share/locale"
		push	offset domainname ; "coreutils"
		call	bindtextdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset domainname ; "coreutils"
		call	textdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	7Dh		; status
		call	initialize_exit_failure
		add	esp, 10h
		sub	esp, 0Ch
		push	offset close_stdout ; func
		call	atexit
		add	esp, 10h
		mov	eax, ds:Version
		push	0
		push	offset aRolandMcgrath ;	"Roland	McGrath"
		push	offset usage
		push	eax
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	offset aChroot	; "chroot"
		push	[ebp+argv]
		push	dword ptr [ebx]
		call	parse_long_options
		add	esp, 20h
		jmp	short loc_8000561
; ---------------------------------------------------------------------------

loc_8000532:				; CODE XREF: main+117j
		mov	eax, [ebp+c]
		cmp	eax, 100h
		jz	short loc_800054D
		cmp	eax, 101h
		jnz	short loc_8000557
		mov	eax, ds:optarg
		mov	[ebp+userspec],	eax
		jmp	short loc_8000561
; ---------------------------------------------------------------------------

loc_800054D:				; CODE XREF: main+CDj
		mov	eax, ds:optarg
		mov	[ebp+groups], eax
		jmp	short loc_8000561
; ---------------------------------------------------------------------------

loc_8000557:				; CODE XREF: main+D4j
		sub	esp, 0Ch
		push	7Dh		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8000561:				; CODE XREF: main+C3j main+DEj ...
		sub	esp, 0Ch
		push	0		; longind
		push	offset long_opts ; longopts
		push	offset shortopts ; "+"
		push	[ebp+argv]	; argv
		push	dword ptr [ebx]	; argc
		call	getopt_long
		add	esp, 20h
		mov	[ebp+c], eax
		cmp	[ebp+c], 0FFFFFFFFh
		jnz	short loc_8000532
		mov	eax, ds:optind
		cmp	[ebx], eax
		jg	short loc_80005B9
		sub	esp, 0Ch
		push	offset aMissingOperand ; "missing operand"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		sub	esp, 0Ch
		push	7Dh		; status
		call	usage
; ---------------------------------------------------------------------------

loc_80005B9:				; CODE XREF: main+120j
		mov	eax, ds:optind
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax		; path
		call	chroot
		add	esp, 10h
		test	eax, eax
		jz	short loc_8000615
		mov	eax, ds:optind
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		mov	esi, [eax]
		sub	esp, 0Ch
		push	offset aCannotChangeRo ; "cannot change	root directory to %s"
		call	gettext
		add	esp, 10h
		mov	edi, eax
		call	__errno_location
		mov	eax, [eax]
		push	esi
		push	edi		; format
		push	eax		; errnum
		push	7Dh		; status
		call	error
		add	esp, 10h

loc_8000615:				; CODE XREF: main+16Dj
		sub	esp, 0Ch
		push	offset path	; "/"
		call	chdir
		add	esp, 10h
		test	eax, eax
		jz	short loc_8000651
		sub	esp, 0Ch
		push	offset aCannotChdirToR ; "cannot chdir to root directory"
		call	gettext
		add	esp, 10h
		mov	esi, eax
		call	__errno_location
		mov	eax, [eax]
		sub	esp, 4
		push	esi		; format
		push	eax		; errnum
		push	7Dh		; status
		call	error
		add	esp, 10h

loc_8000651:				; CODE XREF: main+1BAj
		mov	eax, ds:optind
		add	eax, 1
		cmp	eax, [ebx]
		jnz	short loc_80006B7
		sub	esp, 0Ch
		push	offset name	; "SHELL"
		call	getenv
		add	esp, 10h
		mov	[ebp+shell], eax
		cmp	[ebp+shell], 0
		jnz	short loc_8000689
		sub	esp, 0Ch
		push	offset s	; "/bin/sh"
		call	bad_cast
		add	esp, 10h
		mov	[ebp+shell], eax

loc_8000689:				; CODE XREF: main+207j
		mov	eax, [ebp+argv]
		mov	edx, [ebp+shell]
		mov	[eax], edx
		mov	eax, [ebp+argv]
		lea	ebx, [eax+4]
		sub	esp, 0Ch
		push	offset aI	; "-i"
		call	bad_cast
		add	esp, 10h
		mov	[ebx], eax
		mov	eax, [ebp+argv]
		add	eax, 8
		mov	dword ptr [eax], 0
		jmp	short loc_80006C5
; ---------------------------------------------------------------------------

loc_80006B7:				; CODE XREF: main+1EEj
		mov	eax, ds:optind
		add	eax, 1
		shl	eax, 2
		add	[ebp+argv], eax

loc_80006C5:				; CODE XREF: main+248j
		mov	[ebp+fail], 0
		cmp	[ebp+userspec],	0
		jz	loc_80007EC
		mov	[ebp+uid], 0FFFFFFFFh
		mov	[ebp+gid], 0FFFFFFFFh
		sub	esp, 0Ch
		lea	eax, [ebp+group]
		push	eax
		lea	eax, [ebp+user]
		push	eax
		lea	eax, [ebp+gid]
		push	eax
		lea	eax, [ebp+uid]
		push	eax
		push	[ebp+userspec]
		call	parse_user_spec
		add	esp, 20h
		mov	[ebp+err], eax
		cmp	[ebp+err], 0
		jz	short loc_8000722
		call	__errno_location
		mov	eax, [eax]
		push	[ebp+err]
		push	offset format	; "%s"
		push	eax		; errnum
		push	7Dh		; status
		call	error
		add	esp, 10h

loc_8000722:				; CODE XREF: main+299j
		mov	eax, [ebp+user]
		sub	esp, 0Ch
		push	eax		; ptr
		call	free
		add	esp, 10h
		mov	eax, [ebp+group]
		sub	esp, 0Ch
		push	eax		; ptr
		call	free
		add	esp, 10h
		cmp	[ebp+groups], 0
		jz	short loc_800075C
		sub	esp, 0Ch
		push	[ebp+groups]	; groups
		call	set_additional_groups
		add	esp, 10h
		test	eax, eax
		jz	short loc_800075C
		mov	[ebp+fail], 1

loc_800075C:				; CODE XREF: main+2D7j	main+2E9j
		mov	eax, [ebp+gid]
		cmp	eax, 0FFFFFFFFh
		jz	short loc_80007A3
		mov	eax, [ebp+gid]
		sub	esp, 0Ch
		push	eax		; gid
		call	setgid
		add	esp, 10h
		test	eax, eax
		jz	short loc_80007A3
		sub	esp, 0Ch
		push	offset aFailedToSetGro ; "failed to set	group-ID"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		sub	esp, 4
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	[ebp+fail], 1

loc_80007A3:				; CODE XREF: main+2F5j	main+308j
		mov	eax, [ebp+uid]
		cmp	eax, 0FFFFFFFFh
		jz	short loc_8000808
		mov	eax, [ebp+uid]
		sub	esp, 0Ch
		push	eax		; uid
		call	setuid
		add	esp, 10h
		test	eax, eax
		jz	short loc_8000808
		sub	esp, 0Ch
		push	offset aFailedToSetUse ; "failed to set	user-ID"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		sub	esp, 4
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	[ebp+fail], 1
		jmp	short loc_8000808
; ---------------------------------------------------------------------------

loc_80007EC:				; CODE XREF: main+260j
		cmp	[ebp+groups], 0
		jz	short loc_8000808
		sub	esp, 0Ch
		push	[ebp+groups]	; groups
		call	set_additional_groups
		add	esp, 10h
		test	eax, eax
		jz	short loc_8000808
		mov	[ebp+fail], 1

loc_8000808:				; CODE XREF: main+33Cj	main+34Fj ...
		cmp	[ebp+fail], 0
		jz	short loc_8000818
		sub	esp, 0Ch
		push	7Dh		; status
		call	exit
; ---------------------------------------------------------------------------

loc_8000818:				; CODE XREF: main+39Fj
		mov	eax, [ebp+argv]
		mov	eax, [eax]
		sub	esp, 8
		push	[ebp+argv]	; argv
		push	eax		; file
		call	execvp
		add	esp, 10h
		call	__errno_location
		mov	eax, [eax]
		cmp	eax, 2
		jnz	short loc_800083F
		mov	eax, 7Fh
		jmp	short loc_8000844
; ---------------------------------------------------------------------------

loc_800083F:				; CODE XREF: main+3C9j
		mov	eax, 7Eh

loc_8000844:				; CODE XREF: main+3D0j
		mov	[ebp+exit_status], eax
		mov	eax, [ebp+argv]
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aFailedToRunCom ; "failed to run	command	%s"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		push	esi
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+exit_status] ; status

loc_8000886:				; DATA XREF: .eh_frame:08000D94o
					; .eh_frame:08000DB4o ...
		call	exit
main		endp

_text		ends

; ===========================================================================

; Segment type:	Zero-length
; Segment permissions: Read/Write
_data		segment	byte public 'DATA' use32
_data		ends

; ===========================================================================

; Segment type:	Zero-length
; Segment permissions: Read/Write
_bss		segment	byte public 'BSS' use32
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment '32byte' can not be represented in assembly
_rodata		segment	para public 'CONST' use32
		assume cs:_rodata
		;org 80008A0h
; char msgid[]
msgid		db 0Ah			; DATA XREF: emit_ancillary_info+1Do
		db 'Report %s bugs to %s',0Ah,0
aBugCoreutils@g	db 'bug-coreutils@gnu.org',0 ; DATA XREF: emit_ancillary_info+2Do
		align 10h
; char aSHomePageHttpW[]
aSHomePageHttpW	db '%s home page: <http://www.gnu.org/software/%s/>',0Ah,0
					; DATA XREF: emit_ancillary_info+3Fo
; char domainname[]
domainname	db 'coreutils',0        ; DATA XREF: emit_ancillary_info+4Fo
					; main+60o ...
aGnuCoreutils	db 'GNU coreutils',0    ; DATA XREF: emit_ancillary_info+54o
					; main+ACo
		align 4
; char aGeneralHelpUsi[]
aGeneralHelpUsi	db 'General help using GNU software: <http://www.gnu.org/gethelp/>',0Ah,0
					; DATA XREF: emit_ancillary_info+6Bo
; char s2[]
s2		db 'en_',0              ; DATA XREF: emit_ancillary_info+A2o
; char aReportSTransla[]
aReportSTransla	db 'Report %s translation bugs to <http://translationproject.org/team'
					; DATA XREF: emit_ancillary_info+CCo
		db '/>',0Ah,0
		align 4
; char aForCompleteDoc[]
aForCompleteDoc	db 'For complete documentation, run: info coreutils ',27h,'%s invocation'
					; DATA XREF: emit_ancillary_info+FCo
		db 27h,0Ah,0
aGroups		db 'groups',0           ; DATA XREF: .rodata:long_optso
aUserspec	db 'userspec',0         ; DATA XREF: .rodata:long_optso
aHelp		db 'help',0             ; DATA XREF: .rodata:long_optso
aVersion	db 'version',0          ; DATA XREF: .rodata:long_optso
		align 20h
; const	option long_opts[5]
long_opts	option <offset aGroups,	1, 0, 100h> ; DATA XREF: main+F9o
		option <offset aUserspec, 1, 0,	101h> ;	"groups"
		option <offset aHelp, 0, 0, 0FFFFFF7Eh>
		option <offset aVersion, 0, 0, 0FFFFFF7Dh>
		option	<0>
; char delim[2]
delim		db ',',0                ; DATA XREF: set_additional_groups+49o
					; set_additional_groups+135o
; char locale
locale		db 0			; DATA XREF: set_additional_groups+64o
					; main+49o
; char aInvalidGroupS[]
aInvalidGroupS	db 'invalid group %s',0 ; DATA XREF: set_additional_groups+CDo
; char aInvalidGroupLi[]
aInvalidGroupLi	db 'invalid group list %s',0 ; DATA XREF: set_additional_groups+170o
		align 4
; char aFailedToSetAdd[]
aFailedToSetAdd	db 'failed to set additional groups',0
					; DATA XREF: set_additional_groups+1B5o
; char aTrySHelpForMor[]
aTrySHelpForMor	db 'Try `%s --help',27h,' for more information.',0Ah,0
					; DATA XREF: usage+14o
		align 4
; char aUsageSOptionNe[]
aUsageSOptionNe	db 'Usage: %s [OPTION] NEWROOT [COMMAND [ARG]...]',0Ah
					; DATA XREF: usage+4Ao
		db '  or:  %s OPTION',0Ah,0
; char aRunCommandWith[]
aRunCommandWith	db 'Run COMMAND with root directory set to NEWROOT.',0Ah
					; DATA XREF: usage+6Eo
		db 0Ah,0
		align 4
; char aUserspecUserGr[]
aUserspecUserGr	db '  --userspec=USER:GROUP  specify user and group (ID or name) to u'
					; DATA XREF: usage+91o
		db 'se',0Ah
		db '  --groups=G_LIST        specify supplementary groups as g1,g2,..'
		db ',gN',0Ah,0
		align 4
; char aHelpDisplayThi[]
aHelpDisplayThi	db '      --help     display this help and exit',0Ah,0
					; DATA XREF: usage+B4o
		align 4
; char aVersionOutputV[]
aVersionOutputV	db '      --version  output version information and exit',0Ah,0
					; DATA XREF: usage+D7o
		align 4
; char aIfNoCommandIsG[]
aIfNoCommandIsG	db 0Ah			; DATA XREF: usage+FAo
		db 'If no command is given, run ``${SHELL} -i',27h,27h,' (default: /bin/sh)'
		db '.',0Ah,0
; char dirname[]
dirname		db '/usr/local/share/locale',0 ; DATA XREF: main+5Bo
aRolandMcgrath	db 'Roland McGrath',0   ; DATA XREF: main+A1o
aChroot		db 'chroot',0           ; DATA XREF: main+B1o
; char shortopts[]
shortopts	db '+',0                ; DATA XREF: main+FEo
; char aMissingOperand[]
aMissingOperand	db 'missing operand',0  ; DATA XREF: main+125o
		align 10h
; char aCannotChangeRo[]
aCannotChangeRo	db 'cannot change root directory to %s',0 ; DATA XREF: main+185o
; char path[]
path		db '/',0                ; DATA XREF: main+1ABo
		align 4
; char aCannotChdirToR[]
aCannotChdirToR	db 'cannot chdir to root directory',0 ; DATA XREF: main+1BFo
; char name[]
name		db 'SHELL',0            ; DATA XREF: main+1F3o
; char s[]
s		db '/bin/sh',0          ; DATA XREF: main+20Co
; char aI[]
aI		db '-i',0               ; DATA XREF: main+22Do
; char format[]
format		db '%s',0               ; DATA XREF: main+2A5o
; char aFailedToSetGro[]
aFailedToSetGro	db 'failed to set group-ID',0 ; DATA XREF: main+30Do
; char aFailedToSetUse[]
aFailedToSetUse	db 'failed to set user-ID',0 ; DATA XREF: main+354o
; char aFailedToRunCom[]
aFailedToRunCom	db 'failed to run command %s',0 ; DATA XREF: main+3F0o
_rodata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_eh_frame	segment	dword public 'CONST' use32
		assume cs:_eh_frame
		;org 8000D74h
		dd 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 2	dup(1Ch)
		dd offset loc_8000886-800161Ah
		dd 14h,	80E4100h, 0D420285h, 0CC55005h,	404h, 20h, 3Ch
		dd offset loc_8000886-8001626h
		dd 11Ch, 80E4100h, 0D420285h, 3834405h,	0C5011403h, 4040CC3h
		dd 1Ch,	60h
		dd offset loc_8000886-800152Eh
		dd 8, 80E4100h,	0D420285h, 0CC54405h, 404h, 28h, 80h
		dd offset loc_8000886-8001546h
		dd 211h, 80E4100h, 0D420285h, 3864505h,	6030483h, 0C641C302h
		dd 40CC541h, 4,	1Ch, 0ACh
		dd offset loc_8000886-8001361h
		dd 124h, 80E4100h, 0D420285h, 3864205h,	483h, 2Ch, 0CCh
		dd offset loc_8000886-800125Dh
		dd 41Eh, 10C4400h, 5104700h, 46007502h,	7075030Fh, 2071006h
		dd 6107C75h, 10787502h,	74750203h
_eh_frame	ends

; ===========================================================================

; Segment type:	Externs
; extern
		extrn exit_failure:dword ; DATA	XREF: initialize_exit_failure+Cw
		extrn program_name:dword ; DATA	XREF: emit_ancillary_info+7r
					; emit_ancillary_info+B6r ...
		extrn last_component:near ; CODE XREF: emit_ancillary_info+10p
					; emit_ancillary_info+BFp ...
; char *gettext(const char *msgid)
		extrn gettext:near	; CODE XREF: emit_ancillary_info+22p
					; emit_ancillary_info+44p ...
; int printf(const char	*format, ...)
		extrn printf:near	; CODE XREF: emit_ancillary_info+34p
					; emit_ancillary_info+5Ap ...
; struct _IO_FILE *stdout
		extrn stdout:dword	; DATA XREF: emit_ancillary_info+62r
					; usage+65r ...
		extrn fputs_unlocked:near ; CODE XREF: emit_ancillary_info+7Dp
					; usage+80p ...
; char *setlocale(int category,	const char *locale)
		extrn setlocale:near	; CODE XREF: emit_ancillary_info+8Cp
					; main+50p
; int strncmp(const char *s1, const char *s2, size_t n)
		extrn strncmp:near	; CODE XREF: emit_ancillary_info+AAp
; char *xstrdup(const char *)
		extrn xstrdup:near	; CODE XREF: set_additional_groups+34p
; char *strtok(char *s,	const char *delim)
		extrn strtok:near	; CODE XREF: set_additional_groups+51p
					; set_additional_groups+13Cp
		extrn xstrtoul:near	; CODE XREF: set_additional_groups+74p
; struct group *getgrgid(__gid_t gid)
		extrn getgrgid:near	; CODE XREF: set_additional_groups+87p
; struct group *getgrnam(const char *name)
		extrn getgrnam:near	; CODE XREF: set_additional_groups+9Ap
		extrn quote:near	; CODE XREF: set_additional_groups+C0p
					; set_additional_groups+163p ...
; int *_errno_location(void)
		extrn __errno_location:near ; CODE XREF: set_additional_groups+DCp
					; set_additional_groups+1C4p ...
; void error(int status, int errnum, const char	*format, ...)
		extrn error:near	; CODE XREF: set_additional_groups+E8p
					; set_additional_groups+183p ...
		extrn x2nrealloc:near	; CODE XREF: set_additional_groups+10Dp
; int setgroups(size_t n, const	__gid_t	*groups)
		extrn setgroups:near	; CODE XREF: set_additional_groups+1A1p
; void free(void *ptr)
		extrn free:near		; CODE XREF: set_additional_groups+1E0p
					; set_additional_groups+1EEp ...
		extrn __stack_chk_fail:near ; CODE XREF: set_additional_groups+205p
; struct _IO_FILE *stderr
		extrn stderr:dword	; DATA XREF: usage+23r
; int fprintf(FILE *stream, const char *format,	...)
		extrn fprintf:near	; CODE XREF: usage+2Ep
; void exit(int	status)
		extrn exit:near		; CODE XREF: usage+11Fp main+3A6p ...
		extrn set_program_name:near ; CODE XREF: main+3Ep
; char *bindtextdomain(const char *domainname, const char *dirname)
		extrn bindtextdomain:near ; CODE XREF: main+65p
; char *textdomain(const char *domainname)
		extrn textdomain:near	; CODE XREF: main+75p
; void close_stdout(void)
		extrn close_stdout	; DATA XREF: main+8Do
; int atexit(void (*func)(void))
		extrn atexit:near	; CODE XREF: main+92p
		extrn Version:dword	; DATA XREF: main+9Ar
		extrn parse_long_options:near ;	CODE XREF: main+BBp
; char *optarg
		extrn optarg:dword	; DATA XREF: main+D6r
					; main:loc_800054Dr
; int getopt_long(int argc, char *const	*argv, const char *shortopts, const struct option *longopts, int *longind)
		extrn getopt_long:near	; CODE XREF: main+108p
; int optind
		extrn optind:dword	; DATA XREF: main+119r
					; main:loc_80005B9r ...
; int chroot(const char	*path)
		extrn chroot:near	; CODE XREF: main+163p
; int chdir(const char *path)
		extrn chdir:near	; CODE XREF: main+1B0p
; char *getenv(const char *name)
		extrn getenv:near	; CODE XREF: main+1F8p
		extrn parse_user_spec:near ; CODE XREF:	main+28Ap
; int setgid(__gid_t gid)
		extrn setgid:near	; CODE XREF: main+2FEp
; int setuid(__uid_t uid)
		extrn setuid:near	; CODE XREF: main+345p
; int execvp(const char	*file, char *const *argv)
		extrn execvp:near	; CODE XREF: main+3B7p


		end
