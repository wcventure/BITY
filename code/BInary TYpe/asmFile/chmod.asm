;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B611-7234-BB			    |
; |		Doskey Lee, Kingsoft Internet Security Software		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	92E4DD603AF1F8EB26E60B09D93D0E49
; Input	CRC32 :	52D662F9

; File Name   :	D:\coreutils-o\chmod.o
; Format      :	ELF for	Intel 386 (Relocatable)
;
; Source File :	'chmod.c'

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	byte public 'CODE' use32
		assume cs:_text
		;org 8000000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; int __cdecl chmodat(int fd, const char *file,	mode_t mode)
chmodat		proc near		; CODE XREF: process_file+3C5p

fd		= dword	ptr  8
file		= dword	ptr  0Ch
mode		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		push	0
		push	[ebp+mode]
		push	[ebp+file]
		push	[ebp+fd]
		call	fchmodat
		add	esp, 10h
		leave
		retn
chmodat		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void emit_ancillary_info()
emit_ancillary_info proc near		; CODE XREF: usage+13Fp

lc_messages	= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset msgid	; "\nReport %s bugs to %s\n"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset aBugCoreutils@g ; "bug-coreutils@gnu.org"
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	offset aSHomePageHttpW ; "%s home page:	<http://www.gnu.org/softw"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset domainname ; "coreutils"
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aGeneralHelpUsi ; "General help using GNU software: <http:"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		sub	esp, 8
		push	0		; locale
		push	5		; category
		call	setlocale
		add	esp, 10h
		mov	[ebp+lc_messages], eax
		cmp	[ebp+lc_messages], 0
		jz	short loc_8000101
		sub	esp, 4
		push	3		; n
		push	offset s2	; "en_"
		push	[ebp+lc_messages] ; s1
		call	strncmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_8000101
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aReportSTransla ; "Report %s translation	bugs to	<http://t"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h

loc_8000101:				; CODE XREF: emit_ancillary_info+9Bj
					; emit_ancillary_info+B4j
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aForCompleteDoc ; "For complete documentation, run: info	c"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		nop
		mov	ebx, [ebp+var_4]
		leave
		retn
emit_ancillary_info endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl ignore_ptr(void *p)
ignore_ptr	proc near		; CODE XREF: process_file+34Cp

p		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		nop
		pop	ebp
		retn
ignore_ptr	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; _Bool	__cdecl	mode_changed(const char	*file, mode_t old_mode,	mode_t new_mode)
mode_changed	proc near		; CODE XREF: process_file+43Fp

file		= dword	ptr -7Ch
new_stats	= stat ptr -6Ch
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
old_mode	= dword	ptr  0Ch
new_mode	= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		add	esp, 0FFFFFF80h
		mov	eax, [ebp+arg_0]
		mov	[ebp+file], eax
		mov	eax, large gs:14h
		mov	[ebp+var_C], eax
		xor	eax, eax
		mov	eax, [ebp+new_mode]
		and	eax, 0E00h
		test	eax, eax
		jz	short loc_80001C9
		sub	esp, 8
		lea	eax, [ebp+new_stats]
		push	eax
		push	[ebp+file]
		call	stat64
		add	esp, 10h
		test	eax, eax
		jz	short loc_80001C3
		movzx	eax, ds:force_silent
		xor	eax, 1
		test	al, al
		jz	short loc_80001BC
		sub	esp, 0Ch
		push	[ebp+file]
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aGettingNewAttr ; "getting new attributes of %s"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		push	esi
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h

loc_80001BC:				; CODE XREF: mode_changed+47j
		mov	eax, 0
		jmp	short loc_80001D9
; ---------------------------------------------------------------------------

loc_80001C3:				; CODE XREF: mode_changed+39j
		mov	eax, [ebp+new_stats.st_mode]
		mov	[ebp+new_mode],	eax

loc_80001C9:				; CODE XREF: mode_changed+23j
		mov	eax, [ebp+old_mode]
		xor	eax, [ebp+new_mode]
		and	eax, 0FFFh
		test	eax, eax
		setnz	al

loc_80001D9:				; CODE XREF: mode_changed+84j
		mov	edx, [ebp+var_C]
		xor	edx, large gs:14h
		jz	short loc_80001EA
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_80001EA:				; CODE XREF: mode_changed+A6j
		lea	esp, [ebp-8]
		pop	ebx
		pop	esi
		pop	ebp
		retn
mode_changed	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl describe_change(const char *file, mode_t	mode, Change_status changed)
describe_change	proc near		; CODE XREF: process_file+4B7p

file		= dword	ptr -2Ch
fmt		= dword	ptr -1Ch
perms		= byte ptr -18h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
mode		= dword	ptr  0Ch
changed		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 34h
		mov	eax, [ebp+arg_0]
		mov	[ebp+file], eax
		mov	eax, large gs:14h
		mov	[ebp+var_C], eax
		xor	eax, eax
		cmp	[ebp+changed], 0
		jnz	short loc_8000241
		sub	esp, 0Ch
		push	[ebp+file]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aNeitherSymboli ; "neither symbolic link	%s nor referent	h"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		jmp	loc_80002DB
; ---------------------------------------------------------------------------

loc_8000241:				; CODE XREF: describe_change+1Cj
		sub	esp, 8
		lea	eax, [ebp+perms]
		push	eax
		push	[ebp+mode]
		call	strmode
		add	esp, 10h
		mov	[ebp+perms+0Ah], 0
		mov	eax, [ebp+changed]
		cmp	eax, 2
		jz	short loc_800027E
		cmp	eax, 3
		jz	short loc_8000293
		cmp	eax, 1
		jnz	short loc_80002A8
		sub	esp, 0Ch
		push	offset aModeOfSChanged ; "mode of %s changed to	%04lo (%s)\n"
		call	gettext
		add	esp, 10h
		mov	[ebp+fmt], eax
		jmp	short loc_80002AD
; ---------------------------------------------------------------------------

loc_800027E:				; CODE XREF: describe_change+6Cj
		sub	esp, 0Ch
		push	offset aFailedToChange ; "failed to change mode	of %s to %04lo (%"...
		call	gettext
		add	esp, 10h
		mov	[ebp+fmt], eax
		jmp	short loc_80002AD
; ---------------------------------------------------------------------------

loc_8000293:				; CODE XREF: describe_change+71j
		sub	esp, 0Ch
		push	offset aModeOfSRetaine ; "mode of %s retained as %04lo (%s)\n"
		call	gettext
		add	esp, 10h
		mov	[ebp+fmt], eax
		jmp	short loc_80002AD
; ---------------------------------------------------------------------------

loc_80002A8:				; CODE XREF: describe_change+76j
		call	abort
; ---------------------------------------------------------------------------

loc_80002AD:				; CODE XREF: describe_change+8Bj
					; describe_change+A0j ...
		mov	eax, [ebp+mode]
		and	eax, 0FFFh
		mov	ebx, eax
		sub	esp, 0Ch
		push	[ebp+file]
		call	quote
		add	esp, 10h
		mov	edx, eax
		lea	eax, [ebp+perms]
		add	eax, 1
		push	eax
		push	ebx
		push	edx
		push	[ebp+fmt]	; format
		call	printf
		add	esp, 10h

loc_80002DB:				; CODE XREF: describe_change+4Bj
		mov	eax, [ebp+var_C]
		xor	eax, large gs:14h
		jz	short loc_80002EC
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_80002EC:				; CODE XREF: describe_change+F4j
		mov	ebx, [ebp+var_4]
		leave
		retn
describe_change	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; _Bool	__cdecl	process_file(FTS *fts, FTSENT *ent)
process_file	proc near		; CODE XREF: process_files+88p

ent		= dword	ptr -60h
fts		= dword	ptr -5Ch
ok		= byte ptr -53h
chmod_succeeded	= byte ptr -52h
changed		= byte ptr -51h
old_mode	= dword	ptr -50h
new_mode	= dword	ptr -4Ch
file_full_name	= dword	ptr -48h
file		= dword	ptr -44h
file_stats	= dword	ptr -40h
ch_status	= dword	ptr -3Ch
naively_expected_mode= dword ptr -38h
new_perms	= byte ptr -34h
naively_expected_perms=	byte ptr -28h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	eax, [ebp+arg_0]
		mov	[ebp+fts], eax
		mov	eax, [ebp+arg_4]
		mov	[ebp+ent], eax
		mov	eax, large gs:14h
		mov	[ebp+var_1C], eax
		xor	eax, eax
		mov	eax, [ebp+ent]
		mov	eax, [eax+18h]
		mov	[ebp+file_full_name], eax
		mov	eax, [ebp+ent]
		mov	eax, [eax+14h]
		mov	[ebp+file], eax
		mov	eax, [ebp+ent]
		add	eax, 40h
		mov	[ebp+file_stats], eax
		mov	[ebp+ok], 1
		mov	[ebp+chmod_succeeded], 0
		mov	eax, [ebp+ent]
		movzx	eax, word ptr [eax+38h]
		movzx	eax, ax
		cmp	eax, 0Dh	; switch 14 cases
		ja	loc_8000508	; jumptable 0800034E default case
		mov	eax, ds:off_80015C8[eax*4]
		jmp	eax		; switch jump
; ---------------------------------------------------------------------------

loc_8000350:				; CODE XREF: process_file+5Dj
					; DATA XREF: .rodata:off_80015C8o
		mov	eax, 1		; jumptable 0800034E case 6
		jmp	loc_800089C
; ---------------------------------------------------------------------------

loc_800035A:				; CODE XREF: process_file+5Dj
					; DATA XREF: .rodata:off_80015C8o
		mov	eax, [ebp+ent]	; jumptable 0800034E case 10
		mov	eax, [eax+2Ch]
		test	eax, eax
		jnz	short loc_8000395
		mov	eax, [ebp+ent]
		mov	eax, [eax+0Ch]
		test	eax, eax
		jnz	short loc_8000395
		mov	eax, [ebp+ent]
		mov	dword ptr [eax+0Ch], 1
		sub	esp, 4
		push	1		; int
		push	[ebp+ent]	; FTSENT *
		push	[ebp+fts]	; FTS *
		call	fts_set
		add	esp, 10h
		mov	eax, 1
		jmp	loc_800089C
; ---------------------------------------------------------------------------

loc_8000395:				; CODE XREF: process_file+71j
					; process_file+7Bj
		movzx	eax, ds:force_silent
		xor	eax, 1
		test	al, al
		jz	short loc_80003D8
		sub	esp, 0Ch
		push	[ebp+file_full_name]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aCannotAccessS ;	"cannot	access %s"
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, [ebp+ent]
		mov	eax, [eax+1Ch]
		push	ebx
		push	edx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h

loc_80003D8:				; CODE XREF: process_file+B0j
		mov	[ebp+ok], 0
		jmp	loc_800050C
; ---------------------------------------------------------------------------

loc_80003E1:				; CODE XREF: process_file+5Dj
					; DATA XREF: .rodata:off_80015C8o
		movzx	eax, ds:force_silent ; jumptable 0800034E case 7
		xor	eax, 1
		test	al, al
		jz	short loc_8000424
		sub	esp, 0Ch
		push	[ebp+file_full_name]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aS	; "%s"
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, [ebp+ent]
		mov	eax, [eax+1Ch]
		push	ebx
		push	edx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h

loc_8000424:				; CODE XREF: process_file+FCj
		mov	[ebp+ok], 0
		jmp	loc_800050C
; ---------------------------------------------------------------------------

loc_800042D:				; CODE XREF: process_file+5Dj
					; DATA XREF: .rodata:off_80015C8o
		movzx	eax, ds:force_silent ; jumptable 0800034E case 4
		xor	eax, 1
		test	al, al
		jz	short loc_8000470
		sub	esp, 0Ch
		push	[ebp+file_full_name]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aCannotReadDire ; "cannot read directory	%s"
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, [ebp+ent]
		mov	eax, [eax+1Ch]
		push	ebx
		push	edx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h

loc_8000470:				; CODE XREF: process_file+148j
		mov	[ebp+ok], 0
		jmp	loc_800050C
; ---------------------------------------------------------------------------

loc_8000479:				; CODE XREF: process_file+5Dj
					; DATA XREF: .rodata:off_80015C8o
		movzx	eax, ds:force_silent ; jumptable 0800034E case 13
		xor	eax, 1
		test	al, al
		jz	short loc_80004B5
		sub	esp, 0Ch
		push	[ebp+file_full_name]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aCannotOperateO ; "cannot operate on dangling symlink %s"
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h

loc_80004B5:				; CODE XREF: process_file+194j
		mov	[ebp+ok], 0
		jmp	short loc_800050C
; ---------------------------------------------------------------------------

loc_80004BB:				; CODE XREF: process_file+5Dj
					; DATA XREF: .rodata:off_80015C8o
		sub	esp, 8		; jumptable 0800034E case 2
		push	[ebp+ent]
		push	[ebp+fts]
		call	cycle_warning_required
		add	esp, 10h
		test	al, al
		jz	short loc_800050B
		sub	esp, 0Ch
		push	[ebp+file_full_name]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aWarningCircula ; "WARNING: Circular directory structure.\"...
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	eax, 0
		jmp	loc_800089C
; ---------------------------------------------------------------------------

loc_8000508:				; CODE XREF: process_file+50j
					; process_file+5Dj
					; DATA XREF: ...
		nop			; jumptable 0800034E default case
		jmp	short loc_800050C
; ---------------------------------------------------------------------------

loc_800050B:				; CODE XREF: process_file+1DDj
		nop

loc_800050C:				; CODE XREF: process_file+EBj
					; process_file+137j ...
		cmp	[ebp+ok], 0
		jz	loc_800064F
		mov	eax, ds:root_dev_ino
		test	eax, eax
		jz	loc_800064F
		mov	eax, [ebp+file_stats]
		mov	ecx, [eax+58h]
		mov	ebx, [eax+5Ch]
		mov	eax, ds:root_dev_ino
		mov	edx, [eax+4]
		mov	eax, [eax]
		mov	esi, ebx
		xor	esi, edx
		xor	eax, ecx
		or	eax, esi
		test	eax, eax
		jnz	loc_800064F
		mov	eax, [ebp+file_stats]
		mov	ecx, [eax]
		mov	ebx, [eax+4]
		mov	eax, ds:root_dev_ino
		mov	edx, [eax+0Ch]
		mov	eax, [eax+8]
		mov	esi, ebx
		xor	esi, edx
		xor	eax, ecx
		or	eax, esi
		test	eax, eax
		jnz	loc_800064F
		sub	esp, 8
		push	offset asc_80014EA ; "/"
		push	[ebp+file_full_name] ; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		jnz	short loc_80005B0
		sub	esp, 0Ch
		push	[ebp+file_full_name]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aItIsDangerousT ; "it is	dangerous to operate recursively "...
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		jmp	short loc_80005F8
; ---------------------------------------------------------------------------

loc_80005B0:				; CODE XREF: process_file+28Dj
		sub	esp, 8
		push	offset asc_80014EA ; "/"
		push	1
		call	quote_n
		add	esp, 10h
		mov	esi, eax
		sub	esp, 8
		push	[ebp+file_full_name]
		push	0
		call	quote_n
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aItIsDangerou_0 ; "it is	dangerous to operate recursively "...
		call	gettext
		add	esp, 10h
		sub	esp, 0Ch
		push	esi
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 20h

loc_80005F8:				; CODE XREF: process_file+2BDj
		sub	esp, 0Ch
		push	offset aUseNoPreserveR ; "use --no-preserve-root to override this"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		sub	esp, 4
		push	4		; int
		push	[ebp+ent]	; FTSENT *
		push	[ebp+fts]	; FTS *
		call	fts_set
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+fts]	; FTS *
		call	fts_read
		add	esp, 10h
		sub	esp, 0Ch
		push	eax		; p
		call	ignore_ptr
		add	esp, 10h
		mov	eax, 0
		jmp	loc_800089C
; ---------------------------------------------------------------------------

loc_800064F:				; CODE XREF: process_file+21Fj
					; process_file+22Cj ...
		cmp	[ebp+ok], 0
		jz	loc_8000710
		mov	eax, [ebp+file_stats]
		mov	eax, [eax+10h]
		mov	[ebp+old_mode],	eax
		mov	ecx, ds:change
		mov	edx, ds:umask_value
		mov	eax, [ebp+old_mode]
		and	eax, 0F000h
		cmp	eax, 4000h
		setz	al
		movzx	eax, al
		sub	esp, 0Ch
		push	0
		push	ecx
		push	edx
		push	eax
		push	[ebp+old_mode]
		call	mode_adjust
		add	esp, 20h
		mov	[ebp+new_mode],	eax
		mov	eax, [ebp+old_mode]
		and	eax, 0F000h
		cmp	eax, 0A000h
		jz	short loc_8000710
		mov	eax, [ebp+fts]
		mov	eax, [eax+1Ch]
		sub	esp, 4
		push	[ebp+new_mode]	; mode
		push	[ebp+file]	; file
		push	eax		; fd
		call	chmodat
		add	esp, 10h
		test	eax, eax
		jnz	short loc_80006C8
		mov	[ebp+chmod_succeeded], 1
		jmp	short loc_8000710
; ---------------------------------------------------------------------------

loc_80006C8:				; CODE XREF: process_file+3CFj
		movzx	eax, ds:force_silent
		xor	eax, 1
		test	al, al
		jz	short loc_800070C
		sub	esp, 0Ch
		push	[ebp+file_full_name]
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aChangingPermis ; "changing permissions of %s"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		push	esi
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h

loc_800070C:				; CODE XREF: process_file+3E3j
		mov	[ebp+ok], 0

loc_8000710:				; CODE XREF: process_file+362j
					; process_file+3B3j ...
		mov	eax, verbosity
		cmp	eax, 2
		jz	loc_80007B0
		cmp	[ebp+chmod_succeeded], 0
		jz	short loc_8000743
		sub	esp, 4
		push	[ebp+new_mode]	; new_mode
		push	[ebp+old_mode]	; old_mode
		push	[ebp+file]	; file
		call	mode_changed
		add	esp, 10h
		test	al, al
		jz	short loc_8000743
		mov	eax, 1
		jmp	short loc_8000748
; ---------------------------------------------------------------------------

loc_8000743:				; CODE XREF: process_file+431j
					; process_file+449j
		mov	eax, 0

loc_8000748:				; CODE XREF: process_file+450j
		mov	[ebp+changed], al
		and	[ebp+changed], 1
		cmp	[ebp+changed], 0
		jnz	short loc_800075E
		mov	eax, verbosity
		test	eax, eax
		jnz	short loc_80007B0

loc_800075E:				; CODE XREF: process_file+462j
		movzx	eax, [ebp+ok]
		xor	eax, 1
		test	al, al
		jz	short loc_8000770
		mov	eax, 2
		jmp	short loc_8000799
; ---------------------------------------------------------------------------

loc_8000770:				; CODE XREF: process_file+476j
		movzx	eax, [ebp+chmod_succeeded]
		xor	eax, 1
		test	al, al
		jz	short loc_8000782
		mov	eax, 0
		jmp	short loc_8000799
; ---------------------------------------------------------------------------

loc_8000782:				; CODE XREF: process_file+488j
		movzx	eax, [ebp+changed]
		xor	eax, 1
		test	al, al
		jz	short loc_8000794
		mov	eax, 3
		jmp	short loc_8000799
; ---------------------------------------------------------------------------

loc_8000794:				; CODE XREF: process_file+49Aj
		mov	eax, 1

loc_8000799:				; CODE XREF: process_file+47Dj
					; process_file+48Fj ...
		mov	[ebp+ch_status], eax
		sub	esp, 4
		push	[ebp+ch_status]	; changed
		push	[ebp+new_mode]	; mode
		push	[ebp+file_full_name] ; file
		call	describe_change
		add	esp, 10h

loc_80007B0:				; CODE XREF: process_file+427j
					; process_file+46Bj
		cmp	[ebp+chmod_succeeded], 0
		jz	loc_8000877
		movzx	eax, ds:diagnose_surprises
		test	al, al
		jz	loc_8000877
		mov	edx, ds:change
		mov	eax, [ebp+old_mode]
		and	eax, 0F000h
		cmp	eax, 4000h
		setz	al
		movzx	eax, al
		sub	esp, 0Ch
		push	0
		push	edx
		push	0
		push	eax
		push	[ebp+old_mode]
		call	mode_adjust
		add	esp, 20h
		mov	[ebp+naively_expected_mode], eax
		mov	eax, [ebp+naively_expected_mode]
		not	eax
		and	eax, [ebp+new_mode]
		test	eax, eax
		jz	short loc_8000877
		sub	esp, 8
		lea	eax, [ebp+new_perms]
		push	eax
		push	[ebp+new_mode]
		call	strmode
		add	esp, 10h
		sub	esp, 8
		lea	eax, [ebp+naively_expected_perms]
		push	eax
		push	[ebp+naively_expected_mode]
		call	strmode
		add	esp, 10h
		mov	[ebp+naively_expected_perms+0Ah], 0
		movzx	eax, [ebp+naively_expected_perms+0Ah]
		mov	[ebp+new_perms+0Ah], al
		lea	esi, [ebp+naively_expected_perms]
		add	esi, 1
		lea	ebx, [ebp+new_perms]
		add	ebx, 1
		sub	esp, 0Ch
		push	[ebp+file_full_name]
		call	quotearg_colon
		add	esp, 10h
		mov	edi, eax
		sub	esp, 0Ch
		push	offset aSNewPermission ; "%s: new permissions are %s, not %s"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	esi
		push	ebx
		push	edi
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 20h
		mov	[ebp+ok], 0

loc_8000877:				; CODE XREF: process_file+4C3j
					; process_file+4D2j ...
		movzx	eax, ds:recurse
		xor	eax, 1
		test	al, al
		jz	short loc_8000898
		sub	esp, 4
		push	4		; int
		push	[ebp+ent]	; FTSENT *
		push	[ebp+fts]	; FTS *
		call	fts_set
		add	esp, 10h

loc_8000898:				; CODE XREF: process_file+592j
		movzx	eax, [ebp+ok]

loc_800089C:				; CODE XREF: process_file+64j
					; process_file+9Fj ...
		mov	edi, [ebp+var_1C]
		xor	edi, large gs:14h
		jz	short loc_80008AD
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_80008AD:				; CODE XREF: process_file+5B5j
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
process_file	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; _Bool	__cdecl	process_files(char **files, int	bit_flags)
process_files	proc near		; CODE XREF: main+552p

ok		= byte ptr -11h
fts		= dword	ptr -10h
ent		= dword	ptr -0Ch
var_4		= dword	ptr -4
files		= dword	ptr  8
bit_flags	= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	[ebp+ok], 1
		sub	esp, 4
		push	0
		push	[ebp+bit_flags]
		push	[ebp+files]
		call	xfts_open
		add	esp, 10h
		mov	[ebp+fts], eax

loc_80008D6:				; CODE XREF: process_files+A1j
		sub	esp, 0Ch
		push	[ebp+fts]	; FTS *
		call	fts_read
		add	esp, 10h
		mov	[ebp+ent], eax
		cmp	[ebp+ent], 0
		jnz	short loc_8000934
		call	__errno_location
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_800095B
		movzx	eax, ds:force_silent
		xor	eax, 1
		test	al, al
		jz	short loc_800092E
		sub	esp, 0Ch
		push	offset aFts_readFailed ; "fts_read failed"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		sub	esp, 4
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h

loc_800092E:				; CODE XREF: process_files+4Fj
		mov	[ebp+ok], 0
		jmp	short loc_800095B
; ---------------------------------------------------------------------------

loc_8000934:				; CODE XREF: process_files+36j
		sub	esp, 8
		push	[ebp+ent]	; ent
		push	[ebp+fts]	; fts
		call	process_file
		add	esp, 10h
		movzx	edx, [ebp+ok]
		movzx	eax, al
		and	eax, edx
		test	eax, eax
		setnz	al
		mov	[ebp+ok], al
		jmp	loc_80008D6
; ---------------------------------------------------------------------------

loc_800095B:				; CODE XREF: process_files+41j
					; process_files+7Dj
		nop
		sub	esp, 0Ch
		push	[ebp+fts]	; FTS *
		call	fts_close
		add	esp, 10h
		test	eax, eax
		jz	short loc_800099A
		sub	esp, 0Ch
		push	offset aFts_closeFaile ; "fts_close failed"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		sub	esp, 4
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	[ebp+ok], 0

loc_800099A:				; CODE XREF: process_files+B7j
		movzx	eax, [ebp+ok]
		mov	ebx, [ebp+var_4]
		leave
		retn
process_files	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; void __cdecl usage(int status)
		public usage
usage		proc near		; CODE XREF: main+296p	main+2D8p ...

status		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0Ch
		cmp	[ebp+status], 0
		jz	short loc_80009E2
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, ds:stderr
		sub	esp, 4
		push	ebx
		push	edx		; format
		push	eax		; stream
		call	fprintf
		add	esp, 10h
		jmp	loc_8000AE7
; ---------------------------------------------------------------------------

loc_80009E2:				; CODE XREF: usage+Dj
		mov	edi, ds:program_name
		mov	esi, ds:program_name
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aUsageSOption__ ; "Usage: %s [OPTION]...	MODE[,MODE]... FI"...
		call	gettext
		add	esp, 10h
		push	edi
		push	esi
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aChangeTheModeO ; "Change the mode of each FILE to MODE.\n"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aNoPreserveRoot ; "	--no-preserve-root  do not treat "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aFSilentQuietSu ; "  -f,	--silent, --quiet   suppress most"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aHelpDisplayThi ; "	--help	   display this	help and "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aVersionOutputV ; "	--version  output version informa"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aEachModeIsOfTh ; "\nEach MODE is of the	form `[ugoa]*([-+"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		call	emit_ancillary_info

loc_8000AE7:				; CODE XREF: usage+3Aj
		sub	esp, 0Ch
		push	[ebp+status]	; status
		call	exit
usage		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public main
main		proc near

argv		= dword	ptr -4Ch
preserve_root	= byte ptr -42h
ok		= byte ptr -41h
mode_alloc	= dword	ptr -40h
mode		= dword	ptr -3Ch
mode_len	= dword	ptr -38h
reference_file	= dword	ptr -34h
c		= dword	ptr -30h
arg		= dword	ptr -2Ch
arg_len		= dword	ptr -28h
mode_comma_len	= dword	ptr -24h
new_mode_len	= dword	ptr -20h
var_1C		= dword	ptr -1Ch
argc		= dword	ptr  0Ch
envp		= dword	ptr  14h

		lea	ecx, [esp+4]
		and	esp, 0FFFFFFF0h
		push	dword ptr [ecx-4]
		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		push	ecx
		sub	esp, 4Ch
		mov	ebx, ecx
		mov	eax, [ebx+4]
		mov	[ebp+argv], eax
		mov	eax, large gs:14h
		mov	[ebp+var_1C], eax
		xor	eax, eax
		mov	[ebp+mode], 0
		mov	[ebp+mode_len],	0
		mov	[ebp+mode_alloc], 0
		mov	[ebp+preserve_root], 0
		mov	[ebp+reference_file], 0
		mov	eax, [ebp+argv]
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	set_program_name
		add	esp, 10h
		sub	esp, 8
		push	offset locale	; locale
		push	6		; category
		call	setlocale
		add	esp, 10h
		sub	esp, 8
		push	offset dirname	; "/usr/local/share/locale"
		push	offset domainname ; "coreutils"
		call	bindtextdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset domainname ; "coreutils"
		call	textdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset close_stdout ; func
		call	atexit
		add	esp, 10h
		mov	ds:diagnose_surprises, 0
		movzx	eax, ds:diagnose_surprises
		mov	ds:force_silent, al
		movzx	eax, ds:force_silent
		mov	ds:recurse, al
		jmp	loc_8000DCF
; ---------------------------------------------------------------------------

loc_8000BB4:				; CODE XREF: main+300j
		mov	eax, [ebp+c]
		cmp	eax, 66h
		jz	loc_8000D6E
		cmp	eax, 66h
		jg	short loc_8000C35
		cmp	eax, 3Dh
		jz	loc_8000C9A
		cmp	eax, 3Dh
		jg	short loc_8000C06
		cmp	eax, 0FFFFFF7Eh
		jz	loc_8000D83
		cmp	eax, 0FFFFFF7Eh
		jg	short loc_8000BF5
		cmp	eax, 0FFFFFF7Dh
		jz	loc_8000D8D
		jmp	loc_8000DC5
; ---------------------------------------------------------------------------

loc_8000BF5:				; CODE XREF: main+F1j
		sub	eax, 2Bh
		cmp	eax, 1
		ja	loc_8000DC5
		jmp	loc_8000C9A
; ---------------------------------------------------------------------------

loc_8000C06:				; CODE XREF: main+DFj
		cmp	eax, 58h
		jz	loc_8000C9A
		cmp	eax, 58h
		jg	short loc_8000C22
		cmp	eax, 52h
		jz	loc_8000D59
		jmp	loc_8000DC5
; ---------------------------------------------------------------------------

loc_8000C22:				; CODE XREF: main+120j
		cmp	eax, 61h
		jz	short loc_8000C9A
		cmp	eax, 63h
		jz	loc_8000D62
		jmp	loc_8000DC5
; ---------------------------------------------------------------------------

loc_8000C35:				; CODE XREF: main+D1j
		cmp	eax, 76h
		jz	loc_8000D77
		cmp	eax, 76h
		jg	short loc_8000C62
		cmp	eax, 6Fh
		jz	short loc_8000C9A
		cmp	eax, 6Fh
		jg	short loc_8000C57
		cmp	eax, 67h
		jz	short loc_8000C9A
		jmp	loc_8000DC5
; ---------------------------------------------------------------------------

loc_8000C57:				; CODE XREF: main+159j
		cmp	eax, 72h
		jl	loc_8000DC5
		jmp	short loc_8000C9A
; ---------------------------------------------------------------------------

loc_8000C62:				; CODE XREF: main+14Fj
		cmp	eax, 80h
		jz	loc_8000D3D
		cmp	eax, 80h
		jg	short loc_8000C7F
		cmp	eax, 78h
		jg	loc_8000DC5
		jmp	short loc_8000C9A
; ---------------------------------------------------------------------------

loc_8000C7F:				; CODE XREF: main+180j
		cmp	eax, 81h
		jz	loc_8000D46
		cmp	eax, 82h
		jz	loc_8000D4F
		jmp	loc_8000DC5
; ---------------------------------------------------------------------------

loc_8000C9A:				; CODE XREF: main+D6j main+10Fj ...
		mov	eax, ds:optind
		add	eax, 3FFFFFFFh
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		mov	eax, [eax]
		mov	[ebp+arg], eax
		sub	esp, 0Ch
		push	[ebp+arg]	; s
		call	strlen
		add	esp, 10h
		mov	[ebp+arg_len], eax
		cmp	[ebp+mode_len],	0
		setnz	al
		movzx	edx, al
		mov	eax, [ebp+mode_len]
		add	eax, edx
		mov	[ebp+mode_comma_len], eax
		mov	edx, [ebp+mode_comma_len]
		mov	eax, [ebp+arg_len]
		add	eax, edx
		mov	[ebp+new_mode_len], eax
		mov	eax, [ebp+mode_alloc]
		cmp	eax, [ebp+new_mode_len]
		ja	short loc_8000D09
		mov	eax, [ebp+new_mode_len]
		add	eax, 1
		mov	[ebp+mode_alloc], eax
		sub	esp, 8
		lea	eax, [ebp+mode_alloc]
		push	eax
		push	[ebp+mode]
		call	x2realloc
		add	esp, 10h
		mov	[ebp+mode], eax

loc_8000D09:				; CODE XREF: main+1F7j
		mov	edx, [ebp+mode]
		mov	eax, [ebp+mode_len]
		add	eax, edx
		mov	byte ptr [eax],	2Ch
		mov	edx, [ebp+mode]
		mov	eax, [ebp+mode_comma_len]
		add	eax, edx
		sub	esp, 8
		push	[ebp+arg]	; src
		push	eax		; dest
		call	strcpy
		add	esp, 10h
		mov	eax, [ebp+new_mode_len]
		mov	[ebp+mode_len],	eax
		mov	ds:diagnose_surprises, 1
		jmp	loc_8000DCF
; ---------------------------------------------------------------------------

loc_8000D3D:				; CODE XREF: main+175j
		mov	[ebp+preserve_root], 0
		jmp	loc_8000DCF
; ---------------------------------------------------------------------------

loc_8000D46:				; CODE XREF: main+192j
		mov	[ebp+preserve_root], 1
		jmp	loc_8000DCF
; ---------------------------------------------------------------------------

loc_8000D4F:				; CODE XREF: main+19Dj
		mov	eax, ds:optarg
		mov	[ebp+reference_file], eax
		jmp	short loc_8000DCF
; ---------------------------------------------------------------------------

loc_8000D59:				; CODE XREF: main+125j
		mov	ds:recurse, 1
		jmp	short loc_8000DCF
; ---------------------------------------------------------------------------

loc_8000D62:				; CODE XREF: main+138j
		mov	verbosity, 1
		jmp	short loc_8000DCF
; ---------------------------------------------------------------------------

loc_8000D6E:				; CODE XREF: main+C8j
		mov	ds:force_silent, 1
		jmp	short loc_8000DCF
; ---------------------------------------------------------------------------

loc_8000D77:				; CODE XREF: main+146j
		mov	verbosity, 0
		jmp	short loc_8000DCF
; ---------------------------------------------------------------------------

loc_8000D83:				; CODE XREF: main+E6j
		sub	esp, 0Ch
		push	0		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8000D8D:				; CODE XREF: main+F8j
		mov	edx, ds:Version
		mov	eax, ds:stdout
		sub	esp, 4
		push	0
		push	offset aJimMeyering ; "Jim Meyering"
		push	offset aDavidMackenzie ; "David	MacKenzie"
		push	edx
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	offset aChmod	; "chmod"
		push	eax
		call	version_etc
		add	esp, 20h
		sub	esp, 0Ch
		push	0		; status
		call	exit
; ---------------------------------------------------------------------------

loc_8000DC5:				; CODE XREF: main+FEj main+109j ...
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8000DCF:				; CODE XREF: main+BDj main+246j ...
		sub	esp, 0Ch
		push	0		; longind
		push	offset long_options ; longopts
		push	offset shortopts ; "Rcfvr::w::x::X::s::t::u::g::o::a::,::+:"...
		push	[ebp+argv]	; argv
		push	dword ptr [ebx]	; argc
		call	getopt_long
		add	esp, 20h
		mov	[ebp+c], eax
		cmp	[ebp+c], 0FFFFFFFFh
		jnz	loc_8000BB4
		cmp	[ebp+reference_file], 0
		jz	short loc_8000E2E
		cmp	[ebp+mode], 0
		jz	short loc_8000E53
		sub	esp, 0Ch
		push	offset aCannotCombineM ; "cannot combine mode and --reference opt"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8000E2E:				; CODE XREF: main+30Aj
		cmp	[ebp+mode], 0
		jnz	short loc_8000E53
		mov	eax, ds:optind
		lea	edx, [eax+1]
		mov	ds:optind, edx
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		mov	eax, [eax]
		mov	[ebp+mode], eax

loc_8000E53:				; CODE XREF: main+310j	main+340j
		mov	eax, ds:optind
		cmp	eax, [ebx]
		jl	loc_8000EF0
		cmp	[ebp+mode], 0
		jz	short loc_8000E83
		mov	eax, ds:optind
		add	eax, 3FFFFFFFh
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		mov	eax, [eax]
		cmp	eax, [ebp+mode]
		jz	short loc_8000EA5

loc_8000E83:				; CODE XREF: main+372j
		sub	esp, 0Ch
		push	offset aMissingOperand ; "missing operand"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		jmp	short loc_8000EE6
; ---------------------------------------------------------------------------

loc_8000EA5:				; CODE XREF: main+38Fj
		mov	eax, [ebx]
		add	eax, 3FFFFFFFh
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aMissingOpera_0 ; "missing operand after	%s"
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h

loc_8000EE6:				; CODE XREF: main+3B1j
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8000EF0:				; CODE XREF: main+368j
		cmp	[ebp+reference_file], 0
		jz	short loc_8000F4E
		sub	esp, 0Ch
		push	[ebp+reference_file]
		call	mode_create_from_ref
		add	esp, 10h
		mov	ds:change, eax
		mov	eax, ds:change
		test	eax, eax
		jnz	loc_8000FB4
		sub	esp, 0Ch
		push	[ebp+reference_file]
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aFailedToGetAtt ; "failed to get	attributes of %s"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		push	esi
		push	ebx		; format
		push	eax		; errnum
		push	1		; status
		call	error
		add	esp, 10h
		jmp	short loc_8000FB4
; ---------------------------------------------------------------------------

loc_8000F4E:				; CODE XREF: main+402j
		sub	esp, 0Ch
		push	[ebp+mode]
		call	mode_compile
		add	esp, 10h
		mov	ds:change, eax
		mov	eax, ds:change
		test	eax, eax
		jnz	short loc_8000FA2
		sub	esp, 0Ch
		push	[ebp+mode]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aInvalidModeS ; "invalid	mode: %s"
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8000FA2:				; CODE XREF: main+476j
		sub	esp, 0Ch
		push	0		; mask
		call	umask
		add	esp, 10h
		mov	ds:umask_value,	eax

loc_8000FB4:				; CODE XREF: main+41Ej	main+45Aj
		movzx	eax, ds:recurse
		test	al, al
		jz	short loc_800101D
		cmp	[ebp+preserve_root], 0
		jz	short loc_800101D
		sub	esp, 0Ch
		push	offset dev_ino_buf_5433
		call	get_root_dev_ino
		add	esp, 10h
		mov	ds:root_dev_ino, eax
		mov	eax, ds:root_dev_ino
		test	eax, eax
		jnz	short loc_8001029
		sub	esp, 0Ch
		push	offset asc_80014EA ; "/"
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aFailedToGetAtt ; "failed to get	attributes of %s"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		push	esi
		push	ebx		; format
		push	eax		; errnum
		push	1		; status
		call	error
		add	esp, 10h
		jmp	short loc_8001029
; ---------------------------------------------------------------------------

loc_800101D:				; CODE XREF: main+4CBj	main+4D1j
		mov	ds:root_dev_ino, 0
		jmp	short loc_800102A
; ---------------------------------------------------------------------------

loc_8001029:				; CODE XREF: main+4EFj	main+529j
		nop

loc_800102A:				; CODE XREF: main+535j
		mov	eax, ds:optind
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		sub	esp, 8
		push	411h		; bit_flags
		push	eax		; files
		call	process_files
		add	esp, 10h
		mov	[ebp+ok], al
		cmp	[ebp+ok], 0
		jz	short loc_800105C
		mov	eax, 0
		jmp	short loc_8001061
; ---------------------------------------------------------------------------

loc_800105C:				; CODE XREF: main+561j
		mov	eax, 1

loc_8001061:				; CODE XREF: main+568j
		sub	esp, 0Ch
		push	eax		; status

loc_8001065:				; DATA XREF: .eh_frame:08001A8Co
					; .eh_frame:08001AACo ...
		call	exit
main		endp

_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 800106Ch
; Verbosity verbosity
verbosity	dd V_off		; DATA XREF: process_file:loc_8000710r
					; process_file+464r ...
_data		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
		assume cs:_bss
		;org 8001070h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
; mode_change *change
change		dd ?			; DATA XREF: process_file+371r
					; process_file+4D8r ...
; mode_t umask_value
umask_value	dd ?			; DATA XREF: process_file+377r
					; main+4BDw
; _Bool	recurse
recurse		db ?			; DATA XREF: process_file:loc_8000877r
					; main+B8w ...
; _Bool	force_silent
force_silent	db ?			; DATA XREF: mode_changed+3Br
					; process_file:loc_8000395r ...
; _Bool	diagnose_surprises
diagnose_surprises db ?			; DATA XREF: process_file+4C9r
					; main+9Ew ...
		align 4
; dev_ino *root_dev_ino
root_dev_ino	dd ?			; DATA XREF: process_file+225r
					; process_file+23Br ...
; Function-local static	variable
; dev_ino dev_ino_buf_5433
dev_ino_buf_5433 dev_ino <?>		; DATA XREF: main+4D6o
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment '32byte' can not be represented in assembly
_rodata		segment	para public 'CONST' use32
		assume cs:_rodata
		;org 80010A0h
; char msgid[]
msgid		db 0Ah			; DATA XREF: emit_ancillary_info+1Do
		db 'Report %s bugs to %s',0Ah,0
aBugCoreutils@g	db 'bug-coreutils@gnu.org',0 ; DATA XREF: emit_ancillary_info+2Do
		align 10h
; char aSHomePageHttpW[]
aSHomePageHttpW	db '%s home page: <http://www.gnu.org/software/%s/>',0Ah,0
					; DATA XREF: emit_ancillary_info+3Fo
; char domainname[]
domainname	db 'coreutils',0        ; DATA XREF: emit_ancillary_info+4Fo
					; main+71o ...
aGnuCoreutils	db 'GNU coreutils',0    ; DATA XREF: emit_ancillary_info+54o
					; main+2B6o
		align 4
; char aGeneralHelpUsi[]
aGeneralHelpUsi	db 'General help using GNU software: <http://www.gnu.org/gethelp/>',0Ah,0
					; DATA XREF: emit_ancillary_info+6Bo
; char s2[]
s2		db 'en_',0              ; DATA XREF: emit_ancillary_info+A2o
; char aReportSTransla[]
aReportSTransla	db 'Report %s translation bugs to <http://translationproject.org/team'
					; DATA XREF: emit_ancillary_info+CCo
		db '/>',0Ah,0
		align 4
; char aForCompleteDoc[]
aForCompleteDoc	db 'For complete documentation, run: info coreutils ',27h,'%s invocation'
					; DATA XREF: emit_ancillary_info+FCo
		db 27h,0Ah,0
aChanges	db 'changes',0          ; DATA XREF: .rodata:long_optionso
aRecursive	db 'recursive',0        ; DATA XREF: .rodata:long_optionso
aNoPreserveRo_0	db 'no-preserve-root',0 ; DATA XREF: .rodata:long_optionso
aPreserveRoot	db 'preserve-root',0    ; DATA XREF: .rodata:long_optionso
aQuiet		db 'quiet',0            ; DATA XREF: .rodata:long_optionso
aReference	db 'reference',0        ; DATA XREF: .rodata:long_optionso
aSilent		db 'silent',0           ; DATA XREF: .rodata:long_optionso
aVerbose	db 'verbose',0          ; DATA XREF: .rodata:long_optionso
aHelp		db 'help',0             ; DATA XREF: .rodata:long_optionso
aVersion	db 'version',0          ; DATA XREF: .rodata:long_optionso
		align 20h
; const	option long_options[11]
long_options	option <offset aChanges, 0, 0, 63h> ; DATA XREF: main+2E2o
		option <offset aRecursive, 0, 0, 52h> ;	"changes"
		option <offset aNoPreserveRo_0,	0, 0, 80h>
		option <offset aPreserveRoot, 0, 0, 81h>
		option <offset aQuiet, 0, 0, 66h>
		option <offset aReference, 1, 0, 82h>
		option <offset aSilent,	0, 0, 66h>
		option <offset aVerbose, 0, 0, 76h>
		option <offset aHelp, 0, 0, 0FFFFFF7Eh>
		option <offset aVersion, 0, 0, 0FFFFFF7Dh>
		option	<0>
; char aGettingNewAttr[]
aGettingNewAttr	db 'getting new attributes of %s',0 ; DATA XREF: mode_changed+5Co
		align 10h
; char aNeitherSymboli[]
aNeitherSymboli	db 'neither symbolic link %s nor referent has been changed',0Ah,0
					; DATA XREF: describe_change+31o
; char aModeOfSChanged[]
aModeOfSChanged	db 'mode of %s changed to %04lo (%s)',0Ah,0 ; DATA XREF: describe_change+7Bo
		align 4
; char aFailedToChange[]
aFailedToChange	db 'failed to change mode of %s to %04lo (%s)',0Ah,0
					; DATA XREF: describe_change+90o
		align 4
; char aModeOfSRetaine[]
aModeOfSRetaine	db 'mode of %s retained as %04lo (%s)',0Ah,0
					; DATA XREF: describe_change+A5o
; char aCannotAccessS[]
aCannotAccessS	db 'cannot access %s',0 ; DATA XREF: process_file+C5o
; char aS[]
aS		db '%s',0               ; DATA XREF: process_file+111o
; char aCannotReadDire[]
aCannotReadDire	db 'cannot read directory %s',0 ; DATA XREF: process_file+15Do
; char aCannotOperateO[]
aCannotOperateO	db 'cannot operate on dangling symlink %s',0 ; DATA XREF: process_file+1A9o
		align 10h
; char aWarningCircula[]
aWarningCircula	db 'WARNING: Circular directory structure.',0Ah
					; DATA XREF: process_file+1F2o
		db 'This almost certainly means that you have a corrupted file system'
		db '.',0Ah
		db 'NOTIFY YOUR SYSTEM MANAGER.',0Ah
		db 'The following directory is part of the cycle:',0Ah
		db '  %s',0Ah,0
; char asc_80014EA[]
asc_80014EA	db '/',0                ; DATA XREF: process_file+27Bo
					; process_file+2C2o ...
; char aItIsDangerousT[]
aItIsDangerousT	db 'it is dangerous to operate recursively on %s',0
					; DATA XREF: process_file+2A2o
		align 4
; char aItIsDangerou_0[]
aItIsDangerou_0	db 'it is dangerous to operate recursively on %s (same as %s)',0
					; DATA XREF: process_file+2E8o
		align 4
; char aUseNoPreserveR[]
aUseNoPreserveR	db 'use --no-preserve-root to override this failsafe',0
					; DATA XREF: process_file+30Ao
; char aChangingPermis[]
aChangingPermis	db 'changing permissions of %s',0 ; DATA XREF: process_file+3F8o
; char aSNewPermission[]
aSNewPermission	db '%s: new permissions are %s, not %s',0 ; DATA XREF: process_file+562o
		align 4
off_80015C8	dd offset loc_8000508	; DATA XREF: process_file+56r
		dd offset loc_8000508	; jump table for switch	statement
		dd offset loc_80004BB
		dd offset loc_8000508
		dd offset loc_800042D
		dd offset loc_8000508
		dd offset loc_8000350
		dd offset loc_80003E1
		dd offset loc_8000508
		dd offset loc_8000508
		dd offset loc_800035A
		dd offset loc_8000508
		dd offset loc_8000508
		dd offset loc_8000479
; char aFts_readFailed[]
aFts_readFailed	db 'fts_read failed',0  ; DATA XREF: process_files+54o
; char aFts_closeFaile[]
aFts_closeFaile	db 'fts_close failed',0 ; DATA XREF: process_files+BCo
		align 4
; char aTrySHelpForMor[]
aTrySHelpForMor	db 'Try `%s --help',27h,' for more information.',0Ah,0
					; DATA XREF: usage+18o
		align 4
; char aUsageSOption__[]
aUsageSOption__	db 'Usage: %s [OPTION]... MODE[,MODE]... FILE...',0Ah ; DATA XREF: usage+54o
		db '  or:  %s [OPTION]... OCTAL-MODE FILE...',0Ah
		db '  or:  %s [OPTION]... --reference=RFILE FILE...',0Ah,0
		align 4
; char aChangeTheModeO[]
aChangeTheModeO	db 'Change the mode of each FILE to MODE.',0Ah ; DATA XREF: usage+76o
		db 0Ah
		db '  -c, --changes           like verbose but report only when a cha'
		db 'nge is made',0Ah,0
		align 4
; char aNoPreserveRoot[]
aNoPreserveRoot	db '      --no-preserve-root  do not treat `/',27h,' specially (the defa'
					; DATA XREF: usage+99o
		db 'ult)',0Ah
		db '      --preserve-root     fail to operate recursively on `/',27h,0Ah,0
		align 10h
; char aFSilentQuietSu[]
aFSilentQuietSu	db '  -f, --silent, --quiet   suppress most error messages',0Ah
					; DATA XREF: usage+BCo
		db '  -v, --verbose           output a diagnostic for every file proc'
		db 'essed',0Ah
		db '      --reference=RFILE   use RFILE',27h,'s mode instead of MODE val'
		db 'ues',0Ah
		db '  -R, --recursive         change files and directories recursivel'
		db 'y',0Ah,0
; char aHelpDisplayThi[]
aHelpDisplayThi	db '      --help     display this help and exit',0Ah,0
					; DATA XREF: usage+DFo
		align 4
; char aVersionOutputV[]
aVersionOutputV	db '      --version  output version information and exit',0Ah,0
					; DATA XREF: usage+102o
		align 4
; char aEachModeIsOfTh[]
aEachModeIsOfTh	db 0Ah			; DATA XREF: usage+125o
		db 'Each MODE is of the form `[ugoa]*([-+=]([rwxXst]*|[ugo]))+',27h,'.',0Ah
		db 0
; char locale
locale		db 0			; DATA XREF: main+5Ao
; char dirname[]
dirname		db '/usr/local/share/locale',0 ; DATA XREF: main+6Co
aJimMeyering	db 'Jim Meyering',0     ; DATA XREF: main+2ABo
aDavidMackenzie	db 'David MacKenzie',0  ; DATA XREF: main+2B0o
aChmod		db 'chmod',0            ; DATA XREF: main+2BBo
		align 4
; char shortopts[]
shortopts	db 'Rcfvr::w::x::X::s::t::u::g::o::a::,::+::=::',0 ; DATA XREF: main+2E7o
; char aCannotCombineM[]
aCannotCombineM	db 'cannot combine mode and --reference options',0 ; DATA XREF: main+315o
; char aMissingOperand[]
aMissingOperand	db 'missing operand',0  ; DATA XREF: main+394o
; char aMissingOpera_0[]
aMissingOpera_0	db 'missing operand after %s',0 ; DATA XREF: main+3D9o
		align 4
; char aFailedToGetAtt[]
aFailedToGetAtt	db 'failed to get attributes of %s',0 ; DATA XREF: main+437o
					; main+506o
; char aInvalidModeS[]
aInvalidModeS	db 'invalid mode: %s',0 ; DATA XREF: main+48Bo
_rodata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_eh_frame	segment	dword public 'CONST' use32
		assume cs:_eh_frame
		;org 8001A6Ch
		dd 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 2	dup(1Ch)
		dd offset loc_8001065-8002AF1h
		dd 1Bh,	80E4100h, 0D420285h, 0CC55705h,	404h, 20h, 3Ch
		dd offset loc_8001065-8002AF6h
		dd 11Ch, 80E4100h, 0D420285h, 3834405h,	0C5011403h, 4040CC3h
		dd 1Ch,	60h
		dd offset loc_8001065-80029FEh
		dd 6, 80E4100h,	0D420285h, 0CC54205h, 404h, 24h, 80h
		dd offset loc_8001065-8002A18h
		dd 0B4h, 80E4100h, 0D420285h, 3864505h,	0A9020483h, 41C641C3h
		dd 4040CC5h, 20h, 0A8h
		dd offset loc_8001065-800298Ch
		dd 100h, 80E4100h, 0D420285h, 3834405h,	0C3C5F802h, 4040Ch
		dd 2Ch,	0CCh
		dd offset loc_8001065-80028B0h
		dd 5C4h, 80E4100h, 0D420285h, 3874605h,	5830486h, 0C305B703h
		dd 0C741C641h, 40CC541h, 4, 20h, 0FCh
		dd offset loc_8001065-800231Ch
		dd 0EEh, 80E4100h, 0D420285h, 3834405h,	0C3C5E602h, 4040Ch
		dd 1Ch,	120h
		dd offset loc_8001065-8002252h
		dd 14Fh, 80E4100h, 0D420285h, 3874605h,	5830486h, 28h
		dd 140h
		dd offset loc_8001065-8002123h
		dd 578h, 10C4400h, 5104700h, 45007502h,	7475030Fh, 2061006h
		dd 3107C75h, 787502h
_eh_frame	ends

; ===========================================================================

; Segment type:	Externs
; extern
		extrn fchmodat:near	; CODE XREF: chmodat+11p
		extrn program_name:dword ; DATA	XREF: emit_ancillary_info+7r
					; emit_ancillary_info+B6r ...
		extrn last_component:near ; CODE XREF: emit_ancillary_info+10p
					; emit_ancillary_info+BFp ...
; char *gettext(const char *msgid)
		extrn gettext:near	; CODE XREF: emit_ancillary_info+22p
					; emit_ancillary_info+44p ...
; int printf(const char	*format, ...)
		extrn printf:near	; CODE XREF: emit_ancillary_info+34p
					; emit_ancillary_info+5Ap ...
; struct _IO_FILE *stdout
		extrn stdout:dword	; DATA XREF: emit_ancillary_info+62r
					; usage+6Dr ...
		extrn fputs_unlocked:near ; CODE XREF: emit_ancillary_info+7Dp
					; usage+88p ...
; char *setlocale(int category,	const char *locale)
		extrn setlocale:near	; CODE XREF: emit_ancillary_info+8Cp
					; main+61p
; int strncmp(const char *s1, const char *s2, size_t n)
		extrn strncmp:near	; CODE XREF: emit_ancillary_info+AAp
		extrn stat64:near	; CODE XREF: mode_changed+2Fp
		extrn quote:near	; CODE XREF: mode_changed+4Fp
					; describe_change+24p ...
; int *_errno_location(void)
		extrn __errno_location:near ; CODE XREF: mode_changed+6Bp
					; process_file+407p ...
; void error(int status, int errnum, const char	*format, ...)
		extrn error:near	; CODE XREF: mode_changed+77p
					; process_file+DFp ...
		extrn __stack_chk_fail:near ; CODE XREF: mode_changed+A8p
					; describe_change+F6p ...
		extrn strmode:near	; CODE XREF: describe_change+5Ap
					; process_file+51Ep ...
; void abort(void)
		extrn abort:near	; CODE XREF: describe_change:loc_80002A8p
; int fts_set(FTS *, FTSENT *, int)
		extrn fts_set:near	; CODE XREF: process_file+92p
					; process_file+332p ...
		extrn cycle_warning_required:near ; CODE XREF: process_file+1D3p
; int strcmp(const char	*s1, const char	*s2)
		extrn strcmp:near	; CODE XREF: process_file+283p
		extrn quote_n:near	; CODE XREF: process_file+2C9p
					; process_file+2DBp
; FTSENT *fts_read(FTS *)
		extrn fts_read:near	; CODE XREF: process_file+340p
					; process_files+27p
		extrn mode_adjust:near	; CODE XREF: process_file+39Bp
					; process_file+4FDp
		extrn quotearg_colon:near ; CODE XREF: process_file+555p
		extrn xfts_open:near	; CODE XREF: process_files+16p
; int fts_close(FTS *)
		extrn fts_close:near	; CODE XREF: process_files+ADp
; struct _IO_FILE *stderr
		extrn stderr:dword	; DATA XREF: usage+27r
; int fprintf(FILE *stream, const char *format,	...)
		extrn fprintf:near	; CODE XREF: usage+32p
; void exit(int	status)
		extrn exit:near		; CODE XREF: usage+14Ap main+2CEp ...
		extrn set_program_name:near ; CODE XREF: main+4Fp
; char *bindtextdomain(const char *domainname, const char *dirname)
		extrn bindtextdomain:near ; CODE XREF: main+76p
; char *textdomain(const char *domainname)
		extrn textdomain:near	; CODE XREF: main+86p
; void close_stdout(void)
		extrn close_stdout	; DATA XREF: main+91o
; int atexit(void (*func)(void))
		extrn atexit:near	; CODE XREF: main+96p
; int optind
		extrn optind:dword	; DATA XREF: main:loc_8000C9Ar
					; main+342r ...
; size_t strlen(const char *s)
		extrn strlen:near	; CODE XREF: main+1C9p
		extrn x2realloc:near	; CODE XREF: main+20Cp
; char *strcpy(char *dest, const char *src)
		extrn strcpy:near	; CODE XREF: main+231p
; char *optarg
		extrn optarg:dword	; DATA XREF: main:loc_8000D4Fr
		extrn Version:dword	; DATA XREF: main:loc_8000D8Dr
		extrn version_etc:near	; CODE XREF: main+2C1p
; int getopt_long(int argc, char *const	*argv, const char *shortopts, const struct option *longopts, int *longind)
		extrn getopt_long:near	; CODE XREF: main+2F1p
		extrn mode_create_from_ref:near	; CODE XREF: main+40Ap
		extrn mode_compile:near	; CODE XREF: main+462p
; __mode_t umask(__mode_t mask)
		extrn umask:near	; CODE XREF: main+4B5p
		extrn get_root_dev_ino:near ; CODE XREF: main+4DBp


		end
