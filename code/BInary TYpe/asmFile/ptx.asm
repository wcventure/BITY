;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B611-7234-BB			    |
; |		Doskey Lee, Kingsoft Internet Security Software		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	B4226C522D20F363564D7E4BB035D5FF
; Input	CRC32 :	0AFD03DB

; File Name   :	D:\coreutils-o\ptx.o
; Format      :	ELF for	Intel 386 (Relocatable)
;
; Source File :	'ptx.c'

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	byte public 'CODE' use32
		assume cs:_text
		;org 8000000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; unsigned __int8 __cdecl to_uchar(char	ch_0)
to_uchar	proc near		; CODE XREF: copy_unescaped_string+160p
					; compare_words+44p ...

ch_0		= byte ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 4
		mov	eax, [ebp+arg_0]
		mov	[ebp+ch_0], al
		movzx	eax, [ebp+ch_0]
		leave
		retn
to_uchar	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void emit_ancillary_info()
emit_ancillary_info proc near		; CODE XREF: usage+1A0p

lc_messages	= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset msgid	; "\nReport %s bugs to %s\n"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset aBugCoreutils@g ; "bug-coreutils@gnu.org"
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	offset aSHomePageHttpW ; "%s home page:	<http://www.gnu.org/softw"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset domainname ; "coreutils"
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aGeneralHelpUsi ; "General help using GNU software: <http:"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		sub	esp, 8
		push	0		; locale
		push	5		; category
		call	setlocale
		add	esp, 10h
		mov	[ebp+lc_messages], eax
		cmp	[ebp+lc_messages], 0
		jz	short loc_80000F8
		sub	esp, 4
		push	3		; n
		push	offset s2	; "en_"
		push	[ebp+lc_messages] ; s1
		call	strncmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_80000F8
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aReportSTransla ; "Report %s translation	bugs to	<http://t"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h

loc_80000F8:				; CODE XREF: emit_ancillary_info+9Bj
					; emit_ancillary_info+B4j
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aForCompleteDoc ; "For complete documentation, run: info	c"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		nop
		mov	ebx, [ebp+var_4]
		leave
		retn
emit_ancillary_info endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn static bp-based frame

; void matcher_error()
matcher_error	proc near		; CODE XREF: find_occurs_in_text:loc_8000E7Cp
					; find_occurs_in_text+1CFp ...
		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 4
		sub	esp, 0Ch
		push	offset aErrorInRegular ; "error	in regular expression matcher"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		sub	esp, 4
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		sub	esp, 0Ch
		push	1		; status
		call	exit
matcher_error	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; char *__cdecl	copy_unescaped_string(const char *string)
copy_unescaped_string proc near		; CODE XREF: main+2B7p	main+2FCp ...

cursor		= dword	ptr -18h
value		= dword	ptr -14h
length		= dword	ptr -10h
result		= dword	ptr -0Ch
var_4		= dword	ptr -4
string		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		sub	esp, 0Ch
		push	[ebp+string]	; s
		call	strlen
		add	esp, 10h
		add	eax, 1
		sub	esp, 0Ch
		push	eax		; size_t
		call	xmalloc
		add	esp, 10h
		mov	[ebp+result], eax
		mov	eax, [ebp+result]
		mov	[ebp+cursor], eax
		jmp	loc_800045C
; ---------------------------------------------------------------------------

loc_8000199:				; CODE XREF: copy_unescaped_string+2FDj
		mov	eax, [ebp+string]
		movzx	eax, byte ptr [eax]
		cmp	al, 5Ch
		jnz	loc_8000445
		add	[ebp+string], 1
		mov	eax, [ebp+string]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		cmp	eax, 66h
		jz	loc_80003C0
		cmp	eax, 66h
		jg	short loc_80001FD
		cmp	eax, 61h
		jz	loc_8000383
		cmp	eax, 61h
		jg	short loc_80001E6
		test	eax, eax
		jz	loc_8000442
		cmp	eax, 30h
		jz	loc_800031F
		jmp	loc_800041D
; ---------------------------------------------------------------------------

loc_80001E6:				; CODE XREF: copy_unescaped_string+67j
		cmp	eax, 62h
		jz	loc_8000398
		cmp	eax, 63h
		jz	loc_80003B1
		jmp	loc_800041D
; ---------------------------------------------------------------------------

loc_80001FD:				; CODE XREF: copy_unescaped_string+59j
		cmp	eax, 74h
		jz	loc_80003F9
		cmp	eax, 74h
		jg	short loc_8000222
		cmp	eax, 6Eh
		jz	loc_80003D5
		cmp	eax, 72h
		jz	loc_80003E7
		jmp	loc_800041D
; ---------------------------------------------------------------------------

loc_8000222:				; CODE XREF: copy_unescaped_string+A2j
		cmp	eax, 76h
		jz	loc_800040B
		cmp	eax, 78h
		jnz	loc_800041D
		mov	[ebp+value], 0
		mov	[ebp+length], 0
		add	[ebp+string], 1
		jmp	short loc_80002AD
; ---------------------------------------------------------------------------

loc_8000248:				; CODE XREF: copy_unescaped_string+17Cj
		mov	eax, [ebp+value]
		shl	eax, 4
		mov	edx, eax
		mov	eax, [ebp+string]
		movzx	eax, byte ptr [eax]
		cmp	al, 60h
		jle	short loc_8000272
		mov	eax, [ebp+string]
		movzx	eax, byte ptr [eax]
		cmp	al, 66h
		jg	short loc_8000272
		mov	eax, [ebp+string]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	eax, 57h
		jmp	short loc_80002A0
; ---------------------------------------------------------------------------

loc_8000272:				; CODE XREF: copy_unescaped_string+F1j
					; copy_unescaped_string+FBj
		mov	eax, [ebp+string]
		movzx	eax, byte ptr [eax]
		cmp	al, 40h
		jle	short loc_8000294
		mov	eax, [ebp+string]
		movzx	eax, byte ptr [eax]
		cmp	al, 46h
		jg	short loc_8000294
		mov	eax, [ebp+string]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	eax, 37h
		jmp	short loc_80002A0
; ---------------------------------------------------------------------------

loc_8000294:				; CODE XREF: copy_unescaped_string+113j
					; copy_unescaped_string+11Dj
		mov	eax, [ebp+string]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	eax, 30h

loc_80002A0:				; CODE XREF: copy_unescaped_string+109j
					; copy_unescaped_string+12Bj
		add	eax, edx
		mov	[ebp+value], eax
		add	[ebp+length], 1
		add	[ebp+string], 1

loc_80002AD:				; CODE XREF: copy_unescaped_string+DFj
		cmp	[ebp+length], 2
		jg	short loc_80002E9
		call	__ctype_b_loc
		mov	ebx, [eax]
		mov	eax, [ebp+string]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; ch_0
		call	to_uchar
		add	esp, 10h
		movzx	eax, al
		add	eax, eax
		add	eax, ebx
		movzx	eax, word ptr [eax]
		movzx	eax, ax
		and	eax, 1000h
		test	eax, eax
		jnz	loc_8000248

loc_80002E9:				; CODE XREF: copy_unescaped_string+14Aj
		cmp	[ebp+length], 0
		jnz	short loc_800030C
		mov	eax, [ebp+cursor]
		lea	edx, [eax+1]
		mov	[ebp+cursor], edx
		mov	byte ptr [eax],	5Ch
		mov	eax, [ebp+cursor]
		lea	edx, [eax+1]
		mov	[ebp+cursor], edx
		mov	byte ptr [eax],	78h
		jmp	loc_800045C
; ---------------------------------------------------------------------------

loc_800030C:				; CODE XREF: copy_unescaped_string+186j
		mov	eax, [ebp+cursor]
		lea	edx, [eax+1]
		mov	[ebp+cursor], edx
		mov	edx, [ebp+value]
		mov	[eax], dl
		jmp	loc_800045C
; ---------------------------------------------------------------------------

loc_800031F:				; CODE XREF: copy_unescaped_string+74j
		mov	[ebp+value], 0
		mov	[ebp+length], 0
		add	[ebp+string], 1
		jmp	short loc_8000356
; ---------------------------------------------------------------------------

loc_8000333:				; CODE XREF: copy_unescaped_string+207j
		mov	eax, [ebp+value]
		lea	edx, ds:0[eax*8]
		mov	eax, [ebp+string]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	eax, 30h
		add	eax, edx
		mov	[ebp+value], eax
		add	[ebp+length], 1
		add	[ebp+string], 1

loc_8000356:				; CODE XREF: copy_unescaped_string+1CAj
		cmp	[ebp+length], 2
		jg	short loc_8000370
		mov	eax, [ebp+string]
		movzx	eax, byte ptr [eax]
		cmp	al, 2Fh
		jle	short loc_8000370
		mov	eax, [ebp+string]
		movzx	eax, byte ptr [eax]
		cmp	al, 37h
		jle	short loc_8000333

loc_8000370:				; CODE XREF: copy_unescaped_string+1F3j
					; copy_unescaped_string+1FDj
		mov	eax, [ebp+cursor]
		lea	edx, [eax+1]
		mov	[ebp+cursor], edx
		mov	edx, [ebp+value]
		mov	[eax], dl
		jmp	loc_800045C
; ---------------------------------------------------------------------------

loc_8000383:				; CODE XREF: copy_unescaped_string+5Ej
		mov	eax, [ebp+cursor]
		lea	edx, [eax+1]
		mov	[ebp+cursor], edx
		mov	byte ptr [eax],	7
		add	[ebp+string], 1
		jmp	loc_800045C
; ---------------------------------------------------------------------------

loc_8000398:				; CODE XREF: copy_unescaped_string+82j
		mov	eax, [ebp+cursor]
		lea	edx, [eax+1]
		mov	[ebp+cursor], edx
		mov	byte ptr [eax],	8
		add	[ebp+string], 1
		jmp	loc_800045C
; ---------------------------------------------------------------------------

loc_80003AD:				; CODE XREF: copy_unescaped_string+252j
		add	[ebp+string], 1

loc_80003B1:				; CODE XREF: copy_unescaped_string+8Bj
		mov	eax, [ebp+string]
		movzx	eax, byte ptr [eax]
		test	al, al
		jnz	short loc_80003AD
		jmp	loc_800045C
; ---------------------------------------------------------------------------

loc_80003C0:				; CODE XREF: copy_unescaped_string+50j
		mov	eax, [ebp+cursor]
		lea	edx, [eax+1]
		mov	[ebp+cursor], edx
		mov	byte ptr [eax],	0Ch
		add	[ebp+string], 1
		jmp	loc_800045C
; ---------------------------------------------------------------------------

loc_80003D5:				; CODE XREF: copy_unescaped_string+A7j
		mov	eax, [ebp+cursor]
		lea	edx, [eax+1]
		mov	[ebp+cursor], edx
		mov	byte ptr [eax],	0Ah
		add	[ebp+string], 1
		jmp	short loc_800045C
; ---------------------------------------------------------------------------

loc_80003E7:				; CODE XREF: copy_unescaped_string+B0j
		mov	eax, [ebp+cursor]
		lea	edx, [eax+1]
		mov	[ebp+cursor], edx
		mov	byte ptr [eax],	0Dh
		add	[ebp+string], 1
		jmp	short loc_800045C
; ---------------------------------------------------------------------------

loc_80003F9:				; CODE XREF: copy_unescaped_string+99j
		mov	eax, [ebp+cursor]
		lea	edx, [eax+1]
		mov	[ebp+cursor], edx
		mov	byte ptr [eax],	9
		add	[ebp+string], 1
		jmp	short loc_800045C
; ---------------------------------------------------------------------------

loc_800040B:				; CODE XREF: copy_unescaped_string+BEj
		mov	eax, [ebp+cursor]
		lea	edx, [eax+1]
		mov	[ebp+cursor], edx
		mov	byte ptr [eax],	0Bh
		add	[ebp+string], 1
		jmp	short loc_800045C
; ---------------------------------------------------------------------------

loc_800041D:				; CODE XREF: copy_unescaped_string+7Aj
					; copy_unescaped_string+91j ...
		mov	eax, [ebp+cursor]
		lea	edx, [eax+1]
		mov	[ebp+cursor], edx
		mov	byte ptr [eax],	5Ch
		mov	eax, [ebp+cursor]
		lea	edx, [eax+1]
		mov	[ebp+cursor], edx
		mov	edx, [ebp+string]
		lea	ecx, [edx+1]
		mov	[ebp+string], ecx
		movzx	edx, byte ptr [edx]
		mov	[eax], dl
		jmp	short loc_800045C
; ---------------------------------------------------------------------------

loc_8000442:				; CODE XREF: copy_unescaped_string+6Bj
		nop
		jmp	short loc_800045C
; ---------------------------------------------------------------------------

loc_8000445:				; CODE XREF: copy_unescaped_string+3Aj
		mov	eax, [ebp+cursor]
		lea	edx, [eax+1]
		mov	[ebp+cursor], edx
		mov	edx, [ebp+string]
		lea	ecx, [edx+1]
		mov	[ebp+string], ecx
		movzx	edx, byte ptr [edx]
		mov	[eax], dl

loc_800045C:				; CODE XREF: copy_unescaped_string+2Dj
					; copy_unescaped_string+1A0j ...
		mov	eax, [ebp+string]
		movzx	eax, byte ptr [eax]
		test	al, al
		jnz	loc_8000199
		mov	eax, [ebp+cursor]
		mov	byte ptr [eax],	0
		mov	eax, [ebp+result]
		mov	ebx, [ebp+var_4]
		leave
		retn
copy_unescaped_string endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl compile_regex(regex_data	*regex)
compile_regex	proc near		; CODE XREF: initialize_regex+A2p
					; initialize_regex+BBp

pattern		= dword	ptr -14h
string		= dword	ptr -10h
message		= dword	ptr -0Ch
var_4		= dword	ptr -4
regex		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, [ebp+regex]
		add	eax, 4
		mov	[ebp+pattern], eax
		mov	eax, [ebp+regex]
		mov	eax, [eax]
		mov	[ebp+string], eax
		mov	eax, [ebp+pattern]
		mov	dword ptr [eax], 0
		mov	eax, [ebp+pattern]
		mov	dword ptr [eax+4], 0
		mov	eax, [ebp+regex]
		lea	edx, [eax+24h]
		mov	eax, [ebp+pattern]
		mov	[eax+10h], edx
		movzx	eax, ds:ignore_case
		test	al, al
		jz	short loc_80004C1
		mov	edx, offset folded_chars
		jmp	short loc_80004C6
; ---------------------------------------------------------------------------

loc_80004C1:				; CODE XREF: compile_regex+40j
		mov	edx, 0

loc_80004C6:				; CODE XREF: compile_regex+47j
		mov	eax, [ebp+pattern]
		mov	[eax+14h], edx
		sub	esp, 0Ch
		push	[ebp+string]	; s
		call	strlen
		add	esp, 10h
		sub	esp, 4
		push	[ebp+pattern]	; buffer
		push	eax		; length
		push	[ebp+string]	; pattern
		call	re_compile_pattern
		add	esp, 10h
		mov	[ebp+message], eax
		cmp	[ebp+message], 0
		jz	short loc_8000529
		sub	esp, 0Ch
		push	[ebp+string]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aSForRegexpS ; "%s (for regexp %s)"
		call	gettext
		add	esp, 10h
		sub	esp, 0Ch
		push	ebx
		push	[ebp+message]
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 20h

loc_8000529:				; CODE XREF: compile_regex+7Bj
		sub	esp, 0Ch
		push	[ebp+pattern]	; buffer
		call	re_compile_fastmap
		add	esp, 10h
		nop
		mov	ebx, [ebp+var_4]
		leave
		retn
compile_regex	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void initialize_regex()
initialize_regex proc near		; CODE XREF: main:loc_800354Fp

character	= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		movzx	eax, ds:ignore_case
		test	al, al
		jz	short loc_800057E
		mov	[ebp+character], 0
		jmp	short loc_8000575
; ---------------------------------------------------------------------------

loc_8000557:				; CODE XREF: initialize_regex+3Fj
		sub	esp, 0Ch
		push	[ebp+character]	; c
		call	toupper
		add	esp, 10h
		mov	edx, eax
		mov	eax, [ebp+character]
		add	eax, offset folded_chars
		mov	[eax], dl
		add	[ebp+character], 1

loc_8000575:				; CODE XREF: initialize_regex+18j
		cmp	[ebp+character], 0FFh
		jle	short loc_8000557

loc_800057E:				; CODE XREF: initialize_regex+Fj
		mov	eax, ds:context_regex
		test	eax, eax
		jz	short loc_800059F
		mov	eax, ds:context_regex
		movzx	eax, byte ptr [eax]
		test	al, al
		jnz	short loc_80005CE
		mov	ds:context_regex, 0
		jmp	short loc_80005CE
; ---------------------------------------------------------------------------

loc_800059F:				; CODE XREF: initialize_regex+48j
		movzx	eax, gnu_extensions
		test	al, al
		jz	short loc_80005C4
		movzx	eax, ds:input_reference
		xor	eax, 1
		test	al, al
		jz	short loc_80005C4
		mov	ds:context_regex, offset a_? ; "[.?!][]\"')}]*\\($\\|\t\\|  \\)[ \t\n]*"
		jmp	short loc_80005CE
; ---------------------------------------------------------------------------

loc_80005C4:				; CODE XREF: initialize_regex+6Bj
					; initialize_regex+79j
		mov	ds:context_regex, offset asc_8003EC8 ; "\n"

loc_80005CE:				; CODE XREF: initialize_regex+54j
					; initialize_regex+60j	...
		mov	eax, ds:context_regex
		test	eax, eax
		jz	short loc_80005E7
		sub	esp, 0Ch
		push	offset context_regex ; regex
		call	compile_regex
		add	esp, 10h

loc_80005E7:				; CODE XREF: initialize_regex+98j
		mov	eax, ds:dword_8003800
		test	eax, eax
		jz	short loc_8000605
		sub	esp, 0Ch
		push	offset dword_8003800 ; regex
		call	compile_regex
		add	esp, 10h
		jmp	loc_8000687
; ---------------------------------------------------------------------------

loc_8000605:				; CODE XREF: initialize_regex+B1j
		mov	eax, ds:break_file
		test	eax, eax
		jnz	short loc_8000687
		movzx	eax, gnu_extensions
		test	al, al
		jz	short loc_800065B
		mov	[ebp+character], 0
		jmp	short loc_8000650
; ---------------------------------------------------------------------------

loc_8000622:				; CODE XREF: initialize_regex+11Aj
		call	__ctype_b_loc
		mov	eax, [eax]
		mov	edx, [ebp+character]
		add	edx, edx
		add	eax, edx
		movzx	eax, word ptr [eax]
		movzx	eax, ax
		and	eax, 400h
		test	eax, eax
		setnz	al
		mov	edx, eax
		mov	eax, [ebp+character]
		add	eax, offset s
		mov	[eax], dl
		add	[ebp+character], 1

loc_8000650:				; CODE XREF: initialize_regex+E3j
		cmp	[ebp+character], 0FFh
		jle	short loc_8000622
		jmp	short loc_8000687
; ---------------------------------------------------------------------------

loc_800065B:				; CODE XREF: initialize_regex+DAj
		sub	esp, 4
		push	100h		; n
		push	1		; c
		push	offset s	; s
		call	memset
		add	esp, 10h
		mov	ds:s+20h, 0
		mov	ds:s+9,	0
		mov	ds:s+0Ah, 0

loc_8000687:				; CODE XREF: initialize_regex+C3j
					; initialize_regex+CFj	...
		nop
		leave
		retn
initialize_regex endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl swallow_file_in_memory(const char *file_name, BLOCK *block)
swallow_file_in_memory proc near	; CODE XREF: digest_break_file+21p
					; digest_word_file+27p	...

block		= dword	ptr -90h
file_name	= dword	ptr -8Ch
using_stdin	= byte ptr -81h
file_handle	= dword	ptr -80h
allocated_length= dword	ptr -7Ch
used_length	= dword	ptr -78h
in_memory_size	= dword	ptr -74h
read_length	= dword	ptr -70h
stat_block	= stat ptr -6Ch
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 90h
		mov	eax, [ebp+arg_0]
		mov	[ebp+file_name], eax
		mov	eax, [ebp+arg_4]
		mov	[ebp+block], eax
		mov	eax, large gs:14h
		mov	[ebp+var_C], eax
		xor	eax, eax
		cmp	[ebp+file_name], 0
		jz	short loc_80006E2
		mov	eax, [ebp+file_name]
		movzx	eax, byte ptr [eax]
		test	al, al
		jz	short loc_80006E2
		sub	esp, 8
		push	offset asc_8003ECA ; "-"
		push	[ebp+file_name]	; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		jnz	short loc_80006E9

loc_80006E2:				; CODE XREF: swallow_file_in_memory+2Fj
					; swallow_file_in_memory+3Cj
		mov	eax, 1
		jmp	short loc_80006EE
; ---------------------------------------------------------------------------

loc_80006E9:				; CODE XREF: swallow_file_in_memory+56j
		mov	eax, 0

loc_80006EE:				; CODE XREF: swallow_file_in_memory+5Dj
		mov	[ebp+using_stdin], al
		and	[ebp+using_stdin], 1
		cmp	[ebp+using_stdin], 0
		jz	short loc_800070D
		mov	[ebp+file_handle], 0
		jmp	short loc_8000746
; ---------------------------------------------------------------------------

loc_800070D:				; CODE XREF: swallow_file_in_memory+78j
		sub	esp, 8
		push	0
		push	[ebp+file_name]
		call	open64
		add	esp, 10h
		mov	[ebp+file_handle], eax
		cmp	[ebp+file_handle], 0
		jns	short loc_8000746
		call	__errno_location
		mov	eax, [eax]
		push	[ebp+file_name]
		push	offset format	; "%s"
		push	eax		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_8000746:				; CODE XREF: swallow_file_in_memory+81j
					; swallow_file_in_memory+9Dj
		sub	esp, 8
		lea	eax, [ebp+stat_block]
		push	eax
		push	[ebp+file_handle]
		call	fstat64
		add	esp, 10h
		test	eax, eax
		jns	short loc_8000779
		call	__errno_location
		mov	eax, [eax]
		push	[ebp+file_name]
		push	offset format	; "%s"
		push	eax		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_8000779:				; CODE XREF: swallow_file_in_memory+D0j
		mov	eax, [ebp+stat_block.st_mode]
		and	eax, 0F000h
		cmp	eax, 8000h
		jnz	loc_800081D
		mov	eax, dword ptr [ebp+stat_block.st_size]
		mov	edx, dword ptr [ebp+stat_block.st_size+4]
		sub	esp, 0Ch
		push	eax		; size_t
		call	xmalloc
		add	esp, 10h
		mov	edx, eax
		mov	eax, [ebp+block]
		mov	[eax], edx
		mov	eax, dword ptr [ebp+stat_block.st_size]
		mov	edx, dword ptr [ebp+stat_block.st_size+4]
		mov	edx, eax
		mov	eax, [ebp+block]
		mov	eax, [eax]
		sub	esp, 4
		push	edx		; nbytes
		push	eax		; buf
		push	[ebp+file_handle] ; fd
		call	read
		add	esp, 10h
		mov	[ebp+in_memory_size], eax
		mov	ecx, [ebp+in_memory_size]
		mov	ebx, 0
		mov	eax, dword ptr [ebp+stat_block.st_size]
		mov	edx, dword ptr [ebp+stat_block.st_size+4]
		mov	esi, ebx
		xor	esi, edx
		xor	eax, ecx
		or	eax, esi
		test	eax, eax
		jz	short loc_8000802
		call	__errno_location
		mov	eax, [eax]
		push	[ebp+file_name]
		push	offset format	; "%s"
		push	eax		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_8000802:				; CODE XREF: swallow_file_in_memory+159j
		mov	eax, [ebp+block]
		mov	edx, [eax]
		mov	eax, [ebp+in_memory_size]
		add	edx, eax
		mov	eax, [ebp+block]
		mov	[eax+4], edx
		jmp	loc_80008E2
; ---------------------------------------------------------------------------

loc_800081D:				; CODE XREF: swallow_file_in_memory+FCj
		sub	esp, 0Ch
		push	1000h		; size_t
		call	xmalloc
		add	esp, 10h
		mov	edx, eax
		mov	eax, [ebp+block]
		mov	[eax], edx
		mov	[ebp+used_length], 0
		mov	[ebp+allocated_length],	1000h
		jmp	short loc_800087D
; ---------------------------------------------------------------------------

loc_8000847:				; CODE XREF: swallow_file_in_memory+21Dj
		mov	eax, [ebp+read_length]
		add	[ebp+used_length], eax
		mov	eax, [ebp+used_length]
		cmp	eax, [ebp+allocated_length]
		jnz	short loc_800087D
		add	[ebp+allocated_length],	1000h
		mov	eax, [ebp+block]
		mov	eax, [eax]
		sub	esp, 8
		push	[ebp+allocated_length] ; size_t
		push	eax		; void *
		call	xrealloc
		add	esp, 10h
		mov	edx, eax
		mov	eax, [ebp+block]
		mov	[eax], edx

loc_800087D:				; CODE XREF: swallow_file_in_memory+1BBj
					; swallow_file_in_memory+1C9j
		mov	eax, [ebp+allocated_length]
		sub	eax, [ebp+used_length]
		mov	edx, [ebp+block]
		mov	ecx, [edx]
		mov	edx, [ebp+used_length]
		add	edx, ecx
		sub	esp, 4
		push	eax		; nbytes
		push	edx		; buf
		push	[ebp+file_handle] ; fd
		call	read
		add	esp, 10h
		mov	[ebp+read_length], eax
		cmp	[ebp+read_length], 0
		jg	short loc_8000847
		cmp	[ebp+read_length], 0
		jns	short loc_80008CC
		call	__errno_location
		mov	eax, [eax]
		push	[ebp+file_name]
		push	offset format	; "%s"
		push	eax		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_80008CC:				; CODE XREF: swallow_file_in_memory+223j
		mov	eax, [ebp+block]
		mov	edx, [eax]
		mov	eax, [ebp+used_length]
		add	edx, eax
		mov	eax, [ebp+block]
		mov	[eax+4], edx

loc_80008E2:				; CODE XREF: swallow_file_in_memory+18Ej
		movzx	eax, [ebp+using_stdin]
		xor	eax, 1
		test	al, al
		jz	short loc_800091F
		sub	esp, 0Ch
		push	[ebp+file_handle] ; fd
		call	close
		add	esp, 10h
		test	eax, eax
		jz	short loc_800091F
		call	__errno_location
		mov	eax, [eax]
		push	[ebp+file_name]
		push	offset format	; "%s"
		push	eax		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_800091F:				; CODE XREF: swallow_file_in_memory+264j
					; swallow_file_in_memory+276j
		nop
		mov	eax, [ebp+var_C]
		xor	eax, large gs:14h
		jz	short loc_8000931
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_8000931:				; CODE XREF: swallow_file_in_memory+2A0j
		lea	esp, [ebp-8]
		pop	ebx
		pop	esi
		pop	ebp
		retn
swallow_file_in_memory endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; int __cdecl compare_words(const void *void_first, const void *void_second)
compare_words	proc near		; CODE XREF: compare_occurs+Ep
					; search_table+40p
					; DATA XREF: ...

counter		= dword	ptr -10h
length		= dword	ptr -0Ch
value		= dword	ptr -8
var_4		= dword	ptr -4
void_first	= dword	ptr  8
void_second	= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 10h
		mov	eax, [ebp+void_second]
		movzx	edx, word ptr [eax+4]
		mov	eax, [ebp+void_first]
		movzx	eax, word ptr [eax+4]
		cmp	dx, ax
		cmovle	eax, edx
		cwde
		mov	[ebp+length], eax
		movzx	eax, ds:ignore_case
		test	al, al
		jz	short loc_80009DA
		mov	[ebp+counter], 0
		jmp	short loc_80009D0
; ---------------------------------------------------------------------------

loc_800096B:				; CODE XREF: compare_words+9Ej
		mov	eax, [ebp+void_first]
		mov	edx, [eax]
		mov	eax, [ebp+counter]
		add	eax, edx
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		push	eax		; ch_0
		call	to_uchar
		add	esp, 4
		movzx	eax, al
		movzx	eax, ds:folded_chars[eax]
		movzx	ebx, al
		mov	eax, [ebp+void_second]
		mov	edx, [eax]
		mov	eax, [ebp+counter]
		add	eax, edx
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		push	eax		; ch_0
		call	to_uchar
		add	esp, 4
		movzx	eax, al
		movzx	eax, ds:folded_chars[eax]
		movzx	eax, al
		sub	ebx, eax
		mov	eax, ebx
		mov	[ebp+value], eax
		cmp	[ebp+value], 0
		jz	short loc_80009CC
		mov	eax, [ebp+value]
		jmp	loc_8000A4F
; ---------------------------------------------------------------------------

loc_80009CC:				; CODE XREF: compare_words+8Aj
		add	[ebp+counter], 1

loc_80009D0:				; CODE XREF: compare_words+31j
		mov	eax, [ebp+counter]
		cmp	eax, [ebp+length]
		jl	short loc_800096B
		jmp	short loc_8000A39
; ---------------------------------------------------------------------------

loc_80009DA:				; CODE XREF: compare_words+28j
		mov	[ebp+counter], 0
		jmp	short loc_8000A31
; ---------------------------------------------------------------------------

loc_80009E3:				; CODE XREF: compare_words+FFj
		mov	eax, [ebp+void_first]
		mov	edx, [eax]
		mov	eax, [ebp+counter]
		add	eax, edx
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		push	eax		; ch_0
		call	to_uchar
		add	esp, 4
		movzx	ebx, al
		mov	eax, [ebp+void_second]
		mov	edx, [eax]
		mov	eax, [ebp+counter]
		add	eax, edx
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		push	eax		; ch_0
		call	to_uchar
		add	esp, 4
		movzx	eax, al
		sub	ebx, eax
		mov	eax, ebx
		mov	[ebp+value], eax
		cmp	[ebp+value], 0
		jz	short loc_8000A2D
		mov	eax, [ebp+value]
		jmp	short loc_8000A4F
; ---------------------------------------------------------------------------

loc_8000A2D:				; CODE XREF: compare_words+EEj
		add	[ebp+counter], 1

loc_8000A31:				; CODE XREF: compare_words+A9j
		mov	eax, [ebp+counter]
		cmp	eax, [ebp+length]
		jl	short loc_80009E3

loc_8000A39:				; CODE XREF: compare_words+A0j
		mov	eax, [ebp+void_first]
		movzx	eax, word ptr [eax+4]
		movsx	edx, ax
		mov	eax, [ebp+void_second]
		movzx	eax, word ptr [eax+4]
		cwde
		sub	edx, eax
		mov	eax, edx

loc_8000A4F:				; CODE XREF: compare_words+8Fj
					; compare_words+F3j
		mov	ebx, [ebp+var_4]
		leave
		retn
compare_words	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; int __cdecl compare_occurs(const void	*void_first, const void	*void_second)
compare_occurs	proc near		; DATA XREF: sort_found_occurs+11o

value		= dword	ptr -4
void_first	= dword	ptr  8
void_second	= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		mov	edx, [ebp+void_second]
		mov	eax, [ebp+void_first]
		push	edx		; void_second
		push	eax		; void_first
		call	compare_words
		add	esp, 8
		mov	[ebp+value], eax
		cmp	[ebp+value], 0
		jnz	short loc_8000A85
		mov	eax, [ebp+void_first]
		mov	eax, [eax]
		mov	edx, eax
		mov	eax, [ebp+void_second]
		mov	eax, [eax]
		sub	edx, eax
		mov	eax, edx
		jmp	short locret_8000A88
; ---------------------------------------------------------------------------

loc_8000A85:				; CODE XREF: compare_occurs+1Dj
		mov	eax, [ebp+value]

locret_8000A88:				; CODE XREF: compare_occurs+2Fj
		leave
		retn
compare_occurs	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; int __cdecl search_table(WORD	*word, WORD_TABLE *table)
search_table	proc near		; CODE XREF: find_occurs_in_text+382p
					; find_occurs_in_text+3A7p

lowest		= dword	ptr -10h
highest		= dword	ptr -0Ch
middle		= dword	ptr -8
value		= dword	ptr -4
word		= dword	ptr  8
table		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		mov	[ebp+lowest], 0
		mov	eax, [ebp+table]
		mov	eax, [eax+8]
		sub	eax, 1
		mov	[ebp+highest], eax
		jmp	short loc_8000AFE
; ---------------------------------------------------------------------------

loc_8000AA5:				; CODE XREF: search_table+7Aj
		mov	edx, [ebp+lowest]
		mov	eax, [ebp+highest]
		add	eax, edx
		mov	edx, eax
		shr	edx, 1Fh
		add	eax, edx
		sar	eax, 1
		mov	[ebp+middle], eax
		mov	eax, [ebp+table]
		mov	eax, [eax]
		mov	edx, [ebp+middle]
		shl	edx, 3
		add	eax, edx
		push	eax		; void_second
		push	[ebp+word]	; void_first
		call	compare_words
		add	esp, 8
		mov	[ebp+value], eax
		cmp	[ebp+value], 0
		jns	short loc_8000AE6
		mov	eax, [ebp+middle]
		sub	eax, 1
		mov	[ebp+highest], eax
		jmp	short loc_8000AFE
; ---------------------------------------------------------------------------

loc_8000AE6:				; CODE XREF: search_table+4Fj
		cmp	[ebp+value], 0
		jle	short loc_8000AF7
		mov	eax, [ebp+middle]
		add	eax, 1
		mov	[ebp+lowest], eax
		jmp	short loc_8000AFE
; ---------------------------------------------------------------------------

loc_8000AF7:				; CODE XREF: search_table+60j
		mov	eax, 1
		jmp	short locret_8000B0B
; ---------------------------------------------------------------------------

loc_8000AFE:				; CODE XREF: search_table+19j
					; search_table+5Aj ...
		mov	eax, [ebp+lowest]
		cmp	eax, [ebp+highest]
		jle	short loc_8000AA5
		mov	eax, 0

locret_8000B0B:				; CODE XREF: search_table+72j
		leave
		retn
search_table	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void sort_found_occurs()
sort_found_occurs proc near		; CODE XREF: main+7D5p
		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	edx, ds:number_of_occurs
		mov	eax, ds:occurs_table
		push	offset compare_occurs ;	compar
		push	10h		; size
		push	edx		; nmemb
		push	eax		; base
		call	qsort
		add	esp, 10h
		nop
		leave
		retn
sort_found_occurs endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl digest_break_file(const char *file_name)
digest_break_file proc near		; CODE XREF: main+6E4p

file_name	= dword	ptr -1Ch
cursor		= dword	ptr -18h
file_contents	= BLOCK	ptr -14h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, [ebp+arg_0]
		mov	[ebp+file_name], eax
		mov	eax, large gs:14h
		mov	[ebp+var_C], eax
		xor	eax, eax
		sub	esp, 8
		lea	eax, [ebp+file_contents]
		push	eax		; block
		push	[ebp+file_name]	; file_name
		call	swallow_file_in_memory
		add	esp, 10h
		sub	esp, 4
		push	100h		; n
		push	1		; c
		push	offset s	; s
		call	memset
		add	esp, 10h
		mov	eax, [ebp+file_contents.start]
		mov	[ebp+cursor], eax
		jmp	short loc_8000B9D
; ---------------------------------------------------------------------------

loc_8000B7A:				; CODE XREF: digest_break_file+71j
		mov	eax, [ebp+cursor]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; ch_0
		call	to_uchar
		add	esp, 10h
		movzx	eax, al
		mov	ds:s[eax], 0
		add	[ebp+cursor], 1

loc_8000B9D:				; CODE XREF: digest_break_file+46j
		mov	eax, [ebp+file_contents.end]
		cmp	eax, [ebp+cursor]
		ja	short loc_8000B7A
		movzx	eax, gnu_extensions
		xor	eax, 1
		test	al, al
		jz	short loc_8000BC8
		mov	ds:s+20h, 0
		mov	ds:s+9,	0
		mov	ds:s+0Ah, 0

loc_8000BC8:				; CODE XREF: digest_break_file+7Fj
		mov	eax, [ebp+file_contents.start]
		sub	esp, 0Ch
		push	eax		; ptr
		call	free
		add	esp, 10h
		nop
		mov	eax, [ebp+var_C]
		xor	eax, large gs:14h
		jz	short locret_8000BE9
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

locret_8000BE9:				; CODE XREF: digest_break_file+B0j
		leave
		retn
digest_break_file endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl digest_word_file(const char *file_name, WORD_TABLE *table)
digest_word_file proc near		; CODE XREF: main+703p	main+735p

table		= dword	ptr -30h
file_name	= dword	ptr -2Ch
cursor		= dword	ptr -1Ch
word_start	= dword	ptr -18h
file_contents	= BLOCK	ptr -14h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		mov	eax, [ebp+arg_0]
		mov	[ebp+file_name], eax
		mov	eax, [ebp+arg_4]
		mov	[ebp+table], eax
		mov	eax, large gs:14h
		mov	[ebp+var_C], eax
		xor	eax, eax
		sub	esp, 8
		lea	eax, [ebp+file_contents]
		push	eax		; block
		push	[ebp+file_name]	; file_name
		call	swallow_file_in_memory
		add	esp, 10h
		mov	eax, [ebp+table]
		mov	dword ptr [eax], 0
		mov	eax, [ebp+table]
		mov	dword ptr [eax+4], 0
		mov	eax, [ebp+table]
		mov	dword ptr [eax+8], 0
		mov	eax, [ebp+file_contents.start]
		mov	[ebp+cursor], eax
		jmp	loc_8000D13
; ---------------------------------------------------------------------------

loc_8000C42:				; CODE XREF: digest_word_file+12Ej
		mov	eax, [ebp+cursor]
		mov	[ebp+word_start], eax
		jmp	short loc_8000C4E
; ---------------------------------------------------------------------------

loc_8000C4A:				; CODE XREF: digest_word_file+73j
		add	[ebp+cursor], 1

loc_8000C4E:				; CODE XREF: digest_word_file+5Dj
		mov	eax, [ebp+file_contents.end]
		cmp	eax, [ebp+cursor]
		jbe	short loc_8000C60
		mov	eax, [ebp+cursor]
		movzx	eax, byte ptr [eax]
		cmp	al, 0Ah
		jnz	short loc_8000C4A

loc_8000C60:				; CODE XREF: digest_word_file+69j
		mov	eax, [ebp+cursor]
		cmp	eax, [ebp+word_start]
		jbe	loc_8000D07
		mov	eax, [ebp+table]
		mov	edx, [eax+8]
		mov	eax, [ebp+table]
		mov	eax, [eax+4]
		cmp	edx, eax
		jnz	short loc_8000CC5
		mov	eax, [ebp+table]
		mov	eax, [eax+4]
		cmp	eax, 0FFFFFFFh
		jbe	short loc_8000C8E
		call	xalloc_die

loc_8000C8E:				; CODE XREF: digest_word_file+9Cj
		mov	eax, [ebp+table]
		mov	eax, [eax+4]
		add	eax, eax
		lea	edx, [eax+1]
		mov	eax, [ebp+table]
		mov	[eax+4], edx
		mov	eax, [ebp+table]
		mov	eax, [eax+4]
		lea	edx, ds:0[eax*8]
		mov	eax, [ebp+table]
		mov	eax, [eax]
		sub	esp, 8
		push	edx		; size_t
		push	eax		; void *
		call	xrealloc
		add	esp, 10h
		mov	edx, eax
		mov	eax, [ebp+table]
		mov	[eax], edx

loc_8000CC5:				; CODE XREF: digest_word_file+8Fj
		mov	eax, [ebp+table]
		mov	edx, [eax]
		mov	eax, [ebp+table]
		mov	eax, [eax+8]
		shl	eax, 3
		add	edx, eax
		mov	eax, [ebp+word_start]
		mov	[edx], eax
		mov	eax, [ebp+table]
		mov	edx, [eax]
		mov	eax, [ebp+table]
		mov	eax, [eax+8]
		shl	eax, 3
		add	eax, edx
		mov	ecx, [ebp+cursor]
		mov	edx, [ebp+word_start]
		sub	ecx, edx
		mov	edx, ecx
		mov	[eax+4], dx
		mov	eax, [ebp+table]
		mov	eax, [eax+8]
		lea	edx, [eax+1]
		mov	eax, [ebp+table]
		mov	[eax+8], edx

loc_8000D07:				; CODE XREF: digest_word_file+7Bj
		mov	eax, [ebp+file_contents.end]
		cmp	eax, [ebp+cursor]
		jbe	short loc_8000D13
		add	[ebp+cursor], 1

loc_8000D13:				; CODE XREF: digest_word_file+52j
					; digest_word_file+122j
		mov	eax, [ebp+file_contents.end]
		cmp	eax, [ebp+cursor]
		ja	loc_8000C42
		mov	eax, [ebp+table]
		mov	edx, [eax+8]
		mov	eax, [ebp+table]
		mov	eax, [eax]
		push	offset compare_words ; compar
		push	8		; size
		push	edx		; nmemb
		push	eax		; base
		call	qsort
		add	esp, 10h
		nop
		mov	eax, [ebp+var_C]
		xor	eax, large gs:14h
		jz	short locret_8000D4D
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

locret_8000D4D:				; CODE XREF: digest_word_file+15Bj
		leave
		retn
digest_word_file endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void find_occurs_in_text()
find_occurs_in_text proc near		; CODE XREF: main+7A1p

cursor		= dword	ptr -44h
scan		= dword	ptr -40h
line_start	= dword	ptr -3Ch
line_scan	= dword	ptr -38h
reference_length= dword	ptr -34h
context_start	= dword	ptr -30h
context_end	= dword	ptr -2Ch
word_start	= dword	ptr -28h
word_end	= dword	ptr -24h
next_context_start= dword ptr -20h
occurs_cursor	= dword	ptr -1Ch
r		= dword	ptr -18h
possible_key	= WORD ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 44h
		mov	eax, large gs:14h
		mov	[ebp+var_C], eax
		xor	eax, eax
		mov	[ebp+reference_length],	0
		mov	eax, ds:text_buffer.start
		mov	[ebp+line_start], eax
		mov	eax, [ebp+line_start]
		mov	[ebp+line_scan], eax
		movzx	eax, ds:input_reference
		test	al, al
		jz	loc_8000E16
		jmp	short loc_8000D8B
; ---------------------------------------------------------------------------

loc_8000D87:				; CODE XREF: find_occurs_in_text+76j
		add	[ebp+line_scan], 1

loc_8000D8B:				; CODE XREF: find_occurs_in_text+36j
		mov	eax, ds:text_buffer.end
		cmp	eax, [ebp+line_scan]
		jbe	short loc_8000DC7
		call	__ctype_b_loc
		mov	ebx, [eax]
		mov	eax, [ebp+line_scan]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; ch_0
		call	to_uchar
		add	esp, 10h
		movzx	eax, al
		add	eax, eax
		add	eax, ebx
		movzx	eax, word ptr [eax]
		movzx	eax, ax
		and	eax, 2000h
		test	eax, eax
		jz	short loc_8000D87

loc_8000DC7:				; CODE XREF: find_occurs_in_text+44j
		mov	edx, [ebp+line_scan]
		mov	eax, [ebp+line_start]
		sub	edx, eax
		mov	eax, edx
		mov	[ebp+reference_length],	eax
		jmp	short loc_8000DDA
; ---------------------------------------------------------------------------

loc_8000DD6:				; CODE XREF: find_occurs_in_text+C5j
		add	[ebp+line_scan], 1

loc_8000DDA:				; CODE XREF: find_occurs_in_text+85j
		mov	eax, ds:text_buffer.end
		cmp	eax, [ebp+line_scan]
		jbe	short loc_8000E16
		call	__ctype_b_loc
		mov	ebx, [eax]
		mov	eax, [ebp+line_scan]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; ch_0
		call	to_uchar
		add	esp, 10h
		movzx	eax, al
		add	eax, eax
		add	eax, ebx
		movzx	eax, word ptr [eax]
		movzx	eax, ax
		and	eax, 2000h
		test	eax, eax
		jnz	short loc_8000DD6

loc_8000E16:				; CODE XREF: find_occurs_in_text+30j
					; find_occurs_in_text+93j
		mov	eax, ds:text_buffer.start
		mov	[ebp+cursor], eax
		jmp	loc_8001320
; ---------------------------------------------------------------------------

loc_8000E23:				; CODE XREF: find_occurs_in_text+5D9j
		mov	eax, [ebp+cursor]
		mov	[ebp+context_start], eax
		mov	eax, ds:text_buffer.end
		mov	[ebp+next_context_start], eax
		mov	eax, ds:context_regex
		test	eax, eax
		jz	short loc_8000E95
		mov	eax, ds:text_buffer.end
		mov	edx, eax
		mov	eax, [ebp+cursor]
		sub	edx, eax
		mov	eax, ds:text_buffer.end
		mov	ecx, eax
		mov	eax, [ebp+cursor]
		sub	ecx, eax
		mov	eax, ecx
		sub	esp, 8
		push	offset context_regs ; regs
		push	edx		; range
		push	0		; start
		push	eax		; length
		push	[ebp+cursor]	; string
		push	offset buffer	; buffer
		call	re_search
		add	esp, 20h
		cmp	eax, 0FFFFFFFEh
		jz	short loc_8000E7C
		cmp	eax, 0FFFFFFFFh
		jz	short loc_8000E94
		jmp	short loc_8000E81
; ---------------------------------------------------------------------------

loc_8000E7C:				; CODE XREF: find_occurs_in_text+124j
		call	matcher_error
; ---------------------------------------------------------------------------

loc_8000E81:				; CODE XREF: find_occurs_in_text+12Bj
		mov	eax, ds:context_regs.end
		mov	eax, [eax]
		mov	edx, eax
		mov	eax, [ebp+cursor]
		add	eax, edx
		mov	[ebp+next_context_start], eax
		jmp	short loc_8000E95
; ---------------------------------------------------------------------------

loc_8000E94:				; CODE XREF: find_occurs_in_text+129j
		nop

loc_8000E95:				; CODE XREF: find_occurs_in_text+E9j
					; find_occurs_in_text+143j
		mov	eax, [ebp+next_context_start]
		mov	[ebp+context_end], eax
		jmp	short loc_8000EA1
; ---------------------------------------------------------------------------

loc_8000E9D:				; CODE XREF: find_occurs_in_text+18Dj
		sub	[ebp+context_end], 1

loc_8000EA1:				; CODE XREF: find_occurs_in_text+14Cj
		mov	eax, [ebp+context_end]
		cmp	eax, [ebp+context_start]
		jbe	short loc_8000EDE
		call	__ctype_b_loc
		mov	ebx, [eax]
		mov	eax, [ebp+context_end]
		sub	eax, 1
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; ch_0
		call	to_uchar
		add	esp, 10h
		movzx	eax, al
		add	eax, eax
		add	eax, ebx
		movzx	eax, word ptr [eax]
		movzx	eax, ax
		and	eax, 2000h
		test	eax, eax
		jnz	short loc_8000E9D

loc_8000EDE:				; CODE XREF: find_occurs_in_text+158j
					; find_occurs_in_text+5B0j ...
		mov	eax, ds:dword_8003800
		test	eax, eax
		jz	short loc_8000F54
		mov	edx, [ebp+context_end]
		mov	eax, [ebp+cursor]
		sub	edx, eax
		mov	ecx, [ebp+context_end]
		mov	eax, [ebp+cursor]
		sub	ecx, eax
		mov	eax, ecx
		sub	esp, 8
		push	offset regs	; regs
		push	edx		; range
		push	0		; start
		push	eax		; length
		push	[ebp+cursor]	; string
		push	offset stru_8003804 ; buffer
		call	re_search
		add	esp, 20h
		mov	[ebp+r], eax
		cmp	[ebp+r], 0FFFFFFFEh
		jnz	short loc_8000F23
		call	matcher_error
; ---------------------------------------------------------------------------

loc_8000F23:				; CODE XREF: find_occurs_in_text+1CDj
		cmp	[ebp+r], 0FFFFFFFFh
		jz	loc_8001316
		mov	eax, ds:regs.start
		mov	eax, [eax]
		mov	edx, eax
		mov	eax, [ebp+cursor]
		add	eax, edx
		mov	[ebp+word_start], eax
		mov	eax, ds:regs.end
		mov	eax, [eax]
		mov	edx, eax
		mov	eax, [ebp+cursor]
		add	eax, edx
		mov	[ebp+word_end],	eax
		jmp	loc_8000FD4
; ---------------------------------------------------------------------------

loc_8000F54:				; CODE XREF: find_occurs_in_text+196j
		mov	eax, [ebp+cursor]
		mov	[ebp+scan], eax
		jmp	short loc_8000F60
; ---------------------------------------------------------------------------

loc_8000F5C:				; CODE XREF: find_occurs_in_text+23Aj
		add	[ebp+scan], 1

loc_8000F60:				; CODE XREF: find_occurs_in_text+20Bj
		mov	eax, [ebp+scan]
		cmp	eax, [ebp+context_end]
		jnb	short loc_8000F8B
		mov	eax, [ebp+scan]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; ch_0
		call	to_uchar
		add	esp, 10h
		movzx	eax, al
		movzx	eax, ds:s[eax]
		test	al, al
		jz	short loc_8000F5C

loc_8000F8B:				; CODE XREF: find_occurs_in_text+217j
		mov	eax, [ebp+scan]
		cmp	eax, [ebp+context_end]
		jz	loc_8001319
		mov	eax, [ebp+scan]
		mov	[ebp+word_start], eax
		jmp	short loc_8000FA3
; ---------------------------------------------------------------------------

loc_8000F9F:				; CODE XREF: find_occurs_in_text+27Dj
		add	[ebp+scan], 1

loc_8000FA3:				; CODE XREF: find_occurs_in_text+24Ej
		mov	eax, [ebp+scan]
		cmp	eax, [ebp+context_end]
		jnb	short loc_8000FCE
		mov	eax, [ebp+scan]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; ch_0
		call	to_uchar
		add	esp, 10h
		movzx	eax, al
		movzx	eax, ds:s[eax]
		test	al, al
		jnz	short loc_8000F9F

loc_8000FCE:				; CODE XREF: find_occurs_in_text+25Aj
		mov	eax, [ebp+scan]
		mov	[ebp+word_end],	eax

loc_8000FD4:				; CODE XREF: find_occurs_in_text+200j
		mov	eax, [ebp+word_start]
		mov	[ebp+cursor], eax
		mov	eax, [ebp+word_end]
		cmp	eax, [ebp+word_start]
		jnz	short loc_8000FEB
		add	[ebp+cursor], 1
		jmp	loc_8001311
; ---------------------------------------------------------------------------

loc_8000FEB:				; CODE XREF: find_occurs_in_text+291j
		mov	eax, [ebp+cursor]
		mov	[ebp+possible_key.start], eax
		mov	edx, [ebp+word_end]
		mov	eax, [ebp+word_start]
		sub	edx, eax
		mov	eax, edx
		mov	[ebp+possible_key.size], ax
		movzx	eax, [ebp+possible_key.size]
		cwde
		add	[ebp+cursor], eax
		movzx	eax, [ebp+possible_key.size]
		movsx	edx, ax
		mov	eax, ds:maximum_word_length
		cmp	edx, eax
		jle	short loc_8001021
		movzx	eax, [ebp+possible_key.size]
		cwde
		mov	ds:maximum_word_length,	eax

loc_8001021:				; CODE XREF: find_occurs_in_text+2C6j
		movzx	eax, ds:input_reference
		test	al, al
		jz	loc_80010BC
		jmp	short loc_80010A8
; ---------------------------------------------------------------------------

loc_8001032:				; CODE XREF: find_occurs_in_text+35Fj
		mov	eax, [ebp+line_scan]
		movzx	eax, byte ptr [eax]
		cmp	al, 0Ah
		jnz	short loc_80010A4
		mov	eax, ds:total_line_count
		add	eax, 1
		mov	ds:total_line_count, eax
		add	[ebp+line_scan], 1
		mov	eax, [ebp+line_scan]
		mov	[ebp+line_start], eax
		jmp	short loc_8001059
; ---------------------------------------------------------------------------

loc_8001055:				; CODE XREF: find_occurs_in_text+344j
		add	[ebp+line_scan], 1

loc_8001059:				; CODE XREF: find_occurs_in_text+304j
		mov	eax, ds:text_buffer.end
		cmp	eax, [ebp+line_scan]
		jbe	short loc_8001095
		call	__ctype_b_loc
		mov	ebx, [eax]
		mov	eax, [ebp+line_scan]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; ch_0
		call	to_uchar
		add	esp, 10h
		movzx	eax, al
		add	eax, eax
		add	eax, ebx
		movzx	eax, word ptr [eax]
		movzx	eax, ax
		and	eax, 2000h
		test	eax, eax
		jz	short loc_8001055

loc_8001095:				; CODE XREF: find_occurs_in_text+312j
		mov	edx, [ebp+line_scan]
		mov	eax, [ebp+line_start]
		sub	edx, eax
		mov	eax, edx
		mov	[ebp+reference_length],	eax
		jmp	short loc_80010A8
; ---------------------------------------------------------------------------

loc_80010A4:				; CODE XREF: find_occurs_in_text+2EBj
		add	[ebp+line_scan], 1

loc_80010A8:				; CODE XREF: find_occurs_in_text+2E1j
					; find_occurs_in_text+353j
		mov	eax, [ebp+possible_key.start]
		cmp	eax, [ebp+line_scan]
		ja	short loc_8001032
		mov	eax, [ebp+possible_key.start]
		cmp	eax, [ebp+line_scan]
		jb	loc_8001304

loc_80010BC:				; CODE XREF: find_occurs_in_text+2DBj
		mov	eax, ds:ignore_file
		test	eax, eax
		jz	short loc_80010E1
		sub	esp, 8
		push	offset ignore_table ; table
		lea	eax, [ebp+possible_key]
		push	eax		; word
		call	search_table
		add	esp, 10h
		test	eax, eax
		jnz	loc_800130A

loc_80010E1:				; CODE XREF: find_occurs_in_text+374j
		mov	eax, ds:only_file
		test	eax, eax
		jz	short loc_8001106
		sub	esp, 8
		push	offset only_table ; table
		lea	eax, [ebp+possible_key]
		push	eax		; word
		call	search_table
		add	esp, 10h
		test	eax, eax
		jz	loc_8001310

loc_8001106:				; CODE XREF: find_occurs_in_text+399j
		mov	edx, ds:number_of_occurs
		mov	eax, ds:occurs_alloc
		cmp	edx, eax
		jnz	short loc_8001156
		mov	eax, ds:occurs_alloc
		cmp	eax, 7FFFFFFh
		jbe	short loc_8001126
		call	xalloc_die

loc_8001126:				; CODE XREF: find_occurs_in_text+3D0j
		mov	eax, ds:occurs_alloc
		add	eax, eax
		add	eax, 1
		mov	ds:occurs_alloc, eax
		mov	eax, ds:occurs_alloc
		shl	eax, 4
		mov	edx, eax
		mov	eax, ds:occurs_table
		sub	esp, 8
		push	edx		; size_t
		push	eax		; void *
		call	xrealloc
		add	esp, 10h
		mov	ds:occurs_table, eax

loc_8001156:				; CODE XREF: find_occurs_in_text+3C4j
		mov	eax, ds:occurs_table
		mov	edx, ds:number_of_occurs
		shl	edx, 4
		add	eax, edx
		mov	[ebp+occurs_cursor], eax
		movzx	eax, ds:auto_reference
		test	al, al
		jz	loc_80011F9
		jmp	short loc_80011E3
; ---------------------------------------------------------------------------

loc_800117A:				; CODE XREF: find_occurs_in_text+49Aj
		mov	eax, [ebp+line_scan]
		movzx	eax, byte ptr [eax]
		cmp	al, 0Ah
		jnz	short loc_80011DF
		mov	eax, ds:total_line_count
		add	eax, 1
		mov	ds:total_line_count, eax
		add	[ebp+line_scan], 1
		mov	eax, [ebp+line_scan]
		mov	[ebp+line_start], eax
		jmp	short loc_80011A1
; ---------------------------------------------------------------------------

loc_800119D:				; CODE XREF: find_occurs_in_text+48Cj
		add	[ebp+line_scan], 1

loc_80011A1:				; CODE XREF: find_occurs_in_text+44Cj
		mov	eax, ds:text_buffer.end
		cmp	eax, [ebp+line_scan]
		jbe	short loc_80011E3
		call	__ctype_b_loc
		mov	ebx, [eax]
		mov	eax, [ebp+line_scan]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; ch_0
		call	to_uchar
		add	esp, 10h
		movzx	eax, al
		add	eax, eax
		add	eax, ebx
		movzx	eax, word ptr [eax]
		movzx	eax, ax
		and	eax, 2000h
		test	eax, eax
		jz	short loc_800119D
		jmp	short loc_80011E3
; ---------------------------------------------------------------------------

loc_80011DF:				; CODE XREF: find_occurs_in_text+433j
		add	[ebp+line_scan], 1

loc_80011E3:				; CODE XREF: find_occurs_in_text+429j
					; find_occurs_in_text+45Aj ...
		mov	eax, [ebp+possible_key.start]
		cmp	eax, [ebp+line_scan]
		ja	short loc_800117A
		mov	edx, ds:total_line_count
		mov	eax, [ebp+occurs_cursor]
		mov	[eax+0Ch], edx
		jmp	short loc_8001227
; ---------------------------------------------------------------------------

loc_80011F9:				; CODE XREF: find_occurs_in_text+423j
		movzx	eax, ds:input_reference
		test	al, al
		jz	short loc_8001227
		mov	eax, [ebp+line_start]
		mov	edx, [ebp+possible_key.start]
		sub	eax, edx
		movsx	edx, ax
		mov	eax, [ebp+occurs_cursor]
		mov	[eax+0Ch], edx
		mov	eax, ds:reference_max_width
		cmp	[ebp+reference_length],	eax
		jle	short loc_8001227
		mov	eax, [ebp+reference_length]
		mov	ds:reference_max_width,	eax

loc_8001227:				; CODE XREF: find_occurs_in_text+4A8j
					; find_occurs_in_text+4B3j ...
		movzx	eax, ds:input_reference
		test	al, al
		jz	loc_80012C2
		mov	eax, [ebp+line_start]
		cmp	eax, [ebp+context_start]
		jnz	loc_80012C2
		jmp	short loc_8001248
; ---------------------------------------------------------------------------

loc_8001244:				; CODE XREF: find_occurs_in_text+531j
		add	[ebp+context_start], 1

loc_8001248:				; CODE XREF: find_occurs_in_text+4F3j
		mov	eax, [ebp+context_start]
		cmp	eax, [ebp+context_end]
		jnb	short loc_8001288
		call	__ctype_b_loc
		mov	ebx, [eax]
		mov	eax, [ebp+context_start]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; ch_0
		call	to_uchar
		add	esp, 10h
		movzx	eax, al
		add	eax, eax
		add	eax, ebx
		movzx	eax, word ptr [eax]
		movzx	eax, ax
		and	eax, 2000h
		test	eax, eax
		jz	short loc_8001244
		jmp	short loc_8001288
; ---------------------------------------------------------------------------

loc_8001284:				; CODE XREF: find_occurs_in_text+571j
		add	[ebp+context_start], 1

loc_8001288:				; CODE XREF: find_occurs_in_text+4FFj
					; find_occurs_in_text+533j
		mov	eax, [ebp+context_start]
		cmp	eax, [ebp+context_end]
		jnb	short loc_80012C2
		call	__ctype_b_loc
		mov	ebx, [eax]
		mov	eax, [ebp+context_start]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; ch_0
		call	to_uchar
		add	esp, 10h
		movzx	eax, al
		add	eax, eax
		add	eax, ebx
		movzx	eax, word ptr [eax]
		movzx	eax, ax
		and	eax, 2000h
		test	eax, eax
		jnz	short loc_8001284

loc_80012C2:				; CODE XREF: find_occurs_in_text+4E1j
					; find_occurs_in_text+4EDj ...
		mov	ecx, [ebp+occurs_cursor]
		mov	eax, [ebp+possible_key.start]
		mov	edx, dword ptr [ebp+possible_key.size]
		mov	[ecx], eax
		mov	[ecx+4], edx
		mov	eax, [ebp+context_start]
		mov	edx, [ebp+possible_key.start]
		sub	eax, edx
		mov	edx, eax
		mov	eax, [ebp+occurs_cursor]
		mov	[eax+8], dx
		mov	eax, [ebp+context_end]
		mov	edx, [ebp+possible_key.start]
		sub	eax, edx
		mov	edx, eax
		mov	eax, [ebp+occurs_cursor]
		mov	[eax+0Ah], dx
		mov	eax, ds:number_of_occurs
		add	eax, 1
		mov	ds:number_of_occurs, eax
		jmp	loc_8000EDE
; ---------------------------------------------------------------------------

loc_8001304:				; CODE XREF: find_occurs_in_text+367j
		nop
		jmp	loc_8000EDE
; ---------------------------------------------------------------------------

loc_800130A:				; CODE XREF: find_occurs_in_text+38Cj
		nop
		jmp	loc_8000EDE
; ---------------------------------------------------------------------------

loc_8001310:				; CODE XREF: find_occurs_in_text+3B1j
		nop

loc_8001311:				; CODE XREF: find_occurs_in_text+297j
		jmp	loc_8000EDE
; ---------------------------------------------------------------------------

loc_8001316:				; CODE XREF: find_occurs_in_text+1D8j
		nop
		jmp	short loc_800131A
; ---------------------------------------------------------------------------

loc_8001319:				; CODE XREF: find_occurs_in_text+242j
		nop

loc_800131A:				; CODE XREF: find_occurs_in_text+5C8j
		mov	eax, [ebp+next_context_start]
		mov	[ebp+cursor], eax

loc_8001320:				; CODE XREF: find_occurs_in_text+CFj
		mov	eax, ds:text_buffer.end
		cmp	eax, [ebp+cursor]
		ja	loc_8000E23
		nop
		mov	eax, [ebp+var_C]
		xor	eax, large gs:14h
		jz	short loc_8001340
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_8001340:				; CODE XREF: find_occurs_in_text+5EAj
		mov	ebx, [ebp+var_4]
		leave
		retn
find_occurs_in_text endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl print_spaces(int	number)
print_spaces	proc near		; CODE XREF: output_one_dumb_line+6Fp
					; output_one_dumb_line+B5p ...

counter		= dword	ptr -0Ch
number		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+number]
		mov	[ebp+counter], eax
		jmp	short loc_8001364
; ---------------------------------------------------------------------------

loc_8001353:				; CODE XREF: print_spaces+23j
		sub	esp, 0Ch
		push	20h		; c
		call	putchar_unlocked
		add	esp, 10h
		sub	[ebp+counter], 1

loc_8001364:				; CODE XREF: print_spaces+Cj
		cmp	[ebp+counter], 0
		jg	short loc_8001353
		nop
		leave
		retn
print_spaces	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl print_field(BLOCK field)
print_field	proc near		; CODE XREF: output_one_roff_line+2Bp
					; output_one_roff_line+A8p ...

character	= byte ptr -15h
cursor		= dword	ptr -14h
diacritic	= dword	ptr -10h
base		= dword	ptr -0Ch
field		= BLOCK	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+field.start]
		mov	[ebp+cursor], eax
		jmp	loc_80016E3
; ---------------------------------------------------------------------------

loc_800137E:				; CODE XREF: print_field+37Cj
		mov	eax, [ebp+cursor]
		movzx	eax, byte ptr [eax]
		mov	[ebp+character], al
		movzx	eax, [ebp+character]
		movzx	eax, ds:edited_flag[eax]
		test	al, al
		jz	loc_80016C7
		movzx	eax, [ebp+character]
		movzx	eax, ds:diacrit_diac[eax]
		movsx	eax, al
		mov	[ebp+diacritic], eax
		cmp	[ebp+diacritic], 0
		jz	loc_8001619
		mov	eax, ds:output_format
		cmp	eax, 3
		jnz	loc_8001619
		movzx	eax, [ebp+character]
		movzx	eax, ds:diacrit_base[eax]
		movsx	eax, al
		mov	[ebp+base], eax
		cmp	[ebp+diacritic], 9 ; switch 10 cases
		ja	loc_80016DE	; jumptable 080013EB default case
		mov	eax, [ebp+diacritic]
		shl	eax, 2
		add	eax, offset off_8003F40
		mov	eax, [eax]
		jmp	eax		; switch jump
; ---------------------------------------------------------------------------

loc_80013ED:				; CODE XREF: print_field+7Ej
					; DATA XREF: .rodata:off_8003F40o
		mov	eax, [ebp+base]	; jumptable 080013EB case 1
		cmp	eax, 4Fh
		jz	short loc_8001424
		cmp	eax, 4Fh
		jg	short loc_8001401
		cmp	eax, 41h
		jz	short loc_8001456
		jmp	short loc_800146F
; ---------------------------------------------------------------------------

loc_8001401:				; CODE XREF: print_field+8Bj
		cmp	eax, 61h
		jz	short loc_800143D
		cmp	eax, 6Fh
		jnz	short loc_800146F
		mov	eax, ds:stdout
		push	eax		; stream
		push	5		; n
		push	1		; size
		push	offset aOe	; "\\oe{}"
		call	fwrite_unlocked
		add	esp, 10h
		jmp	short loc_8001481
; ---------------------------------------------------------------------------

loc_8001424:				; CODE XREF: print_field+86j
		mov	eax, ds:stdout
		push	eax		; stream
		push	5		; n
		push	1		; size
		push	offset aOe_0	; "\\OE{}"
		call	fwrite_unlocked
		add	esp, 10h
		jmp	short loc_8001481
; ---------------------------------------------------------------------------

loc_800143D:				; CODE XREF: print_field+97j
		mov	eax, ds:stdout
		push	eax		; stream
		push	5		; n
		push	1		; size
		push	offset aAe	; "\\ae{}"
		call	fwrite_unlocked
		add	esp, 10h
		jmp	short loc_8001481
; ---------------------------------------------------------------------------

loc_8001456:				; CODE XREF: print_field+90j
		mov	eax, ds:stdout
		push	eax		; stream
		push	5		; n
		push	1		; size
		push	offset aAe_0	; "\\AE{}"
		call	fwrite_unlocked
		add	esp, 10h
		jmp	short loc_8001481
; ---------------------------------------------------------------------------

loc_800146F:				; CODE XREF: print_field+92j
					; print_field+9Cj
		sub	esp, 0Ch
		push	20h		; c
		call	putchar_unlocked
		add	esp, 10h
		jmp	loc_8001614
; ---------------------------------------------------------------------------

loc_8001481:				; CODE XREF: print_field+B5j
					; print_field+CEj ...
		jmp	loc_8001614
; ---------------------------------------------------------------------------

loc_8001486:				; CODE XREF: print_field+7Ej
					; DATA XREF: .rodata:off_8003F40o
		cmp	[ebp+base], 69h	; jumptable 080013EB case 2
		jnz	short loc_8001493
		mov	eax, offset asc_8003EE7	; "\\"
		jmp	short loc_8001498
; ---------------------------------------------------------------------------

loc_8001493:				; CODE XREF: print_field+11Dj
		mov	eax, offset locale

loc_8001498:				; CODE XREF: print_field+124j
		sub	esp, 4
		push	[ebp+base]
		push	eax
		push	offset aSC	; "\\'%s%c"
		call	printf
		add	esp, 10h
		jmp	loc_8001614
; ---------------------------------------------------------------------------

loc_80014B1:				; CODE XREF: print_field+7Ej
					; DATA XREF: .rodata:off_8003F40o
		cmp	[ebp+base], 69h	; jumptable 080013EB case 3
		jnz	short loc_80014BE
		mov	eax, offset asc_8003EE7	; "\\"
		jmp	short loc_80014C3
; ---------------------------------------------------------------------------

loc_80014BE:				; CODE XREF: print_field+148j
		mov	eax, offset locale

loc_80014C3:				; CODE XREF: print_field+14Fj
		sub	esp, 4
		push	[ebp+base]
		push	eax
		push	offset aSC_0	; "\\`%s%c"
		call	printf
		add	esp, 10h
		jmp	loc_8001614
; ---------------------------------------------------------------------------

loc_80014DC:				; CODE XREF: print_field+7Ej
					; DATA XREF: .rodata:off_8003F40o
		cmp	[ebp+base], 69h	; jumptable 080013EB case 4
		jnz	short loc_80014E9
		mov	eax, offset asc_8003EE7	; "\\"
		jmp	short loc_80014EE
; ---------------------------------------------------------------------------

loc_80014E9:				; CODE XREF: print_field+173j
		mov	eax, offset locale

loc_80014EE:				; CODE XREF: print_field+17Aj
		sub	esp, 4
		push	[ebp+base]
		push	eax
		push	offset aSC_1	; "\\^%s%c"
		call	printf
		add	esp, 10h
		jmp	loc_8001614
; ---------------------------------------------------------------------------

loc_8001507:				; CODE XREF: print_field+7Ej
					; DATA XREF: .rodata:off_8003F40o
		cmp	[ebp+base], 69h	; jumptable 080013EB case 5
		jnz	short loc_8001514
		mov	eax, offset asc_8003EE7	; "\\"
		jmp	short loc_8001519
; ---------------------------------------------------------------------------

loc_8001514:				; CODE XREF: print_field+19Ej
		mov	eax, offset locale

loc_8001519:				; CODE XREF: print_field+1A5j
		sub	esp, 4
		push	[ebp+base]
		push	eax
		push	offset aSC_2	; "\\\"%s%c"
		call	printf
		add	esp, 10h
		jmp	loc_8001614
; ---------------------------------------------------------------------------

loc_8001532:				; CODE XREF: print_field+7Ej
					; DATA XREF: .rodata:off_8003F40o
		cmp	[ebp+base], 69h	; jumptable 080013EB case 6
		jnz	short loc_800153F
		mov	eax, offset asc_8003EE7	; "\\"
		jmp	short loc_8001544
; ---------------------------------------------------------------------------

loc_800153F:				; CODE XREF: print_field+1C9j
		mov	eax, offset locale

loc_8001544:				; CODE XREF: print_field+1D0j
		sub	esp, 4
		push	[ebp+base]
		push	eax
		push	offset aSC_3	; "\\~%s%c"
		call	printf
		add	esp, 10h
		jmp	loc_8001614
; ---------------------------------------------------------------------------

loc_800155D:				; CODE XREF: print_field+7Ej
					; DATA XREF: .rodata:off_8003F40o
		sub	esp, 8		; jumptable 080013EB case 7
		push	[ebp+base]
		push	offset aCC	; "\\c{%c}"
		call	printf
		add	esp, 10h
		jmp	loc_8001614
; ---------------------------------------------------------------------------

loc_8001575:				; CODE XREF: print_field+7Ej
					; DATA XREF: .rodata:off_8003F40o
		mov	eax, [ebp+base]	; jumptable 080013EB case 8
		cmp	eax, 41h
		jz	short loc_800159B
		cmp	eax, 61h
		jnz	short loc_80015B4
		mov	eax, ds:stdout
		push	eax		; stream
		push	5		; n
		push	1		; size
		push	offset aAa	; "\\aa{}"
		call	fwrite_unlocked
		add	esp, 10h
		jmp	short loc_80015C3
; ---------------------------------------------------------------------------

loc_800159B:				; CODE XREF: print_field+20Ej
		mov	eax, ds:stdout
		push	eax		; stream
		push	5		; n
		push	1		; size
		push	offset aAa_0	; "\\AA{}"
		call	fwrite_unlocked
		add	esp, 10h
		jmp	short loc_80015C3
; ---------------------------------------------------------------------------

loc_80015B4:				; CODE XREF: print_field+213j
		sub	esp, 0Ch
		push	20h		; c
		call	putchar_unlocked
		add	esp, 10h
		jmp	short loc_8001614
; ---------------------------------------------------------------------------

loc_80015C3:				; CODE XREF: print_field+22Cj
					; print_field+245j
		jmp	short loc_8001614
; ---------------------------------------------------------------------------

loc_80015C5:				; CODE XREF: print_field+7Ej
					; DATA XREF: .rodata:off_8003F40o
		mov	eax, [ebp+base]	; jumptable 080013EB case 9
		cmp	eax, 4Fh
		jz	short loc_80015EB
		cmp	eax, 6Fh
		jnz	short loc_8001604
		mov	eax, ds:stdout
		push	eax		; stream
		push	4		; n
		push	1		; size
		push	offset aO	; "\\o{}"
		call	fwrite_unlocked
		add	esp, 10h
		jmp	short loc_8001613
; ---------------------------------------------------------------------------

loc_80015EB:				; CODE XREF: print_field+25Ej
		mov	eax, ds:stdout
		push	eax		; stream
		push	4		; n
		push	1		; size
		push	offset aO_0	; "\\O{}"
		call	fwrite_unlocked
		add	esp, 10h
		jmp	short loc_8001613
; ---------------------------------------------------------------------------

loc_8001604:				; CODE XREF: print_field+263j
		sub	esp, 0Ch
		push	20h		; c
		call	putchar_unlocked
		add	esp, 10h
		jmp	short $+2
; ---------------------------------------------------------------------------

loc_8001613:				; CODE XREF: print_field+27Cj
					; print_field+295j ...
		nop

loc_8001614:				; CODE XREF: print_field+10Fj
					; print_field:loc_8001481j ...
		jmp	loc_80016DE	; jumptable 080013EB default case
; ---------------------------------------------------------------------------

loc_8001619:				; CODE XREF: print_field+42j
					; print_field+50j
		movzx	eax, [ebp+character]
		cmp	eax, 5Ch
		jz	short loc_800169F
		cmp	eax, 5Ch
		jg	short loc_800163C
		cmp	eax, 22h
		jz	short loc_800164D
		cmp	eax, 22h
		jl	loc_80016B8
		cmp	eax, 26h
		jg	short loc_80016B8
		jmp	short loc_8001669
; ---------------------------------------------------------------------------

loc_800163C:				; CODE XREF: print_field+2B8j
		cmp	eax, 7Bh
		jz	short loc_8001688
		cmp	eax, 7Dh
		jz	short loc_8001688
		cmp	eax, 5Fh
		jz	short loc_8001669
		jmp	short loc_80016B8
; ---------------------------------------------------------------------------

loc_800164D:				; CODE XREF: print_field+2BDj
		sub	esp, 0Ch
		push	22h		; c
		call	putchar_unlocked
		add	esp, 10h
		sub	esp, 0Ch
		push	22h		; c
		call	putchar_unlocked
		add	esp, 10h
		jmp	short loc_80016DF
; ---------------------------------------------------------------------------

loc_8001669:				; CODE XREF: print_field+2CDj
					; print_field+2DCj
		sub	esp, 0Ch
		push	5Ch		; c
		call	putchar_unlocked
		add	esp, 10h
		movzx	eax, [ebp+character]
		sub	esp, 0Ch
		push	eax		; c
		call	putchar_unlocked
		add	esp, 10h
		jmp	short loc_80016DF
; ---------------------------------------------------------------------------

loc_8001688:				; CODE XREF: print_field+2D2j
					; print_field+2D7j
		movzx	eax, [ebp+character]
		sub	esp, 8
		push	eax
		push	offset aC	; "$\\%c$"
		call	printf
		add	esp, 10h
		jmp	short loc_80016DF
; ---------------------------------------------------------------------------

loc_800169F:				; CODE XREF: print_field+2B3j
		mov	eax, ds:stdout
		push	eax		; stream
		push	0Ch		; n
		push	1		; size
		push	offset aBackslash ; "\\backslash{}"
		call	fwrite_unlocked
		add	esp, 10h
		jmp	short loc_80016DF
; ---------------------------------------------------------------------------

loc_80016B8:				; CODE XREF: print_field+2C2j
					; print_field+2CBj ...
		sub	esp, 0Ch
		push	20h		; c
		call	putchar_unlocked
		add	esp, 10h
		jmp	short loc_80016DF
; ---------------------------------------------------------------------------

loc_80016C7:				; CODE XREF: print_field+27j
		mov	eax, [ebp+cursor]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; c
		call	putchar_unlocked
		add	esp, 10h
		jmp	short loc_80016DF
; ---------------------------------------------------------------------------

loc_80016DE:				; CODE XREF: print_field+6Bj
					; print_field+7Ej ...
		nop			; jumptable 080013EB default case

loc_80016DF:				; CODE XREF: print_field+2FAj
					; print_field+319j ...
		add	[ebp+cursor], 1

loc_80016E3:				; CODE XREF: print_field+Cj
		mov	eax, [ebp+field.end]
		cmp	eax, [ebp+cursor]
		ja	loc_800137E
		nop
		leave
		retn
print_field	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void fix_output_parameters()
fix_output_parameters proc near		; CODE XREF: main+7DAp

file_index	= dword	ptr -2Ch
line_ordinal	= dword	ptr -28h
reference_width	= dword	ptr -24h
character	= dword	ptr -20h
cursor		= dword	ptr -1Ch
ordinal_string	= byte ptr -18h
var_C		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		mov	eax, large gs:14h
		mov	[ebp+var_C], eax
		xor	eax, eax
		movzx	eax, ds:auto_reference
		test	al, al
		jz	loc_8001806
		mov	ds:reference_max_width,	0
		mov	[ebp+file_index], 0
		jmp	loc_80017D2
; ---------------------------------------------------------------------------

loc_8001728:				; CODE XREF: fix_output_parameters+E8j
		mov	eax, ds:file_line_count
		mov	edx, [ebp+file_index]
		shl	edx, 2
		add	eax, edx
		mov	eax, [eax]
		add	eax, 1
		mov	[ebp+line_ordinal], eax
		cmp	[ebp+file_index], 0
		jle	short loc_800175B
		mov	eax, ds:file_line_count
		mov	edx, [ebp+file_index]
		add	edx, 3FFFFFFFh
		shl	edx, 2
		add	eax, edx
		mov	eax, [eax]
		sub	[ebp+line_ordinal], eax

loc_800175B:				; CODE XREF: fix_output_parameters+4Fj
		sub	esp, 4
		push	[ebp+line_ordinal]
		push	offset aD	; "%d"
		lea	eax, [ebp+ordinal_string]
		push	eax		; s
		call	sprintf
		add	esp, 10h
		sub	esp, 0Ch
		lea	eax, [ebp+ordinal_string]
		push	eax		; s
		call	strlen
		add	esp, 10h
		mov	[ebp+reference_width], eax
		mov	eax, ds:input_file_name
		mov	edx, [ebp+file_index]
		shl	edx, 2
		add	eax, edx
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_80017BC
		mov	eax, ds:input_file_name
		mov	edx, [ebp+file_index]
		shl	edx, 2
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax		; s
		call	strlen
		add	esp, 10h
		mov	edx, eax
		mov	eax, [ebp+reference_width]
		add	eax, edx
		mov	[ebp+reference_width], eax

loc_80017BC:				; CODE XREF: fix_output_parameters+A3j
		mov	eax, ds:reference_max_width
		cmp	[ebp+reference_width], eax
		jle	short loc_80017CE
		mov	eax, [ebp+reference_width]
		mov	ds:reference_max_width,	eax

loc_80017CE:				; CODE XREF: fix_output_parameters+D2j
		add	[ebp+file_index], 1

loc_80017D2:				; CODE XREF: fix_output_parameters+31j
		mov	eax, ds:number_input_files
		cmp	[ebp+file_index], eax
		jl	loc_8001728
		mov	eax, ds:reference_max_width
		add	eax, 1
		mov	ds:reference_max_width,	eax
		mov	eax, ds:reference_max_width
		add	eax, 1
		sub	esp, 0Ch
		push	eax		; size_t
		call	xmalloc
		add	esp, 10h
		mov	ds:reference.start, eax

loc_8001806:				; CODE XREF: fix_output_parameters+1Aj
		movzx	eax, ds:auto_reference
		test	al, al
		jnz	short loc_800181C
		movzx	eax, ds:input_reference
		test	al, al
		jz	short loc_8001844

loc_800181C:				; CODE XREF: fix_output_parameters+11Dj
		movzx	eax, ds:right_reference
		xor	eax, 1
		test	al, al
		jz	short loc_8001844
		mov	eax, line_width
		mov	ecx, ds:reference_max_width
		mov	edx, gap_size
		add	edx, ecx
		sub	eax, edx
		mov	line_width, eax

loc_8001844:				; CODE XREF: fix_output_parameters+128j
					; fix_output_parameters+136j
		mov	eax, line_width
		mov	edx, eax
		shr	edx, 1Fh
		add	eax, edx
		sar	eax, 1
		mov	ds:half_line_width, eax
		mov	edx, ds:half_line_width
		mov	eax, gap_size
		sub	edx, eax
		mov	eax, edx
		mov	ds:before_max_width, eax
		mov	eax, ds:half_line_width
		mov	ds:keyafter_max_width, eax
		mov	eax, truncation_string
		test	eax, eax
		jz	short loc_80018A2
		mov	eax, truncation_string
		movzx	eax, byte ptr [eax]
		test	al, al
		jz	short loc_80018A2
		mov	eax, truncation_string
		sub	esp, 0Ch
		push	eax		; s
		call	strlen
		add	esp, 10h
		mov	ds:truncation_string_length, eax
		jmp	short loc_80018AC
; ---------------------------------------------------------------------------

loc_80018A2:				; CODE XREF: fix_output_parameters+18Aj
					; fix_output_parameters+196j
		mov	truncation_string, 0

loc_80018AC:				; CODE XREF: fix_output_parameters+1AEj
		movzx	eax, gnu_extensions
		test	al, al
		jz	short loc_80018F4
		mov	eax, ds:before_max_width
		mov	edx, ds:truncation_string_length
		add	edx, edx
		sub	eax, edx
		mov	ds:before_max_width, eax
		mov	eax, ds:before_max_width
		test	eax, eax
		jns	short loc_80018DE
		mov	ds:before_max_width, 0

loc_80018DE:				; CODE XREF: fix_output_parameters+1E0j
		mov	eax, ds:keyafter_max_width
		mov	edx, ds:truncation_string_length
		add	edx, edx
		sub	eax, edx
		mov	ds:keyafter_max_width, eax
		jmp	short loc_800190B
; ---------------------------------------------------------------------------

loc_80018F4:				; CODE XREF: fix_output_parameters+1C3j
		mov	eax, ds:keyafter_max_width
		mov	edx, ds:truncation_string_length
		add	edx, edx
		add	edx, 1
		sub	eax, edx
		mov	ds:keyafter_max_width, eax

loc_800190B:				; CODE XREF: fix_output_parameters+200j
		mov	[ebp+character], 0
		jmp	short loc_8001942
; ---------------------------------------------------------------------------

loc_8001914:				; CODE XREF: fix_output_parameters+257j
		call	__ctype_b_loc
		mov	eax, [eax]
		mov	edx, [ebp+character]
		add	edx, edx
		add	eax, edx
		movzx	eax, word ptr [eax]
		movzx	eax, ax
		and	eax, 2000h
		test	eax, eax
		setnz	al
		mov	edx, eax
		mov	eax, [ebp+character]
		add	eax, offset edited_flag
		mov	[eax], dl
		add	[ebp+character], 1

loc_8001942:				; CODE XREF: fix_output_parameters+220j
		cmp	[ebp+character], 0FFh
		jle	short loc_8001914
		mov	ds:edited_flag+0Ch, 1
		mov	eax, ds:output_format
		cmp	eax, 2
		jz	short loc_8001968
		cmp	eax, 2
		jb	short loc_80019DD
		cmp	eax, 3
		jz	short loc_8001971
		jmp	short loc_80019DE
; ---------------------------------------------------------------------------

loc_8001968:				; CODE XREF: fix_output_parameters+268j
		mov	ds:edited_flag+22h, 1
		jmp	short loc_80019DE
; ---------------------------------------------------------------------------

loc_8001971:				; CODE XREF: fix_output_parameters+272j
		mov	[ebp+cursor], offset a_	; "$%&#_{}\\"
		jmp	short loc_800199D
; ---------------------------------------------------------------------------

loc_800197A:				; CODE XREF: fix_output_parameters+2B3j
		mov	eax, [ebp+cursor]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; ch_0
		call	to_uchar
		add	esp, 10h
		movzx	eax, al
		mov	ds:edited_flag[eax], 1
		add	[ebp+cursor], 1

loc_800199D:				; CODE XREF: fix_output_parameters+286j
		mov	eax, [ebp+cursor]
		movzx	eax, byte ptr [eax]
		test	al, al
		jnz	short loc_800197A
		mov	[ebp+character], 80h
		jmp	short loc_80019D2
; ---------------------------------------------------------------------------

loc_80019B0:				; CODE XREF: fix_output_parameters+2E7j
		mov	eax, [ebp+character]
		movzx	eax, al
		movzx	eax, ds:diacrit_diac[eax]
		test	al, al
		setnz	al
		mov	edx, eax
		mov	eax, [ebp+character]
		add	eax, offset edited_flag
		mov	[eax], dl
		add	[ebp+character], 1

loc_80019D2:				; CODE XREF: fix_output_parameters+2BCj
		cmp	[ebp+character], 0FFh
		jle	short loc_80019B0
		jmp	short loc_80019DE
; ---------------------------------------------------------------------------

loc_80019DD:				; CODE XREF: fix_output_parameters+26Dj
		nop

loc_80019DE:				; CODE XREF: fix_output_parameters+274j
					; fix_output_parameters+27Dj ...
		nop
		mov	eax, [ebp+var_C]
		xor	eax, large gs:14h
		jz	short locret_80019F0
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

locret_80019F0:				; CODE XREF: fix_output_parameters+2F7j
		leave
		retn
fix_output_parameters endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl define_all_fields(OCCURS	*occurs)
define_all_fields proc near		; CODE XREF: generate_all_output+59p

cursor		= dword	ptr -40h
left_field_start= dword	ptr -3Ch
file_index	= dword	ptr -38h
file_name	= dword	ptr -34h
line_ordinal	= dword	ptr -30h
left_context_start= dword ptr -2Ch
right_context_end= dword ptr -28h
count		= dword	ptr -24h
count_0		= dword	ptr -20h
count_1		= dword	ptr -1Ch
tail_max_width	= dword	ptr -18h
count_2		= dword	ptr -14h
head_max_width	= dword	ptr -10h
count_3		= dword	ptr -0Ch
var_4		= dword	ptr -4
occurs		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 44h
		mov	eax, [ebp+occurs]
		mov	eax, [eax]
		mov	ds:keyafter.start, eax
		mov	edx, ds:keyafter.start
		mov	eax, [ebp+occurs]
		movzx	eax, word ptr [eax+4]
		cwde
		add	eax, edx
		mov	ds:keyafter.end, eax
		mov	edx, ds:keyafter.start
		mov	eax, [ebp+occurs]
		movzx	eax, word ptr [eax+8]
		cwde
		add	eax, edx
		mov	[ebp+left_context_start], eax
		mov	edx, ds:keyafter.start
		mov	eax, [ebp+occurs]
		movzx	eax, word ptr [eax+0Ah]
		cwde
		add	eax, edx
		mov	[ebp+right_context_end], eax
		mov	eax, ds:keyafter.end
		mov	[ebp+cursor], eax
		jmp	loc_8001AFB
; ---------------------------------------------------------------------------

loc_8001A4B:				; CODE XREF: define_all_fields+121j
		mov	eax, [ebp+cursor]
		mov	ds:keyafter.end, eax
		mov	eax, ds:dword_8003800
		test	eax, eax
		jz	short loc_8001AA1
		mov	edx, [ebp+right_context_end]
		mov	eax, [ebp+cursor]
		sub	edx, eax
		mov	eax, edx
		sub	esp, 0Ch
		push	0		; regs
		push	0		; start
		push	eax		; length
		push	[ebp+cursor]	; string
		push	offset stru_8003804 ; buffer
		call	re_match
		add	esp, 20h
		mov	[ebp+count], eax
		cmp	[ebp+count], 0FFFFFFFEh
		jnz	short loc_8001A8C
		call	matcher_error
; ---------------------------------------------------------------------------

loc_8001A8C:				; CODE XREF: define_all_fields+93j
		cmp	[ebp+count], 0FFFFFFFFh
		jz	short loc_8001A97
		mov	eax, [ebp+count]
		jmp	short loc_8001A9C
; ---------------------------------------------------------------------------

loc_8001A97:				; CODE XREF: define_all_fields+9Ej
		mov	eax, 1

loc_8001A9C:				; CODE XREF: define_all_fields+A3j
		add	[ebp+cursor], eax
		jmp	short loc_8001AFB
; ---------------------------------------------------------------------------

loc_8001AA1:				; CODE XREF: define_all_fields+68j
		mov	eax, [ebp+cursor]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; ch_0
		call	to_uchar
		add	esp, 10h
		movzx	eax, al
		movzx	eax, ds:s[eax]
		test	al, al
		jz	short loc_8001AF7
		jmp	short loc_8001ACA
; ---------------------------------------------------------------------------

loc_8001AC6:				; CODE XREF: define_all_fields+101j
		add	[ebp+cursor], 1

loc_8001ACA:				; CODE XREF: define_all_fields+D2j
		mov	eax, [ebp+cursor]
		cmp	eax, [ebp+right_context_end]
		jnb	short loc_8001AFB
		mov	eax, [ebp+cursor]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; ch_0
		call	to_uchar
		add	esp, 10h
		movzx	eax, al
		movzx	eax, ds:s[eax]
		test	al, al
		jnz	short loc_8001AC6
		jmp	short loc_8001AFB
; ---------------------------------------------------------------------------

loc_8001AF7:				; CODE XREF: define_all_fields+D0j
		add	[ebp+cursor], 1

loc_8001AFB:				; CODE XREF: define_all_fields+54j
					; define_all_fields+ADj ...
		mov	eax, [ebp+cursor]
		cmp	eax, [ebp+right_context_end]
		jnb	short loc_8001B19
		mov	eax, ds:keyafter.start
		mov	edx, ds:keyafter_max_width
		add	eax, edx
		cmp	eax, [ebp+cursor]
		jnb	loc_8001A4B

loc_8001B19:				; CODE XREF: define_all_fields+10Fj
		mov	eax, ds:keyafter.start
		mov	edx, ds:keyafter_max_width
		add	eax, edx
		cmp	eax, [ebp+cursor]
		jb	short loc_8001B33
		mov	eax, [ebp+cursor]
		mov	ds:keyafter.end, eax

loc_8001B33:				; CODE XREF: define_all_fields+137j
		mov	eax, truncation_string
		test	eax, eax
		jz	short loc_8001B4D
		mov	eax, ds:keyafter.end
		cmp	eax, [ebp+right_context_end]
		jnb	short loc_8001B4D
		mov	eax, 1
		jmp	short loc_8001B52
; ---------------------------------------------------------------------------

loc_8001B4D:				; CODE XREF: define_all_fields+148j
					; define_all_fields+152j
		mov	eax, 0

loc_8001B52:				; CODE XREF: define_all_fields+159j
		mov	ds:keyafter_truncation,	eax
		jmp	short loc_8001B66
; ---------------------------------------------------------------------------

loc_8001B59:				; CODE XREF: define_all_fields+1B8j
		mov	eax, ds:keyafter.end
		sub	eax, 1
		mov	ds:keyafter.end, eax

loc_8001B66:				; CODE XREF: define_all_fields+165j
		mov	edx, ds:keyafter.end
		mov	eax, ds:keyafter.start
		cmp	edx, eax
		jbe	short loc_8001BAC
		call	__ctype_b_loc
		mov	ebx, [eax]
		mov	eax, ds:keyafter.end
		sub	eax, 1
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; ch_0
		call	to_uchar
		add	esp, 10h
		movzx	eax, al
		add	eax, eax
		add	eax, ebx
		movzx	eax, word ptr [eax]
		movzx	eax, ax
		and	eax, 2000h
		test	eax, eax
		jnz	short loc_8001B59

loc_8001BAC:				; CODE XREF: define_all_fields+181j
		mov	eax, [ebp+occurs]
		movzx	eax, word ptr [eax+8]
		cwde
		neg	eax
		mov	ecx, eax
		mov	edx, ds:half_line_width
		mov	eax, ds:maximum_word_length
		add	eax, edx
		cmp	ecx, eax
		jle	loc_8001C97
		mov	eax, ds:keyafter.start
		mov	ecx, ds:half_line_width
		mov	edx, ds:maximum_word_length
		add	edx, ecx
		neg	edx
		add	eax, edx
		mov	[ebp+left_field_start],	eax
		mov	eax, ds:dword_8003800
		test	eax, eax
		jz	short loc_8001C39
		mov	eax, ds:keyafter.start
		mov	edx, eax
		mov	eax, [ebp+left_field_start]
		sub	edx, eax
		mov	eax, edx
		sub	esp, 0Ch
		push	0		; regs
		push	0		; start
		push	eax		; length
		push	[ebp+left_field_start] ; string
		push	offset stru_8003804 ; buffer
		call	re_match
		add	esp, 20h
		mov	[ebp+count_0], eax
		cmp	[ebp+count_0], 0FFFFFFFEh
		jnz	short loc_8001C24
		call	matcher_error
; ---------------------------------------------------------------------------

loc_8001C24:				; CODE XREF: define_all_fields+22Bj
		cmp	[ebp+count_0], 0FFFFFFFFh
		jz	short loc_8001C2F
		mov	eax, [ebp+count_0]
		jmp	short loc_8001C34
; ---------------------------------------------------------------------------

loc_8001C2F:				; CODE XREF: define_all_fields+236j
		mov	eax, 1

loc_8001C34:				; CODE XREF: define_all_fields+23Bj
		add	[ebp+left_field_start],	eax
		jmp	short loc_8001CAA
; ---------------------------------------------------------------------------

loc_8001C39:				; CODE XREF: define_all_fields+1FCj
		mov	eax, [ebp+left_field_start]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; ch_0
		call	to_uchar
		add	esp, 10h
		movzx	eax, al
		movzx	eax, ds:s[eax]
		test	al, al
		jz	short loc_8001C91
		jmp	short loc_8001C62
; ---------------------------------------------------------------------------

loc_8001C5E:				; CODE XREF: define_all_fields+29Bj
		add	[ebp+left_field_start],	1

loc_8001C62:				; CODE XREF: define_all_fields+26Aj
		mov	eax, ds:keyafter.start
		cmp	eax, [ebp+left_field_start]
		jbe	short loc_8001CAA
		mov	eax, [ebp+left_field_start]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; ch_0
		call	to_uchar
		add	esp, 10h
		movzx	eax, al
		movzx	eax, ds:s[eax]
		test	al, al
		jnz	short loc_8001C5E
		jmp	short loc_8001CAA
; ---------------------------------------------------------------------------

loc_8001C91:				; CODE XREF: define_all_fields+268j
		add	[ebp+left_field_start],	1
		jmp	short loc_8001CAA
; ---------------------------------------------------------------------------

loc_8001C97:				; CODE XREF: define_all_fields+1D5j
		mov	edx, ds:keyafter.start
		mov	eax, [ebp+occurs]
		movzx	eax, word ptr [eax+8]
		cwde
		add	eax, edx
		mov	[ebp+left_field_start],	eax

loc_8001CAA:				; CODE XREF: define_all_fields+245j
					; define_all_fields+278j ...
		mov	eax, [ebp+left_field_start]
		mov	ds:before.start, eax
		mov	eax, ds:keyafter.start
		mov	ds:before.end, eax
		jmp	short loc_8001CCB
; ---------------------------------------------------------------------------

loc_8001CBE:				; CODE XREF: define_all_fields+321j
		mov	eax, ds:before.end
		sub	eax, 1
		mov	ds:before.end, eax

loc_8001CCB:				; CODE XREF: define_all_fields+2CAj
		mov	edx, ds:before.end
		mov	eax, ds:before.start
		cmp	edx, eax
		jbe	loc_8001DF0
		call	__ctype_b_loc
		mov	ebx, [eax]
		mov	eax, ds:before.end
		sub	eax, 1
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; ch_0
		call	to_uchar
		add	esp, 10h
		movzx	eax, al
		add	eax, eax
		add	eax, ebx
		movzx	eax, word ptr [eax]
		movzx	eax, ax
		and	eax, 2000h
		test	eax, eax
		jnz	short loc_8001CBE
		jmp	loc_8001DF0
; ---------------------------------------------------------------------------

loc_8001D1A:				; CODE XREF: define_all_fields+412j
		mov	eax, ds:dword_8003800
		test	eax, eax
		jz	short loc_8001D79
		mov	eax, ds:before.end
		mov	edx, eax
		mov	eax, ds:before.start
		sub	edx, eax
		mov	eax, ds:before.start
		sub	esp, 0Ch
		push	0		; regs
		push	0		; start
		push	edx		; length
		push	eax		; string
		push	offset stru_8003804 ; buffer
		call	re_match
		add	esp, 20h
		mov	[ebp+count_1], eax
		cmp	[ebp+count_1], 0FFFFFFFEh
		jnz	short loc_8001D5A
		call	matcher_error
; ---------------------------------------------------------------------------

loc_8001D5A:				; CODE XREF: define_all_fields+361j
		mov	edx, ds:before.start
		cmp	[ebp+count_1], 0FFFFFFFFh
		jz	short loc_8001D6B
		mov	eax, [ebp+count_1]
		jmp	short loc_8001D70
; ---------------------------------------------------------------------------

loc_8001D6B:				; CODE XREF: define_all_fields+372j
		mov	eax, 1

loc_8001D70:				; CODE XREF: define_all_fields+377j
		add	eax, edx
		mov	ds:before.start, eax
		jmp	short loc_8001DF0
; ---------------------------------------------------------------------------

loc_8001D79:				; CODE XREF: define_all_fields+32Fj
		mov	eax, ds:before.start
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; ch_0
		call	to_uchar
		add	esp, 10h
		movzx	eax, al
		movzx	eax, ds:s[eax]
		test	al, al
		jz	short loc_8001DE3
		jmp	short loc_8001DAD
; ---------------------------------------------------------------------------

loc_8001DA0:				; CODE XREF: define_all_fields+3EDj
		mov	eax, ds:before.start
		add	eax, 1
		mov	ds:before.start, eax

loc_8001DAD:				; CODE XREF: define_all_fields+3ACj
		mov	edx, ds:before.start
		mov	eax, ds:before.end
		cmp	edx, eax
		jnb	short loc_8001DF0
		mov	eax, ds:before.start
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; ch_0
		call	to_uchar
		add	esp, 10h
		movzx	eax, al
		movzx	eax, ds:s[eax]
		test	al, al
		jnz	short loc_8001DA0
		jmp	short loc_8001DF0
; ---------------------------------------------------------------------------

loc_8001DE3:				; CODE XREF: define_all_fields+3AAj
		mov	eax, ds:before.start
		add	eax, 1
		mov	ds:before.start, eax

loc_8001DF0:				; CODE XREF: define_all_fields+2E6j
					; define_all_fields+323j ...
		mov	eax, ds:before.start
		mov	edx, ds:before_max_width
		add	edx, eax
		mov	eax, ds:before.end
		cmp	edx, eax
		jb	loc_8001D1A
		mov	eax, truncation_string
		test	eax, eax
		jz	short loc_8001E73
		mov	eax, ds:before.start
		mov	[ebp+cursor], eax
		jmp	short loc_8001E21
; ---------------------------------------------------------------------------

loc_8001E1D:				; CODE XREF: define_all_fields+46Cj
		sub	[ebp+cursor], 1

loc_8001E21:				; CODE XREF: define_all_fields+429j
		mov	eax, ds:text_buffer.start
		cmp	eax, [ebp+cursor]
		jnb	short loc_8001E60
		call	__ctype_b_loc
		mov	ebx, [eax]
		mov	eax, [ebp+cursor]
		sub	eax, 1
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; ch_0
		call	to_uchar
		add	esp, 10h
		movzx	eax, al
		add	eax, eax
		add	eax, ebx
		movzx	eax, word ptr [eax]
		movzx	eax, ax
		and	eax, 2000h
		test	eax, eax
		jnz	short loc_8001E1D

loc_8001E60:				; CODE XREF: define_all_fields+437j
		mov	eax, [ebp+cursor]
		cmp	eax, [ebp+left_context_start]
		setnbe	al
		movzx	eax, al
		mov	ds:before_truncation, eax
		jmp	short loc_8001E8C
; ---------------------------------------------------------------------------

loc_8001E73:				; CODE XREF: define_all_fields+41Fj
		mov	ds:before_truncation, 0
		jmp	short loc_8001E8C
; ---------------------------------------------------------------------------

loc_8001E7F:				; CODE XREF: define_all_fields+4DBj
		mov	eax, ds:before.start
		add	eax, 1
		mov	ds:before.start, eax

loc_8001E8C:				; CODE XREF: define_all_fields+47Fj
					; define_all_fields+48Bj
		mov	edx, ds:before.start
		mov	eax, ds:text_buffer.end
		cmp	edx, eax
		jnb	short loc_8001ECF
		call	__ctype_b_loc
		mov	ebx, [eax]
		mov	eax, ds:before.start
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; ch_0
		call	to_uchar
		add	esp, 10h
		movzx	eax, al
		add	eax, eax
		add	eax, ebx
		movzx	eax, word ptr [eax]
		movzx	eax, ax
		and	eax, 2000h
		test	eax, eax
		jnz	short loc_8001E7F

loc_8001ECF:				; CODE XREF: define_all_fields+4A7j
		mov	eax, ds:before_max_width
		mov	edx, ds:before.end
		mov	ecx, edx
		mov	edx, ds:before.start
		sub	ecx, edx
		mov	edx, ecx
		sub	eax, edx
		mov	edx, eax
		mov	eax, gap_size
		sub	edx, eax
		mov	eax, edx
		mov	[ebp+tail_max_width], eax
		cmp	[ebp+tail_max_width], 0
		jle	loc_80020F7
		mov	eax, ds:keyafter.end
		mov	ds:tail.start, eax
		jmp	short loc_8001F19
; ---------------------------------------------------------------------------

loc_8001F0C:				; CODE XREF: define_all_fields+568j
		mov	eax, ds:tail.start
		add	eax, 1
		mov	ds:tail.start, eax

loc_8001F19:				; CODE XREF: define_all_fields+518j
		mov	edx, ds:tail.start
		mov	eax, ds:text_buffer.end
		cmp	edx, eax
		jnb	short loc_8001F5C
		call	__ctype_b_loc
		mov	ebx, [eax]
		mov	eax, ds:tail.start
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; ch_0
		call	to_uchar
		add	esp, 10h
		movzx	eax, al
		add	eax, eax
		add	eax, ebx
		movzx	eax, word ptr [eax]
		movzx	eax, ax
		and	eax, 2000h
		test	eax, eax
		jnz	short loc_8001F0C

loc_8001F5C:				; CODE XREF: define_all_fields+534j
		mov	eax, ds:tail.start
		mov	ds:tail.end, eax
		mov	eax, ds:tail.end
		mov	[ebp+cursor], eax
		jmp	loc_8002023
; ---------------------------------------------------------------------------

loc_8001F73:				; CODE XREF: define_all_fields+647j
		mov	eax, [ebp+cursor]
		mov	ds:tail.end, eax
		mov	eax, ds:dword_8003800
		test	eax, eax
		jz	short loc_8001FC9
		mov	edx, [ebp+right_context_end]
		mov	eax, [ebp+cursor]
		sub	edx, eax
		mov	eax, edx
		sub	esp, 0Ch
		push	0		; regs
		push	0		; start
		push	eax		; length
		push	[ebp+cursor]	; string
		push	offset stru_8003804 ; buffer
		call	re_match
		add	esp, 20h
		mov	[ebp+count_2], eax
		cmp	[ebp+count_2], 0FFFFFFFEh
		jnz	short loc_8001FB4
		call	matcher_error
; ---------------------------------------------------------------------------

loc_8001FB4:				; CODE XREF: define_all_fields+5BBj
		cmp	[ebp+count_2], 0FFFFFFFFh
		jz	short loc_8001FBF
		mov	eax, [ebp+count_2]
		jmp	short loc_8001FC4
; ---------------------------------------------------------------------------

loc_8001FBF:				; CODE XREF: define_all_fields+5C6j
		mov	eax, 1

loc_8001FC4:				; CODE XREF: define_all_fields+5CBj
		add	[ebp+cursor], eax
		jmp	short loc_8002023
; ---------------------------------------------------------------------------

loc_8001FC9:				; CODE XREF: define_all_fields+590j
		mov	eax, [ebp+cursor]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; ch_0
		call	to_uchar
		add	esp, 10h
		movzx	eax, al
		movzx	eax, ds:s[eax]
		test	al, al
		jz	short loc_800201F
		jmp	short loc_8001FF2
; ---------------------------------------------------------------------------

loc_8001FEE:				; CODE XREF: define_all_fields+629j
		add	[ebp+cursor], 1

loc_8001FF2:				; CODE XREF: define_all_fields+5FAj
		mov	eax, [ebp+cursor]
		cmp	eax, [ebp+right_context_end]
		jnb	short loc_8002023
		mov	eax, [ebp+cursor]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; ch_0
		call	to_uchar
		add	esp, 10h
		movzx	eax, al
		movzx	eax, ds:s[eax]
		test	al, al
		jnz	short loc_8001FEE
		jmp	short loc_8002023
; ---------------------------------------------------------------------------

loc_800201F:				; CODE XREF: define_all_fields+5F8j
		add	[ebp+cursor], 1

loc_8002023:				; CODE XREF: define_all_fields+57Cj
					; define_all_fields+5D5j ...
		mov	eax, [ebp+cursor]
		cmp	eax, [ebp+right_context_end]
		jnb	short loc_800203F
		mov	edx, ds:tail.start
		mov	eax, [ebp+tail_max_width]
		add	eax, edx
		cmp	eax, [ebp+cursor]
		ja	loc_8001F73

loc_800203F:				; CODE XREF: define_all_fields+637j
		mov	edx, ds:tail.start
		mov	eax, [ebp+tail_max_width]
		add	eax, edx
		cmp	eax, [ebp+cursor]
		jbe	short loc_8002057
		mov	eax, [ebp+cursor]
		mov	ds:tail.end, eax

loc_8002057:				; CODE XREF: define_all_fields+65Bj
		mov	edx, ds:tail.end
		mov	eax, ds:tail.start
		cmp	edx, eax
		jbe	short loc_8002096
		mov	ds:keyafter_truncation,	0
		mov	eax, truncation_string
		test	eax, eax
		jz	short loc_800208A
		mov	eax, ds:tail.end
		cmp	eax, [ebp+right_context_end]
		jnb	short loc_800208A
		mov	eax, 1
		jmp	short loc_800208F
; ---------------------------------------------------------------------------

loc_800208A:				; CODE XREF: define_all_fields+685j
					; define_all_fields+68Fj
		mov	eax, 0

loc_800208F:				; CODE XREF: define_all_fields+696j
		mov	ds:tail_truncation, eax
		jmp	short loc_80020AF
; ---------------------------------------------------------------------------

loc_8002096:				; CODE XREF: define_all_fields+672j
		mov	ds:tail_truncation, 0
		jmp	short loc_80020AF
; ---------------------------------------------------------------------------

loc_80020A2:				; CODE XREF: define_all_fields+701j
		mov	eax, ds:tail.end
		sub	eax, 1
		mov	ds:tail.end, eax

loc_80020AF:				; CODE XREF: define_all_fields+6A2j
					; define_all_fields+6AEj
		mov	edx, ds:tail.end
		mov	eax, ds:tail.start
		cmp	edx, eax
		jbe	short loc_8002115
		call	__ctype_b_loc
		mov	ebx, [eax]
		mov	eax, ds:tail.end
		sub	eax, 1
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; ch_0
		call	to_uchar
		add	esp, 10h
		movzx	eax, al
		add	eax, eax
		add	eax, ebx
		movzx	eax, word ptr [eax]
		movzx	eax, ax
		and	eax, 2000h
		test	eax, eax
		jnz	short loc_80020A2
		jmp	short loc_8002115
; ---------------------------------------------------------------------------

loc_80020F7:				; CODE XREF: define_all_fields+508j
		mov	ds:tail.start, 0
		mov	ds:tail.end, 0
		mov	ds:tail_truncation, 0

loc_8002115:				; CODE XREF: define_all_fields+6CAj
					; define_all_fields+703j
		mov	eax, ds:keyafter_max_width
		mov	edx, ds:keyafter.end
		mov	ecx, edx
		mov	edx, ds:keyafter.start
		sub	ecx, edx
		mov	edx, ecx
		sub	eax, edx
		mov	edx, eax
		mov	eax, gap_size
		sub	edx, eax
		mov	eax, edx
		mov	[ebp+head_max_width], eax
		cmp	[ebp+head_max_width], 0
		jle	loc_800233D
		mov	eax, ds:before.start
		mov	ds:head.end, eax
		jmp	short loc_800215F
; ---------------------------------------------------------------------------

loc_8002152:				; CODE XREF: define_all_fields+7B1j
		mov	eax, ds:head.end
		sub	eax, 1
		mov	ds:head.end, eax

loc_800215F:				; CODE XREF: define_all_fields+75Ej
		mov	edx, ds:head.end
		mov	eax, ds:text_buffer.start
		cmp	edx, eax
		jbe	short loc_80021A5
		call	__ctype_b_loc
		mov	ebx, [eax]
		mov	eax, ds:head.end
		sub	eax, 1
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; ch_0
		call	to_uchar
		add	esp, 10h
		movzx	eax, al
		add	eax, eax
		add	eax, ebx
		movzx	eax, word ptr [eax]
		movzx	eax, ax
		and	eax, 2000h
		test	eax, eax
		jnz	short loc_8002152

loc_80021A5:				; CODE XREF: define_all_fields+77Aj
		mov	eax, [ebp+left_field_start]
		mov	ds:head.start, eax
		jmp	loc_8002288
; ---------------------------------------------------------------------------

loc_80021B2:				; CODE XREF: define_all_fields+8A8j
		mov	eax, ds:dword_8003800
		test	eax, eax
		jz	short loc_8002211
		mov	eax, ds:head.end
		mov	edx, eax
		mov	eax, ds:head.start
		sub	edx, eax
		mov	eax, ds:head.start
		sub	esp, 0Ch
		push	0		; regs
		push	0		; start
		push	edx		; length
		push	eax		; string
		push	offset stru_8003804 ; buffer
		call	re_match
		add	esp, 20h
		mov	[ebp+count_3], eax
		cmp	[ebp+count_3], 0FFFFFFFEh
		jnz	short loc_80021F2
		call	matcher_error
; ---------------------------------------------------------------------------

loc_80021F2:				; CODE XREF: define_all_fields+7F9j
		mov	edx, ds:head.start
		cmp	[ebp+count_3], 0FFFFFFFFh
		jz	short loc_8002203
		mov	eax, [ebp+count_3]
		jmp	short loc_8002208
; ---------------------------------------------------------------------------

loc_8002203:				; CODE XREF: define_all_fields+80Aj
		mov	eax, 1

loc_8002208:				; CODE XREF: define_all_fields+80Fj
		add	eax, edx
		mov	ds:head.start, eax
		jmp	short loc_8002288
; ---------------------------------------------------------------------------

loc_8002211:				; CODE XREF: define_all_fields+7C7j
		mov	eax, ds:head.start
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; ch_0
		call	to_uchar
		add	esp, 10h
		movzx	eax, al
		movzx	eax, ds:s[eax]
		test	al, al
		jz	short loc_800227B
		jmp	short loc_8002245
; ---------------------------------------------------------------------------

loc_8002238:				; CODE XREF: define_all_fields+885j
		mov	eax, ds:head.start
		add	eax, 1
		mov	ds:head.start, eax

loc_8002245:				; CODE XREF: define_all_fields+844j
		mov	edx, ds:head.start
		mov	eax, ds:head.end
		cmp	edx, eax
		jnb	short loc_8002288
		mov	eax, ds:head.start
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; ch_0
		call	to_uchar
		add	esp, 10h
		movzx	eax, al
		movzx	eax, ds:s[eax]
		test	al, al
		jnz	short loc_8002238
		jmp	short loc_8002288
; ---------------------------------------------------------------------------

loc_800227B:				; CODE XREF: define_all_fields+842j
		mov	eax, ds:head.start
		add	eax, 1
		mov	ds:head.start, eax

loc_8002288:				; CODE XREF: define_all_fields+7BBj
					; define_all_fields+81Dj ...
		mov	edx, ds:head.start
		mov	eax, [ebp+head_max_width]
		add	edx, eax
		mov	eax, ds:head.end
		cmp	edx, eax
		jb	loc_80021B2
		mov	edx, ds:head.end
		mov	eax, ds:head.start
		cmp	edx, eax
		jbe	short loc_80022DF
		mov	ds:before_truncation, 0
		mov	eax, truncation_string
		test	eax, eax
		jz	short loc_80022D3
		mov	eax, ds:head.start
		cmp	eax, [ebp+left_context_start]
		jbe	short loc_80022D3
		mov	eax, 1
		jmp	short loc_80022D8
; ---------------------------------------------------------------------------

loc_80022D3:				; CODE XREF: define_all_fields+8CEj
					; define_all_fields+8D8j
		mov	eax, 0

loc_80022D8:				; CODE XREF: define_all_fields+8DFj
		mov	ds:head_truncation, eax
		jmp	short loc_80022F8
; ---------------------------------------------------------------------------

loc_80022DF:				; CODE XREF: define_all_fields+8BBj
		mov	ds:head_truncation, 0
		jmp	short loc_80022F8
; ---------------------------------------------------------------------------

loc_80022EB:				; CODE XREF: define_all_fields+947j
		mov	eax, ds:head.start
		add	eax, 1
		mov	ds:head.start, eax

loc_80022F8:				; CODE XREF: define_all_fields+8EBj
					; define_all_fields+8F7j
		mov	edx, ds:head.start
		mov	eax, ds:head.end
		cmp	edx, eax
		jnb	short loc_800235B
		call	__ctype_b_loc
		mov	ebx, [eax]
		mov	eax, ds:head.start
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; ch_0
		call	to_uchar
		add	esp, 10h
		movzx	eax, al
		add	eax, eax
		add	eax, ebx
		movzx	eax, word ptr [eax]
		movzx	eax, ax
		and	eax, 2000h
		test	eax, eax
		jnz	short loc_80022EB
		jmp	short loc_800235B
; ---------------------------------------------------------------------------

loc_800233D:				; CODE XREF: define_all_fields+74Ej
		mov	ds:head.start, 0
		mov	ds:head.end, 0
		mov	ds:head_truncation, 0

loc_800235B:				; CODE XREF: define_all_fields+913j
					; define_all_fields+949j
		movzx	eax, ds:auto_reference
		test	al, al
		jz	loc_8002412
		mov	[ebp+file_index], 0
		jmp	short loc_8002377
; ---------------------------------------------------------------------------

loc_8002373:				; CODE XREF: define_all_fields+99Cj
		add	[ebp+file_index], 1

loc_8002377:				; CODE XREF: define_all_fields+97Fj
		mov	eax, ds:file_line_count
		mov	edx, [ebp+file_index]
		shl	edx, 2
		add	eax, edx
		mov	edx, [eax]
		mov	eax, [ebp+occurs]
		mov	eax, [eax+0Ch]
		cmp	edx, eax
		jl	short loc_8002373
		mov	eax, ds:input_file_name
		mov	edx, [ebp+file_index]
		shl	edx, 2
		add	eax, edx
		mov	eax, [eax]
		mov	[ebp+file_name], eax
		cmp	[ebp+file_name], 0
		jnz	short loc_80023AF
		mov	[ebp+file_name], offset	locale

loc_80023AF:				; CODE XREF: define_all_fields+9B4j
		mov	eax, [ebp+occurs]
		mov	eax, [eax+0Ch]
		add	eax, 1
		mov	[ebp+line_ordinal], eax
		cmp	[ebp+file_index], 0
		jle	short loc_80023D9
		mov	eax, ds:file_line_count
		mov	edx, [ebp+file_index]
		add	edx, 3FFFFFFFh
		shl	edx, 2
		add	eax, edx
		mov	eax, [eax]
		sub	[ebp+line_ordinal], eax

loc_80023D9:				; CODE XREF: define_all_fields+9CDj
		mov	eax, ds:reference.start
		push	[ebp+line_ordinal]
		push	[ebp+file_name]
		push	offset aSD	; "%s:%d"
		push	eax		; s
		call	sprintf
		add	esp, 10h
		mov	ebx, ds:reference.start
		mov	eax, ds:reference.start
		sub	esp, 0Ch
		push	eax		; s
		call	strlen
		add	esp, 10h
		add	eax, ebx
		mov	ds:reference.end, eax
		jmp	short loc_8002488
; ---------------------------------------------------------------------------

loc_8002412:				; CODE XREF: define_all_fields+972j
		movzx	eax, ds:input_reference
		test	al, al
		jz	short loc_8002488
		mov	edx, ds:keyafter.start
		mov	eax, [ebp+occurs]
		mov	eax, [eax+0Ch]
		cwde
		add	eax, edx
		mov	ds:reference.start, eax
		mov	eax, ds:reference.start
		mov	ds:reference.end, eax
		jmp	short loc_800244A
; ---------------------------------------------------------------------------

loc_800243D:				; CODE XREF: define_all_fields+A94j
		mov	eax, ds:reference.end
		add	eax, 1
		mov	ds:reference.end, eax

loc_800244A:				; CODE XREF: define_all_fields+A49j
		mov	eax, ds:reference.end
		cmp	eax, [ebp+right_context_end]
		jnb	short loc_8002488
		call	__ctype_b_loc
		mov	ebx, [eax]
		mov	eax, ds:reference.end
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; ch_0
		call	to_uchar
		add	esp, 10h
		movzx	eax, al
		add	eax, eax
		add	eax, ebx
		movzx	eax, word ptr [eax]
		movzx	eax, ax
		and	eax, 2000h
		test	eax, eax
		jz	short loc_800243D

loc_8002488:				; CODE XREF: define_all_fields+A1Ej
					; define_all_fields+A29j ...
		nop
		mov	ebx, [ebp+var_4]
		leave
		retn
define_all_fields endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void output_one_roff_line()
output_one_roff_line proc near		; CODE XREF: generate_all_output:loc_8002CB0p
		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	eax, macro_name
		sub	esp, 8
		push	eax
		push	offset a_S	; ".%s \""
		call	printf
		add	esp, 10h
		sub	esp, 8
		push	ds:tail.end
		push	ds:tail.start	; field
		call	print_field
		add	esp, 10h
		mov	eax, ds:tail_truncation
		test	eax, eax
		jz	short loc_80024E2
		mov	edx, ds:stdout
		mov	eax, truncation_string
		sub	esp, 8
		push	edx
		push	eax
		call	fputs_unlocked
		add	esp, 10h

loc_80024E2:				; CODE XREF: output_one_roff_line+3Aj
		sub	esp, 0Ch
		push	22h		; c
		call	putchar_unlocked
		add	esp, 10h
		mov	eax, ds:stdout
		push	eax		; stream
		push	2		; n
		push	1		; size
		push	offset asc_8003F80 ; " \""
		call	fwrite_unlocked
		add	esp, 10h
		mov	eax, ds:before_truncation
		test	eax, eax
		jz	short loc_8002527
		mov	edx, ds:stdout
		mov	eax, truncation_string
		sub	esp, 8
		push	edx
		push	eax
		call	fputs_unlocked
		add	esp, 10h

loc_8002527:				; CODE XREF: output_one_roff_line+7Fj
		sub	esp, 8
		push	ds:before.end
		push	ds:before.start	; field
		call	print_field
		add	esp, 10h
		sub	esp, 0Ch
		push	22h		; c
		call	putchar_unlocked
		add	esp, 10h
		mov	eax, ds:stdout
		push	eax		; stream
		push	2		; n
		push	1		; size
		push	offset asc_8003F80 ; " \""
		call	fwrite_unlocked
		add	esp, 10h
		sub	esp, 8
		push	ds:keyafter.end
		push	ds:keyafter.start ; field
		call	print_field
		add	esp, 10h
		mov	eax, ds:keyafter_truncation
		test	eax, eax
		jz	short loc_800259A
		mov	edx, ds:stdout
		mov	eax, truncation_string
		sub	esp, 8
		push	edx
		push	eax
		call	fputs_unlocked
		add	esp, 10h

loc_800259A:				; CODE XREF: output_one_roff_line+F2j
		sub	esp, 0Ch
		push	22h		; c
		call	putchar_unlocked
		add	esp, 10h
		mov	eax, ds:stdout
		push	eax		; stream
		push	2		; n
		push	1		; size
		push	offset asc_8003F80 ; " \""
		call	fwrite_unlocked
		add	esp, 10h
		mov	eax, ds:head_truncation
		test	eax, eax
		jz	short loc_80025DF
		mov	edx, ds:stdout
		mov	eax, truncation_string
		sub	esp, 8
		push	edx
		push	eax
		call	fputs_unlocked
		add	esp, 10h

loc_80025DF:				; CODE XREF: output_one_roff_line+137j
		sub	esp, 8
		push	ds:head.end
		push	ds:head.start	; field
		call	print_field
		add	esp, 10h
		sub	esp, 0Ch
		push	22h		; c
		call	putchar_unlocked
		add	esp, 10h
		movzx	eax, ds:auto_reference
		test	al, al
		jnz	short loc_8002619
		movzx	eax, ds:input_reference
		test	al, al
		jz	short loc_8002654

loc_8002619:				; CODE XREF: output_one_roff_line+17Ej
		mov	eax, ds:stdout
		push	eax		; stream
		push	2		; n
		push	1		; size
		push	offset asc_8003F80 ; " \""
		call	fwrite_unlocked
		add	esp, 10h
		sub	esp, 8
		push	ds:reference.end
		push	ds:reference.start ; field
		call	print_field
		add	esp, 10h
		sub	esp, 0Ch
		push	22h		; c
		call	putchar_unlocked
		add	esp, 10h

loc_8002654:				; CODE XREF: output_one_roff_line+189j
		sub	esp, 0Ch
		push	0Ah		; c
		call	putchar_unlocked
		add	esp, 10h
		nop
		leave
		retn
output_one_roff_line endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void output_one_tex_line()
output_one_tex_line proc near		; CODE XREF: generate_all_output:loc_8002CB7p

cursor		= dword	ptr -20h
count		= dword	ptr -1Ch
key		= BLOCK	ptr -18h
after		= BLOCK	ptr -10h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, macro_name
		sub	esp, 8
		push	eax
		push	offset aS_0	; "\\%s	"
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	7Bh		; c
		call	putchar_unlocked
		add	esp, 10h
		sub	esp, 8
		push	ds:tail.end
		push	ds:tail.start	; field
		call	print_field
		add	esp, 10h
		mov	eax, ds:stdout
		push	eax		; stream
		push	2		; n
		push	1		; size
		push	offset asc_8003F88 ; "}{"
		call	fwrite_unlocked
		add	esp, 10h
		sub	esp, 8
		push	ds:before.end
		push	ds:before.start	; field
		call	print_field
		add	esp, 10h
		mov	eax, ds:stdout
		push	eax		; stream
		push	2		; n
		push	1		; size
		push	offset asc_8003F88 ; "}{"
		call	fwrite_unlocked
		add	esp, 10h
		mov	eax, ds:keyafter.start
		mov	[ebp+key.start], eax
		mov	eax, ds:keyafter.end
		mov	[ebp+after.end], eax
		mov	eax, ds:keyafter.start
		mov	[ebp+cursor], eax
		mov	eax, ds:dword_8003800
		test	eax, eax
		jz	short loc_8002753
		mov	eax, ds:keyafter.end
		mov	edx, eax
		mov	eax, [ebp+cursor]
		sub	edx, eax
		mov	eax, edx
		sub	esp, 0Ch
		push	0		; regs
		push	0		; start
		push	eax		; length
		push	[ebp+cursor]	; string
		push	offset stru_8003804 ; buffer
		call	re_match
		add	esp, 20h
		mov	[ebp+count], eax
		cmp	[ebp+count], 0FFFFFFFEh
		jnz	short loc_800273E
		call	matcher_error
; ---------------------------------------------------------------------------

loc_800273E:				; CODE XREF: output_one_tex_line+D3j
		cmp	[ebp+count], 0FFFFFFFFh
		jz	short loc_8002749
		mov	eax, [ebp+count]
		jmp	short loc_800274E
; ---------------------------------------------------------------------------

loc_8002749:				; CODE XREF: output_one_tex_line+DEj
		mov	eax, 1

loc_800274E:				; CODE XREF: output_one_tex_line+E3j
		add	[ebp+cursor], eax
		jmp	short loc_80027AF
; ---------------------------------------------------------------------------

loc_8002753:				; CODE XREF: output_one_tex_line+A4j
		mov	eax, [ebp+cursor]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; ch_0
		call	to_uchar
		add	esp, 10h
		movzx	eax, al
		movzx	eax, ds:s[eax]
		test	al, al
		jz	short loc_80027AB
		jmp	short loc_800277C
; ---------------------------------------------------------------------------

loc_8002778:				; CODE XREF: output_one_tex_line+143j
		add	[ebp+cursor], 1

loc_800277C:				; CODE XREF: output_one_tex_line+112j
		mov	eax, ds:keyafter.end
		cmp	eax, [ebp+cursor]
		jbe	short loc_80027AF
		mov	eax, [ebp+cursor]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; ch_0
		call	to_uchar
		add	esp, 10h
		movzx	eax, al
		movzx	eax, ds:s[eax]
		test	al, al
		jnz	short loc_8002778
		jmp	short loc_80027AF
; ---------------------------------------------------------------------------

loc_80027AB:				; CODE XREF: output_one_tex_line+110j
		add	[ebp+cursor], 1

loc_80027AF:				; CODE XREF: output_one_tex_line+EDj
					; output_one_tex_line+120j ...
		mov	eax, [ebp+cursor]
		mov	[ebp+key.end], eax
		mov	eax, [ebp+cursor]
		mov	[ebp+after.start], eax
		sub	esp, 8
		push	[ebp+key.end]
		push	[ebp+key.start]	; field
		call	print_field
		add	esp, 10h
		mov	eax, ds:stdout
		push	eax		; stream
		push	2		; n
		push	1		; size
		push	offset asc_8003F88 ; "}{"
		call	fwrite_unlocked
		add	esp, 10h
		sub	esp, 8
		push	[ebp+after.end]
		push	[ebp+after.start] ; field
		call	print_field
		add	esp, 10h
		mov	eax, ds:stdout
		push	eax		; stream
		push	2		; n
		push	1		; size
		push	offset asc_8003F88 ; "}{"
		call	fwrite_unlocked
		add	esp, 10h
		sub	esp, 8
		push	ds:head.end
		push	ds:head.start	; field
		call	print_field
		add	esp, 10h
		sub	esp, 0Ch
		push	7Dh		; c
		call	putchar_unlocked
		add	esp, 10h
		movzx	eax, ds:auto_reference
		test	al, al
		jnz	short loc_8002845
		movzx	eax, ds:input_reference
		test	al, al
		jz	short loc_8002876

loc_8002845:				; CODE XREF: output_one_tex_line+1D4j
		sub	esp, 0Ch
		push	7Bh		; c
		call	putchar_unlocked
		add	esp, 10h
		sub	esp, 8
		push	ds:reference.end
		push	ds:reference.start ; field
		call	print_field
		add	esp, 10h
		sub	esp, 0Ch
		push	7Dh		; c
		call	putchar_unlocked
		add	esp, 10h

loc_8002876:				; CODE XREF: output_one_tex_line+1DFj
		sub	esp, 0Ch
		push	0Ah		; c
		call	putchar_unlocked
		add	esp, 10h
		nop
		leave
		retn
output_one_tex_line endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void output_one_dumb_line()
output_one_dumb_line proc near		; CODE XREF: generate_all_output:loc_8002CA9p
		push	ebp
		mov	ebp, esp
		sub	esp, 8
		movzx	eax, ds:right_reference
		xor	eax, 1
		test	al, al
		jz	loc_8002943
		movzx	eax, ds:auto_reference
		test	al, al
		jz	short loc_80028FF
		sub	esp, 8
		push	ds:reference.end
		push	ds:reference.start ; field
		call	print_field
		add	esp, 10h
		sub	esp, 0Ch
		push	3Ah		; c
		call	putchar_unlocked
		add	esp, 10h
		mov	edx, ds:reference_max_width
		mov	eax, gap_size
		add	edx, eax
		mov	eax, ds:reference.end
		mov	ecx, eax
		mov	eax, ds:reference.start
		sub	ecx, eax
		mov	eax, ecx
		sub	edx, eax
		mov	eax, edx
		sub	eax, 1
		sub	esp, 0Ch
		push	eax		; number
		call	print_spaces
		add	esp, 10h
		jmp	short loc_8002943
; ---------------------------------------------------------------------------

loc_80028FF:				; CODE XREF: output_one_dumb_line+21j
		sub	esp, 8
		push	ds:reference.end
		push	ds:reference.start ; field
		call	print_field
		add	esp, 10h
		mov	edx, ds:reference_max_width
		mov	eax, gap_size
		add	edx, eax
		mov	eax, ds:reference.end
		mov	ecx, eax
		mov	eax, ds:reference.start
		sub	ecx, eax
		mov	eax, ecx
		sub	edx, eax
		mov	eax, edx
		sub	esp, 0Ch
		push	eax		; number
		call	print_spaces
		add	esp, 10h

loc_8002943:				; CODE XREF: output_one_dumb_line+12j
					; output_one_dumb_line+77j
		mov	edx, ds:tail.start
		mov	eax, ds:tail.end
		cmp	edx, eax
		jnb	loc_80029FD
		sub	esp, 8
		push	ds:tail.end
		push	ds:tail.start	; field
		call	print_field
		add	esp, 10h
		mov	eax, ds:tail_truncation
		test	eax, eax
		jz	short loc_800298E
		mov	edx, ds:stdout
		mov	eax, truncation_string
		sub	esp, 8
		push	edx
		push	eax
		call	fputs_unlocked
		add	esp, 10h

loc_800298E:				; CODE XREF: output_one_dumb_line+EEj
		mov	edx, ds:half_line_width
		mov	eax, gap_size
		sub	edx, eax
		mov	eax, ds:before.end
		mov	ecx, eax
		mov	eax, ds:before.start
		sub	ecx, eax
		mov	eax, ecx
		sub	edx, eax
		mov	eax, ds:before_truncation
		test	eax, eax
		jz	short loc_80029BD
		mov	eax, ds:truncation_string_length
		jmp	short loc_80029C2
; ---------------------------------------------------------------------------

loc_80029BD:				; CODE XREF: output_one_dumb_line+12Ej
		mov	eax, 0

loc_80029C2:				; CODE XREF: output_one_dumb_line+135j
		sub	edx, eax
		mov	eax, ds:tail.end
		mov	ecx, eax
		mov	eax, ds:tail.start
		sub	ecx, eax
		mov	eax, ecx
		sub	edx, eax
		mov	eax, ds:tail_truncation
		test	eax, eax
		jz	short loc_80029E6
		mov	eax, ds:truncation_string_length
		jmp	short loc_80029EB
; ---------------------------------------------------------------------------

loc_80029E6:				; CODE XREF: output_one_dumb_line+157j
		mov	eax, 0

loc_80029EB:				; CODE XREF: output_one_dumb_line+15Ej
		sub	edx, eax
		mov	eax, edx
		sub	esp, 0Ch
		push	eax		; number
		call	print_spaces
		add	esp, 10h
		jmp	short loc_8002A41
; ---------------------------------------------------------------------------

loc_80029FD:				; CODE XREF: output_one_dumb_line+CAj
		mov	edx, ds:half_line_width
		mov	eax, gap_size
		sub	edx, eax
		mov	eax, ds:before.end
		mov	ecx, eax
		mov	eax, ds:before.start
		sub	ecx, eax
		mov	eax, ecx
		sub	edx, eax
		mov	eax, ds:before_truncation
		test	eax, eax
		jz	short loc_8002A2C
		mov	eax, ds:truncation_string_length
		jmp	short loc_8002A31
; ---------------------------------------------------------------------------

loc_8002A2C:				; CODE XREF: output_one_dumb_line+19Dj
		mov	eax, 0

loc_8002A31:				; CODE XREF: output_one_dumb_line+1A4j
		sub	edx, eax
		mov	eax, edx
		sub	esp, 0Ch
		push	eax		; number
		call	print_spaces
		add	esp, 10h

loc_8002A41:				; CODE XREF: output_one_dumb_line+175j
		mov	eax, ds:before_truncation
		test	eax, eax
		jz	short loc_8002A62
		mov	edx, ds:stdout
		mov	eax, truncation_string
		sub	esp, 8
		push	edx
		push	eax
		call	fputs_unlocked
		add	esp, 10h

loc_8002A62:				; CODE XREF: output_one_dumb_line+1C2j
		sub	esp, 8
		push	ds:before.end
		push	ds:before.start	; field
		call	print_field
		add	esp, 10h
		mov	eax, gap_size
		sub	esp, 0Ch
		push	eax		; number
		call	print_spaces
		add	esp, 10h
		sub	esp, 8
		push	ds:keyafter.end
		push	ds:keyafter.start ; field
		call	print_field
		add	esp, 10h
		mov	eax, ds:keyafter_truncation
		test	eax, eax
		jz	short loc_8002AC2
		mov	edx, ds:stdout
		mov	eax, truncation_string
		sub	esp, 8
		push	edx
		push	eax
		call	fputs_unlocked
		add	esp, 10h

loc_8002AC2:				; CODE XREF: output_one_dumb_line+222j
		mov	edx, ds:head.start
		mov	eax, ds:head.end
		cmp	edx, eax
		jnb	loc_8002B78
		mov	eax, ds:half_line_width
		mov	edx, ds:keyafter.end
		mov	ecx, edx
		mov	edx, ds:keyafter.start
		sub	ecx, edx
		mov	edx, ecx
		sub	eax, edx
		mov	edx, eax
		mov	eax, ds:keyafter_truncation
		test	eax, eax
		jz	short loc_8002B00
		mov	eax, ds:truncation_string_length
		jmp	short loc_8002B05
; ---------------------------------------------------------------------------

loc_8002B00:				; CODE XREF: output_one_dumb_line+271j
		mov	eax, 0

loc_8002B05:				; CODE XREF: output_one_dumb_line+278j
		sub	edx, eax
		mov	eax, ds:head.end
		mov	ecx, eax
		mov	eax, ds:head.start
		sub	ecx, eax
		mov	eax, ecx
		sub	edx, eax
		mov	eax, ds:head_truncation
		test	eax, eax
		jz	short loc_8002B29
		mov	eax, ds:truncation_string_length
		jmp	short loc_8002B2E
; ---------------------------------------------------------------------------

loc_8002B29:				; CODE XREF: output_one_dumb_line+29Aj
		mov	eax, 0

loc_8002B2E:				; CODE XREF: output_one_dumb_line+2A1j
		sub	edx, eax
		mov	eax, edx
		sub	esp, 0Ch
		push	eax		; number
		call	print_spaces
		add	esp, 10h
		mov	eax, ds:head_truncation
		test	eax, eax
		jz	short loc_8002B5F
		mov	edx, ds:stdout
		mov	eax, truncation_string
		sub	esp, 8
		push	edx
		push	eax
		call	fputs_unlocked
		add	esp, 10h

loc_8002B5F:				; CODE XREF: output_one_dumb_line+2BFj
		sub	esp, 8
		push	ds:head.end
		push	ds:head.start	; field
		call	print_field
		add	esp, 10h
		jmp	short loc_8002BD9
; ---------------------------------------------------------------------------

loc_8002B78:				; CODE XREF: output_one_dumb_line+249j
		movzx	eax, ds:auto_reference
		test	al, al
		jnz	short loc_8002B8E
		movzx	eax, ds:input_reference
		test	al, al
		jz	short loc_8002BD9

loc_8002B8E:				; CODE XREF: output_one_dumb_line+2FBj
		movzx	eax, ds:right_reference
		test	al, al
		jz	short loc_8002BD9
		mov	eax, ds:half_line_width
		mov	edx, ds:keyafter.end
		mov	ecx, edx
		mov	edx, ds:keyafter.start
		sub	ecx, edx
		mov	edx, ecx
		sub	eax, edx
		mov	edx, eax
		mov	eax, ds:keyafter_truncation
		test	eax, eax
		jz	short loc_8002BC4
		mov	eax, ds:truncation_string_length
		jmp	short loc_8002BC9
; ---------------------------------------------------------------------------

loc_8002BC4:				; CODE XREF: output_one_dumb_line+335j
		mov	eax, 0

loc_8002BC9:				; CODE XREF: output_one_dumb_line+33Cj
		sub	edx, eax
		mov	eax, edx
		sub	esp, 0Ch
		push	eax		; number
		call	print_spaces
		add	esp, 10h

loc_8002BD9:				; CODE XREF: output_one_dumb_line+2F0j
					; output_one_dumb_line+306j ...
		movzx	eax, ds:auto_reference
		test	al, al
		jnz	short loc_8002BEF
		movzx	eax, ds:input_reference
		test	al, al
		jz	short loc_8002C22

loc_8002BEF:				; CODE XREF: output_one_dumb_line+35Cj
		movzx	eax, ds:right_reference
		test	al, al
		jz	short loc_8002C22
		mov	eax, gap_size
		sub	esp, 0Ch
		push	eax		; number
		call	print_spaces
		add	esp, 10h
		sub	esp, 8
		push	ds:reference.end
		push	ds:reference.start ; field
		call	print_field
		add	esp, 10h

loc_8002C22:				; CODE XREF: output_one_dumb_line+367j
					; output_one_dumb_line+372j
		sub	esp, 0Ch
		push	0Ah		; c
		call	putchar_unlocked
		add	esp, 10h
		nop
		leave
		retn
output_one_dumb_line endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void generate_all_output()
generate_all_output proc near		; CODE XREF: main+7DFp

occurs_index	= dword	ptr -10h
occurs_cursor	= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	ds:tail.start, 0
		mov	ds:tail.end, 0
		mov	ds:tail_truncation, 0
		mov	ds:head.start, 0
		mov	ds:head.end, 0
		mov	ds:head_truncation, 0
		mov	eax, ds:occurs_table
		mov	[ebp+occurs_cursor], eax
		mov	[ebp+occurs_index], 0
		jmp	short loc_8002CC5
; ---------------------------------------------------------------------------

loc_8002C85:				; CODE XREF: generate_all_output+9Bj
		sub	esp, 0Ch
		push	[ebp+occurs_cursor] ; occurs
		call	define_all_fields
		add	esp, 10h
		mov	eax, ds:output_format
		cmp	eax, 2
		jz	short loc_8002CB0
		cmp	eax, 2
		jb	short loc_8002CA9
		cmp	eax, 3
		jz	short loc_8002CB7
		jmp	short loc_8002CBD
; ---------------------------------------------------------------------------

loc_8002CA9:				; CODE XREF: generate_all_output+6Ej
		call	output_one_dumb_line
		jmp	short loc_8002CBD
; ---------------------------------------------------------------------------

loc_8002CB0:				; CODE XREF: generate_all_output+69j
		call	output_one_roff_line
		jmp	short loc_8002CBD
; ---------------------------------------------------------------------------

loc_8002CB7:				; CODE XREF: generate_all_output+73j
		call	output_one_tex_line
		nop

loc_8002CBD:				; CODE XREF: generate_all_output+75j
					; generate_all_output+7Cj ...
		add	[ebp+occurs_cursor], 10h
		add	[ebp+occurs_index], 1

loc_8002CC5:				; CODE XREF: generate_all_output+51j
		mov	eax, ds:number_of_occurs
		cmp	eax, [ebp+occurs_index]
		ja	short loc_8002C85
		nop
		leave
		retn
generate_all_output endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; void __cdecl usage(int status)
		public usage
usage		proc near		; CODE XREF: main+174p	main+38Cp ...

status		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		cmp	[ebp+status], 0
		jz	short loc_8002D0D
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, ds:stderr
		sub	esp, 4
		push	ebx
		push	edx		; format
		push	eax		; stream
		call	fprintf
		add	esp, 10h
		jmp	loc_8002E77
; ---------------------------------------------------------------------------

loc_8002D0D:				; CODE XREF: usage+9j
		mov	esi, ds:program_name
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aUsageSOption__ ; "Usage: %s [OPTION]...	[INPUT]...   (wit"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	esi
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aOutputAPermute ; "Output a permuted index, including cont"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aMandatoryArgum ; "Mandatory arguments to long options are"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aAAutoReference ; "  -A,	--auto-reference	   output"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aMMacroNameStri ; "  -M,	--macro-name=STRING	   macro "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aWWordRegexpReg ; "  -W,	--word-regexp=REGEXP	   use RE"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aRReferencesFir ; "  -r,	--references		   first "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aHelpDisplayThi ; "	--help	   display this	help and "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aVersionOutputV ; "	--version  output version informa"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aWithNoFileOrIf ; "\nWith no FILE or if FILE is -, read St"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		call	emit_ancillary_info

loc_8002E77:				; CODE XREF: usage+36j
		sub	esp, 0Ch
		push	[ebp+status]	; status
		call	exit
usage		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public main
main		proc near

argv		= dword	ptr -2Ch
tmp_ulong	= dword	ptr -28h
file_index	= dword	ptr -24h
optchar		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
argc		= dword	ptr  0Ch
envp		= dword	ptr  14h

		lea	ecx, [esp+4]
		and	esp, 0FFFFFFF0h
		push	dword ptr [ecx-4]
		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		push	ecx
		sub	esp, 2Ch
		mov	ebx, ecx
		mov	eax, [ebx+4]
		mov	[ebp+argv], eax
		mov	eax, large gs:14h
		mov	[ebp+var_1C], eax
		xor	eax, eax
		mov	eax, [ebp+argv]
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	set_program_name
		add	esp, 10h
		sub	esp, 8
		push	offset locale	; locale
		push	6		; category
		call	setlocale
		add	esp, 10h
		sub	esp, 8
		push	offset dirname	; "/usr/local/share/locale"
		push	offset domainname ; "coreutils"
		call	bindtextdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset domainname ; "coreutils"
		call	textdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset close_stdout ; func
		call	atexit
		add	esp, 10h
		jmp	loc_8003259
; ---------------------------------------------------------------------------

loc_8002F05:				; CODE XREF: main+3FAj
		mov	eax, [ebp+optchar]
		cmp	eax, 53h
		jz	loc_8003175
		cmp	eax, 53h
		jg	short loc_8002F8A
		cmp	eax, 46h
		jz	loc_8003130
		cmp	eax, 46h
		jg	short loc_8002F5D
		cmp	eax, 0FFFFFF7Eh
		jz	loc_8003209
		cmp	eax, 0FFFFFF7Eh
		jg	short loc_8002F46
		cmp	eax, 0FFFFFF7Dh
		jz	loc_8003213
		jmp	loc_8002FF1
; ---------------------------------------------------------------------------

loc_8002F46:				; CODE XREF: main+B2j
		cmp	eax, 0Ah
		jz	loc_80031D4
		cmp	eax, 41h
		jz	loc_8003124
		jmp	loc_8002FF1
; ---------------------------------------------------------------------------

loc_8002F5D:				; CODE XREF: main+A0j
		cmp	eax, 4Dh
		jz	loc_800314B
		cmp	eax, 4Dh
		jg	short loc_8002F76
		cmp	eax, 47h
		jz	loc_8002FFB
		jmp	short loc_8002FF1
; ---------------------------------------------------------------------------

loc_8002F76:				; CODE XREF: main+E7j
		cmp	eax, 4Fh
		jz	loc_800315A
		cmp	eax, 52h
		jz	loc_8003169
		jmp	short loc_8002FF1
; ---------------------------------------------------------------------------

loc_8002F8A:				; CODE XREF: main+92j
		cmp	eax, 67h
		jz	loc_8003022
		cmp	eax, 67h
		jg	short loc_8002FBD
		cmp	eax, 57h
		jz	loc_800319F
		cmp	eax, 57h
		jg	short loc_8002FB1
		cmp	eax, 54h
		jz	loc_8003190
		jmp	short loc_8002FF1
; ---------------------------------------------------------------------------

loc_8002FB1:				; CODE XREF: main+122j
		cmp	eax, 62h
		jz	short loc_8003007
		cmp	eax, 66h
		jz	short loc_8003016
		jmp	short loc_8002FF1
; ---------------------------------------------------------------------------

loc_8002FBD:				; CODE XREF: main+114j
		cmp	eax, 72h
		jz	loc_80030AC
		cmp	eax, 72h
		jg	short loc_8002FDF
		cmp	eax, 69h
		jz	loc_800308E
		cmp	eax, 6Fh
		jz	loc_800309D
		jmp	short loc_8002FF1
; ---------------------------------------------------------------------------

loc_8002FDF:				; CODE XREF: main+147j
		cmp	eax, 74h
		jz	loc_8003259
		cmp	eax, 77h
		jz	loc_80030B8

loc_8002FF1:				; CODE XREF: main+BFj main+D6j ...
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8002FFB:				; CODE XREF: main+ECj
		mov	gnu_extensions,	0
		jmp	loc_8003259
; ---------------------------------------------------------------------------

loc_8003007:				; CODE XREF: main+132j
		mov	eax, ds:optarg
		mov	ds:break_file, eax
		jmp	loc_8003259
; ---------------------------------------------------------------------------

loc_8003016:				; CODE XREF: main+137j
		mov	ds:ignore_case,	1
		jmp	loc_8003259
; ---------------------------------------------------------------------------

loc_8003022:				; CODE XREF: main+10Bj
		mov	eax, ds:optarg
		sub	esp, 0Ch
		push	0
		lea	edx, [ebp+tmp_ulong]
		push	edx
		push	0
		push	0
		push	eax
		call	xstrtoul
		add	esp, 20h
		test	eax, eax
		jnz	short loc_800304F
		mov	eax, [ebp+tmp_ulong]
		test	eax, eax
		jz	short loc_800304F
		mov	eax, [ebp+tmp_ulong]
		test	eax, eax
		jns	short loc_8003080

loc_800304F:				; CODE XREF: main+1BDj	main+1C4j
		mov	eax, ds:optarg
		sub	esp, 0Ch
		push	eax
		call	quotearg
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aInvalidGapWidt ; "invalid gap width: %s"
		call	gettext
		add	esp, 10h
		push	esi
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_8003080:				; CODE XREF: main+1CBj
		mov	eax, [ebp+tmp_ulong]
		mov	gap_size, eax
		nop
		jmp	loc_8003259
; ---------------------------------------------------------------------------

loc_800308E:				; CODE XREF: main+14Cj
		mov	eax, ds:optarg
		mov	ds:ignore_file,	eax
		jmp	loc_8003259
; ---------------------------------------------------------------------------

loc_800309D:				; CODE XREF: main+155j
		mov	eax, ds:optarg
		mov	ds:only_file, eax
		jmp	loc_8003259
; ---------------------------------------------------------------------------

loc_80030AC:				; CODE XREF: main+13Ej
		mov	ds:input_reference, 1
		jmp	loc_8003259
; ---------------------------------------------------------------------------

loc_80030B8:				; CODE XREF: main+169j
		mov	eax, ds:optarg
		sub	esp, 0Ch
		push	0
		lea	edx, [ebp+tmp_ulong]
		push	edx
		push	0
		push	0
		push	eax
		call	xstrtoul
		add	esp, 20h
		test	eax, eax
		jnz	short loc_80030E5
		mov	eax, [ebp+tmp_ulong]
		test	eax, eax
		jz	short loc_80030E5
		mov	eax, [ebp+tmp_ulong]
		test	eax, eax
		jns	short loc_8003116

loc_80030E5:				; CODE XREF: main+253j	main+25Aj
		mov	eax, ds:optarg
		sub	esp, 0Ch
		push	eax
		call	quotearg
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aInvalidLineWid ; "invalid line width: %s"
		call	gettext
		add	esp, 10h
		push	esi
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_8003116:				; CODE XREF: main+261j
		mov	eax, [ebp+tmp_ulong]
		mov	line_width, eax
		nop
		jmp	loc_8003259
; ---------------------------------------------------------------------------

loc_8003124:				; CODE XREF: main+D0j
		mov	ds:auto_reference, 1
		jmp	loc_8003259
; ---------------------------------------------------------------------------

loc_8003130:				; CODE XREF: main+97j
		mov	eax, ds:optarg
		sub	esp, 0Ch
		push	eax		; string
		call	copy_unescaped_string
		add	esp, 10h
		mov	truncation_string, eax
		jmp	loc_8003259
; ---------------------------------------------------------------------------

loc_800314B:				; CODE XREF: main+DEj
		mov	eax, ds:optarg
		mov	macro_name, eax
		jmp	loc_8003259
; ---------------------------------------------------------------------------

loc_800315A:				; CODE XREF: main+F7j
		mov	ds:output_format, 2
		jmp	loc_8003259
; ---------------------------------------------------------------------------

loc_8003169:				; CODE XREF: main+100j
		mov	ds:right_reference, 1
		jmp	loc_8003259
; ---------------------------------------------------------------------------

loc_8003175:				; CODE XREF: main+89j
		mov	eax, ds:optarg
		sub	esp, 0Ch
		push	eax		; string
		call	copy_unescaped_string
		add	esp, 10h
		mov	ds:context_regex, eax
		jmp	loc_8003259
; ---------------------------------------------------------------------------

loc_8003190:				; CODE XREF: main+127j
		mov	ds:output_format, 3
		jmp	loc_8003259
; ---------------------------------------------------------------------------

loc_800319F:				; CODE XREF: main+119j
		mov	eax, ds:optarg
		sub	esp, 0Ch
		push	eax		; string
		call	copy_unescaped_string
		add	esp, 10h
		mov	ds:dword_8003800, eax
		mov	eax, ds:dword_8003800
		movzx	eax, byte ptr [eax]
		test	al, al
		jnz	loc_8003259
		mov	ds:dword_8003800, 0
		jmp	loc_8003259
; ---------------------------------------------------------------------------

loc_80031D4:				; CODE XREF: main+C7j
		mov	edx, ds:argmatch_die
		mov	eax, ds:optarg
		sub	esp, 8
		push	edx
		push	4
		push	offset format_vals
		push	offset format_args
		push	eax
		push	offset aFormat	; "--format"
		call	__xargmatch_internal
		add	esp, 20h
		mov	eax, ds:format_vals[eax*4]
		mov	ds:output_format, eax

loc_8003209:				; CODE XREF: main+A7j
		sub	esp, 0Ch
		push	0		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8003213:				; CODE XREF: main+B9j
		sub	esp, 8
		push	offset aFranZoisPinard ; "François Pinard"
		push	offset aF_Pinard ; "F. Pinard"
		call	proper_name_utf8
		add	esp, 10h
		mov	ecx, eax
		mov	edx, ds:Version
		mov	eax, ds:stdout
		sub	esp, 8
		push	0
		push	ecx
		push	edx
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	offset aPtx	; "ptx"
		push	eax
		call	version_etc
		add	esp, 20h
		sub	esp, 0Ch
		push	0		; status
		call	exit
; ---------------------------------------------------------------------------

loc_8003259:				; CODE XREF: main+7Ej main+160j ...
		sub	esp, 0Ch
		push	0		; longind
		push	offset long_options ; longopts
		push	offset shortopts ; "AF:GM:ORS:TW:b:i:fg:o:trw:"
		push	[ebp+argv]	; argv
		push	dword ptr [ebx]	; argc
		call	getopt_long
		add	esp, 20h
		mov	[ebp+optchar], eax
		cmp	[ebp+optchar], 0FFFFFFFFh
		jnz	loc_8002F05
		mov	eax, ds:optind
		cmp	eax, [ebx]
		jnz	short loc_80032C9
		sub	esp, 0Ch
		push	4		; size_t
		call	xmalloc
		add	esp, 10h
		mov	ds:input_file_name, eax
		sub	esp, 0Ch
		push	4		; size_t
		call	xmalloc
		add	esp, 10h
		mov	ds:file_line_count, eax
		mov	ds:number_input_files, 1
		mov	eax, ds:input_file_name
		mov	dword ptr [eax], 0
		jmp	loc_800352A
; ---------------------------------------------------------------------------

loc_80032C9:				; CODE XREF: main+407j
		movzx	eax, gnu_extensions
		test	al, al
		jz	loc_80033C3
		mov	eax, ds:optind
		mov	edx, [ebx]
		sub	edx, eax
		mov	eax, edx
		mov	ds:number_input_files, eax
		mov	eax, ds:number_input_files
		shl	eax, 2
		sub	esp, 0Ch
		push	eax		; size_t
		call	xmalloc
		add	esp, 10h
		mov	ds:input_file_name, eax
		mov	eax, ds:number_input_files
		shl	eax, 2
		sub	esp, 0Ch
		push	eax		; size_t
		call	xmalloc
		add	esp, 10h
		mov	ds:file_line_count, eax
		mov	[ebp+file_index], 0
		jmp	loc_80033B0
; ---------------------------------------------------------------------------

loc_8003326:				; CODE XREF: main+536j
		mov	eax, ds:optind
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		mov	eax, [eax]
		movzx	eax, byte ptr [eax]
		test	al, al
		jz	short loc_8003368
		mov	eax, ds:optind
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 8
		push	offset asc_8003ECA ; "-"
		push	eax		; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		jnz	short loc_800337D

loc_8003368:				; CODE XREF: main+4BCj
		mov	eax, ds:input_file_name
		mov	edx, [ebp+file_index]
		shl	edx, 2
		add	eax, edx
		mov	dword ptr [eax], 0
		jmp	short loc_800339F
; ---------------------------------------------------------------------------

loc_800337D:				; CODE XREF: main+4E4j
		mov	eax, ds:input_file_name
		mov	edx, [ebp+file_index]
		shl	edx, 2
		add	edx, eax
		mov	eax, ds:optind
		lea	ecx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, ecx
		mov	eax, [eax]
		mov	[edx], eax

loc_800339F:				; CODE XREF: main+4F9j
		mov	eax, ds:optind
		add	eax, 1
		mov	ds:optind, eax
		add	[ebp+file_index], 1

loc_80033B0:				; CODE XREF: main+49Fj
		mov	eax, ds:number_input_files
		cmp	[ebp+file_index], eax
		jl	loc_8003326
		jmp	loc_800352A
; ---------------------------------------------------------------------------

loc_80033C3:				; CODE XREF: main+450j
		mov	ds:number_input_files, 1
		sub	esp, 0Ch
		push	4		; size_t
		call	xmalloc
		add	esp, 10h
		mov	ds:input_file_name, eax
		sub	esp, 0Ch
		push	4		; size_t
		call	xmalloc
		add	esp, 10h
		mov	ds:file_line_count, eax
		mov	eax, ds:optind
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		mov	eax, [eax]
		movzx	eax, byte ptr [eax]
		test	al, al
		jz	short loc_8003433
		mov	eax, ds:optind
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 8
		push	offset asc_8003ECA ; "-"
		push	eax		; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		jnz	short loc_8003440

loc_8003433:				; CODE XREF: main+587j
		mov	eax, ds:input_file_name
		mov	dword ptr [eax], 0
		jmp	short loc_800345B
; ---------------------------------------------------------------------------

loc_8003440:				; CODE XREF: main+5AFj
		mov	eax, ds:input_file_name
		mov	edx, ds:optind
		lea	ecx, ds:0[edx*4]
		mov	edx, [ebp+argv]
		add	edx, ecx
		mov	edx, [edx]
		mov	[eax], edx

loc_800345B:				; CODE XREF: main+5BCj
		mov	eax, ds:optind
		add	eax, 1
		mov	ds:optind, eax
		mov	eax, ds:optind
		cmp	eax, [ebx]
		jge	short loc_80034D8
		mov	edx, ds:stdout
		mov	eax, ds:optind
		lea	ecx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, ecx
		mov	eax, [eax]
		sub	esp, 4
		push	edx
		push	offset aW	; "w"
		push	eax
		call	freopen_safer
		add	esp, 10h
		test	eax, eax
		jnz	short loc_80034CB
		mov	eax, ds:optind
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		mov	esi, [eax]
		call	__errno_location
		mov	eax, [eax]
		push	esi
		push	offset format	; "%s"
		push	eax		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_80034CB:				; CODE XREF: main+61Cj
		mov	eax, ds:optind
		add	eax, 1
		mov	ds:optind, eax

loc_80034D8:				; CODE XREF: main+5EDj
		mov	eax, ds:optind
		cmp	eax, [ebx]
		jge	short loc_800352A
		mov	eax, ds:optind
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aExtraOperandS ;	"extra operand %s"
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_800352A:				; CODE XREF: main+442j	main+53Cj ...
		mov	eax, ds:output_format
		test	eax, eax
		jnz	short loc_800354F
		movzx	eax, gnu_extensions
		test	al, al
		jz	short loc_8003545
		mov	eax, 1
		jmp	short loc_800354A
; ---------------------------------------------------------------------------

loc_8003545:				; CODE XREF: main+6BAj
		mov	eax, 2

loc_800354A:				; CODE XREF: main+6C1j
		mov	ds:output_format, eax

loc_800354F:				; CODE XREF: main+6AFj
		call	initialize_regex
		mov	eax, ds:break_file
		test	eax, eax
		jz	short loc_800356E
		mov	eax, ds:break_file
		sub	esp, 0Ch
		push	eax		; file_name
		call	digest_break_file
		add	esp, 10h

loc_800356E:				; CODE XREF: main+6D9j
		mov	eax, ds:ignore_file
		test	eax, eax
		jz	short loc_80035A0
		mov	eax, ds:ignore_file
		sub	esp, 8
		push	offset ignore_table ; table
		push	eax		; file_name
		call	digest_word_file
		add	esp, 10h
		mov	eax, ds:ignore_table.length
		test	eax, eax
		jnz	short loc_80035A0
		mov	ds:ignore_file,	0

loc_80035A0:				; CODE XREF: main+6F3j	main+712j
		mov	eax, ds:only_file
		test	eax, eax
		jz	short loc_80035D2
		mov	eax, ds:only_file
		sub	esp, 8
		push	offset only_table ; table
		push	eax		; file_name
		call	digest_word_file
		add	esp, 10h
		mov	eax, ds:only_table.length
		test	eax, eax
		jnz	short loc_80035D2
		mov	ds:only_file, 0

loc_80035D2:				; CODE XREF: main+725j	main+744j
		mov	ds:number_of_occurs, 0
		mov	ds:total_line_count, 0
		mov	ds:maximum_word_length,	0
		mov	ds:reference_max_width,	0
		mov	[ebp+file_index], 0
		jmp	short loc_800364D
; ---------------------------------------------------------------------------

loc_8003603:				; CODE XREF: main+7D3j
		mov	eax, ds:input_file_name
		mov	edx, [ebp+file_index]
		shl	edx, 2
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 8
		push	offset text_buffer ; block
		push	eax		; file_name
		call	swallow_file_in_memory
		add	esp, 10h
		call	find_occurs_in_text
		mov	eax, ds:total_line_count
		add	eax, 1
		mov	ds:total_line_count, eax
		mov	eax, ds:file_line_count
		mov	edx, [ebp+file_index]
		shl	edx, 2
		add	edx, eax
		mov	eax, ds:total_line_count
		mov	[edx], eax
		add	[ebp+file_index], 1

loc_800364D:				; CODE XREF: main+77Fj
		mov	eax, ds:number_input_files
		cmp	[ebp+file_index], eax
		jl	short loc_8003603
		call	sort_found_occurs
		call	fix_output_parameters
		call	generate_all_output
		sub	esp, 0Ch
		push	0		; status

loc_800366B:				; DATA XREF: .eh_frame:080048ECo
					; .eh_frame:0800490Co ...
		call	exit
main		endp

_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 8003670h
; _Bool	gnu_extensions
gnu_extensions	db 1			; DATA XREF: initialize_regex:loc_800059Fr
					; initialize_regex+D1r	...
		align 4
; int line_width
line_width	dd 48h			; DATA XREF: fix_output_parameters+138r
					; fix_output_parameters+14Dw ...
; int gap_size
gap_size	dd 3			; DATA XREF: fix_output_parameters+143r
					; fix_output_parameters+16Br ...
; const	char *truncation_string
truncation_string dd offset asc_8003E69	; DATA XREF: fix_output_parameters+183r
					; fix_output_parameters+18Cr ...
					; "/"
; const	char *macro_name
macro_name	dd offset aXx		; DATA XREF: output_one_roff_line+6r
					; output_one_tex_line+6r ...
_data		ends			; "xx"

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
; Segment alignment '32byte' can not be represented in assembly
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 80036A0h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
; _Bool	auto_reference
auto_reference	db ?			; DATA XREF: find_occurs_in_text+41Ar
					; fix_output_parameters+11r ...
; _Bool	input_reference
input_reference	db ?			; DATA XREF: initialize_regex+6Dr
					; find_occurs_in_text+27r ...
; _Bool	right_reference
right_reference	db ?			; DATA XREF: fix_output_parameters:loc_800181Cr
					; output_one_dumb_line+6r ...
		align 4
; Format output_format
output_format	dd ?			; DATA XREF: print_field+48r
					; fix_output_parameters+260r ...
; _Bool	ignore_case
ignore_case	db ?			; DATA XREF: compile_regex+37r
					; initialize_regex+6r ...
		align 4
; const	char *break_file
break_file	dd ?			; DATA XREF: initialize_regex:loc_8000605r
					; main+18Aw ...
; const	char *only_file
only_file	dd ?			; DATA XREF: find_occurs_in_text:loc_80010E1r
					; main+220w ...
; const	char *ignore_file
ignore_file	dd ?			; DATA XREF: find_occurs_in_text:loc_80010BCr
					; main+211w ...
		align 10h
; regex_data context_regex
context_regex	dd ?			; DATA XREF: initialize_regex:loc_800057Er
					; initialize_regex+4Ar	...
; struct re_pattern_buffer buffer
buffer		re_pattern_buffer <?>	; DATA XREF: find_occurs_in_text+114o
		align 200h
; regex_data dword_8003800
dword_8003800	dd ?			; DATA XREF: initialize_regex:loc_80005E7r
					; initialize_regex+B6o	...
; struct re_pattern_buffer stru_8003804
stru_8003804	re_pattern_buffer <?>	; DATA XREF: find_occurs_in_text+1B9o
					; define_all_fields+7Fo ...
		dd 47h dup(?)
; unsigned __int8 folded_chars[256]
folded_chars	db 100h	dup(?)		; DATA XREF: compile_regex+42o
					; initialize_regex+2Do	...
; re_registers context_regs
context_regs	re_registers <?>	; DATA XREF: find_occurs_in_text+108o
					; find_occurs_in_text:loc_8000E81r
; re_registers regs
regs		re_registers <?>	; DATA XREF: find_occurs_in_text+1ADo
					; find_occurs_in_text+1DEr ...
		align 10h
; char s[256]
s		db 100h	dup(?)		; DATA XREF: initialize_regex+108o
					; initialize_regex+128o ...
; int maximum_word_length
maximum_word_length dd ?		; DATA XREF: find_occurs_in_text+2BFr
					; find_occurs_in_text+2CDw ...
; int reference_max_width
reference_max_width dd ?		; DATA XREF: find_occurs_in_text+4C6r
					; find_occurs_in_text+4D3w ...
; WORD_TABLE ignore_table
ignore_table	WORD_TABLE <?>		; DATA XREF: find_occurs_in_text+379o
					; main+6FDo ...
; WORD_TABLE only_table
only_table	WORD_TABLE <?>		; DATA XREF: find_occurs_in_text+39Eo
					; main+72Fo ...
; int number_input_files
number_input_files dd ?			; DATA XREF: fix_output_parameters:loc_80017D2r
					; main+42Dw ...
; int total_line_count
total_line_count dd ?			; DATA XREF: find_occurs_in_text+2EDr
					; find_occurs_in_text+2F5w ...
; const	char **input_file_name
input_file_name	dd ?			; DATA XREF: fix_output_parameters+92r
					; fix_output_parameters+A5r ...
; int *file_line_count
file_line_count	dd ?			; DATA XREF: fix_output_parameters:loc_8001728r
					; fix_output_parameters+51r ...
; BLOCK	text_buffer
text_buffer	BLOCK <?>		; DATA XREF: find_occurs_in_text+19r
					; find_occurs_in_text:loc_8000E16r ...
; OCCURS *occurs_table[1]
occurs_table	dd ?			; DATA XREF: sort_found_occurs+Cr
					; find_occurs_in_text+3F0r ...
; size_t occurs_alloc[1]
occurs_alloc	dd ?			; DATA XREF: find_occurs_in_text+3BDr
					; find_occurs_in_text+3C6r ...
; size_t number_of_occurs[1]
number_of_occurs dd ?			; DATA XREF: sort_found_occurs+6r
					; find_occurs_in_text:loc_8001106r ...
		align 20h
; char edited_flag[256]
edited_flag	db 100h	dup(?)		; DATA XREF: print_field+1Er
					; fix_output_parameters+245o ...
; int half_line_width
half_line_width	dd ?			; DATA XREF: fix_output_parameters+160w
					; fix_output_parameters+165r ...
; int before_max_width
before_max_width dd ?			; DATA XREF: fix_output_parameters+174w
					; fix_output_parameters+1C5r ...
; int keyafter_max_width
keyafter_max_width dd ?			; DATA XREF: fix_output_parameters+17Ew
					; fix_output_parameters:loc_80018DEr ...
; int truncation_string_length
truncation_string_length dd ?		; DATA XREF: fix_output_parameters+1A9w
					; fix_output_parameters+1CAr ...
; BLOCK	tail
tail		BLOCK <?>		; DATA XREF: define_all_fields+513w
					; define_all_fields:loc_8001F0Cr ...
; int tail_truncation
tail_truncation	dd ?			; DATA XREF: define_all_fields:loc_800208Fw
					; define_all_fields:loc_8002096w ...
; BLOCK	before
before		BLOCK <?>		; DATA XREF: define_all_fields+2BBw
					; define_all_fields+2DFr ...
; int before_truncation
before_truncation dd ?			; DATA XREF: define_all_fields+47Aw
					; define_all_fields:loc_8001E73w ...
; BLOCK	keyafter
keyafter	BLOCK <?>		; DATA XREF: define_all_fields+Cw
					; define_all_fields+11r ...
; int keyafter_truncation
keyafter_truncation dd ?		; DATA XREF: define_all_fields:loc_8001B52w
					; define_all_fields+674w ...
; BLOCK	head
head		BLOCK <?>		; DATA XREF: define_all_fields+7B6w
					; define_all_fields+7D0r ...
; int head_truncation
head_truncation	dd ?			; DATA XREF: define_all_fields:loc_80022D8w
					; define_all_fields:loc_80022DFw ...
; BLOCK	reference
reference	BLOCK <?>		; DATA XREF: fix_output_parameters+10Fw
					; define_all_fields:loc_80023D9r ...
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment '32byte' can not be represented in assembly
_rodata		segment	para public 'CONST' use32
		assume cs:_rodata
		;org 8003D20h
; char msgid[]
msgid		db 0Ah			; DATA XREF: emit_ancillary_info+1Do
		db 'Report %s bugs to %s',0Ah,0
aBugCoreutils@g	db 'bug-coreutils@gnu.org',0 ; DATA XREF: emit_ancillary_info+2Do
		align 10h
; char aSHomePageHttpW[]
aSHomePageHttpW	db '%s home page: <http://www.gnu.org/software/%s/>',0Ah,0
					; DATA XREF: emit_ancillary_info+3Fo
; char domainname[]
domainname	db 'coreutils',0        ; DATA XREF: emit_ancillary_info+4Fo
					; main+51o ...
aGnuCoreutils	db 'GNU coreutils',0    ; DATA XREF: emit_ancillary_info+54o
					; main+3BAo
		align 4
; char aGeneralHelpUsi[]
aGeneralHelpUsi	db 'General help using GNU software: <http://www.gnu.org/gethelp/>',0Ah,0
					; DATA XREF: emit_ancillary_info+6Bo
; char s2[]
s2		db 'en_',0              ; DATA XREF: emit_ancillary_info+A2o
; char aReportSTransla[]
aReportSTransla	db 'Report %s translation bugs to <http://translationproject.org/team'
					; DATA XREF: emit_ancillary_info+CCo
		db '/>',0Ah,0
		align 4
; char aForCompleteDoc[]
aForCompleteDoc	db 'For complete documentation, run: info coreutils ',27h,'%s invocation'
					; DATA XREF: emit_ancillary_info+FCo
		db 27h,0Ah,0
asc_8003E69	db '/',0                ; DATA XREF: .data:truncation_stringo
aXx		db 'xx',0               ; DATA XREF: .data:macro_nameo
		align 10h
; char aErrorInRegular[]
aErrorInRegular	db 'error in regular expression matcher',0 ; DATA XREF: matcher_error+Ao
; char aSForRegexpS[]
aSForRegexpS	db '%s (for regexp %s)',0 ; DATA XREF: compile_regex+90o
		align 4
a_?		db '[.?!][]"',27h,')}]*\($\|',9,'\|  \)[ ',9,0Ah
					; DATA XREF: initialize_regex+7Bo
		db ']*',0
asc_8003EC8	db 0Ah,0		; DATA XREF: initialize_regex:loc_80005C4o
; char asc_8003ECA[]
asc_8003ECA	db '-',0                ; DATA XREF: swallow_file_in_memory+41o
					; main+4D4o ...
; char format[]
format		db '%s',0               ; DATA XREF: swallow_file_in_memory+ACo
					; swallow_file_in_memory+DFo ...
aOe		db '\oe{}',0            ; DATA XREF: print_field+A8o
aOe_0		db '\OE{}',0            ; DATA XREF: print_field+C1o
aAe		db '\ae{}',0            ; DATA XREF: print_field+DAo
aAe_0		db '\AE{}',0            ; DATA XREF: print_field+F3o
asc_8003EE7	db '\',0                ; DATA XREF: print_field+11Fo
					; print_field+14Ao ...
; char locale
locale		db 0			; DATA XREF: print_field:loc_8001493o
					; print_field:loc_80014BEo ...
; char aSC[]
aSC		db '\',27h,'%s%c',0     ; DATA XREF: print_field+132o
; char aSC_0[]
aSC_0		db '\`%s%c',0           ; DATA XREF: print_field+15Do
; char aSC_1[]
aSC_1		db '\^%s%c',0           ; DATA XREF: print_field+188o
; char aSC_2[]
aSC_2		db '\"%s%c',0           ; DATA XREF: print_field+1B3o
; char aSC_3[]
aSC_3		db '\~%s%c',0           ; DATA XREF: print_field+1DEo
; char aCC[]
aCC		db '\c{%c}',0           ; DATA XREF: print_field+1F6o
aAa		db '\aa{}',0            ; DATA XREF: print_field+21Fo
aAa_0		db '\AA{}',0            ; DATA XREF: print_field+238o
aO		db '\o{}',0             ; DATA XREF: print_field+26Fo
aO_0		db '\O{}',0             ; DATA XREF: print_field+288o
; char aC[]
aC		db '$\%c$',0            ; DATA XREF: print_field+323o
aBackslash	db '\backslash{}',0     ; DATA XREF: print_field+33Co
		align 10h
off_8003F40	dd offset loc_80016DE	; DATA XREF: print_field+77o
		dd offset loc_80013ED	; jump table for switch	statement
		dd offset loc_8001486
		dd offset loc_80014B1
		dd offset loc_80014DC
		dd offset loc_8001507
		dd offset loc_8001532
		dd offset loc_800155D
		dd offset loc_8001575
		dd offset loc_80015C5
; char aD[3]
aD		db '%d',0               ; DATA XREF: fix_output_parameters+6Fo
a_		db '$%&#_{}\',0         ; DATA XREF: fix_output_parameters:loc_8001971o
; char aSD[]
aSD		db '%s:%d',0            ; DATA XREF: define_all_fields+9F2o
; char a_S[]
a_S		db '.%s "',0            ; DATA XREF: output_one_roff_line+Fo
asc_8003F80	db ' "',0               ; DATA XREF: output_one_roff_line+6Bo
					; output_one_roff_line+C7o ...
; char aS_0[]
aS_0		db '\%s ',0             ; DATA XREF: output_one_tex_line+Fo
asc_8003F88	db '}{',0               ; DATA XREF: output_one_tex_line+4Ao
					; output_one_tex_line+78o ...
		align 4
; char aTrySHelpForMor[]
aTrySHelpForMor	db 'Try `%s --help',27h,' for more information.',0Ah,0
					; DATA XREF: usage+14o
		align 4
; char aUsageSOption__[]
aUsageSOption__	db 'Usage: %s [OPTION]... [INPUT]...   (without -G)',0Ah
					; DATA XREF: usage+4Ao
		db '  or:  %s -G [OPTION]... [INPUT [OUTPUT]]',0Ah,0
		align 10h
; char aOutputAPermute[]
aOutputAPermute	db 'Output a permuted index, including context, of the words in the i'
					; DATA XREF: usage+6Eo
		db 'nput files.',0Ah
		db 0Ah,0
		align 10h
; char aMandatoryArgum[]
aMandatoryArgum	db 'Mandatory arguments to long options are mandatory for short optio'
					; DATA XREF: usage+91o
		db 'ns too.',0Ah,0
		align 4
; char aAAutoReference[]
aAAutoReference	db '  -A, --auto-reference           output automatically generated r'
					; DATA XREF: usage+B4o
		db 'eferences',0Ah
		db '  -G, --traditional              behave more like System V `ptx',27h
		db 0Ah
		db '  -F, --flag-truncation=STRING   use STRING for flagging line tru'
		db 'ncations',0Ah,0
		align 4
; char aMMacroNameStri[]
aMMacroNameStri	db '  -M, --macro-name=STRING        macro name to use instead of `xx'
					; DATA XREF: usage+D7o
		db 27h,0Ah
		db '  -O, --format=roff              generate output as roff directiv'
		db 'es',0Ah
		db '  -R, --right-side-refs          put references at right, not cou'
		db 'nted in -w',0Ah
		db '  -S, --sentence-regexp=REGEXP   for end of lines or end of sente'
		db 'nces',0Ah
		db '  -T, --format=tex               generate output as TeX directive'
		db 's',0Ah,0
		align 4
; char aWWordRegexpReg[]
aWWordRegexpReg	db '  -W, --word-regexp=REGEXP       use REGEXP to match each keyword'
					; DATA XREF: usage+FAo
		db 0Ah
		db '  -b, --break-file=FILE          word break characters in this FI'
		db 'LE',0Ah
		db '  -f, --ignore-case              fold lower case to upper case fo'
		db 'r sorting',0Ah
		db '  -g, --gap-size=NUMBER          gap size in columns between outp'
		db 'ut fields',0Ah
		db '  -i, --ignore-file=FILE         read ignore word list from FILE',0Ah
		db '  -o, --only-file=FILE           read only word list from this FI'
		db 'LE',0Ah,0
		align 4
; char aRReferencesFir[]
aRReferencesFir	db '  -r, --references               first field of each line is a re'
					; DATA XREF: usage+11Do
		db 'ference',0Ah
		db '  -t, --typeset-mode               - not implemented -',0Ah
		db '  -w, --width=NUMBER             output width in columns, referen'
		db 'ce excluded',0Ah,0
		align 4
; char aHelpDisplayThi[]
aHelpDisplayThi	db '      --help     display this help and exit',0Ah,0
					; DATA XREF: usage+140o
		align 4
; char aVersionOutputV[]
aVersionOutputV	db '      --version  output version information and exit',0Ah,0
					; DATA XREF: usage+163o
		align 10h
; char aWithNoFileOrIf[]
aWithNoFileOrIf	db 0Ah			; DATA XREF: usage+186o
		db 'With no FILE or if FILE is -, read Standard Input.  `-F /',27h,' by '
		db 'default.',0Ah,0
aAutoReference	db 'auto-reference',0   ; DATA XREF: .rodata:long_optionso
aBreakFile	db 'break-file',0       ; DATA XREF: .rodata:long_optionso
aFlagTruncation	db 'flag-truncation',0  ; DATA XREF: .rodata:long_optionso
aIgnoreCase	db 'ignore-case',0      ; DATA XREF: .rodata:long_optionso
aGapSize	db 'gap-size',0         ; DATA XREF: .rodata:long_optionso
aIgnoreFile	db 'ignore-file',0      ; DATA XREF: .rodata:long_optionso
aMacroName	db 'macro-name',0       ; DATA XREF: .rodata:long_optionso
aOnlyFile	db 'only-file',0        ; DATA XREF: .rodata:long_optionso
aReferences	db 'references',0       ; DATA XREF: .rodata:long_optionso
aRightSideRefs	db 'right-side-refs',0  ; DATA XREF: .rodata:long_optionso
aFormat_0	db 'format',0           ; DATA XREF: .rodata:long_optionso
aSentenceRegexp	db 'sentence-regexp',0  ; DATA XREF: .rodata:long_optionso
aTraditional	db 'traditional',0      ; DATA XREF: .rodata:long_optionso
aTypesetMode	db 'typeset-mode',0     ; DATA XREF: .rodata:long_optionso
aWidth		db 'width',0            ; DATA XREF: .rodata:long_optionso
aWordRegexp	db 'word-regexp',0      ; DATA XREF: .rodata:long_optionso
aHelp		db 'help',0             ; DATA XREF: .rodata:long_optionso
aVersion	db 'version',0          ; DATA XREF: .rodata:long_optionso
		align 10h
; const	option long_options[19]
long_options	option <offset aAutoReference, 0, 0, 41h> ; DATA XREF: main+3DCo
		option <offset aBreakFile, 1, 0, 62h> ;	"auto-reference"
		option <offset aFlagTruncation,	1, 0, 46h>
		option <offset aIgnoreCase, 0, 0, 66h>
		option <offset aGapSize, 1, 0, 67h>
		option <offset aIgnoreFile, 1, 0, 69h>
		option <offset aMacroName, 1, 0, 4Dh>
		option <offset aOnlyFile, 1, 0,	6Fh>
		option <offset aReferences, 0, 0, 72h>
		option <offset aRightSideRefs, 0, 0, 52h>
		option <offset aFormat_0, 1, 0,	0Ah>
		option <offset aSentenceRegexp,	1, 0, 53h>
		option <offset aTraditional, 0,	0, 47h>
		option <offset aTypesetMode, 0,	0, 74h>
		option <offset aWidth, 1, 0, 77h>
		option <offset aWordRegexp, 1, 0, 57h>
		option <offset aHelp, 0, 0, 0FFFFFF7Eh>
		option <offset aVersion, 0, 0, 0FFFFFF7Dh>
		option	<0>
aRoff		db 'roff',0             ; DATA XREF: .rodata:format_argso
aTex		db 'tex',0              ; DATA XREF: .rodata:format_argso
		align 4
; const	char *const format_args[3]
format_args	dd offset aRoff, offset	aTex, 0	; DATA XREF: main+368o
					; "roff"
; const	Format format_vals[2]
format_vals	dd ROFF_FORMAT,	TEX_FORMAT ; DATA XREF:	main+363o main+37Br
; char dirname[]
dirname		db '/usr/local/share/locale',0 ; DATA XREF: main+4Co
; char aInvalidGapWidt[]
aInvalidGapWidt	db 'invalid gap width: %s',0 ; DATA XREF: main+1E3o
; char aInvalidLineWid[]
aInvalidLineWid	db 'invalid line width: %s',0 ; DATA XREF: main+279o
aFormat		db '--format',0         ; DATA XREF: main+36Eo
aFranZoisPinard	db 'François Pinard',0 ; DATA XREF: main+394o
aF_Pinard	db 'F. Pinard',0        ; DATA XREF: main+399o
aPtx		db 'ptx',0              ; DATA XREF: main+3BFo
; char shortopts[]
shortopts	db 'AF:GM:ORS:TW:b:i:fg:o:trw:',0 ; DATA XREF: main+3E1o
aW		db 'w',0                ; DATA XREF: main+60Co
; char aExtraOperandS[]
aExtraOperandS	db 'extra operand %s',0 ; DATA XREF: main+683o
_rodata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_eh_frame	segment	dword public 'CONST' use32
		assume cs:_eh_frame
		;org 80048CCh
		dd 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 2	dup(1Ch)
		dd offset loc_800366B-8007F57h
		dd 12h,	80E4100h, 0D420285h, 0CC54E05h,	404h, 20h, 3Ch
		dd offset loc_800366B-8007F65h
		dd 11Ch, 80E4100h, 0D420285h, 3834405h,	0C5011403h, 4040CC3h
		dd 18h,	60h
		dd offset loc_800366B-8007E6Dh
		dd 39h,	80E4100h, 0D420285h, 3834405h, 20h, 7Ch
		dd offset loc_800366B-8007E50h
		dd 311h, 80E4100h, 0D420285h, 3834405h,	0C5030903h, 4040CC3h
		dd 20h,	0A0h
		dd offset loc_800366B-8007B63h
		dd 0C5h, 80E4100h, 0D420285h, 3834405h,	0C3C5BD02h, 4040Ch
		dd 1Ch,	0C4h
		dd offset loc_800366B-8007AC2h
		dd 14Dh, 80E4100h, 0D420285h, 1490305h,	4040CC5h, 28h
		dd 0E4h
		dd offset loc_800366B-8007995h
		dd 2AEh, 80E4100h, 0D420285h, 3864805h,	0A0030483h, 0C641C302h
		dd 40CC541h, 4,	20h, 110h
		dd offset loc_800366B-8007713h
		dd 11Ch, 80E4100h, 0D420285h, 3834405h,	0C5011403h, 4040CC3h
		dd 1Ch,	134h
		dd offset loc_800366B-800761Bh
		dd 36h,	80E4100h, 0D420285h, 0CC57205h,	404h, 1Ch, 154h
		dd offset loc_800366B-8007605h
		dd 83h,	80E4100h, 0D420285h, 0C57F0205h, 4040Ch, 1Ch, 174h
		dd offset loc_800366B-80075A2h
		dd 25h,	80E4100h, 0D420285h, 0CC56105h,	404h, 1Ch, 194h
		dd offset loc_800366B-800759Dh
		dd 0B9h, 80E4100h, 0D420285h, 0C5B50205h, 4040Ch, 1Ch
		dd 1B4h
		dd offset loc_800366B-8007504h
		dd 164h, 80E4100h, 0D420285h, 1600305h,	4040CC5h, 20h
		dd 1D4h
		dd offset loc_800366B-80073C0h
		dd 5F6h, 80E4100h, 0D420285h, 3834405h,	0C505EE03h, 4040CC3h
		dd 1Ch,	1F8h
		dd offset loc_800366B-8006DEEh
		dd 28h,	80E4100h, 0D420285h, 0CC56405h,	404h, 1Ch, 218h
		dd offset loc_800366B-8006DE6h
		dd 385h, 80E4100h, 0D420285h, 3810305h,	4040CC5h, 1Ch
		dd 238h
		dd offset loc_800366B-8006A81h
		dd 300h, 80E4100h, 0D420285h, 2FC0305h,	4040CC5h, 20h
		dd 258h
		dd offset loc_800366B-80067A1h
		dd 0A9Ch, 80E4100h, 0D420285h, 3834405h, 0C50A9403h, 4040CC3h
		dd 1Ch,	27Ch
		dd offset loc_800366B-8005D29h
		dd 1D6h, 80E4100h, 0D420285h, 1D20305h,	4040CC5h, 1Ch
		dd 29Ch
		dd offset loc_800366B-8005B73h
		dd 222h, 80E4100h, 0D420285h, 21E0305h,	4040CC5h, 1Ch
		dd 2BCh
		dd offset loc_800366B-8005971h
		dd 3ACh, 80E4100h, 0D420285h, 3A80305h,	4040CC5h, 1Ch
		dd 2DCh
		dd offset loc_800366B-80055E5h
		dd 0A0h, 80E4100h, 0D420285h, 0C59C0205h, 4040Ch, 1Ch
		dd 2FCh
		dd offset loc_800366B-8005565h
		dd 1B0h, 80E4100h, 0D420285h, 3864205h,	483h, 28h, 31Ch
		dd offset loc_800366B-80053D5h
		dd 7EEh, 10C4400h, 5104700h, 45007502h,	7475030Fh, 2061006h
		dd 3107C75h, 787502h
_eh_frame	ends

; ===========================================================================

; Segment type:	Externs
; extern
		extrn program_name:dword ; DATA	XREF: emit_ancillary_info+7r
					; emit_ancillary_info+B6r ...
		extrn last_component:near ; CODE XREF: emit_ancillary_info+10p
					; emit_ancillary_info+BFp ...
; char *gettext(const char *msgid)
		extrn gettext:near	; CODE XREF: emit_ancillary_info+22p
					; emit_ancillary_info+44p ...
; int printf(const char	*format, ...)
		extrn printf:near	; CODE XREF: emit_ancillary_info+34p
					; emit_ancillary_info+5Ap ...
; struct _IO_FILE *stdout
		extrn stdout:dword	; DATA XREF: emit_ancillary_info+62r
					; print_field+9Er ...
		extrn fputs_unlocked:near ; CODE XREF: emit_ancillary_info+7Dp
					; output_one_roff_line+4Cp ...
; char *setlocale(int category,	const char *locale)
		extrn setlocale:near	; CODE XREF: emit_ancillary_info+8Cp
					; main+41p
; int strncmp(const char *s1, const char *s2, size_t n)
		extrn strncmp:near	; CODE XREF: emit_ancillary_info+AAp
; int *_errno_location(void)
		extrn __errno_location:near ; CODE XREF: matcher_error+19p
					; swallow_file_in_memory+9Fp ...
; void error(int status, int errnum, const char	*format, ...)
		extrn error:near	; CODE XREF: matcher_error+27p
					; compile_regex+A9p ...
; void exit(int	status)
		extrn exit:near		; CODE XREF: matcher_error+34p
					; usage+1ABp ...
; size_t strlen(const char *s)
		extrn strlen:near	; CODE XREF: copy_unescaped_string+Dp
					; compile_regex+5Ap ...
; void *xmalloc(size_t)
		extrn xmalloc:near	; CODE XREF: copy_unescaped_string+1Cp
					; swallow_file_in_memory+10Cp ...
; const	unsigned __int16 **_ctype_b_loc(void)
		extrn __ctype_b_loc:near ; CODE	XREF: copy_unescaped_string+14Cp
					; initialize_regex:loc_8000622p ...
; const	char *re_compile_pattern(const char *pattern, size_t length, struct re_pattern_buffer *buffer)
		extrn re_compile_pattern:near ;	CODE XREF: compile_regex+6Cp
		extrn quote:near	; CODE XREF: compile_regex+83p
					; main+676p
; int re_compile_fastmap(struct	re_pattern_buffer *buffer)
		extrn re_compile_fastmap:near ;	CODE XREF: compile_regex+B7p
; int toupper(int c)
		extrn toupper:near	; CODE XREF: initialize_regex+20p
; void *memset(void *s,	int c, size_t n)
		extrn memset:near	; CODE XREF: initialize_regex+12Dp
					; digest_break_file+38p
; int strcmp(const char	*s1, const char	*s2)
		extrn strcmp:near	; CODE XREF: swallow_file_in_memory+4Cp
					; main+4DAp ...
		extrn open64:near	; CODE XREF: swallow_file_in_memory+8Ep
		extrn fstat64:near	; CODE XREF: swallow_file_in_memory+C6p
; ssize_t read(int fd, void *buf, size_t nbytes)
		extrn read:near		; CODE XREF: swallow_file_in_memory+136p
					; swallow_file_in_memory+20Ep
; void *xrealloc(void *, size_t)
		extrn xrealloc:near	; CODE XREF: swallow_file_in_memory+1E1p
					; digest_word_file+CBp	...
; int close(int	fd)
		extrn close:near	; CODE XREF: swallow_file_in_memory+26Cp
		extrn __stack_chk_fail:near ; CODE XREF: swallow_file_in_memory+2A2p
					; digest_break_file+B2p ...
; void qsort(void *base, size_t	nmemb, size_t size, __compar_fn_t compar)
		extrn qsort:near	; CODE XREF: sort_found_occurs+1Ap
					; digest_word_file+148p
; void free(void *ptr)
		extrn free:near		; CODE XREF: digest_break_file+9Dp
		extrn xalloc_die:near	; CODE XREF: digest_word_file+9Ep
					; find_occurs_in_text+3D2p
; int re_search(struct re_pattern_buffer *buffer, const	char *string, int length, int start, int range,	struct re_registers *regs)
		extrn re_search:near	; CODE XREF: find_occurs_in_text+119p
					; find_occurs_in_text+1BEp
; int putchar_unlocked(int c)
		extrn putchar_unlocked:near ; CODE XREF: print_spaces+13p
					; print_field+107p ...
		extrn diacrit_diac:byte	; DATA XREF: print_field+31r
					; fix_output_parameters+2C4r
		extrn diacrit_base:byte	; DATA XREF: print_field+5Ar
; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
		extrn fwrite_unlocked:near ; CODE XREF:	print_field+ADp
					; print_field+C6p ...
; int sprintf(char *s, const char *format, ...)
		extrn sprintf:near	; CODE XREF: fix_output_parameters+78p
					; define_all_fields+9F8p
; int re_match(struct re_pattern_buffer	*buffer, const char *string, int length, int start, struct re_registers	*regs)
		extrn re_match:near	; CODE XREF: define_all_fields+84p
					; define_all_fields+21Cp ...
; struct _IO_FILE *stderr
		extrn stderr:dword	; DATA XREF: usage+23r
; int fprintf(FILE *stream, const char *format,	...)
		extrn fprintf:near	; CODE XREF: usage+2Ep
		extrn set_program_name:near ; CODE XREF: main+2Fp
; char *bindtextdomain(const char *domainname, const char *dirname)
		extrn bindtextdomain:near ; CODE XREF: main+56p
; char *textdomain(const char *domainname)
		extrn textdomain:near	; CODE XREF: main+66p
; void close_stdout(void)
		extrn close_stdout	; DATA XREF: main+71o
; int atexit(void (*func)(void))
		extrn atexit:near	; CODE XREF: main+76p
; char *optarg
		extrn optarg:dword	; DATA XREF: main:loc_8003007r
					; main:loc_8003022r ...
		extrn xstrtoul:near	; CODE XREF: main+1B3p	main+249p
		extrn quotearg:near	; CODE XREF: main+1D6p	main+26Cp
		extrn argmatch_die:dword ; DATA	XREF: main:loc_80031D4r
		extrn __xargmatch_internal:near	; CODE XREF: main+373p
		extrn proper_name_utf8:near ; CODE XREF: main+39Ep
		extrn Version:dword	; DATA XREF: main+3A8r
		extrn version_etc:near	; CODE XREF: main+3C5p
; int getopt_long(int argc, char *const	*argv, const char *shortopts, const struct option *longopts, int *longind)
		extrn getopt_long:near	; CODE XREF: main+3EBp
; int optind
		extrn optind:dword	; DATA XREF: main+400r	main+456r ...
		extrn freopen_safer:near ; CODE	XREF: main+612p


		end
