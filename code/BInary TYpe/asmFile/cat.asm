;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B611-7234-BB			    |
; |		Doskey Lee, Kingsoft Internet Security Software		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	22FEDFDD440AA766DFE3EEDE1EB199F0
; Input	CRC32 :	F684A7A7

; File Name   :	D:\coreutils-o\cat.o
; Format      :	ELF for	Intel 386 (Relocatable)
;
; Source File :	'cat.c'

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	byte public 'CODE' use32
		assume cs:_text
		;org 8000000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void *__cdecl	ptr_align(const	void *ptr, size_t alignment)
ptr_align	proc near		; CODE XREF: main+58Bp	main+664p ...

p0		= dword	ptr -8
p1		= dword	ptr -4
ptr		= dword	ptr  8
alignment	= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		mov	eax, [ebp+ptr]
		mov	[ebp+p0], eax
		mov	eax, [ebp+alignment]
		lea	edx, [eax-1]
		mov	eax, [ebp+p0]
		add	eax, edx
		mov	[ebp+p1], eax
		mov	eax, [ebp+p1]
		mov	edx, 0
		div	[ebp+alignment]
		mov	eax, edx
		neg	eax
		mov	edx, eax
		mov	eax, [ebp+p1]
		add	eax, edx
		leave
		retn
ptr_align	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void emit_ancillary_info()
emit_ancillary_info proc near		; CODE XREF: usage+137p

lc_messages	= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset msgid	; "\nReport %s bugs to %s\n"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset aBugCoreutils@g ; "bug-coreutils@gnu.org"
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	offset aSHomePageHttpW ; "%s home page:	<http://www.gnu.org/softw"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset domainname ; "coreutils"
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aGeneralHelpUsi ; "General help using GNU software: <http:"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		sub	esp, 8
		push	0		; locale
		push	5		; category
		call	setlocale
		add	esp, 10h
		mov	[ebp+lc_messages], eax
		cmp	[ebp+lc_messages], 0
		jz	short loc_8000118
		sub	esp, 4
		push	3		; n
		push	offset s2	; "en_"
		push	[ebp+lc_messages] ; s1
		call	strncmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_8000118
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aReportSTransla ; "Report %s translation	bugs to	<http://t"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h

loc_8000118:				; CODE XREF: emit_ancillary_info+9Bj
					; emit_ancillary_info+B4j
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aForCompleteDoc ; "For complete documentation, run: info	c"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		nop
		mov	ebx, [ebp+var_4]
		leave
		retn
emit_ancillary_info endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; size_t __cdecl io_blksize(stat sb)
io_blksize	proc near		; CODE XREF: main+2D9p	main+462p

sb		= stat ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+sb.st_blksize]
		test	eax, eax
		jle	short loc_8000189
		mov	eax, [ebp+sb.st_blksize]
		cmp	eax, 20000000h
		ja	short loc_8000189
		mov	eax, [ebp+sb.st_blksize]
		cmp	eax, 7FFFh
		jle	short loc_8000189
		mov	eax, [ebp+sb.st_blksize]
		test	eax, eax
		jle	short loc_8000182
		mov	eax, [ebp+sb.st_blksize]
		cmp	eax, 20000000h
		ja	short loc_8000182
		mov	eax, [ebp+sb.st_blksize]
		jmp	short loc_800018E
; ---------------------------------------------------------------------------

loc_8000182:				; CODE XREF: io_blksize+23j
					; io_blksize+2Dj
		mov	eax, 200h
		jmp	short loc_800018E
; ---------------------------------------------------------------------------

loc_8000189:				; CODE XREF: io_blksize+8j
					; io_blksize+12j ...
		mov	eax, 8000h

loc_800018E:				; CODE XREF: io_blksize+32j
					; io_blksize+39j
		pop	ebp
		retn
io_blksize	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; void __cdecl usage(int status)
		public usage
usage		proc near		; CODE XREF: main+1F3p	main+248p

status		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		cmp	[ebp+status], 0
		jz	short loc_80001CB
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, ds:stderr
		sub	esp, 4
		push	ebx
		push	edx		; format
		push	eax		; stream
		call	fprintf
		add	esp, 10h
		jmp	loc_80002CC
; ---------------------------------------------------------------------------

loc_80001CB:				; CODE XREF: usage+9j
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aUsageSOption__ ; "Usage: %s [OPTION]...	[FILE]...\n"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aConcatenateFil ; "Concatenate FILE(s), or standard input,"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aTEquivalentToV ; "  -t			     equivalent	t"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aHelpDisplayThi ; "	--help	   display this	help and "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aVersionOutputV ; "	--version  output version informa"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aWithNoFileOrWh ; "\nWith no FILE, or when FILE is -, read"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	esi, ds:program_name
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aExamplesSFGOut ; "\nExamples:\n	 %s f -	g  Output f's con"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	esi
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		call	emit_ancillary_info

loc_80002CC:				; CODE XREF: usage+36j
		sub	esp, 0Ch
		push	[ebp+status]	; status
		call	exit
usage		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void next_line_num()
next_line_num	proc near		; CODE XREF: cat+2EAp cat+34Bp

endp		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		mov	eax, line_num_end
		mov	[ebp+endp], eax

loc_80002E5:				; CODE XREF: next_line_num+38j
		mov	eax, [ebp+endp]
		movzx	eax, byte ptr [eax]
		mov	edx, eax
		add	edx, 1
		mov	ecx, edx
		mov	edx, [ebp+endp]
		mov	[edx], cl
		cmp	al, 38h
		jle	short loc_8000359
		mov	eax, [ebp+endp]
		lea	edx, [eax-1]
		mov	[ebp+endp], edx
		mov	byte ptr [eax],	30h
		mov	eax, line_num_start
		cmp	[ebp+endp], eax
		jnb	short loc_80002E5
		mov	eax, line_num_start
		cmp	eax, offset line_buf ; "		 0\t"
		jbe	short loc_8000334
		mov	eax, line_num_start
		sub	eax, 1
		mov	line_num_start,	eax
		mov	eax, line_num_start
		mov	byte ptr [eax],	31h
		jmp	short loc_800033B
; ---------------------------------------------------------------------------

loc_8000334:				; CODE XREF: next_line_num+44j
		mov	byte ptr line_buf, 3Eh ; "		   0\t"

loc_800033B:				; CODE XREF: next_line_num+5Bj
		mov	edx, line_num_start
		mov	eax, line_num_print
		cmp	edx, eax
		jnb	short locret_800035A
		mov	eax, line_num_print
		sub	eax, 1
		mov	line_num_print,	eax
		jmp	short locret_800035A
; ---------------------------------------------------------------------------

loc_8000359:				; CODE XREF: next_line_num+22j
		nop

locret_800035A:				; CODE XREF: next_line_num+71j
					; next_line_num+80j
		leave
		retn
next_line_num	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; _Bool	__cdecl	simple_cat(char	*buf, size_t bufsize)
simple_cat	proc near		; CODE XREF: main+59Dp

n_read		= dword	ptr -10h
n		= dword	ptr -0Ch
var_4		= dword	ptr -4
buf		= dword	ptr  8
bufsize		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h

loc_8000363:				; CODE XREF: simple_cat+75j
					; simple_cat+9Fj
		mov	eax, ds:input_desc
		sub	esp, 4
		push	[ebp+bufsize]
		push	[ebp+buf]
		push	eax
		call	safe_read
		add	esp, 10h
		mov	[ebp+n_read], eax
		cmp	[ebp+n_read], 0FFFFFFFFh
		jnz	short loc_80003A8
		mov	ebx, ds:infile
		call	__errno_location
		mov	eax, [eax]
		push	ebx
		push	offset format	; "%s"
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	eax, 0
		jmp	short loc_8000400
; ---------------------------------------------------------------------------

loc_80003A8:				; CODE XREF: simple_cat+25j
		cmp	[ebp+n_read], 0
		jnz	short loc_80003B5
		mov	eax, 1
		jmp	short loc_8000400
; ---------------------------------------------------------------------------

loc_80003B5:				; CODE XREF: simple_cat+50j
		mov	eax, [ebp+n_read]
		mov	[ebp+n], eax
		sub	esp, 4
		push	[ebp+n]
		push	[ebp+buf]
		push	1
		call	full_write
		add	esp, 10h
		cmp	eax, [ebp+n]
		jz	short loc_8000363
		sub	esp, 0Ch
		push	offset aWriteError ; "write error"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		sub	esp, 4
		push	ebx		; format
		push	eax		; errnum
		push	1		; status
		call	error
		add	esp, 10h
		jmp	loc_8000363
; ---------------------------------------------------------------------------

loc_8000400:				; CODE XREF: simple_cat+4Aj
					; simple_cat+57j
		mov	ebx, [ebp+var_4]
		leave
		retn
simple_cat	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl write_pending(char *outbuf, char	**bpout)
write_pending	proc near		; CODE XREF: cat+1FEp cat+24Ep ...

n_write		= dword	ptr -0Ch
var_4		= dword	ptr -4
outbuf		= dword	ptr  8
bpout		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, [ebp+bpout]
		mov	eax, [eax]
		mov	edx, eax
		mov	eax, [ebp+outbuf]
		sub	edx, eax
		mov	eax, edx
		mov	[ebp+n_write], eax
		cmp	[ebp+n_write], 0
		jz	short loc_800046B
		sub	esp, 4
		push	[ebp+n_write]
		push	[ebp+outbuf]
		push	1
		call	full_write
		add	esp, 10h
		cmp	eax, [ebp+n_write]
		jz	short loc_8000463
		sub	esp, 0Ch
		push	offset aWriteError ; "write error"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		sub	esp, 4
		push	ebx		; format
		push	eax		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_8000463:				; CODE XREF: write_pending+34j
		mov	eax, [ebp+bpout]
		mov	edx, [ebp+outbuf]
		mov	[eax], edx

loc_800046B:				; CODE XREF: write_pending+1Cj
		nop
		mov	ebx, [ebp+var_4]
		leave
		retn
write_pending	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; _Bool	__cdecl	cat(char *inbuf, size_t	insize,	char *outbuf, size_t outsize, _Bool show_nonprinting, _Bool show_tabs, _Bool number, _Bool number_nonblank, _Bool show_ends, _Bool squeeze_blank)
cat		proc near		; CODE XREF: main+6B0p

var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
squeeze_blank	= byte ptr -58h
show_ends	= byte ptr -54h
number_nonblank	= byte ptr -50h
number		= byte ptr -4Ch
show_tabs	= byte ptr -48h
show_nonprinting= byte ptr -44h
outbuf		= dword	ptr -40h
inbuf		= dword	ptr -3Ch
ch_0		= byte ptr -2Fh
use_fionread	= byte ptr -2Eh
input_pending	= byte ptr -2Dh
bpout		= dword	ptr -2Ch
n_to_read	= dword	ptr -28h
bpin		= dword	ptr -24h
eob		= dword	ptr -20h
newlines	= dword	ptr -1Ch
wp		= dword	ptr -18h
remaining_bytes	= dword	ptr -14h
n_read		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
insize		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
outsize		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h
arg_1C		= dword	ptr  24h
arg_20		= dword	ptr  28h
arg_24		= dword	ptr  2Ch

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 60h
		mov	eax, [ebp+arg_10]
		mov	[ebp+var_5C], eax
		mov	ecx, [ebp+arg_14]
		mov	[ebp+var_60], ecx
		mov	esi, [ebp+arg_18]
		mov	[ebp+var_64], esi
		mov	ebx, [ebp+arg_1C]
		mov	ecx, [ebp+arg_20]
		mov	edx, [ebp+arg_24]
		mov	eax, [ebp+arg_0]
		mov	[ebp+inbuf], eax
		mov	eax, [ebp+arg_8]
		mov	[ebp+outbuf], eax
		movzx	eax, byte ptr [ebp+var_5C]
		mov	[ebp+show_nonprinting],	al
		movzx	eax, byte ptr [ebp+var_60]
		mov	[ebp+show_tabs], al
		movzx	eax, byte ptr [ebp+var_64]
		mov	[ebp+number], al
		mov	[ebp+number_nonblank], bl
		mov	[ebp+show_ends], cl
		mov	[ebp+squeeze_blank], dl
		mov	eax, large gs:14h
		mov	[ebp+var_C], eax
		xor	eax, eax
		mov	eax, ds:newlines2
		mov	[ebp+newlines],	eax
		mov	[ebp+use_fionread], 1
		mov	eax, [ebp+inbuf]
		mov	[ebp+eob], eax
		mov	eax, [ebp+eob]
		add	eax, 1
		mov	[ebp+bpin], eax
		mov	eax, [ebp+outbuf]
		mov	[ebp+bpout], eax

loc_80004EA:				; CODE XREF: cat+339j cat:loc_8000960j
		mov	edx, [ebp+outbuf]
		mov	eax, [ebp+outsize]
		add	edx, eax
		mov	eax, [ebp+bpout]
		cmp	edx, eax
		ja	loc_800057F
		mov	eax, [ebp+outbuf]
		mov	[ebp+wp], eax

loc_8000503:				; CODE XREF: cat+EDj
		sub	esp, 4
		push	[ebp+outsize]
		push	[ebp+wp]
		push	1
		call	full_write
		add	esp, 10h
		cmp	eax, [ebp+outsize]
		jz	short loc_8000543
		sub	esp, 0Ch
		push	offset aWriteError ; "write error"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		sub	esp, 4
		push	ebx		; format
		push	eax		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_8000543:				; CODE XREF: cat+A8j
		mov	eax, [ebp+outsize]
		add	[ebp+wp], eax
		mov	eax, [ebp+bpout]
		mov	edx, eax
		mov	eax, [ebp+wp]
		sub	edx, eax
		mov	eax, edx
		mov	[ebp+remaining_bytes], eax
		mov	eax, [ebp+outsize]
		cmp	eax, [ebp+remaining_bytes]
		jbe	short loc_8000503
		sub	esp, 4
		push	[ebp+remaining_bytes] ;	n
		push	[ebp+wp]	; src
		push	[ebp+outbuf]	; dest
		call	memmove
		add	esp, 10h
		mov	edx, [ebp+outbuf]
		mov	eax, [ebp+remaining_bytes]
		add	eax, edx
		mov	[ebp+bpout], eax

loc_800057F:				; CODE XREF: cat+86j
		mov	eax, [ebp+bpin]
		cmp	eax, [ebp+eob]
		jbe	loc_800071C
		mov	[ebp+input_pending], 0
		mov	[ebp+n_to_read], 0
		cmp	[ebp+use_fionread], 0
		jz	loc_800064F
		mov	eax, ds:input_desc
		sub	esp, 4
		lea	edx, [ebp+n_to_read]
		push	edx
		push	541Bh		; request
		push	eax		; fd
		call	ioctl
		add	esp, 10h
		test	eax, eax
		jns	loc_800064F
		call	__errno_location
		mov	eax, [eax]
		cmp	eax, 5Fh
		jz	short loc_80005FE
		call	__errno_location
		mov	eax, [eax]
		cmp	eax, 19h
		jz	short loc_80005FE
		call	__errno_location
		mov	eax, [eax]
		cmp	eax, 16h
		jz	short loc_80005FE
		call	__errno_location
		mov	eax, [eax]
		cmp	eax, 13h
		jz	short loc_80005FE
		call	__errno_location
		mov	eax, [eax]
		cmp	eax, 26h
		jnz	short loc_8000604

loc_80005FE:				; CODE XREF: cat+15Bj cat+167j ...
		mov	[ebp+use_fionread], 0
		jmp	short loc_800064F
; ---------------------------------------------------------------------------

loc_8000604:				; CODE XREF: cat+18Bj
		mov	eax, ds:infile
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aCannotDoIoctlO ; "cannot do ioctl on %s"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		push	esi
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	eax, [ebp+newlines]
		mov	ds:newlines2, eax
		mov	eax, 0
		jmp	loc_8000965
; ---------------------------------------------------------------------------

loc_800064F:				; CODE XREF: cat+129j cat+14Bj ...
		mov	eax, [ebp+n_to_read]
		test	eax, eax
		jz	short loc_800065A
		mov	[ebp+input_pending], 1

loc_800065A:				; CODE XREF: cat+1E3j
		movzx	eax, [ebp+input_pending]
		xor	eax, 1
		test	al, al
		jz	short loc_8000677
		sub	esp, 8
		lea	eax, [ebp+bpout]
		push	eax		; bpout
		push	[ebp+outbuf]	; outbuf
		call	write_pending
		add	esp, 10h

loc_8000677:				; CODE XREF: cat+1F2j
		mov	eax, ds:input_desc
		sub	esp, 4
		push	[ebp+insize]
		push	[ebp+inbuf]
		push	eax
		call	safe_read
		add	esp, 10h
		mov	[ebp+n_read], eax
		cmp	[ebp+n_read], 0FFFFFFFFh
		jnz	short loc_80006D9
		mov	ebx, ds:infile
		call	__errno_location
		mov	eax, [eax]
		push	ebx
		push	offset format	; "%s"
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		sub	esp, 8
		lea	eax, [ebp+bpout]
		push	eax		; bpout
		push	[ebp+outbuf]	; outbuf
		call	write_pending
		add	esp, 10h
		mov	eax, [ebp+newlines]
		mov	ds:newlines2, eax
		mov	eax, 0
		jmp	loc_8000965
; ---------------------------------------------------------------------------

loc_80006D9:				; CODE XREF: cat+224j
		cmp	[ebp+n_read], 0
		jnz	short loc_8000703
		sub	esp, 8
		lea	eax, [ebp+bpout]
		push	eax		; bpout
		push	[ebp+outbuf]	; outbuf
		call	write_pending
		add	esp, 10h
		mov	eax, [ebp+newlines]
		mov	ds:newlines2, eax
		mov	eax, 1
		jmp	loc_8000965
; ---------------------------------------------------------------------------

loc_8000703:				; CODE XREF: cat+26Cj
		mov	eax, [ebp+inbuf]
		mov	[ebp+bpin], eax
		mov	edx, [ebp+bpin]
		mov	eax, [ebp+n_read]
		add	eax, edx
		mov	[ebp+eob], eax
		mov	eax, [ebp+eob]
		mov	byte ptr [eax],	0Ah
		jmp	short loc_8000797
; ---------------------------------------------------------------------------

loc_800071C:				; CODE XREF: cat+114j
		add	[ebp+newlines],	1
		cmp	[ebp+newlines],	0
		jle	short loc_8000779
		cmp	[ebp+newlines],	1
		jle	short loc_800074A
		mov	[ebp+newlines],	2
		cmp	[ebp+squeeze_blank], 0
		jz	short loc_800074A
		mov	eax, [ebp+bpin]
		lea	edx, [eax+1]
		mov	[ebp+bpin], edx
		movzx	eax, byte ptr [eax]
		mov	[ebp+ch_0], al
		jmp	short loc_80007A6
; ---------------------------------------------------------------------------

loc_800074A:				; CODE XREF: cat+2B9j cat+2C6j
		cmp	[ebp+number], 0
		jz	short loc_8000779
		movzx	eax, [ebp+number_nonblank]
		xor	eax, 1
		test	al, al
		jz	short loc_8000779
		call	next_line_num
		mov	edx, line_num_print
		mov	eax, [ebp+bpout]
		sub	esp, 8
		push	edx
		push	eax
		call	stpcpy
		add	esp, 10h
		mov	[ebp+bpout], eax

loc_8000779:				; CODE XREF: cat+2B3j cat+2DDj ...
		cmp	[ebp+show_ends], 0
		jz	short loc_800078B
		mov	eax, [ebp+bpout]
		lea	edx, [eax+1]
		mov	[ebp+bpout], edx
		mov	byte ptr [eax],	24h

loc_800078B:				; CODE XREF: cat+30Cj
		mov	eax, [ebp+bpout]
		lea	edx, [eax+1]
		mov	[ebp+bpout], edx
		mov	byte ptr [eax],	0Ah

loc_8000797:				; CODE XREF: cat+2A9j
		mov	eax, [ebp+bpin]
		lea	edx, [eax+1]
		mov	[ebp+bpin], edx
		movzx	eax, byte ptr [eax]
		mov	[ebp+ch_0], al

loc_80007A6:				; CODE XREF: cat+2D7j
		cmp	[ebp+ch_0], 0Ah
		jz	loc_80004EA
		cmp	[ebp+newlines],	0
		js	short loc_80007DA
		cmp	[ebp+number], 0
		jz	short loc_80007DA
		call	next_line_num
		mov	edx, line_num_print
		mov	eax, [ebp+bpout]
		sub	esp, 8
		push	edx
		push	eax
		call	stpcpy
		add	esp, 10h
		mov	[ebp+bpout], eax

loc_80007DA:				; CODE XREF: cat+343j cat+349j
		cmp	[ebp+show_nonprinting],	0
		jz	loc_8000903

loc_80007E4:				; CODE XREF: cat+48Dj
		cmp	[ebp+ch_0], 1Fh
		jbe	loc_80008A0
		cmp	[ebp+ch_0], 7Eh
		ja	short loc_8000808
		mov	eax, [ebp+bpout]
		lea	edx, [eax+1]
		mov	[ebp+bpout], edx
		movzx	edx, [ebp+ch_0]
		mov	[eax], dl
		jmp	loc_80008EF
; ---------------------------------------------------------------------------

loc_8000808:				; CODE XREF: cat+381j
		cmp	[ebp+ch_0], 7Fh
		jnz	short loc_800082B
		mov	eax, [ebp+bpout]
		lea	edx, [eax+1]
		mov	[ebp+bpout], edx
		mov	byte ptr [eax],	5Eh
		mov	eax, [ebp+bpout]
		lea	edx, [eax+1]
		mov	[ebp+bpout], edx
		mov	byte ptr [eax],	3Fh
		jmp	loc_80008EF
; ---------------------------------------------------------------------------

loc_800082B:				; CODE XREF: cat+39Bj
		mov	eax, [ebp+bpout]
		lea	edx, [eax+1]
		mov	[ebp+bpout], edx
		mov	byte ptr [eax],	4Dh
		mov	eax, [ebp+bpout]
		lea	edx, [eax+1]
		mov	[ebp+bpout], edx
		mov	byte ptr [eax],	2Dh
		cmp	[ebp+ch_0], 9Fh
		jbe	short loc_8000880
		cmp	[ebp+ch_0], 0FFh
		jz	short loc_8000866
		mov	eax, [ebp+bpout]
		lea	edx, [eax+1]
		mov	[ebp+bpout], edx
		movzx	edx, [ebp+ch_0]
		add	edx, 0FFFFFF80h
		mov	[eax], dl
		jmp	loc_80008EF
; ---------------------------------------------------------------------------

loc_8000866:				; CODE XREF: cat+3DCj
		mov	eax, [ebp+bpout]
		lea	edx, [eax+1]
		mov	[ebp+bpout], edx
		mov	byte ptr [eax],	5Eh
		mov	eax, [ebp+bpout]
		lea	edx, [eax+1]
		mov	[ebp+bpout], edx
		mov	byte ptr [eax],	3Fh
		jmp	short loc_80008EF
; ---------------------------------------------------------------------------

loc_8000880:				; CODE XREF: cat+3D6j
		mov	eax, [ebp+bpout]
		lea	edx, [eax+1]
		mov	[ebp+bpout], edx
		mov	byte ptr [eax],	5Eh
		mov	eax, [ebp+bpout]
		lea	edx, [eax+1]
		mov	[ebp+bpout], edx
		movzx	edx, [ebp+ch_0]
		sub	edx, 40h
		mov	[eax], dl
		jmp	short loc_80008EF
; ---------------------------------------------------------------------------

loc_80008A0:				; CODE XREF: cat+377j
		cmp	[ebp+ch_0], 9
		jnz	short loc_80008BF
		movzx	eax, [ebp+show_tabs]
		xor	eax, 1
		test	al, al
		jz	short loc_80008BF
		mov	eax, [ebp+bpout]
		lea	edx, [eax+1]
		mov	[ebp+bpout], edx
		mov	byte ptr [eax],	9
		jmp	short loc_80008EF
; ---------------------------------------------------------------------------

loc_80008BF:				; CODE XREF: cat+433j cat+43Ej
		cmp	[ebp+ch_0], 0Ah
		jnz	short loc_80008D1
		mov	[ebp+newlines],	0FFFFFFFFh
		jmp	loc_8000960
; ---------------------------------------------------------------------------

loc_80008D1:				; CODE XREF: cat+452j
		mov	eax, [ebp+bpout]
		lea	edx, [eax+1]
		mov	[ebp+bpout], edx
		mov	byte ptr [eax],	5Eh
		mov	eax, [ebp+bpout]
		lea	edx, [eax+1]
		mov	[ebp+bpout], edx
		movzx	edx, [ebp+ch_0]
		add	edx, 40h
		mov	[eax], dl

loc_80008EF:				; CODE XREF: cat+392j cat+3B5j ...
		mov	eax, [ebp+bpin]
		lea	edx, [eax+1]
		mov	[ebp+bpin], edx
		movzx	eax, byte ptr [eax]
		mov	[ebp+ch_0], al
		jmp	loc_80007E4
; ---------------------------------------------------------------------------

loc_8000903:				; CODE XREF: cat+36Dj cat+4EDj
		cmp	[ebp+ch_0], 9
		jnz	short loc_800092F
		cmp	[ebp+show_tabs], 0
		jz	short loc_800092F
		mov	eax, [ebp+bpout]
		lea	edx, [eax+1]
		mov	[ebp+bpout], edx
		mov	byte ptr [eax],	5Eh
		mov	eax, [ebp+bpout]
		lea	edx, [eax+1]
		mov	[ebp+bpout], edx
		movzx	edx, [ebp+ch_0]
		add	edx, 40h
		mov	[eax], dl
		jmp	short loc_800094F
; ---------------------------------------------------------------------------

loc_800092F:				; CODE XREF: cat+496j cat+49Cj
		cmp	[ebp+ch_0], 0Ah
		jz	short loc_8000946
		mov	eax, [ebp+bpout]
		lea	edx, [eax+1]
		mov	[ebp+bpout], edx
		movzx	edx, [ebp+ch_0]
		mov	[eax], dl
		jmp	short loc_800094F
; ---------------------------------------------------------------------------

loc_8000946:				; CODE XREF: cat+4C2j
		mov	[ebp+newlines],	0FFFFFFFFh
		jmp	short loc_8000960
; ---------------------------------------------------------------------------

loc_800094F:				; CODE XREF: cat+4BCj cat+4D3j
		mov	eax, [ebp+bpin]
		lea	edx, [eax+1]
		mov	[ebp+bpin], edx
		movzx	eax, byte ptr [eax]
		mov	[ebp+ch_0], al
		jmp	short loc_8000903
; ---------------------------------------------------------------------------

loc_8000960:				; CODE XREF: cat+45Bj cat+4DCj
		jmp	loc_80004EA
; ---------------------------------------------------------------------------

loc_8000965:				; CODE XREF: cat+1D9j cat+263j ...
		mov	ecx, [ebp+var_C]
		xor	ecx, large gs:14h
		jz	short loc_8000976
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_8000976:				; CODE XREF: cat+4FEj
		lea	esp, [ebp-8]
		pop	ebx
		pop	esi
		pop	ebp
		retn
cat		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public main
main		proc near

var_E0		= byte ptr -0E0h
var_DC		= byte ptr -0DCh
var_D8		= byte ptr -0D8h
var_D4		= byte ptr -0D4h
var_D0		= dword	ptr -0D0h
argv		= dword	ptr -0CCh
ok		= byte ptr -0B9h
check_redirection= byte	ptr -0B8h
have_read_stdin	= byte ptr -0B7h
number		= byte ptr -0B6h
number_nonblank	= byte ptr -0B5h
squeeze_blank	= byte ptr -0B4h
show_ends	= byte ptr -0B3h
show_nonprinting= byte ptr -0B2h
show_tabs	= byte ptr -0B1h
inbuf		= dword	ptr -0B0h
argind		= dword	ptr -0ACh
file_open_mode	= dword	ptr -0A8h
page_size	= dword	ptr -0A4h
c		= dword	ptr -0A0h
outsize		= dword	ptr -9Ch
insize		= dword	ptr -98h
outbuf		= dword	ptr -94h
out_dev		= qword	ptr -90h
out_ino		= qword	ptr -88h
stat_buf	= stat ptr -7Ch
var_1C		= dword	ptr -1Ch
argc		= dword	ptr  0Ch
envp		= dword	ptr  14h

		lea	ecx, [esp+4]
		and	esp, 0FFFFFFF0h
		push	dword ptr [ecx-4]
		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		push	ecx
		sub	esp, 0D8h
		mov	eax, ecx
		mov	[ebp+var_D0], eax
		mov	eax, [eax+4]
		mov	[ebp+argv], eax
		mov	eax, large gs:14h
		mov	[ebp+var_1C], eax
		xor	eax, eax
		call	getpagesize
		mov	[ebp+page_size], eax
		mov	[ebp+ok], 1
		mov	[ebp+check_redirection], 1
		mov	[ebp+have_read_stdin], 0
		mov	[ebp+number], 0
		mov	[ebp+number_nonblank], 0
		mov	[ebp+squeeze_blank], 0
		mov	[ebp+show_ends], 0
		mov	[ebp+show_nonprinting],	0
		mov	[ebp+show_tabs], 0
		mov	[ebp+file_open_mode], 0
		mov	eax, [ebp+argv]
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	set_program_name
		add	esp, 10h
		sub	esp, 8
		push	offset locale	; locale
		push	6		; category
		call	setlocale
		add	esp, 10h
		sub	esp, 8
		push	offset dirname	; "/usr/local/share/locale"
		push	offset domainname ; "coreutils"
		call	bindtextdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset domainname ; "coreutils"
		call	textdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset close_stdout ; func
		call	atexit
		add	esp, 10h
		jmp	loc_8000BCA
; ---------------------------------------------------------------------------

loc_8000A64:				; CODE XREF: main+27Fj
		mov	eax, [ebp+c]
		cmp	eax, 62h
		jz	short loc_8000AE5
		cmp	eax, 62h
		jg	short loc_8000AB4
		cmp	eax, 41h
		jz	loc_8000B42
		cmp	eax, 41h
		jg	short loc_8000A9D
		cmp	eax, 0FFFFFF7Dh
		jz	loc_8000B75
		cmp	eax, 0FFFFFF7Eh
		jz	loc_8000B6B
		jmp	loc_8000BC0
; ---------------------------------------------------------------------------

loc_8000A9D:				; CODE XREF: main+103j
		cmp	eax, 45h
		jz	loc_8000B59
		cmp	eax, 54h
		jz	loc_8000B62
		jmp	loc_8000BC0
; ---------------------------------------------------------------------------

loc_8000AB4:				; CODE XREF: main+F5j
		cmp	eax, 73h
		jz	short loc_8000B17
		cmp	eax, 73h
		jg	short loc_8000ACD
		cmp	eax, 65h
		jz	short loc_8000AF8
		cmp	eax, 6Eh
		jz	short loc_8000B0B
		jmp	loc_8000BC0
; ---------------------------------------------------------------------------

loc_8000ACD:				; CODE XREF: main+13Fj
		cmp	eax, 75h
		jz	loc_8000BCA
		cmp	eax, 75h
		jl	short loc_8000B23
		cmp	eax, 76h
		jz	short loc_8000B36
		jmp	loc_8000BC0
; ---------------------------------------------------------------------------

loc_8000AE5:				; CODE XREF: main+F0j
		mov	[ebp+number], 1
		mov	[ebp+number_nonblank], 1
		jmp	loc_8000BCA
; ---------------------------------------------------------------------------

loc_8000AF8:				; CODE XREF: main+144j
		mov	[ebp+show_ends], 1
		mov	[ebp+show_nonprinting],	1
		jmp	loc_8000BCA
; ---------------------------------------------------------------------------

loc_8000B0B:				; CODE XREF: main+149j
		mov	[ebp+number], 1
		jmp	loc_8000BCA
; ---------------------------------------------------------------------------

loc_8000B17:				; CODE XREF: main+13Aj
		mov	[ebp+squeeze_blank], 1
		jmp	loc_8000BCA
; ---------------------------------------------------------------------------

loc_8000B23:				; CODE XREF: main+15Cj
		mov	[ebp+show_tabs], 1
		mov	[ebp+show_nonprinting],	1
		jmp	loc_8000BCA
; ---------------------------------------------------------------------------

loc_8000B36:				; CODE XREF: main+161j
		mov	[ebp+show_nonprinting],	1
		jmp	loc_8000BCA
; ---------------------------------------------------------------------------

loc_8000B42:				; CODE XREF: main+FAj
		mov	[ebp+show_nonprinting],	1
		mov	[ebp+show_ends], 1
		mov	[ebp+show_tabs], 1
		jmp	short loc_8000BCA
; ---------------------------------------------------------------------------

loc_8000B59:				; CODE XREF: main+123j
		mov	[ebp+show_ends], 1
		jmp	short loc_8000BCA
; ---------------------------------------------------------------------------

loc_8000B62:				; CODE XREF: main+12Cj
		mov	[ebp+show_tabs], 1
		jmp	short loc_8000BCA
; ---------------------------------------------------------------------------

loc_8000B6B:				; CODE XREF: main+115j
		sub	esp, 0Ch
		push	0		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8000B75:				; CODE XREF: main+10Aj
		sub	esp, 8
		push	offset aTorbjRnGranlun ; "Torbjörn Granlund"
		push	offset aTorbjornGranlu ; "Torbjorn Granlund"
		call	proper_name_utf8
		add	esp, 10h
		mov	ecx, eax
		mov	edx, ds:Version
		mov	eax, ds:stdout
		sub	esp, 4
		push	0
		push	offset aRichardM_Stall ; "Richard M. Stallman"
		push	ecx
		push	edx
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	offset aCat	; "cat"
		push	eax
		call	version_etc
		add	esp, 20h
		sub	esp, 0Ch
		push	0		; status
		call	exit
; ---------------------------------------------------------------------------

loc_8000BC0:				; CODE XREF: main+11Bj	main+132j ...
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8000BCA:				; CODE XREF: main+E2j main+153j ...
		sub	esp, 0Ch
		push	0		; longind
		push	offset long_options_5259 ; longopts
		push	offset shortopts ; "benstuvAET"
		push	[ebp+argv]	; argv
		mov	eax, [ebp+var_D0]
		push	dword ptr [eax]	; argc
		call	getopt_long
		add	esp, 20h
		mov	[ebp+c], eax
		cmp	[ebp+c], 0FFFFFFFFh
		jnz	loc_8000A64
		sub	esp, 8
		lea	eax, [ebp+stat_buf]
		push	eax
		push	1
		call	fstat64
		add	esp, 10h
		test	eax, eax
		jns	short loc_8000C3F
		sub	esp, 0Ch
		push	offset aStandardOutput ; "standard output"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		sub	esp, 4
		push	ebx		; format
		push	eax		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_8000C3F:				; CODE XREF: main+298j
		sub	esp, 60h
		mov	eax, esp
		mov	ebx, eax
		lea	eax, [ebp+stat_buf]
		mov	edx, 18h
		mov	edi, ebx
		mov	esi, eax
		mov	ecx, edx
		rep movsd
		call	io_blksize
		add	esp, 60h
		mov	[ebp+outsize], eax
		mov	eax, [ebp+stat_buf.st_mode]
		and	eax, 0F000h
		cmp	eax, 8000h
		jnz	short loc_8000C99
		mov	eax, dword ptr [ebp+stat_buf.st_dev]
		mov	edx, dword ptr [ebp+stat_buf.st_dev+4]
		mov	dword ptr [ebp+out_dev], eax
		mov	dword ptr [ebp+out_dev+4], edx
		mov	eax, dword ptr [ebp+stat_buf.st_ino]
		mov	edx, dword ptr [ebp+stat_buf.st_ino+4]
		mov	dword ptr [ebp+out_ino], eax
		mov	dword ptr [ebp+out_ino+4], edx
		jmp	short loc_8000CA0
; ---------------------------------------------------------------------------

loc_8000C99:				; CODE XREF: main+2F4j
		mov	[ebp+check_redirection], 0

loc_8000CA0:				; CODE XREF: main+31Aj
		movzx	eax, [ebp+number]
		xor	eax, 1
		test	al, al
		jz	short loc_8000CC8
		movzx	eax, [ebp+show_ends]
		xor	eax, 1
		test	al, al
		jz	short loc_8000CC8
		movzx	eax, [ebp+squeeze_blank]
		xor	eax, 1
		test	al, al

loc_8000CC8:				; CODE XREF: main+32Fj	main+33Dj
		mov	ds:infile, offset asc_800172B ;	"-"
		mov	eax, ds:optind
		mov	[ebp+argind], eax

loc_8000CDD:				; CODE XREF: main+75Aj
		mov	eax, [ebp+argind]
		mov	esi, [ebp+var_D0]
		cmp	eax, [esi]
		jge	short loc_8000D09
		mov	eax, [ebp+argind]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		mov	eax, [eax]
		mov	ds:infile, eax

loc_8000D09:				; CODE XREF: main+36Ej
		mov	eax, ds:infile
		sub	esp, 8
		push	offset asc_800172B ; "-"
		push	eax		; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		jnz	short loc_8000D36
		mov	[ebp+have_read_stdin], 1
		mov	ds:input_desc, 0
		jmp	short loc_8000D85
; ---------------------------------------------------------------------------

loc_8000D36:				; CODE XREF: main+3A4j
		mov	eax, ds:infile
		sub	esp, 8
		push	[ebp+file_open_mode]
		push	eax
		call	open64
		add	esp, 10h
		mov	ds:input_desc, eax
		mov	eax, ds:input_desc
		test	eax, eax
		jns	short loc_8000D85
		mov	ebx, ds:infile
		call	__errno_location
		mov	eax, [eax]
		push	ebx
		push	offset format	; "%s"
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	[ebp+ok], 0
		jmp	loc_80010C2
; ---------------------------------------------------------------------------

loc_8000D85:				; CODE XREF: main+3B7j	main+3DCj
		mov	eax, ds:input_desc
		sub	esp, 8
		lea	edx, [ebp+stat_buf]
		push	edx
		push	eax
		call	fstat64
		add	esp, 10h
		test	eax, eax
		jns	short loc_8000DC8
		mov	ebx, ds:infile
		call	__errno_location
		mov	eax, [eax]
		push	ebx
		push	offset format	; "%s"
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	[ebp+ok], 0
		jmp	contin
; ---------------------------------------------------------------------------

loc_8000DC8:				; CODE XREF: main+41Fj
		sub	esp, 60h
		mov	eax, esp
		mov	ebx, eax
		lea	eax, [ebp+stat_buf]
		mov	edx, 18h
		mov	edi, ebx
		mov	esi, eax
		mov	ecx, edx
		rep movsd
		call	io_blksize
		add	esp, 60h
		mov	[ebp+insize], eax
		cmp	[ebp+check_redirection], 0
		jz	short loc_8000E63
		mov	eax, dword ptr [ebp+stat_buf.st_dev]
		mov	edx, dword ptr [ebp+stat_buf.st_dev+4]
		mov	ecx, edx
		xor	ecx, dword ptr [ebp+out_dev+4]
		xor	eax, dword ptr [ebp+out_dev]
		or	eax, ecx
		test	eax, eax
		jnz	short loc_8000E63
		mov	eax, dword ptr [ebp+stat_buf.st_ino]
		mov	edx, dword ptr [ebp+stat_buf.st_ino+4]
		mov	ecx, edx
		xor	ecx, dword ptr [ebp+out_ino+4]
		xor	eax, dword ptr [ebp+out_ino]
		or	eax, ecx
		test	eax, eax
		jnz	short loc_8000E63
		mov	eax, ds:input_desc
		test	eax, eax
		jz	short loc_8000E63
		mov	ebx, ds:infile
		sub	esp, 0Ch
		push	offset aSInputFileIsOu ; "%s: input file is output file"
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	[ebp+ok], 0
		jmp	contin
; ---------------------------------------------------------------------------

loc_8000E63:				; CODE XREF: main+477j	main+491j ...
		movzx	eax, [ebp+number]
		xor	eax, 1
		test	al, al
		jz	loc_8000F3E
		movzx	eax, [ebp+show_ends]
		xor	eax, 1
		test	al, al
		jz	loc_8000F3E
		movzx	eax, [ebp+show_nonprinting]
		xor	eax, 1
		test	al, al
		jz	loc_8000F3E
		movzx	eax, [ebp+show_tabs]
		xor	eax, 1
		test	al, al
		jz	loc_8000F3E
		movzx	eax, [ebp+squeeze_blank]
		xor	eax, 1
		test	al, al
		jz	loc_8000F3E
		mov	eax, [ebp+insize]
		cmp	[ebp+outsize], eax
		cmovnb	eax, [ebp+outsize]
		mov	[ebp+insize], eax
		mov	edx, [ebp+insize]
		mov	eax, [ebp+page_size]
		add	eax, edx
		sub	eax, 1
		sub	esp, 0Ch
		push	eax		; size_t
		call	xmalloc
		add	esp, 10h
		mov	[ebp+inbuf], eax
		sub	esp, 8
		push	[ebp+page_size]	; alignment
		push	[ebp+inbuf]	; ptr
		call	ptr_align
		add	esp, 10h
		sub	esp, 8
		push	[ebp+insize]	; bufsize
		push	eax		; buf
		call	simple_cat
		add	esp, 10h
		movzx	edx, [ebp+ok]
		movzx	eax, al
		and	eax, edx
		test	eax, eax
		setnz	al
		mov	[ebp+ok], al
		jmp	loc_800105D
; ---------------------------------------------------------------------------

loc_8000F3E:				; CODE XREF: main+4F2j	main+504j ...
		mov	edx, [ebp+insize]
		mov	eax, [ebp+page_size]
		add	eax, edx
		sub	esp, 0Ch
		push	eax		; size_t
		call	xmalloc
		add	esp, 10h
		mov	[ebp+inbuf], eax
		mov	eax, [ebp+insize]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+outsize]
		add	edx, eax
		mov	eax, [ebp+page_size]
		add	eax, edx
		add	eax, 12h
		sub	esp, 0Ch
		push	eax		; size_t
		call	xmalloc
		add	esp, 10h
		mov	[ebp+outbuf], eax
		movzx	esi, [ebp+squeeze_blank]
		movzx	edi, [ebp+show_ends]
		movzx	eax, [ebp+number_nonblank]
		mov	dword ptr [ebp+var_D4],	eax
		movzx	ecx, [ebp+number]
		mov	dword ptr [ebp+var_D8],	ecx
		movzx	ebx, [ebp+show_tabs]
		mov	dword ptr [ebp+var_DC],	ebx
		movzx	edx, [ebp+show_nonprinting]
		mov	dword ptr [ebp+var_E0],	edx
		sub	esp, 8
		push	[ebp+page_size]	; alignment
		push	[ebp+outbuf]	; ptr
		call	ptr_align
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 8
		push	[ebp+page_size]	; alignment
		push	[ebp+inbuf]	; ptr
		call	ptr_align
		add	esp, 10h
		sub	esp, 8
		push	esi		; squeeze_blank
		push	edi		; show_ends
		push	dword ptr [ebp+var_D4] ; number_nonblank
		push	dword ptr [ebp+var_D8] ; number
		push	dword ptr [ebp+var_DC] ; show_tabs
		push	dword ptr [ebp+var_E0] ; show_nonprinting
		push	[ebp+outsize]	; outsize
		push	ebx		; outbuf
		push	[ebp+insize]	; insize
		push	eax		; inbuf
		call	cat
		add	esp, 30h
		movzx	edx, [ebp+ok]
		movzx	eax, al
		and	eax, edx
		test	eax, eax
		setnz	al
		mov	[ebp+ok], al
		sub	esp, 0Ch
		push	[ebp+outbuf]	; ptr
		call	free
		add	esp, 10h

loc_800105D:				; CODE XREF: main+5BCj
		sub	esp, 0Ch
		push	[ebp+inbuf]	; ptr
		call	free
		add	esp, 10h

contin:					; CODE XREF: main+446j	main+4E1j
		mov	eax, ds:infile
		sub	esp, 8
		push	offset asc_800172B ; "-"
		push	eax		; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_80010C2
		mov	eax, ds:input_desc
		sub	esp, 0Ch
		push	eax		; fd
		call	close
		add	esp, 10h
		test	eax, eax
		jns	short loc_80010C2
		mov	ebx, ds:infile
		call	__errno_location
		mov	eax, [eax]
		push	ebx
		push	offset format	; "%s"
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	[ebp+ok], 0

loc_80010C2:				; CODE XREF: main+403j	main+709j ...
		add	[ebp+argind], 1
		mov	eax, [ebp+argind]
		mov	edi, [ebp+var_D0]
		cmp	eax, [edi]
		jl	loc_8000CDD
		cmp	[ebp+have_read_stdin], 0
		jz	short loc_800111F
		sub	esp, 0Ch
		push	0		; fd
		call	close
		add	esp, 10h
		test	eax, eax
		jns	short loc_800111F
		sub	esp, 0Ch
		push	offset aClosingStandar ; "closing standard input"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		sub	esp, 4
		push	ebx		; format
		push	eax		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_800111F:				; CODE XREF: main+767j	main+778j
		cmp	[ebp+ok], 0
		jz	short loc_800112F
		mov	eax, 0
		jmp	short loc_8001134
; ---------------------------------------------------------------------------

loc_800112F:				; CODE XREF: main+7A9j
		mov	eax, 1

loc_8001134:				; CODE XREF: main+7B0j
		sub	esp, 0Ch
		push	eax		; status

loc_8001138:				; DATA XREF: .eh_frame:080018A0o
					; .eh_frame:080018C0o ...
		call	exit
main		endp

_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 8001140h
; char line_buf[20]
line_buf	db '                 0',9,0 ; DATA XREF: next_line_num+3Fo
					; next_line_num:loc_8000334w ...
; char *line_num_print
line_num_print	dd offset line_buf+0Ch	; DATA XREF: next_line_num+6Ar
					; next_line_num+73r ...
					; "	0\t"
; char *line_num_start
line_num_start	dd offset line_buf+11h	; DATA XREF: next_line_num+30r
					; next_line_num+3Ar ...
					; "0\t"
; char *line_num_end
line_num_end	dd offset line_buf+11h	; DATA XREF: next_line_num+6r
_data		ends			; "0\t"

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
		assume cs:_bss
		;org 8001160h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
; const	char *infile
infile		dd ?			; DATA XREF: simple_cat+27r
					; cat:loc_8000604r ...
; int input_desc
input_desc	dd ?			; DATA XREF: simple_cat:loc_8000363r
					; cat+12Fr ...
; int newlines2
newlines2	dd ?			; DATA XREF: cat+58r cat+1CFw	...
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment '32byte' can not be represented in assembly
_rodata		segment	para public 'CONST' use32
		assume cs:_rodata
		;org 8001180h
; char msgid[]
msgid		db 0Ah			; DATA XREF: emit_ancillary_info+1Do
		db 'Report %s bugs to %s',0Ah,0
aBugCoreutils@g	db 'bug-coreutils@gnu.org',0 ; DATA XREF: emit_ancillary_info+2Do
		align 10h
; char aSHomePageHttpW[]
aSHomePageHttpW	db '%s home page: <http://www.gnu.org/software/%s/>',0Ah,0
					; DATA XREF: emit_ancillary_info+3Fo
; char domainname[]
domainname	db 'coreutils',0        ; DATA XREF: emit_ancillary_info+4Fo
					; main+B5o ...
aGnuCoreutils	db 'GNU coreutils',0    ; DATA XREF: emit_ancillary_info+54o
					; main+226o
		align 4
; char aGeneralHelpUsi[]
aGeneralHelpUsi	db 'General help using GNU software: <http://www.gnu.org/gethelp/>',0Ah,0
					; DATA XREF: emit_ancillary_info+6Bo
; char s2[]
s2		db 'en_',0              ; DATA XREF: emit_ancillary_info+A2o
; char aReportSTransla[]
aReportSTransla	db 'Report %s translation bugs to <http://translationproject.org/team'
					; DATA XREF: emit_ancillary_info+CCo
		db '/>',0Ah,0
		align 4
; char aForCompleteDoc[]
aForCompleteDoc	db 'For complete documentation, run: info coreutils ',27h,'%s invocation'
					; DATA XREF: emit_ancillary_info+FCo
		db 27h,0Ah,0
		align 4
; char aTrySHelpForMor[]
aTrySHelpForMor	db 'Try `%s --help',27h,' for more information.',0Ah,0
					; DATA XREF: usage+14o
		align 4
; char aUsageSOption__[]
aUsageSOption__	db 'Usage: %s [OPTION]... [FILE]...',0Ah,0 ; DATA XREF: usage+44o
		align 4
; char aConcatenateFil[]
aConcatenateFil	db 'Concatenate FILE(s), or standard input, to standard output.',0Ah
					; DATA XREF: usage+67o
		db 0Ah
		db '  -A, --show-all           equivalent to -vET',0Ah
		db '  -b, --number-nonblank    number nonempty output lines',0Ah
		db '  -e                       equivalent to -vE',0Ah
		db '  -E, --show-ends          display $ at end of each line',0Ah
		db '  -n, --number             number all output lines',0Ah
		db '  -s, --squeeze-blank      suppress repeated empty output lines',0Ah
		db 0
		align 4
; char aTEquivalentToV[]
aTEquivalentToV	db '  -t                       equivalent to -vT',0Ah ; DATA XREF: usage+8Ao
		db '  -T, --show-tabs          display TAB characters as ^I',0Ah
		db '  -u                       (ignored)',0Ah
		db '  -v, --show-nonprinting   use ^ and M- notation, except for LFD '
		db 'and TAB',0Ah,0
; char aHelpDisplayThi[]
aHelpDisplayThi	db '      --help     display this help and exit',0Ah,0
					; DATA XREF: usage+ADo
		align 4
; char aVersionOutputV[]
aVersionOutputV	db '      --version  output version information and exit',0Ah,0
					; DATA XREF: usage+D0o
		align 4
; char aWithNoFileOrWh[]
aWithNoFileOrWh	db 0Ah			; DATA XREF: usage+F3o
		db 'With no FILE, or when FILE is -, read standard input.',0Ah,0
; char aExamplesSFGOut[]
aExamplesSFGOut	db 0Ah			; DATA XREF: usage+11Co
		db 'Examples:',0Ah
		db '  %s f - g  Output f',27h,'s contents, then standard input, then g',27h
		db 's contents.',0Ah
		db '  %s        Copy standard input to standard output.',0Ah,0
; char format[]
format		db '%s',0               ; DATA XREF: simple_cat+35o cat+234o ...
; char aWriteError[]
aWriteError	db 'write error',0      ; DATA XREF: simple_cat+7Ao
					; write_pending+39o ...
; char aCannotDoIoctlO[]
aCannotDoIoctlO	db 'cannot do ioctl on %s',0 ; DATA XREF: cat+1A9o
; char locale
locale		db 0			; DATA XREF: main+9Eo
; char dirname[]
dirname		db '/usr/local/share/locale',0 ; DATA XREF: main+B0o
aTorbjRnGranlun	db 'Torbjörn Granlund',0 ; DATA XREF: main+1FBo
aTorbjornGranlu	db 'Torbjorn Granlund',0 ; DATA XREF: main+200o
aRichardM_Stall	db 'Richard M. Stallman',0 ; DATA XREF: main+21Fo
aCat		db 'cat',0              ; DATA XREF: main+22Bo
; char shortopts[]
shortopts	db 'benstuvAET',0       ; DATA XREF: main+257o
; char aStandardOutput[]
aStandardOutput	db 'standard output',0  ; DATA XREF: main+29Do
; char asc_800172B[]
asc_800172B	db '-',0                ; DATA XREF: main:loc_8000CC8o
					; main+394o ...
; char aSInputFileIsOu[]
aSInputFileIsOu	db '%s: input file is output file',0 ; DATA XREF: main+4BFo
; char aClosingStandar[]
aClosingStandar	db 'closing standard input',0 ; DATA XREF: main+77Do
aNumberNonblank	db 'number-nonblank',0  ; DATA XREF: .rodata:long_options_5259o
aNumber		db 'number',0           ; DATA XREF: .rodata:080017F0o
aSqueezeBlank	db 'squeeze-blank',0    ; DATA XREF: .rodata:08001800o
aShowNonprintin	db 'show-nonprinting',0 ; DATA XREF: .rodata:08001810o
aShowEnds	db 'show-ends',0        ; DATA XREF: .rodata:08001820o
aShowTabs	db 'show-tabs',0        ; DATA XREF: .rodata:08001830o
aShowAll	db 'show-all',0         ; DATA XREF: .rodata:08001840o
aHelp		db 'help',0             ; DATA XREF: .rodata:08001850o
aVersion	db 'version',0          ; DATA XREF: .rodata:08001860o
		align 20h
; Function-local static	variable
; const	option long_options_5259[10]
long_options_5259 dd offset aNumberNonblank ; DATA XREF: main+252o
					; "number-nonblank"
		dd 2 dup(0)
		dd 62h
		dd offset aNumber	; "number"
		dd 2 dup(0)
		dd 6Eh
		dd offset aSqueezeBlank	; "squeeze-blank"
		dd 2 dup(0)
		dd 73h
		dd offset aShowNonprintin ; "show-nonprinting"
		dd 2 dup(0)
		dd 76h
		dd offset aShowEnds	; "show-ends"
		dd 2 dup(0)
		dd 45h
		dd offset aShowTabs	; "show-tabs"
		dd 2 dup(0)
		dd 54h
		dd offset aShowAll	; "show-all"
		dd 2 dup(0)
		dd 41h
		dd offset aHelp		; "help"
		dd 2 dup(0)
		dd 0FFFFFF7Eh
		dd offset aVersion	; "version"
		dd 2 dup(0)
		dd 0FFFFFF7Dh, 4 dup(0)
_rodata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_eh_frame	segment	dword public 'CONST' use32
		assume cs:_eh_frame
		;org 8001880h
		dd 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 2	dup(1Ch)
		dd offset loc_8001138-80029D8h
		dd 32h,	80E4100h, 0D420285h, 0CC56E05h,	404h, 20h, 3Ch
		dd offset loc_8001138-80029C6h
		dd 11Ch, 80E4100h, 0D420285h, 3834405h,	0C5011403h, 4040CC3h
		dd 1Ch,	60h
		dd offset loc_8001138-80028CEh
		dd 42h,	80E4100h, 0D420285h, 0CC57E05h,	404h, 1Ch, 80h
		dd offset loc_8001138-80028ACh
		dd 147h, 80E4100h, 0D420285h, 3864205h,	483h, 1Ch, 0A0h
		dd offset loc_8001138-8002785h
		dd 85h,	80E4100h, 0D420285h, 0C5810205h, 4040Ch, 20h, 0C0h
		dd offset loc_8001138-8002720h
		dd 0A9h, 80E4100h, 0D420285h, 3834405h,	0C3C5A102h, 4040Ch
		dd 20h,	0E4h
		dd offset loc_8001138-800269Bh
		dd 6Ch,	80E4100h, 0D420285h, 3834405h, 0C3C56402h, 4040Ch
		dd 28h,	108h
		dd offset loc_8001138-8002653h
		dd 50Ch, 80E4100h, 0D420285h, 3864505h,	1030483h, 0C641C305h
		dd 40CC541h, 4,	2Ch, 134h
		dd offset loc_8001138-8002173h
		dd 7C0h, 10C4400h, 5104700h, 46007502h,	7075030Fh, 2071006h
		dd 6107C75h, 10787502h,	74750203h
_eh_frame	ends

; ===========================================================================

; Segment type:	Externs
; extern
		extrn program_name:dword ; DATA	XREF: emit_ancillary_info+7r
					; emit_ancillary_info+B6r ...
		extrn last_component:near ; CODE XREF: emit_ancillary_info+10p
					; emit_ancillary_info+BFp ...
; char *gettext(const char *msgid)
		extrn gettext:near	; CODE XREF: emit_ancillary_info+22p
					; emit_ancillary_info+44p ...
; int printf(const char	*format, ...)
		extrn printf:near	; CODE XREF: emit_ancillary_info+34p
					; emit_ancillary_info+5Ap ...
; struct _IO_FILE *stdout
		extrn stdout:dword	; DATA XREF: emit_ancillary_info+62r
					; usage+5Er ...
		extrn fputs_unlocked:near ; CODE XREF: emit_ancillary_info+7Dp
					; usage+79p ...
; char *setlocale(int category,	const char *locale)
		extrn setlocale:near	; CODE XREF: emit_ancillary_info+8Cp
					; main+A5p
; int strncmp(const char *s1, const char *s2, size_t n)
		extrn strncmp:near	; CODE XREF: emit_ancillary_info+AAp
; struct _IO_FILE *stderr
		extrn stderr:dword	; DATA XREF: usage+23r
; int fprintf(FILE *stream, const char *format,	...)
		extrn fprintf:near	; CODE XREF: usage+2Ep
; void exit(int	status)
		extrn exit:near		; CODE XREF: usage+142p main+23Ep ...
		extrn safe_read:near	; CODE XREF: simple_cat+16p cat+215p
; int *_errno_location(void)
		extrn __errno_location:near ; CODE XREF: simple_cat+2Dp
					; simple_cat+89p ...
; void error(int status, int errnum, const char	*format, ...)
		extrn error:near	; CODE XREF: simple_cat+3Dp
					; simple_cat+97p ...
		extrn full_write:near	; CODE XREF: simple_cat+6Ap
					; write_pending+29p ...
; void *memmove(void *dest, const void *src, size_t n)
		extrn memmove:near	; CODE XREF: cat+FBp
; int ioctl(int	fd, unsigned __int32 request, ...)
		extrn ioctl:near	; CODE XREF: cat+141p
		extrn quote:near	; CODE XREF: cat+19Cp
		extrn stpcpy:near	; CODE XREF: cat+2FDp cat+35Ep
		extrn __stack_chk_fail:near ; CODE XREF: cat+500p
; int getpagesize(void)
		extrn getpagesize:near	; CODE XREF: main+33p
		extrn set_program_name:near ; CODE XREF: main+93p
; char *bindtextdomain(const char *domainname, const char *dirname)
		extrn bindtextdomain:near ; CODE XREF: main+BAp
; char *textdomain(const char *domainname)
		extrn textdomain:near	; CODE XREF: main+CAp
; void close_stdout(void)
		extrn close_stdout	; DATA XREF: main+D5o
; int atexit(void (*func)(void))
		extrn atexit:near	; CODE XREF: main+DAp
		extrn proper_name_utf8:near ; CODE XREF: main+205p
		extrn Version:dword	; DATA XREF: main+20Fr
		extrn version_etc:near	; CODE XREF: main+231p
; int getopt_long(int argc, char *const	*argv, const char *shortopts, const struct option *longopts, int *longind)
		extrn getopt_long:near	; CODE XREF: main+26Ap
		extrn fstat64:near	; CODE XREF: main+28Ep	main+415p
; int optind
		extrn optind:dword	; DATA XREF: main+355r
; int strcmp(const char	*s1, const char	*s2)
		extrn strcmp:near	; CODE XREF: main+39Ap	main+6FFp
		extrn open64:near	; CODE XREF: main+3C8p
; void *xmalloc(size_t)
		extrn xmalloc:near	; CODE XREF: main+56Ep	main+5D3p ...
; void free(void *ptr)
		extrn free:near		; CODE XREF: main+6D8p	main+6E9p
; int close(int	fd)
		extrn close:near	; CODE XREF: main+714p	main+76Ep


		end
