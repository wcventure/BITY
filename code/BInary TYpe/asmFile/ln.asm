;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B611-7234-BB			    |
; |		Doskey Lee, Kingsoft Internet Security Software		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	ECD5AEF25EED1664B1A2F91227A7C4AF
; Input	CRC32 :	2A6F10E2

; File Name   :	D:\coreutils-o\ln.o
; Format      :	ELF for	Intel 386 (Relocatable)
;
; Source File :	'ln.c'

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	byte public 'CODE' use32
		assume cs:_text
		;org 8000000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void emit_ancillary_info()
emit_ancillary_info proc near		; CODE XREF: usage+1D7p

lc_messages	= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset msgid	; "\nReport %s bugs to %s\n"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset aBugCoreutils@g ; "bug-coreutils@gnu.org"
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	offset aSHomePageHttpW ; "%s home page:	<http://www.gnu.org/softw"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset domainname ; "coreutils"
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aGeneralHelpUsi ; "General help using GNU software: <http:"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		sub	esp, 8
		push	0		; locale
		push	5		; category
		call	setlocale
		add	esp, 10h
		mov	[ebp+lc_messages], eax
		cmp	[ebp+lc_messages], 0
		jz	short loc_80000E6
		sub	esp, 4
		push	3		; n
		push	offset s2	; "en_"
		push	[ebp+lc_messages] ; s1
		call	strncmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_80000E6
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aReportSTransla ; "Report %s translation	bugs to	<http://t"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h

loc_80000E6:				; CODE XREF: emit_ancillary_info+9Bj
					; emit_ancillary_info+B4j
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aForCompleteDoc ; "For complete documentation, run: info	c"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		nop
		mov	ebx, [ebp+var_4]
		leave
		retn
emit_ancillary_info endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; _Bool	__cdecl	target_directory_operand(const char *file)
target_directory_operand proc near	; CODE XREF: main+506p

file		= dword	ptr -8Ch
looks_like_a_dir= byte ptr -7Eh
is_a_dir	= byte ptr -7Dh
b		= dword	ptr -7Ch
blen		= dword	ptr -78h
stat_result	= dword	ptr -74h
err		= dword	ptr -70h
st		= stat ptr -6Ch
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 94h
		mov	eax, [ebp+arg_0]
		mov	[ebp+file], eax
		mov	eax, large gs:14h
		mov	[ebp+var_C], eax
		xor	eax, eax
		sub	esp, 0Ch
		push	[ebp+file]
		call	last_component
		add	esp, 10h
		mov	[ebp+b], eax
		sub	esp, 0Ch
		push	[ebp+b]		; s
		call	strlen
		add	esp, 10h
		mov	[ebp+blen], eax
		cmp	[ebp+blen], 0
		jz	short loc_8000177
		mov	eax, [ebp+blen]
		lea	edx, [eax-1]
		mov	eax, [ebp+b]
		add	eax, edx
		movzx	eax, byte ptr [eax]
		cmp	al, 2Fh
		jnz	short loc_800017E

loc_8000177:				; CODE XREF: target_directory_operand+47j
		mov	eax, 1
		jmp	short loc_8000183
; ---------------------------------------------------------------------------

loc_800017E:				; CODE XREF: target_directory_operand+59j
		mov	eax, 0

loc_8000183:				; CODE XREF: target_directory_operand+60j
		mov	[ebp+looks_like_a_dir],	al
		and	[ebp+looks_like_a_dir],	1
		movzx	eax, dereference_dest_dir_symlinks
		test	al, al
		jz	short loc_80001AC
		sub	esp, 8
		lea	eax, [ebp+st]
		push	eax
		push	[ebp+file]
		call	stat64
		add	esp, 10h
		jmp	short loc_80001C1
; ---------------------------------------------------------------------------

loc_80001AC:				; CODE XREF: target_directory_operand+77j
		sub	esp, 8
		lea	eax, [ebp+st]
		push	eax
		push	[ebp+file]
		call	lstat64
		add	esp, 10h

loc_80001C1:				; CODE XREF: target_directory_operand+8Ej
		mov	[ebp+stat_result], eax
		cmp	[ebp+stat_result], 0
		jz	short loc_80001D3
		call	__errno_location
		mov	eax, [eax]
		jmp	short loc_80001D8
; ---------------------------------------------------------------------------

loc_80001D3:				; CODE XREF: target_directory_operand+ACj
		mov	eax, 0

loc_80001D8:				; CODE XREF: target_directory_operand+B5j
		mov	[ebp+err], eax
		cmp	[ebp+err], 0
		jnz	short loc_80001F7
		mov	eax, [ebp+st.st_mode]
		and	eax, 0F000h
		cmp	eax, 4000h
		jnz	short loc_80001F7
		mov	eax, 1
		jmp	short loc_80001FC
; ---------------------------------------------------------------------------

loc_80001F7:				; CODE XREF: target_directory_operand+C3j
					; target_directory_operand+D2j
		mov	eax, 0

loc_80001FC:				; CODE XREF: target_directory_operand+D9j
		mov	[ebp+is_a_dir],	al
		and	[ebp+is_a_dir],	1
		cmp	[ebp+err], 0
		jz	short loc_8000241
		cmp	[ebp+err], 2
		jz	short loc_8000241
		sub	esp, 0Ch
		push	[ebp+file]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aAccessingS ; "accessing	%s"
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	[ebp+err]	; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_8000241:				; CODE XREF: target_directory_operand+EBj
					; target_directory_operand+F1j
		movzx	edx, [ebp+is_a_dir]
		movzx	eax, [ebp+looks_like_a_dir]
		cmp	edx, eax
		jge	short loc_800027F
		sub	esp, 0Ch
		push	[ebp+file]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aTargetSIsNotAD ; "target %s is not a directory"
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	[ebp+err]	; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_800027F:				; CODE XREF: target_directory_operand+12Fj
		movzx	eax, [ebp+is_a_dir]
		mov	ecx, [ebp+var_C]
		xor	ecx, large gs:14h
		jz	short loc_8000294
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_8000294:				; CODE XREF: target_directory_operand+171j
		mov	ebx, [ebp+var_4]
		leave
		retn
target_directory_operand endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; _Bool	__cdecl	do_link(const char *source, const char *dest)
do_link		proc near		; CODE XREF: main+6CAp	main+72Ap

dest		= dword	ptr -0F0h
source		= dword	ptr -0ECh
dest_lstat_ok	= byte ptr -0E7h
source_is_dir	= byte ptr -0E6h
ok		= byte ptr -0E5h
dest_backup	= dword	ptr -0E4h
rename_errno	= dword	ptr -0E0h
source_stats	= stat ptr -0DCh
dest_stats	= stat ptr -7Ch
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0ECh
		mov	eax, [ebp+arg_0]
		mov	[ebp+source], eax
		mov	eax, [ebp+arg_4]
		mov	[ebp+dest], eax
		mov	eax, large gs:14h
		mov	[ebp+var_1C], eax
		xor	eax, eax
		mov	[ebp+dest_backup], 0
		mov	[ebp+dest_lstat_ok], 0
		mov	[ebp+source_is_dir], 0
		movzx	eax, ds:symbolic_link
		xor	eax, 1
		test	al, al
		jz	loc_80003DC
		movzx	eax, ds:logical
		test	al, al
		jz	short loc_8000316
		sub	esp, 8
		lea	eax, [ebp+source_stats]
		push	eax
		push	[ebp+source]
		call	stat64
		add	esp, 10h
		test	eax, eax
		setnz	al
		jmp	short loc_8000333
; ---------------------------------------------------------------------------

loc_8000316:				; CODE XREF: do_link+5Cj
		sub	esp, 8
		lea	eax, [ebp+source_stats]
		push	eax
		push	[ebp+source]
		call	lstat64
		add	esp, 10h
		test	eax, eax
		setnz	al

loc_8000333:				; CODE XREF: do_link+7Bj
		test	al, al
		jz	short loc_800037A
		sub	esp, 0Ch
		push	[ebp+source]
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aAccessingS ; "accessing	%s"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		push	esi
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	eax, 0
		jmp	loc_8000B5F
; ---------------------------------------------------------------------------

loc_800037A:				; CODE XREF: do_link+9Cj
		mov	eax, [ebp+source_stats.st_mode]
		and	eax, 0F000h
		cmp	eax, 4000h
		jnz	short loc_80003DC
		mov	[ebp+source_is_dir], 1
		movzx	eax, ds:hard_dir_link
		xor	eax, 1
		test	al, al
		jz	short loc_80003DC
		sub	esp, 0Ch
		push	[ebp+source]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aSHardLinkNotAl ; "%s: hard link	not allowed for	directory"
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	eax, 0
		jmp	loc_8000B5F
; ---------------------------------------------------------------------------

loc_80003DC:				; CODE XREF: do_link+4Dj do_link+F1j ...
		movzx	eax, ds:remove_existing_files
		test	al, al
		jnz	short loc_80003FB
		movzx	eax, ds:interactive
		test	al, al
		jnz	short loc_80003FB
		mov	eax, ds:backup_type_0
		test	eax, eax
		jz	short loc_8000478

loc_80003FB:				; CODE XREF: do_link+14Cj do_link+157j
		sub	esp, 8
		lea	eax, [ebp+dest_stats]
		push	eax
		push	[ebp+dest]
		call	lstat64
		add	esp, 10h
		test	eax, eax
		setz	al
		mov	[ebp+dest_lstat_ok], al
		movzx	eax, [ebp+dest_lstat_ok]
		xor	eax, 1
		test	al, al
		jz	short loc_8000478
		call	__errno_location
		mov	eax, [eax]
		cmp	eax, 2
		jz	short loc_8000478
		sub	esp, 0Ch
		push	[ebp+dest]
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aAccessingS ; "accessing	%s"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		push	esi
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	eax, 0
		jmp	loc_8000B5F
; ---------------------------------------------------------------------------

loc_8000478:				; CODE XREF: do_link+160j do_link+18Ej ...
		cmp	[ebp+dest_lstat_ok], 0
		jz	short loc_80004FF
		mov	eax, ds:dest_set
		test	eax, eax
		jz	short loc_80004FF
		mov	eax, ds:dest_set
		sub	esp, 4
		lea	edx, [ebp+dest_stats]
		push	edx
		push	[ebp+dest]
		push	eax
		call	seen_file
		add	esp, 10h
		test	al, al
		jz	short loc_80004FF
		sub	esp, 8
		push	[ebp+source]
		push	1
		call	quote_n
		add	esp, 10h
		mov	esi, eax
		sub	esp, 8
		push	[ebp+dest]
		push	0
		call	quote_n
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aWillNotOverwri ; "will not overwrite just-created %s with"...
		call	gettext
		add	esp, 10h
		sub	esp, 0Ch
		push	esi
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 20h
		mov	eax, 0
		jmp	loc_8000B5F
; ---------------------------------------------------------------------------

loc_80004FF:				; CODE XREF: do_link+1E6j do_link+1EFj ...
		movzx	eax, ds:remove_existing_files
		test	al, al
		jnz	short loc_8000529
		movzx	eax, ds:symbolic_link
		xor	eax, 1
		test	al, al
		jz	loc_8000638
		mov	eax, ds:backup_type_0
		test	eax, eax
		jz	loc_8000638

loc_8000529:				; CODE XREF: do_link+26Fj
		cmp	[ebp+dest_lstat_ok], 0
		jz	loc_8000638
		mov	eax, ds:backup_type_0
		test	eax, eax
		jz	short loc_8000551
		movzx	eax, ds:symbolic_link
		xor	eax, 1
		test	al, al
		jz	loc_8000638

loc_8000551:				; CODE XREF: do_link+2A4j
		movzx	eax, ds:symbolic_link
		xor	eax, 1
		test	al, al
		jnz	short loc_800057F
		sub	esp, 8
		lea	eax, [ebp+source_stats]
		push	eax
		push	[ebp+source]
		call	stat64
		add	esp, 10h
		test	eax, eax
		jnz	loc_8000638

loc_800057F:				; CODE XREF: do_link+2C4j
		mov	ecx, dword ptr [ebp+source_stats.st_ino]
		mov	ebx, dword ptr [ebp+source_stats.st_ino+4]
		mov	eax, dword ptr [ebp+dest_stats.st_ino]
		mov	edx, dword ptr [ebp+dest_stats.st_ino+4]
		mov	esi, ebx
		xor	esi, edx
		xor	eax, ecx
		or	eax, esi
		test	eax, eax
		jnz	loc_8000638
		mov	ecx, dword ptr [ebp+source_stats.st_dev]
		mov	ebx, dword ptr [ebp+source_stats.st_dev+4]
		mov	eax, dword ptr [ebp+dest_stats.st_dev]
		mov	edx, dword ptr [ebp+dest_stats.st_dev+4]
		mov	esi, ebx
		xor	esi, edx
		xor	eax, ecx
		or	eax, esi
		test	eax, eax
		jnz	short loc_8000638
		mov	eax, [ebp+source_stats.st_nlink]
		cmp	eax, 1
		jz	short loc_80005E2
		sub	esp, 8
		push	[ebp+dest]
		push	[ebp+source]
		call	same_name
		add	esp, 10h
		test	al, al
		jz	short loc_8000638

loc_80005E2:				; CODE XREF: do_link+32Cj
		sub	esp, 8
		push	[ebp+dest]
		push	1
		call	quote_n
		add	esp, 10h
		mov	esi, eax
		sub	esp, 8
		push	[ebp+source]
		push	0
		call	quote_n
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aSAndSAreTheSam ; "%s and %s are	the same file"
		call	gettext
		add	esp, 10h
		sub	esp, 0Ch
		push	esi
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 20h
		mov	eax, 0
		jmp	loc_8000B5F
; ---------------------------------------------------------------------------

loc_8000638:				; CODE XREF: do_link+27Dj do_link+28Aj ...
		cmp	[ebp+dest_lstat_ok], 0
		jz	loc_80007A8
		mov	eax, [ebp+dest_stats.st_mode]
		and	eax, 0F000h
		cmp	eax, 4000h
		jnz	short loc_800068F
		sub	esp, 0Ch
		push	[ebp+dest]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aSCannotOverwri ; "%s: cannot overwrite directory"
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	eax, 0
		jmp	loc_8000B5F
; ---------------------------------------------------------------------------

loc_800068F:				; CODE XREF: do_link+3B9j
		movzx	eax, ds:interactive
		test	al, al
		jz	short loc_80006F3
		sub	esp, 0Ch
		push	[ebp+dest]
		call	quote
		add	esp, 10h
		mov	esi, eax
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aSReplaceS? ; "%s: replace %s? "
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, ds:stderr
		push	esi
		push	ebx
		push	edx		; format
		push	eax		; stream
		call	fprintf
		add	esp, 10h
		call	yesno
		xor	eax, 1
		test	al, al
		jz	short loc_80006EC
		mov	eax, 1
		jmp	loc_8000B5F
; ---------------------------------------------------------------------------

loc_80006EC:				; CODE XREF: do_link+447j
		mov	ds:remove_existing_files, 1

loc_80006F3:				; CODE XREF: do_link+3FFj
		mov	eax, ds:backup_type_0
		test	eax, eax
		jz	loc_80007A8
		mov	eax, ds:backup_type_0
		sub	esp, 8
		push	eax
		push	[ebp+dest]
		call	find_backup_file_name
		add	esp, 10h
		mov	[ebp+dest_backup], eax
		sub	esp, 8
		push	[ebp+dest_backup] ; new
		push	[ebp+dest]	; old
		call	rename
		add	esp, 10h
		test	eax, eax
		jz	short loc_80007A8
		call	__errno_location
		mov	eax, [eax]
		mov	[ebp+rename_errno], eax
		sub	esp, 0Ch
		push	[ebp+dest_backup] ; ptr
		call	free
		add	esp, 10h
		mov	[ebp+dest_backup], 0
		cmp	[ebp+rename_errno], 2
		jz	short loc_80007A8
		sub	esp, 0Ch
		push	[ebp+dest]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aCannotBackupS ;	"cannot	backup %s"
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	[ebp+rename_errno] ; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	eax, 0
		jmp	loc_8000B5F
; ---------------------------------------------------------------------------

loc_80007A8:				; CODE XREF: do_link+3A6j do_link+461j ...
		movzx	eax, ds:symbolic_link
		test	al, al
		jz	short loc_80007D1
		sub	esp, 8
		push	[ebp+dest]	; to
		push	[ebp+source]	; from
		call	symlink
		add	esp, 10h
		test	eax, eax
		setz	al
		jmp	short loc_8000809
; ---------------------------------------------------------------------------

loc_80007D1:				; CODE XREF: do_link+518j
		movzx	eax, ds:logical
		test	al, al
		jz	short loc_80007E3
		mov	eax, 400h
		jmp	short loc_80007E8
; ---------------------------------------------------------------------------

loc_80007E3:				; CODE XREF: do_link+541j
		mov	eax, 0

loc_80007E8:				; CODE XREF: do_link+548j
		sub	esp, 0Ch
		push	eax
		push	[ebp+dest]
		push	0FFFFFF9Ch
		push	[ebp+source]
		push	0FFFFFF9Ch
		call	rpl_linkat
		add	esp, 20h
		test	eax, eax
		setz	al

loc_8000809:				; CODE XREF: do_link+536j
		mov	[ebp+ok], al
		movzx	eax, [ebp+ok]
		xor	eax, 1
		test	al, al
		jz	loc_8000919
		call	__errno_location
		mov	eax, [eax]
		cmp	eax, 11h
		jnz	loc_8000919
		movzx	eax, ds:remove_existing_files
		test	al, al
		jnz	short loc_8000849
		cmp	[ebp+dest_backup], 0
		jz	loc_8000919

loc_8000849:				; CODE XREF: do_link+5A1j
		sub	esp, 0Ch
		push	[ebp+dest]	; name
		call	unlink
		add	esp, 10h
		test	eax, eax
		jz	short loc_80008B2
		sub	esp, 0Ch
		push	[ebp+dest]
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aCannotRemoveS ;	"cannot	remove %s"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		push	esi
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+dest_backup] ; ptr
		call	free
		add	esp, 10h
		mov	eax, 0
		jmp	loc_8000B5F
; ---------------------------------------------------------------------------

loc_80008B2:				; CODE XREF: do_link+5C3j
		movzx	eax, ds:symbolic_link
		test	al, al
		jz	short loc_80008DB
		sub	esp, 8
		push	[ebp+dest]	; to
		push	[ebp+source]	; from
		call	symlink
		add	esp, 10h
		test	eax, eax
		setz	al
		jmp	short loc_8000913
; ---------------------------------------------------------------------------

loc_80008DB:				; CODE XREF: do_link+622j
		movzx	eax, ds:logical
		test	al, al
		jz	short loc_80008ED
		mov	eax, 400h
		jmp	short loc_80008F2
; ---------------------------------------------------------------------------

loc_80008ED:				; CODE XREF: do_link+64Bj
		mov	eax, 0

loc_80008F2:				; CODE XREF: do_link+652j
		sub	esp, 0Ch
		push	eax
		push	[ebp+dest]
		push	0FFFFFF9Ch
		push	[ebp+source]
		push	0FFFFFF9Ch
		call	rpl_linkat
		add	esp, 20h
		test	eax, eax
		setz	al

loc_8000913:				; CODE XREF: do_link+640j
		mov	[ebp+ok], al

loc_8000919:				; CODE XREF: do_link+582j do_link+592j ...
		cmp	[ebp+ok], 0
		jz	loc_80009D2
		mov	eax, ds:dest_set
		sub	esp, 4
		lea	edx, [ebp+source_stats]
		push	edx
		push	[ebp+dest]
		push	eax
		call	record_file
		add	esp, 10h
		movzx	eax, ds:verbose
		test	al, al
		jz	loc_8000B47
		cmp	[ebp+dest_backup], 0
		jz	short loc_800097E
		sub	esp, 0Ch
		push	[ebp+dest_backup]
		call	quote
		add	esp, 10h
		sub	esp, 8
		push	eax
		push	offset format	; "%s ~	"
		call	printf
		add	esp, 10h

loc_800097E:				; CODE XREF: do_link+6C1j
		sub	esp, 8
		push	[ebp+source]
		push	1
		call	quote_n
		add	esp, 10h
		mov	esi, eax
		movzx	eax, ds:symbolic_link
		test	al, al
		jz	short loc_80009A5
		mov	ebx, 2Dh
		jmp	short loc_80009AA
; ---------------------------------------------------------------------------

loc_80009A5:				; CODE XREF: do_link+703j
		mov	ebx, 3Dh

loc_80009AA:				; CODE XREF: do_link+70Aj
		sub	esp, 8
		push	[ebp+dest]
		push	0
		call	quote_n
		add	esp, 10h
		push	esi
		push	ebx
		push	eax
		push	offset aSCS	; "%s %c> %s\n"
		call	printf
		add	esp, 10h
		jmp	loc_8000B47
; ---------------------------------------------------------------------------

loc_80009D2:				; CODE XREF: do_link+687j
		sub	esp, 8
		push	[ebp+source]
		push	1
		call	quote_n
		add	esp, 10h
		mov	edi, eax
		sub	esp, 8
		push	[ebp+dest]
		push	0
		call	quote_n
		add	esp, 10h
		mov	esi, eax
		movzx	eax, ds:symbolic_link
		test	al, al
		jz	short loc_8000A4E
		call	__errno_location
		mov	eax, [eax]
		cmp	eax, 24h
		jz	short loc_8000A37
		mov	eax, [ebp+source]
		movzx	eax, byte ptr [eax]
		test	al, al
		jz	short loc_8000A37
		sub	esp, 0Ch
		push	offset aCreatingSymbol ; "creating symbolic link %s"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		jmp	loc_8000AD2
; ---------------------------------------------------------------------------

loc_8000A37:				; CODE XREF: do_link+778j do_link+785j
		sub	esp, 0Ch
		push	offset aCreatingSymb_0 ; "creating symbolic link %s -> %s"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		jmp	loc_8000AD2
; ---------------------------------------------------------------------------

loc_8000A4E:				; CODE XREF: do_link+76Cj
		call	__errno_location
		mov	eax, [eax]
		cmp	eax, 1Fh
		jnz	short loc_8000A7C
		movzx	eax, [ebp+source_is_dir]
		xor	eax, 1
		test	al, al
		jz	short loc_8000A7C
		sub	esp, 0Ch
		push	offset aCreatingHardLi ; "creating hard	link to	%.0s%s"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		jmp	short loc_8000AD2
; ---------------------------------------------------------------------------

loc_8000A7C:				; CODE XREF: do_link+7BFj do_link+7CDj
		call	__errno_location
		mov	eax, [eax]
		cmp	eax, 7Ah
		jz	short loc_8000AAC
		call	__errno_location
		mov	eax, [eax]
		cmp	eax, 11h
		jz	short loc_8000AAC
		call	__errno_location
		mov	eax, [eax]
		cmp	eax, 1Ch
		jz	short loc_8000AAC
		call	__errno_location
		mov	eax, [eax]
		cmp	eax, 1Eh
		jnz	short loc_8000AC0

loc_8000AAC:				; CODE XREF: do_link+7EDj do_link+7F9j ...
		sub	esp, 0Ch
		push	offset aCreatingHard_0 ; "creating hard	link %s"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		jmp	short loc_8000AD2
; ---------------------------------------------------------------------------

loc_8000AC0:				; CODE XREF: do_link+811j
		sub	esp, 0Ch
		push	offset aCreatingHard_1 ; "creating hard	link %s	=> %s"
		call	gettext
		add	esp, 10h
		mov	ebx, eax

loc_8000AD2:				; CODE XREF: do_link+799j do_link+7B0j ...
		call	__errno_location
		mov	eax, [eax]
		sub	esp, 0Ch
		push	edi
		push	esi
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 20h
		cmp	[ebp+dest_backup], 0
		jz	short loc_8000B47
		sub	esp, 8
		push	[ebp+dest]	; new
		push	[ebp+dest_backup] ; old
		call	rename
		add	esp, 10h
		test	eax, eax
		jz	short loc_8000B47
		sub	esp, 0Ch
		push	[ebp+dest]
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aCannotUnBackup ; "cannot un-backup %s"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		push	esi
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h

loc_8000B47:				; CODE XREF: do_link+6B4j do_link+734j ...
		sub	esp, 0Ch
		push	[ebp+dest_backup] ; ptr
		call	free
		add	esp, 10h
		movzx	eax, [ebp+ok]

loc_8000B5F:				; CODE XREF: do_link+DCj do_link+13Ej	...
		mov	edi, [ebp+var_1C]
		xor	edi, large gs:14h
		jz	short loc_8000B70
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_8000B70:				; CODE XREF: do_link+8D0j
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
do_link		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; void __cdecl usage(int status)
		public usage
usage		proc near		; CODE XREF: main+31Ep	main+360p ...

var_1C		= dword	ptr -1Ch
status		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		cmp	[ebp+status], 0
		jz	short loc_8000BB7
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, ds:stderr
		sub	esp, 4
		push	ebx
		push	edx		; format
		push	eax		; stream
		call	fprintf
		add	esp, 10h
		jmp	loc_8000D54
; ---------------------------------------------------------------------------

loc_8000BB7:				; CODE XREF: usage+Dj
		mov	eax, ds:program_name
		mov	[ebp+var_1C], eax
		mov	edi, ds:program_name
		mov	esi, ds:program_name
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aUsageSOption__ ; "Usage: %s [OPTION]...	[-T] TARGET LINK_"...
		call	gettext
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+var_1C]
		push	edi
		push	esi
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 20h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aInThe1stFormCr ; "In the 1st form, create a link to TARGE"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aMandatoryArgum ; "Mandatory arguments to long options are"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aBackupControlM ; "	--backup[=CONTROL]	make a ba"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aIInteractivePr ; "  -i,	--interactive		prompt wh"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aSSuffixSuffixO ; "  -S,	--suffix=SUFFIX		override "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aHelpDisplayThi ; "	--help	   display this	help and "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aVersionOutputV ; "	--version  output version informa"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aTheBackupSuffi ; "\nThe	backup suffix is `~', unless set "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		sub	esp, 0Ch
		push	offset aUsingSIgnoresL ; "Using	-s ignores -L and -P.  Otherwise,"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	offset aP	; "-P"
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aNoneOffNeverMa ; "  none, off	    never make backups (e"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		call	emit_ancillary_info

loc_8000D54:				; CODE XREF: usage+3Aj
		sub	esp, 0Ch
		push	[ebp+status]	; status
		call	exit
usage		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public main
main		proc near

argv		= dword	ptr -0ACh
ok		= byte ptr -9Fh
make_backups	= byte ptr -9Eh
no_target_directory= byte ptr -9Dh
backup_suffix_string= dword ptr	-9Ch
version_control_string=	dword ptr -98h
target_directory= dword	ptr -94h
n_files		= dword	ptr -90h
i		= dword	ptr -8Ch
c		= dword	ptr -88h
file		= dword	ptr -84h
dest		= dword	ptr -80h
dest_base	= dword	ptr -7Ch
var_6C		= dword	ptr -6Ch
var_1C		= dword	ptr -1Ch
argc		= dword	ptr  0Ch
envp		= dword	ptr  14h

		lea	ecx, [esp+4]
		and	esp, 0FFFFFFF0h
		push	dword ptr [ecx-4]
		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		push	ecx
		sub	esp, 0A8h
		mov	ebx, ecx
		mov	eax, [ebx+4]
		mov	[ebp+argv], eax
		mov	eax, large gs:14h
		mov	[ebp+var_1C], eax
		xor	eax, eax
		mov	[ebp+make_backups], 0
		mov	[ebp+version_control_string], 0
		mov	[ebp+target_directory],	0
		mov	[ebp+no_target_directory], 0
		mov	eax, [ebp+argv]
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	set_program_name
		add	esp, 10h
		sub	esp, 8
		push	offset locale	; locale
		push	6		; category
		call	setlocale
		add	esp, 10h
		sub	esp, 8
		push	offset dirname	; "/usr/local/share/locale"
		push	offset domainname ; "coreutils"
		call	bindtextdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset domainname ; "coreutils"
		call	textdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset close_stdin ; func
		call	atexit
		add	esp, 10h
		sub	esp, 0Ch
		push	offset name	; "SIMPLE_BACKUP_SUFFIX"
		call	getenv
		add	esp, 10h
		mov	[ebp+backup_suffix_string], eax
		mov	ds:hard_dir_link, 0
		movzx	eax, ds:hard_dir_link
		mov	ds:verbose, al
		movzx	eax, ds:verbose
		mov	ds:interactive,	al
		movzx	eax, ds:interactive
		mov	ds:remove_existing_files, al
		movzx	eax, ds:remove_existing_files
		mov	ds:symbolic_link, al
		jmp	loc_80010C4
; ---------------------------------------------------------------------------

loc_8000E5B:				; CODE XREF: main+391j
		mov	eax, [ebp+c]
		cmp	eax, 62h
		jz	loc_8000EFF
		cmp	eax, 62h
		jg	short loc_8000EC1
		cmp	eax, 4Ch
		jz	loc_8000F55
		cmp	eax, 4Ch
		jg	short loc_8000EA1
		cmp	eax, 0FFFFFF7Eh
		jz	loc_8001078
		cmp	eax, 46h
		jz	loc_8000F23
		cmp	eax, 0FFFFFF7Dh
		jz	loc_8001082
		jmp	loc_80010BA
; ---------------------------------------------------------------------------

loc_8000EA1:				; CODE XREF: main+11Cj
		cmp	eax, 53h
		jz	loc_8001064
		cmp	eax, 54h
		jz	loc_8001052
		cmp	eax, 50h
		jz	loc_8000F6D
		jmp	loc_80010BA
; ---------------------------------------------------------------------------

loc_8000EC1:				; CODE XREF: main+10Ej
		cmp	eax, 6Eh
		jz	loc_8000F61
		cmp	eax, 6Eh
		jg	short loc_8000EE3
		cmp	eax, 66h
		jz	short loc_8000F2F
		cmp	eax, 69h
		jz	short loc_8000F42
		cmp	eax, 64h
		jz	short loc_8000F23
		jmp	loc_80010BA
; ---------------------------------------------------------------------------

loc_8000EE3:				; CODE XREF: main+16Ej
		cmp	eax, 74h
		jz	loc_8000F85
		cmp	eax, 76h
		jz	loc_800105B
		cmp	eax, 73h
		jz	short loc_8000F79
		jmp	loc_80010BA
; ---------------------------------------------------------------------------

loc_8000EFF:				; CODE XREF: main+105j
		mov	[ebp+make_backups], 1
		mov	eax, ds:optarg
		test	eax, eax
		jz	loc_80010C4
		mov	eax, ds:optarg
		mov	[ebp+version_control_string], eax
		jmp	loc_80010C4
; ---------------------------------------------------------------------------

loc_8000F23:				; CODE XREF: main+12Cj	main+17Dj
		mov	ds:hard_dir_link, 1
		jmp	loc_80010C4
; ---------------------------------------------------------------------------

loc_8000F2F:				; CODE XREF: main+173j
		mov	ds:remove_existing_files, 1
		mov	ds:interactive,	0
		jmp	loc_80010C4
; ---------------------------------------------------------------------------

loc_8000F42:				; CODE XREF: main+178j
		mov	ds:remove_existing_files, 0
		mov	ds:interactive,	1
		jmp	loc_80010C4
; ---------------------------------------------------------------------------

loc_8000F55:				; CODE XREF: main+113j
		mov	ds:logical, 1
		jmp	loc_80010C4
; ---------------------------------------------------------------------------

loc_8000F61:				; CODE XREF: main+165j
		mov	dereference_dest_dir_symlinks, 0
		jmp	loc_80010C4
; ---------------------------------------------------------------------------

loc_8000F6D:				; CODE XREF: main+157j
		mov	ds:logical, 0
		jmp	loc_80010C4
; ---------------------------------------------------------------------------

loc_8000F79:				; CODE XREF: main+199j
		mov	ds:symbolic_link, 1
		jmp	loc_80010C4
; ---------------------------------------------------------------------------

loc_8000F85:				; CODE XREF: main+187j
		cmp	[ebp+target_directory],	0
		jz	short loc_8000FB3
		sub	esp, 0Ch
		push	offset aMultipleTarget ; "multiple target directories specified"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h
		jmp	loc_8001045
; ---------------------------------------------------------------------------

loc_8000FB3:				; CODE XREF: main+22Dj
		mov	eax, ds:optarg
		sub	esp, 8
		lea	edx, [ebp+dest_base]
		push	edx
		push	eax
		call	stat64
		add	esp, 10h
		test	eax, eax
		jz	short loc_8001005
		mov	eax, ds:optarg
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	edi, eax
		sub	esp, 0Ch
		push	offset aAccessingS ; "accessing	%s"
		call	gettext
		add	esp, 10h
		mov	esi, eax
		call	__errno_location
		mov	eax, [eax]
		push	edi
		push	esi		; format
		push	eax		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_8001005:				; CODE XREF: main+26Bj
		mov	eax, [ebp+var_6C]
		and	eax, 0F000h
		cmp	eax, 4000h
		jz	short loc_8001045
		mov	eax, ds:optarg
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aTargetSIsNotAD ; "target %s is not a directory"
		call	gettext
		add	esp, 10h
		push	esi
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_8001045:				; CODE XREF: main+24Fj	main+2B3j
		mov	eax, ds:optarg
		mov	[ebp+target_directory],	eax
		jmp	short loc_80010C4
; ---------------------------------------------------------------------------

loc_8001052:				; CODE XREF: main+14Ej
		mov	[ebp+no_target_directory], 1
		jmp	short loc_80010C4
; ---------------------------------------------------------------------------

loc_800105B:				; CODE XREF: main+190j
		mov	ds:verbose, 1
		jmp	short loc_80010C4
; ---------------------------------------------------------------------------

loc_8001064:				; CODE XREF: main+145j
		mov	[ebp+make_backups], 1
		mov	eax, ds:optarg
		mov	[ebp+backup_suffix_string], eax
		jmp	short loc_80010C4
; ---------------------------------------------------------------------------

loc_8001078:				; CODE XREF: main+123j
		sub	esp, 0Ch
		push	0		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8001082:				; CODE XREF: main+137j
		mov	edx, ds:Version
		mov	eax, ds:stdout
		sub	esp, 4
		push	0
		push	offset aDavidMackenzie ; "David	MacKenzie"
		push	offset aMikeParker ; "Mike Parker"
		push	edx
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	offset aLn	; "ln"
		push	eax
		call	version_etc
		add	esp, 20h
		sub	esp, 0Ch
		push	0		; status
		call	exit
; ---------------------------------------------------------------------------

loc_80010BA:				; CODE XREF: main+13Dj	main+15Dj ...
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_80010C4:				; CODE XREF: main+F7j main+1AEj ...
		sub	esp, 0Ch
		push	0		; longind
		push	offset long_options ; longopts
		push	offset shortopts ; "bdfinst:vFLPS:T"
		push	[ebp+argv]	; argv
		push	dword ptr [ebx]	; argc
		call	getopt_long
		add	esp, 20h
		mov	[ebp+c], eax
		cmp	[ebp+c], 0FFFFFFFFh
		jnz	loc_8000E5B
		mov	eax, ds:optind
		mov	edx, [ebx]
		sub	edx, eax
		mov	eax, edx
		mov	[ebp+n_files], eax
		mov	eax, ds:optind
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		mov	[ebp+file], eax
		cmp	[ebp+n_files], 0
		jg	short loc_8001154
		sub	esp, 0Ch
		push	offset aMissingFileOpe ; "missing file operand"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8001154:				; CODE XREF: main+3C9j
		cmp	[ebp+no_target_directory], 0
		jz	loc_8001217
		cmp	[ebp+target_directory],	0
		jz	short loc_800118A
		sub	esp, 0Ch
		push	offset aCannotCombineT ; "cannot combine --target-directory and	-"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_800118A:				; CODE XREF: main+409j
		cmp	[ebp+n_files], 2
		jz	loc_80012E8
		cmp	[ebp+n_files], 1
		jg	short loc_80011D6
		mov	eax, [ebp+file]
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aMissingDestina ; "missing destination file operand after "...
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		jmp	short loc_800120D
; ---------------------------------------------------------------------------

loc_80011D6:				; CODE XREF: main+43Fj
		mov	eax, [ebp+file]
		add	eax, 8
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aExtraOperandS ;	"extra operand %s"
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h

loc_800120D:				; CODE XREF: main+475j
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8001217:				; CODE XREF: main+3FCj
		cmp	[ebp+target_directory],	0
		jnz	loc_80012E8
		cmp	[ebp+n_files], 1
		jg	short loc_800123C
		mov	[ebp+target_directory],	offset a_ ; "."
		jmp	loc_80012E8
; ---------------------------------------------------------------------------

loc_800123C:				; CODE XREF: main+4CCj
		cmp	[ebp+n_files], 1
		jle	short loc_8001297
		mov	eax, [ebp+n_files]
		add	eax, 3FFFFFFFh
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+file]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax		; file
		call	target_directory_operand
		add	esp, 10h
		test	al, al
		jz	short loc_8001297
		sub	[ebp+n_files], 1
		mov	eax, [ebp+n_files]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+file]
		add	eax, edx
		mov	eax, [eax]
		mov	[ebp+target_directory],	eax
		jmp	short loc_80012E8
; ---------------------------------------------------------------------------

loc_8001297:				; CODE XREF: main+4E4j	main+510j
		cmp	[ebp+n_files], 2
		jle	short loc_80012E8
		mov	eax, [ebp+n_files]
		add	eax, 3FFFFFFFh
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+file]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aTargetSIsNotAD ; "target %s is not a directory"
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_80012E8:				; CODE XREF: main+432j	main+4BFj ...
		cmp	[ebp+backup_suffix_string], 0
		jz	short loc_8001307
		sub	esp, 0Ch
		push	[ebp+backup_suffix_string] ; char *
		call	xstrdup
		add	esp, 10h
		mov	ds:simple_backup_suffix, eax

loc_8001307:				; CODE XREF: main+590j
		cmp	[ebp+make_backups], 0
		jz	short loc_8001334
		sub	esp, 0Ch
		push	offset aBackupType ; "backup type"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	[ebp+version_control_string]
		push	eax
		call	xget_version
		add	esp, 10h
		jmp	short loc_8001339
; ---------------------------------------------------------------------------

loc_8001334:				; CODE XREF: main+5AFj
		mov	eax, 0

loc_8001339:				; CODE XREF: main+5D3j
		mov	ds:backup_type_0, eax
		cmp	[ebp+target_directory],	0
		jz	loc_8001471
		cmp	[ebp+n_files], 1
		jle	short loc_80013A8
		movzx	eax, ds:remove_existing_files
		test	al, al
		jz	short loc_80013A8
		movzx	eax, ds:symbolic_link
		xor	eax, 1
		test	al, al
		jz	short loc_80013A8
		mov	eax, ds:backup_type_0
		cmp	eax, 3
		jz	short loc_80013A8
		sub	esp, 0Ch
		push	offset triple_free
		push	offset triple_compare
		push	offset triple_hash
		push	0
		push	3Dh
		call	hash_initialize
		add	esp, 20h
		mov	ds:dest_set, eax
		mov	eax, ds:dest_set
		test	eax, eax
		jnz	short loc_80013A8
		call	xalloc_die

loc_80013A8:				; CODE XREF: main+5F3j	main+5FEj ...
		mov	[ebp+ok], 1
		mov	[ebp+i], 0
		jmp	loc_800145D
; ---------------------------------------------------------------------------

loc_80013BE:				; CODE XREF: main+70Aj
		mov	eax, [ebp+i]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+file]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	edx, eax
		sub	esp, 4
		lea	eax, [ebp+dest_base]
		push	eax
		push	edx
		push	[ebp+target_directory]
		call	file_name_concat
		add	esp, 10h
		mov	[ebp+dest], eax
		mov	eax, [ebp+dest_base]
		sub	esp, 0Ch
		push	eax
		call	strip_trailing_slashes
		add	esp, 10h
		mov	eax, [ebp+i]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+file]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 8
		push	[ebp+dest]	; dest
		push	eax		; source
		call	do_link
		add	esp, 10h
		movzx	edx, [ebp+ok]
		movzx	eax, al
		and	eax, edx
		test	eax, eax
		setnz	al
		mov	[ebp+ok], al
		sub	esp, 0Ch
		push	[ebp+dest]	; ptr
		call	free
		add	esp, 10h
		add	[ebp+i], 1

loc_800145D:				; CODE XREF: main+65Aj
		mov	eax, [ebp+i]
		cmp	eax, [ebp+n_files]
		jl	loc_80013BE
		jmp	short loc_8001497
; ---------------------------------------------------------------------------

loc_8001471:				; CODE XREF: main+5E6j
		mov	eax, [ebp+file]
		add	eax, 4
		mov	edx, [eax]
		mov	eax, [ebp+file]
		mov	eax, [eax]
		sub	esp, 8
		push	edx		; dest
		push	eax		; source
		call	do_link
		add	esp, 10h
		mov	[ebp+ok], al

loc_8001497:				; CODE XREF: main+710j
		cmp	[ebp+ok], 0
		jz	short loc_80014A7
		mov	eax, 0
		jmp	short loc_80014AC
; ---------------------------------------------------------------------------

loc_80014A7:				; CODE XREF: main+73Fj
		mov	eax, 1

loc_80014AC:				; CODE XREF: main+746j
		sub	esp, 0Ch
		push	eax		; status

loc_80014B0:				; DATA XREF: .eh_frame:08002504o
					; .eh_frame:08002528o ...
		call	exit
main		endp

_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	byte public 'DATA' use32
		assume cs:_data
		;org 80014B5h
; _Bool	dereference_dest_dir_symlinks
dereference_dest_dir_symlinks db 1	; DATA XREF: target_directory_operand+6Er
					; main:loc_8000F61w
_data		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
		assume cs:_bss
		;org 80014B8h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
; backup_type backup_type_0
backup_type_0	dd ?			; DATA XREF: do_link+159r do_link+283r ...
; _Bool	symbolic_link
symbolic_link	db ?			; DATA XREF: do_link+41r do_link+271r	...
; _Bool	logical
logical		db ?			; DATA XREF: do_link+53r
					; do_link:loc_80007D1r	...
; _Bool	interactive
interactive	db ?			; DATA XREF: do_link+14Er
					; do_link:loc_800068Fr	...
; _Bool	remove_existing_files
remove_existing_files db ?		; DATA XREF: do_link:loc_80003DCr
					; do_link:loc_80004FFr	...
; _Bool	verbose
verbose		db ?			; DATA XREF: do_link+6ABr main+CEw ...
; _Bool	hard_dir_link
hard_dir_link	db ?			; DATA XREF: do_link+FAr main+C0w ...
		align 4
; Hash_table *dest_set
dest_set	dd ?			; DATA XREF: do_link+1E8r do_link+1F1r ...
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment '32byte' can not be represented in assembly
_rodata		segment	para public 'CONST' use32
		assume cs:_rodata
		;org 80014E0h
; char msgid[]
msgid		db 0Ah			; DATA XREF: emit_ancillary_info+1Do
		db 'Report %s bugs to %s',0Ah,0
aBugCoreutils@g	db 'bug-coreutils@gnu.org',0 ; DATA XREF: emit_ancillary_info+2Do
		align 10h
; char aSHomePageHttpW[]
aSHomePageHttpW	db '%s home page: <http://www.gnu.org/software/%s/>',0Ah,0
					; DATA XREF: emit_ancillary_info+3Fo
; char domainname[]
domainname	db 'coreutils',0        ; DATA XREF: emit_ancillary_info+4Fo
					; main+7Do ...
aGnuCoreutils	db 'GNU coreutils',0    ; DATA XREF: emit_ancillary_info+54o
					; main+33Eo
		align 4
; char aGeneralHelpUsi[]
aGeneralHelpUsi	db 'General help using GNU software: <http://www.gnu.org/gethelp/>',0Ah,0
					; DATA XREF: emit_ancillary_info+6Bo
; char s2[]
s2		db 'en_',0              ; DATA XREF: emit_ancillary_info+A2o
; char aReportSTransla[]
aReportSTransla	db 'Report %s translation bugs to <http://translationproject.org/team'
					; DATA XREF: emit_ancillary_info+CCo
		db '/>',0Ah,0
		align 4
; char aForCompleteDoc[]
aForCompleteDoc	db 'For complete documentation, run: info coreutils ',27h,'%s invocation'
					; DATA XREF: emit_ancillary_info+FCo
		db 27h,0Ah,0
aBackup		db 'backup',0           ; DATA XREF: .rodata:long_optionso
aDirectory	db 'directory',0        ; DATA XREF: .rodata:long_optionso
aNoDereference	db 'no-dereference',0   ; DATA XREF: .rodata:long_optionso
aNoTargetDirect	db 'no-target-directory',0 ; DATA XREF: .rodata:long_optionso
aForce		db 'force',0            ; DATA XREF: .rodata:long_optionso
aInteractive	db 'interactive',0      ; DATA XREF: .rodata:long_optionso
aSuffix		db 'suffix',0           ; DATA XREF: .rodata:long_optionso
aTargetDirector	db 'target-directory',0 ; DATA XREF: .rodata:long_optionso
aLogical	db 'logical',0          ; DATA XREF: .rodata:long_optionso
aPhysical	db 'physical',0         ; DATA XREF: .rodata:long_optionso
aSymbolic	db 'symbolic',0         ; DATA XREF: .rodata:long_optionso
aVerbose	db 'verbose',0          ; DATA XREF: .rodata:long_optionso
aHelp		db 'help',0             ; DATA XREF: .rodata:long_optionso
aVersion	db 'version',0          ; DATA XREF: .rodata:long_optionso
		align 10h
; const	option long_options[15]
long_options	option <offset aBackup,	2, 0, 62h> ; DATA XREF:	main+36Ao
		option <offset aDirectory, 0, 0, 46h> ;	"backup"
		option <offset aNoDereference, 0, 0, 6Eh>
		option <offset aNoTargetDirect,	0, 0, 54h>
		option <offset aForce, 0, 0, 66h>
		option <offset aInteractive, 0,	0, 69h>
		option <offset aSuffix,	1, 0, 53h>
		option <offset aTargetDirector,	1, 0, 74h>
		option <offset aLogical, 0, 0, 4Ch>
		option <offset aPhysical, 0, 0,	50h>
		option <offset aSymbolic, 0, 0,	73h>
		option <offset aVerbose, 0, 0, 76h>
		option <offset aHelp, 0, 0, 0FFFFFF7Eh>
		option <offset aVersion, 0, 0, 0FFFFFF7Dh>
		option	<0>
; char aAccessingS[]
aAccessingS	db 'accessing %s',0     ; DATA XREF: target_directory_operand+109o
					; do_link+B4o ...
; char aTargetSIsNotAD[]
aTargetSIsNotAD	db 'target %s is not a directory',0
					; DATA XREF: target_directory_operand+147o
					; main+2CBo ...
		align 4
; char aSHardLinkNotAl[]
aSHardLinkNotAl	db '%s: hard link not allowed for directory',0 ; DATA XREF: do_link+11Eo
; char aWillNotOverwri[]
aWillNotOverwri	db 'will not overwrite just-created %s with %s',0 ; DATA XREF: do_link+23Do
; char aSAndSAreTheSam[]
aSAndSAreTheSam	db '%s and %s are the same file',0 ; DATA XREF: do_link+376o
		align 4
; char aSCannotOverwri[]
aSCannotOverwri	db '%s: cannot overwrite directory',0 ; DATA XREF: do_link+3D1o
; char aSReplaceS_[]
aSReplaceS?	db '%s: replace %s? ',0 ; DATA XREF: do_link+41Do
; char aCannotBackupS[]
aCannotBackupS	db 'cannot backup %s',0 ; DATA XREF: do_link+4E6o
; char aCannotRemoveS[]
aCannotRemoveS	db 'cannot remove %s',0 ; DATA XREF: do_link+5DBo
; char format[]
format		db '%s ~ ',0            ; DATA XREF: do_link+6D8o
; char aSCS[]
aSCS		db '%s %c> %s',0Ah,0    ; DATA XREF: do_link+727o
; char aCreatingSymbol[]
aCreatingSymbol	db 'creating symbolic link %s',0 ; DATA XREF: do_link+78Ao
		align 4
; char aCreatingSymb_0[]
aCreatingSymb_0	db 'creating symbolic link %s -> %s',0 ; DATA XREF: do_link+7A1o
; char aCreatingHardLi[]
aCreatingHardLi	db 'creating hard link to %.0s%s',0 ; DATA XREF: do_link+7D2o
; char aCreatingHard_0[]
aCreatingHard_0	db 'creating hard link %s',0 ; DATA XREF: do_link+816o
; char aCreatingHard_1[]
aCreatingHard_1	db 'creating hard link %s => %s',0 ; DATA XREF: do_link+82Ao
; char aCannotUnBackup[]
aCannotUnBackup	db 'cannot un-backup %s',0 ; DATA XREF: do_link+88Bo
		align 10h
; char aTrySHelpForMor[]
aTrySHelpForMor	db 'Try `%s --help',27h,' for more information.',0Ah,0
					; DATA XREF: usage+18o
		align 4
; char aUsageSOption__[]
aUsageSOption__	db 'Usage: %s [OPTION]... [-T] TARGET LINK_NAME   (1st form)',0Ah
					; DATA XREF: usage+5Co
		db '  or:  %s [OPTION]... TARGET                  (2nd form)',0Ah
		db '  or:  %s [OPTION]... TARGET... DIRECTORY     (3rd form)',0Ah
		db '  or:  %s [OPTION]... -t DIRECTORY TARGET...  (4th form)',0Ah,0
		align 10h
; char aInThe1stFormCr[]
aInThe1stFormCr	db 'In the 1st form, create a link to TARGET with the name LINK_NAME.'
					; DATA XREF: usage+84o
		db 0Ah
		db 'In the 2nd form, create a link to TARGET in the current directory'
		db '.',0Ah
		db 'In the 3rd and 4th forms, create links to each TARGET in DIRECTOR'
		db 'Y.',0Ah
		db 'Create hard links by default, symbolic links with --symbolic.',0Ah
		db 'When creating hard links, each TARGET must exist.  Symbolic links'
		db 0Ah
		db 'can hold arbitrary text; if later resolved, a relative link is',0Ah
		db 'interpreted in relation to its parent directory.',0Ah
		db 0Ah,0
		align 4
; char aMandatoryArgum[]
aMandatoryArgum	db 'Mandatory arguments to long options are mandatory for short optio'
					; DATA XREF: usage+A7o
		db 'ns too.',0Ah,0
		align 4
; char aBackupControlM[]
aBackupControlM	db '      --backup[=CONTROL]      make a backup of each existing dest'
					; DATA XREF: usage+CAo
		db 'ination file',0Ah
		db '  -b                          like --backup but does not accept a'
		db 'n argument',0Ah
		db '  -d, -F, --directory         allow the superuser to attempt to h'
		db 'ard link',0Ah
		db '                                directories (note: will probably '
		db 'fail due to',0Ah
		db '                                system restrictions, even for the'
		db ' superuser)',0Ah
		db '  -f, --force                 remove existing destination files',0Ah
		db 0
		align 4
; char aIInteractivePr[]
aIInteractivePr	db '  -i, --interactive           prompt whether to remove destinatio'
					; DATA XREF: usage+EDo
		db 'ns',0Ah
		db '  -L, --logical               make hard links to symbolic link re'
		db 'ferences',0Ah
		db '  -n, --no-dereference        treat destination that is a symlink'
		db ' to a',0Ah
		db '                                directory as if it were a normal '
		db 'file',0Ah
		db '  -P, --physical              make hard links directly to symboli'
		db 'c links',0Ah
		db '  -s, --symbolic              make symbolic links instead of hard'
		db ' links',0Ah,0
		align 4
; char aSSuffixSuffixO[]
aSSuffixSuffixO	db '  -S, --suffix=SUFFIX         override the usual backup suffix',0Ah
					; DATA XREF: usage+110o
		db '  -t, --target-directory=DIRECTORY  specify the DIRECTORY in whic'
		db 'h to create',0Ah
		db '                                the links',0Ah
		db '  -T, --no-target-directory   treat LINK_NAME as a normal file',0Ah
		db '  -v, --verbose               print name of each linked file',0Ah,0
		align 4
; char aHelpDisplayThi[]
aHelpDisplayThi	db '      --help     display this help and exit',0Ah,0
					; DATA XREF: usage+133o
		align 4
; char aVersionOutputV[]
aVersionOutputV	db '      --version  output version information and exit',0Ah,0
					; DATA XREF: usage+156o
		align 4
; char aTheBackupSuffi[]
aTheBackupSuffi	db 0Ah			; DATA XREF: usage+179o
		db 'The backup suffix is `~',27h,', unless set with --suffix or SIMPLE_B'
		db 'ACKUP_SUFFIX.',0Ah
		db 'The version control method may be selected via the --backup optio'
		db 'n or through',0Ah
		db 'the VERSION_CONTROL environment variable.  Here are the values:',0Ah
		db 0Ah,0
		align 4
; char aUsingSIgnoresL[]
aUsingSIgnoresL	db 'Using -s ignores -L and -P.  Otherwise, the last option specified'
					; DATA XREF: usage+196o
		db ' controls',0Ah
		db 'behavior when the source is a symbolic link, defaulting to %s.',0Ah
		db 0Ah,0
aP		db '-P',0               ; DATA XREF: usage+1A6o
		align 4
; char aNoneOffNeverMa[]
aNoneOffNeverMa	db '  none, off       never make backups (even if --backup is given)',0Ah
					; DATA XREF: usage+1BDo
		db '  numbered, t     make numbered backups',0Ah
		db '  existing, nil   numbered if numbered backups exist, simple othe'
		db 'rwise',0Ah
		db '  simple, never   always make simple backups',0Ah,0
; char locale
locale		db 0			; DATA XREF: main+66o
; char dirname[]
dirname		db '/usr/local/share/locale',0 ; DATA XREF: main+78o
; char name[]
name		db 'SIMPLE_BACKUP_SUFFIX',0 ; DATA XREF: main+ADo
; char aMultipleTarget[]
aMultipleTarget	db 'multiple target directories specified',0 ; DATA XREF: main+232o
aDavidMackenzie	db 'David MacKenzie',0  ; DATA XREF: main+333o
aMikeParker	db 'Mike Parker',0      ; DATA XREF: main+338o
aLn		db 'ln',0               ; DATA XREF: main+343o
; char shortopts[]
shortopts	db 'bdfinst:vFLPS:T',0  ; DATA XREF: main+36Fo
; char aMissingFileOpe[]
aMissingFileOpe	db 'missing file operand',0 ; DATA XREF: main+3CEo
		align 4
; char aCannotCombineT[]
aCannotCombineT	db 'cannot combine --target-directory and --no-target-directory',0
					; DATA XREF: main+40Eo
; char aMissingDestina[]
aMissingDestina	db 'missing destination file operand after %s',0 ; DATA XREF: main+45Ao
; char aExtraOperandS[]
aExtraOperandS	db 'extra operand %s',0 ; DATA XREF: main+493o
a_		db '.',0                ; DATA XREF: main+4CEo
; char aBackupType[]
aBackupType	db 'backup type',0      ; DATA XREF: main+5B4o
_rodata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_eh_frame	segment	dword public 'CONST' use32
		assume cs:_eh_frame
		;org 80024E4h
		dd 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 20h, 1Ch
		dd offset loc_80014B0-80039B4h
		dd 11Ch, 80E4100h, 0D420285h, 3834405h,	0C5011403h, 4040CC3h
		dd 20h,	40h
		dd offset loc_80014B0-80038BCh
		dd 17Dh, 80E4100h, 0D420285h, 3834705h,	0C5017203h, 4040CC3h
		dd 2Ch,	64h
		dd offset loc_80014B0-8003763h
		dd 8DFh, 80E4100h, 0D420285h, 3874905h,	5830486h, 0C308CF03h
		dd 0C741C641h, 40CC541h, 4, 1Ch, 94h
		dd offset loc_80014B0-8002EB4h
		dd 1E7h, 80E4100h, 0D420285h, 3874605h,	5830486h, 2Ch
		dd 0B4h
		dd offset loc_80014B0-8002CEDh
		dd 756h, 10C4400h, 5104700h, 46007502h,	7075030Fh, 2071006h
		dd 6107C75h, 10787502h,	74750203h
_eh_frame	ends

; ===========================================================================

; Segment type:	Externs
; extern
		extrn program_name:dword ; DATA	XREF: emit_ancillary_info+7r
					; emit_ancillary_info+B6r ...
		extrn last_component:near ; CODE XREF: emit_ancillary_info+10p
					; emit_ancillary_info+BFp ...
; char *gettext(const char *msgid)
		extrn gettext:near	; CODE XREF: emit_ancillary_info+22p
					; emit_ancillary_info+44p ...
; int printf(const char	*format, ...)
		extrn printf:near	; CODE XREF: emit_ancillary_info+34p
					; emit_ancillary_info+5Ap ...
; struct _IO_FILE *stdout
		extrn stdout:dword	; DATA XREF: emit_ancillary_info+62r
					; usage+7Br ...
		extrn fputs_unlocked:near ; CODE XREF: emit_ancillary_info+7Dp
					; usage+96p ...
; char *setlocale(int category,	const char *locale)
		extrn setlocale:near	; CODE XREF: emit_ancillary_info+8Cp
					; main+6Dp
; int strncmp(const char *s1, const char *s2, size_t n)
		extrn strncmp:near	; CODE XREF: emit_ancillary_info+AAp
; size_t strlen(const char *s)
		extrn strlen:near	; CODE XREF: target_directory_operand+38p
		extrn stat64:near	; CODE XREF: target_directory_operand+86p
					; do_link+6Ep ...
		extrn lstat64:near	; CODE XREF: target_directory_operand+9Dp
					; do_link+8Dp ...
; int *_errno_location(void)
		extrn __errno_location:near ; CODE XREF: target_directory_operand+AEp
					; do_link+C3p ...
		extrn quote:near	; CODE XREF: target_directory_operand+FCp
					; target_directory_operand+13Ap ...
; void error(int status, int errnum, const char	*format, ...)
		extrn error:near	; CODE XREF: target_directory_operand+11Dp
					; target_directory_operand+15Bp ...
		extrn __stack_chk_fail:near ; CODE XREF: target_directory_operand+173p
					; do_link+8D2p
		extrn seen_file:near	; CODE XREF: do_link+204p
		extrn quote_n:near	; CODE XREF: do_link+21Bp do_link+230p ...
		extrn same_name:near	; CODE XREF: do_link+33Dp
; struct _IO_FILE *stderr
		extrn stderr:dword	; DATA XREF: do_link+42Cr usage+27r
; int fprintf(FILE *stream, const char *format,	...)
		extrn fprintf:near	; CODE XREF: do_link+435p usage+32p
		extrn yesno:near	; CODE XREF: do_link+43Dp
		extrn find_backup_file_name:near ; CODE	XREF: do_link+476p
; int rename(const char	*old, const char *new)
		extrn rename:near	; CODE XREF: do_link+493p do_link+869p
; void free(void *ptr)
		extrn free:near		; CODE XREF: do_link+4B5p do_link+607p ...
; int symlink(const char *from,	const char *to)
		extrn symlink:near	; CODE XREF: do_link+529p do_link+633p
		extrn rpl_linkat:near	; CODE XREF: do_link+563p do_link+66Dp
; int unlink(const char	*name)
		extrn unlink:near	; CODE XREF: do_link+5B9p
		extrn record_file:near	; CODE XREF: do_link+6A3p
; void exit(int	status)
		extrn exit:near		; CODE XREF: usage+1E2p main+356p ...
		extrn set_program_name:near ; CODE XREF: main+5Bp
; char *bindtextdomain(const char *domainname, const char *dirname)
		extrn bindtextdomain:near ; CODE XREF: main+82p
; char *textdomain(const char *domainname)
		extrn textdomain:near	; CODE XREF: main+92p
; void close_stdin(void)
		extrn close_stdin	; DATA XREF: main+9Do
; int atexit(void (*func)(void))
		extrn atexit:near	; CODE XREF: main+A2p
; char *getenv(const char *name)
		extrn getenv:near	; CODE XREF: main+B2p
; char *optarg
		extrn optarg:dword	; DATA XREF: main+1A7r	main+1B4r ...
		extrn Version:dword	; DATA XREF: main:loc_8001082r
		extrn version_etc:near	; CODE XREF: main+349p
; int getopt_long(int argc, char *const	*argv, const char *shortopts, const struct option *longopts, int *longind)
		extrn getopt_long:near	; CODE XREF: main+37Cp
; int optind
		extrn optind:dword	; DATA XREF: main+397r	main+3A8r
; char *xstrdup(const char *)
		extrn xstrdup:near	; CODE XREF: main+59Bp
		extrn simple_backup_suffix:dword ; DATA	XREF: main+5A3w
		extrn xget_version:near	; CODE XREF: main+5CBp
		extrn triple_free	; DATA XREF: main+61Bo
		extrn triple_compare	; DATA XREF: main+620o
		extrn triple_hash	; DATA XREF: main+625o
		extrn hash_initialize:near ; CODE XREF:	main+62Ep
		extrn xalloc_die:near	; CODE XREF: main+644p
		extrn file_name_concat:near ; CODE XREF: main+692p
		extrn strip_trailing_slashes:near ; CODE XREF: main+6A4p


		end
