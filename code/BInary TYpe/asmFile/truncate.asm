;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B611-7234-BB			    |
; |		Doskey Lee, Kingsoft Internet Security Software		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	0A046243F0CD4A961836748018EDE0C7
; Input	CRC32 :	8A37B183

; File Name   :	D:\coreutils-o\truncate.o
; Format      :	ELF for	Intel 386 (Relocatable)
;
; Source File :	'truncate.c'

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	byte public 'CODE' use32
		assume cs:_text
		;org 8000000h
		assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; unsigned __int8 __cdecl to_uchar(char	ch_0)
to_uchar	proc near		; CODE XREF: main+13Bp	main+209p

ch_0		= byte ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 4
		mov	eax, [ebp+arg_0]
		mov	[ebp+ch_0], al
		movzx	eax, [ebp+ch_0]
		leave
		retn
to_uchar	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void emit_size_note()
emit_size_note	proc near		; CODE XREF: usage+155p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 4
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset msgid	; "\nSIZE may be (or may be an integer opt"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		nop
		mov	ebx, [ebp+var_4]
		leave
		retn
emit_size_note	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void emit_ancillary_info()
emit_ancillary_info proc near		; CODE XREF: usage+1A0p

lc_messages	= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aReportSBugsToS ; "\nReport %s bugs to %s\n"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset aBugCoreutils@g ; "bug-coreutils@gnu.org"
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	offset aSHomePageHttpW ; "%s home page:	<http://www.gnu.org/softw"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset domainname ; "coreutils"
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aGeneralHelpUsi ; "General help using GNU software: <http:"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		sub	esp, 8
		push	0		; locale
		push	5		; category
		call	setlocale
		add	esp, 10h
		mov	[ebp+lc_messages], eax
		cmp	[ebp+lc_messages], 0
		jz	short loc_8000128
		sub	esp, 4
		push	3		; n
		push	offset s2	; "en_"
		push	[ebp+lc_messages] ; s1
		call	strncmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_8000128
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aReportSTransla ; "Report %s translation	bugs to	<http://t"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h

loc_8000128:				; CODE XREF: emit_ancillary_info+9Bj
					; emit_ancillary_info+B4j
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aForCompleteDoc ; "For complete documentation, run: info	c"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		nop
		mov	ebx, [ebp+var_4]
		leave
		retn
emit_ancillary_info endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; int __cdecl parse_len(const char *str, off_t *size)
parse_len	proc near		; CODE XREF: main+28Cp

size		= dword	ptr -30h
str		= dword	ptr -2Ch
e		= dword	ptr -1Ch
tmp_size	= qword	ptr -18h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		mov	eax, [ebp+arg_0]
		mov	[ebp+str], eax
		mov	eax, [ebp+arg_4]
		mov	[ebp+size], eax
		mov	eax, large gs:14h
		mov	[ebp+var_C], eax
		xor	eax, eax
		sub	esp, 0Ch
		push	offset aEggkkmmpttyz0 ;	"EgGkKmMPtTYZ0"
		lea	eax, [ebp+tmp_size]
		push	eax
		push	0Ah
		push	0
		push	[ebp+str]
		call	xstrtoimax
		add	esp, 20h
		mov	[ebp+e], eax
		cmp	[ebp+e], 0
		jnz	short loc_80001BF
		call	__errno_location
		mov	dword ptr [eax], 0
		mov	eax, dword ptr [ebp+tmp_size]
		mov	edx, dword ptr [ebp+tmp_size+4]
		mov	ecx, [ebp+size]
		mov	[ecx], eax
		mov	[ecx+4], edx
		mov	eax, 0
		jmp	short loc_80001DD
; ---------------------------------------------------------------------------

loc_80001BF:				; CODE XREF: parse_len+3Fj
		call	__errno_location
		cmp	[ebp+e], 1
		jnz	short loc_80001D1
		mov	edx, 4Bh
		jmp	short loc_80001D6
; ---------------------------------------------------------------------------

loc_80001D1:				; CODE XREF: parse_len+6Aj
		mov	edx, 0

loc_80001D6:				; CODE XREF: parse_len+71j
		mov	[eax], edx
		mov	eax, 0FFFFFFFFh

loc_80001DD:				; CODE XREF: parse_len+5Fj
		mov	ecx, [ebp+var_C]
		xor	ecx, large gs:14h
		jz	short locret_80001EE
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

locret_80001EE:				; CODE XREF: parse_len+89j
		leave
		retn
parse_len	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; void __cdecl usage(int status)
		public usage
usage		proc near		; CODE XREF: main+26Dp	main+324p ...

status		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 4
		cmp	[ebp+status], 0
		jz	short loc_800022D
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, ds:stderr
		sub	esp, 4
		push	ebx
		push	edx		; format
		push	eax		; stream
		call	fprintf
		add	esp, 10h
		jmp	loc_8000395
; ---------------------------------------------------------------------------

loc_800022D:				; CODE XREF: usage+Bj
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aUsageSOption__ ; "Usage: %s OPTION... FILE...\n"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aShrinkOrExtend ; "Shrink or extend the size of each FILE "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aMandatoryArgum ; "Mandatory arguments to long options are"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aCNoCreateDoNot ; "  -c,	--no-create	   do not create "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aOIoBlocksTreat ; "  -o,	--io-blocks	   Treat SIZE as "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aRReferenceFile ; "  -r,	--reference=FILE   use this FILE'"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aHelpDisplayThi ; "	--help	   display this	help and "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aVersionOutputV ; "	--version  output version informa"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		call	emit_size_note
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aSizeMayAlsoBeP ; "\nSIZE may also be prefixed by one of	t"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aNoteThatTheRAn ; "\nNote that the -r and -s options are	m"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		call	emit_ancillary_info

loc_8000395:				; CODE XREF: usage+38j
		sub	esp, 0Ch
		push	[ebp+status]	; status
		call	exit
usage		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; int __cdecl do_ftruncate(int fd, const char *fname, off_t ssize, rel_mode_t rel_mode)
do_ftruncate	proc near		; CODE XREF: main+67Ap

ssize		= qword	ptr -0B8h
fname		= dword	ptr -0ACh
ftruncate_errno	= dword	ptr -0A4h
nsize		= qword	ptr -0A0h
blksize		= qword	ptr -98h
fsize		= qword	ptr -90h
overflow	= qword	ptr -88h
sb		= stat ptr -7Ch
var_1C		= dword	ptr -1Ch
fd		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
rel_mode	= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0ACh
		mov	eax, [ebp+arg_4]
		mov	[ebp+fname], eax
		mov	eax, [ebp+arg_8]
		mov	dword ptr [ebp+ssize], eax
		mov	eax, [ebp+arg_C]
		mov	dword ptr [ebp+ssize+4], eax
		mov	eax, large gs:14h
		mov	[ebp+var_1C], eax
		xor	eax, eax
		movzx	eax, ds:block_mode
		test	al, al
		jnz	short loc_80003E3
		cmp	[ebp+rel_mode],	0
		jz	short loc_800043C

loc_80003E3:				; CODE XREF: do_ftruncate+3Bj
		sub	esp, 8
		lea	eax, [ebp+sb]
		push	eax
		push	[ebp+fd]
		call	fstat64
		add	esp, 10h
		test	eax, eax
		jz	short loc_800043C
		sub	esp, 0Ch
		push	[ebp+fname]
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aCannotFstatS ; "cannot fstat %s"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		push	esi
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	eax, 1
		jmp	loc_8000991
; ---------------------------------------------------------------------------

loc_800043C:				; CODE XREF: do_ftruncate+41j
					; do_ftruncate+57j
		movzx	eax, ds:block_mode
		test	al, al
		jz	loc_8000578
		mov	eax, [ebp+sb.st_blksize]
		test	eax, eax
		jle	short loc_8000462
		mov	eax, [ebp+sb.st_blksize]
		cmp	eax, 20000000h
		ja	short loc_8000462
		mov	eax, [ebp+sb.st_blksize]
		cdq
		jmp	short loc_800046C
; ---------------------------------------------------------------------------

loc_8000462:				; CODE XREF: do_ftruncate+B0j
					; do_ftruncate+BAj
		mov	eax, 200h
		mov	edx, 0

loc_800046C:				; CODE XREF: do_ftruncate+C0j
		mov	dword ptr [ebp+blksize], eax
		mov	dword ptr [ebp+blksize+4], edx
		push	dword ptr [ebp+blksize+4]
		push	dword ptr [ebp+blksize]
		push	80000000h
		push	0
		call	__divdi3
		add	esp, 10h
		cmp	edx, dword ptr [ebp+ssize+4]
		jg	short loc_80004DE
		cmp	edx, dword ptr [ebp+ssize+4]
		jl	short loc_80004AB
		cmp	eax, dword ptr [ebp+ssize]
		ja	short loc_80004DE

loc_80004AB:				; CODE XREF: do_ftruncate+101j
		push	dword ptr [ebp+blksize+4]
		push	dword ptr [ebp+blksize]
		push	7FFFFFFFh
		push	0FFFFFFFFh
		call	__divdi3
		add	esp, 10h
		cmp	edx, dword ptr [ebp+ssize+4]
		jg	short loc_8000531
		cmp	edx, dword ptr [ebp+ssize+4]
		jl	short loc_80004DE
		cmp	eax, dword ptr [ebp+ssize]
		jnb	short loc_8000531

loc_80004DE:				; CODE XREF: do_ftruncate+F9j
					; do_ftruncate+109j ...
		sub	esp, 0Ch
		push	[ebp+fname]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aOverflowInLldL ; "overflow in %lld * %lld byte blocks for"...
		call	gettext
		add	esp, 10h
		push	ebx
		push	dword ptr [ebp+blksize+4]
		push	dword ptr [ebp+blksize]
		push	dword ptr [ebp+ssize+4]
		push	dword ptr [ebp+ssize]
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 20h
		mov	eax, 1
		jmp	loc_8000991
; ---------------------------------------------------------------------------

loc_8000531:				; CODE XREF: do_ftruncate+12Cj
					; do_ftruncate+13Cj
		mov	eax, dword ptr [ebp+ssize+4]
		imul	eax, dword ptr [ebp+blksize]
		mov	edx, eax
		mov	eax, dword ptr [ebp+blksize+4]
		imul	eax, dword ptr [ebp+ssize]
		lea	ecx, [edx+eax]
		mov	eax, dword ptr [ebp+blksize]
		mul	dword ptr [ebp+ssize]
		add	ecx, edx
		mov	edx, ecx
		mov	dword ptr [ebp+ssize], eax
		mov	dword ptr [ebp+ssize+4], edx
		mov	dword ptr [ebp+ssize], eax
		mov	dword ptr [ebp+ssize+4], edx

loc_8000578:				; CODE XREF: do_ftruncate+A5j
		cmp	[ebp+rel_mode],	0
		jz	loc_8000861
		mov	eax, dword ptr [ebp+sb.st_size]
		mov	edx, dword ptr [ebp+sb.st_size+4]
		mov	dword ptr [ebp+fsize], eax
		mov	dword ptr [ebp+fsize+4], edx
		mov	eax, dword ptr [ebp+sb.st_size]
		mov	edx, dword ptr [ebp+sb.st_size+4]
		test	edx, edx
		jns	short loc_8000601
		mov	eax, [ebp+sb.st_mode]
		and	eax, 0F000h
		cmp	eax, 8000h
		jz	short loc_80005BC
		mov	eax, [ebp+sb.st_mode]
		and	eax, 0F000h
		cmp	eax, 4000h
		jnz	short loc_80005F7

loc_80005BC:				; CODE XREF: do_ftruncate+20Bj
		sub	esp, 0Ch
		push	[ebp+fname]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aSHasUnusableAp ; "%s has unusable, apparently negative si"...
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	eax, 1
		jmp	loc_8000991
; ---------------------------------------------------------------------------

loc_80005F7:				; CODE XREF: do_ftruncate+21Aj
		mov	eax, 0
		jmp	loc_8000991
; ---------------------------------------------------------------------------

loc_8000601:				; CODE XREF: do_ftruncate+1FCj
		cmp	[ebp+rel_mode],	2
		jnz	short loc_8000640
		mov	ecx, dword ptr [ebp+ssize]
		mov	ebx, dword ptr [ebp+ssize+4]
		mov	eax, dword ptr [ebp+fsize]
		mov	edx, dword ptr [ebp+fsize+4]
		cmp	ebx, edx
		ja	short loc_800062F
		cmp	ebx, edx
		jb	short loc_800062B
		cmp	ecx, eax
		jnb	short loc_800062F

loc_800062B:				; CODE XREF: do_ftruncate+285j
		mov	ecx, eax
		mov	ebx, edx

loc_800062F:				; CODE XREF: do_ftruncate+281j
					; do_ftruncate+289j
		mov	dword ptr [ebp+nsize], ecx
		mov	dword ptr [ebp+nsize+4], ebx
		jmp	loc_8000879
; ---------------------------------------------------------------------------

loc_8000640:				; CODE XREF: do_ftruncate+265j
		cmp	[ebp+rel_mode],	3
		jnz	short loc_800067F
		mov	ecx, dword ptr [ebp+ssize]
		mov	ebx, dword ptr [ebp+ssize+4]
		mov	eax, dword ptr [ebp+fsize]
		mov	edx, dword ptr [ebp+fsize+4]
		cmp	ebx, edx
		jb	short loc_800066E
		cmp	ebx, edx
		ja	short loc_800066A
		cmp	ecx, eax
		jbe	short loc_800066E

loc_800066A:				; CODE XREF: do_ftruncate+2C4j
		mov	ecx, eax
		mov	ebx, edx

loc_800066E:				; CODE XREF: do_ftruncate+2C0j
					; do_ftruncate+2C8j
		mov	dword ptr [ebp+nsize], ecx
		mov	dword ptr [ebp+nsize+4], ebx
		jmp	loc_8000879
; ---------------------------------------------------------------------------

loc_800067F:				; CODE XREF: do_ftruncate+2A4j
		cmp	[ebp+rel_mode],	4
		jnz	short loc_80006DB
		mov	eax, dword ptr [ebp+ssize]
		mov	edx, dword ptr [ebp+ssize+4]
		push	edx
		push	eax
		push	dword ptr [ebp+fsize+4]
		push	dword ptr [ebp+fsize]
		call	__udivdi3
		add	esp, 10h
		mov	ecx, eax
		mov	ebx, edx
		mov	eax, dword ptr [ebp+ssize]
		mov	edx, dword ptr [ebp+ssize+4]
		mov	edi, ebx
		imul	edi, eax
		mov	esi, edx
		imul	esi, ecx
		add	esi, edi
		mul	ecx
		lea	ecx, [esi+edx]
		mov	edx, ecx
		mov	dword ptr [ebp+nsize], eax
		mov	dword ptr [ebp+nsize+4], edx
		jmp	loc_8000879
; ---------------------------------------------------------------------------

loc_80006DB:				; CODE XREF: do_ftruncate+2E3j
		cmp	[ebp+rel_mode],	5
		jnz	loc_80007C6
		mov	ecx, dword ptr [ebp+ssize]
		mov	ebx, dword ptr [ebp+ssize+4]
		mov	eax, dword ptr [ebp+fsize]
		mov	edx, dword ptr [ebp+fsize+4]
		add	eax, ecx
		adc	edx, ebx
		add	eax, 0FFFFFFFFh
		adc	edx, 0FFFFFFFFh
		mov	ecx, eax
		mov	ebx, edx
		mov	eax, dword ptr [ebp+ssize]
		mov	edx, dword ptr [ebp+ssize+4]
		push	edx
		push	eax
		push	ebx
		push	ecx
		call	__udivdi3
		add	esp, 10h
		mov	ecx, eax
		mov	ebx, edx
		mov	eax, dword ptr [ebp+ssize]
		mov	edx, dword ptr [ebp+ssize+4]
		mov	edi, ebx
		imul	edi, eax
		mov	esi, edx
		imul	esi, ecx
		add	esi, edi
		mul	ecx
		lea	ecx, [esi+edx]
		mov	edx, ecx
		mov	dword ptr [ebp+overflow], eax
		mov	dword ptr [ebp+overflow+4], edx
		mov	dword ptr [ebp+overflow], eax
		mov	dword ptr [ebp+overflow+4], edx
		mov	eax, dword ptr [ebp+overflow]
		mov	edx, dword ptr [ebp+overflow+4]
		test	edx, edx
		jns	short loc_80007A9
		sub	esp, 0Ch
		push	[ebp+fname]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aOverflowRoundi ; "overflow rounding up size of file %s"
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	eax, 1
		jmp	loc_8000991
; ---------------------------------------------------------------------------

loc_80007A9:				; CODE XREF: do_ftruncate+3CCj
		mov	eax, dword ptr [ebp+overflow]
		mov	edx, dword ptr [ebp+overflow+4]
		mov	dword ptr [ebp+nsize], eax
		mov	dword ptr [ebp+nsize+4], edx
		jmp	loc_8000879
; ---------------------------------------------------------------------------

loc_80007C6:				; CODE XREF: do_ftruncate+33Fj
		mov	eax, dword ptr [ebp+fsize]
		mov	edx, dword ptr [ebp+fsize+4]
		mov	ecx, 0FFFFFFFFh
		mov	ebx, 7FFFFFFFh
		sub	ecx, eax
		sbb	ebx, edx
		mov	eax, ecx
		mov	edx, ebx
		cmp	edx, dword ptr [ebp+ssize+4]
		jg	short loc_8000837
		cmp	edx, dword ptr [ebp+ssize+4]
		jl	short loc_80007FC
		cmp	eax, dword ptr [ebp+ssize]
		jnb	short loc_8000837

loc_80007FC:				; CODE XREF: do_ftruncate+452j
		sub	esp, 0Ch
		push	[ebp+fname]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aOverflowExtend ; "overflow extending size of file %s"
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	eax, 1
		jmp	loc_8000991
; ---------------------------------------------------------------------------

loc_8000837:				; CODE XREF: do_ftruncate+44Aj
					; do_ftruncate+45Aj
		mov	ecx, dword ptr [ebp+ssize]
		mov	ebx, dword ptr [ebp+ssize+4]
		mov	eax, dword ptr [ebp+fsize]
		mov	edx, dword ptr [ebp+fsize+4]
		add	eax, ecx
		adc	edx, ebx
		mov	dword ptr [ebp+nsize], eax
		mov	dword ptr [ebp+nsize+4], edx
		jmp	short loc_8000879
; ---------------------------------------------------------------------------

loc_8000861:				; CODE XREF: do_ftruncate+1DCj
		mov	eax, dword ptr [ebp+ssize]
		mov	edx, dword ptr [ebp+ssize+4]
		mov	dword ptr [ebp+nsize], eax
		mov	dword ptr [ebp+nsize+4], edx

loc_8000879:				; CODE XREF: do_ftruncate+29Bj
					; do_ftruncate+2DAj ...
		cmp	dword ptr [ebp+nsize+4], 0
		jns	short loc_8000896
		mov	dword ptr [ebp+nsize], 0
		mov	dword ptr [ebp+nsize+4], 0

loc_8000896:				; CODE XREF: do_ftruncate+4E0j
		sub	esp, 4
		push	dword ptr [ebp+nsize+4]
		push	dword ptr [ebp+nsize]
		push	[ebp+fd]
		call	ftruncate64
		add	esp, 10h
		cmp	eax, 0FFFFFFFFh
		jnz	loc_800098C
		call	__errno_location
		mov	eax, [eax]
		mov	[ebp+ftruncate_errno], eax
		sub	esp, 8
		lea	eax, [ebp+sb]
		push	eax
		push	[ebp+fd]
		call	fstat64
		add	esp, 10h
		test	eax, eax
		jz	short loc_800091C
		sub	esp, 0Ch
		push	[ebp+fname]
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aCannotFstatS ; "cannot fstat %s"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		push	esi
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	eax, 1
		jmp	short loc_8000991
; ---------------------------------------------------------------------------

loc_800091C:				; CODE XREF: do_ftruncate+53Aj
		mov	eax, [ebp+sb.st_mode]
		and	eax, 0F000h
		cmp	eax, 8000h
		jz	short loc_800093A
		mov	eax, [ebp+sb.st_mode]
		and	eax, 0F000h
		cmp	eax, 4000h
		jnz	short loc_8000985

loc_800093A:				; CODE XREF: do_ftruncate+589j
		sub	esp, 0Ch
		push	[ebp+fname]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aTruncatingSAtL ; "truncating %s	at %lld	bytes"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	dword ptr [ebp+nsize+4]
		push	dword ptr [ebp+nsize]
		push	ebx
		push	eax		; format
		push	[ebp+ftruncate_errno] ;	errnum
		push	0		; status
		call	error
		add	esp, 20h
		mov	eax, 1
		jmp	short loc_8000991
; ---------------------------------------------------------------------------

loc_8000985:				; CODE XREF: do_ftruncate+598j
		mov	eax, 0
		jmp	short loc_8000991
; ---------------------------------------------------------------------------

loc_800098C:				; CODE XREF: do_ftruncate+513j
		mov	eax, 0

loc_8000991:				; CODE XREF: do_ftruncate+97j
					; do_ftruncate+18Cj ...
		mov	edx, [ebp+var_1C]
		xor	edx, large gs:14h
		jz	short loc_80009A2
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_80009A2:				; CODE XREF: do_ftruncate+5FBj
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
do_ftruncate	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public main
main		proc near

argv		= dword	ptr -0BCh
got_size	= byte ptr -0A9h
rel_mode	= dword	ptr -0A8h
errors		= dword	ptr -0A4h
fd		= dword	ptr -0A0h
c		= dword	ptr -9Ch
oflags		= dword	ptr -98h
omode		= dword	ptr -94h
fname		= dword	ptr -90h
open_errno	= dword	ptr -8Ch
size		= qword	ptr -88h
sb		= stat ptr -7Ch
var_1C		= dword	ptr -1Ch
argc		= dword	ptr  0Ch
envp		= dword	ptr  14h

		lea	ecx, [esp+4]
		and	esp, 0FFFFFFF0h
		push	dword ptr [ecx-4]
		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		push	ecx
		sub	esp, 0B8h
		mov	ebx, ecx
		mov	eax, [ebx+4]
		mov	[ebp+argv], eax
		mov	eax, large gs:14h
		mov	[ebp+var_1C], eax
		xor	eax, eax
		mov	[ebp+got_size],	0
		mov	[ebp+rel_mode],	0
		mov	[ebp+errors], 0
		mov	[ebp+fd], 0FFFFFFFFh
		mov	eax, [ebp+argv]
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	set_program_name
		add	esp, 10h
		sub	esp, 8
		push	offset locale	; locale
		push	6		; category
		call	setlocale
		add	esp, 10h
		sub	esp, 8
		push	offset dirname	; "/usr/local/share/locale"
		push	offset domainname ; "coreutils"
		call	bindtextdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset domainname ; "coreutils"
		call	textdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset close_stdout ; func
		call	atexit
		add	esp, 10h
		jmp	loc_8000D23
; ---------------------------------------------------------------------------

loc_8000A5C:				; CODE XREF: main+3A5j
		mov	eax, [ebp+c]
		cmp	eax, 63h
		jz	short loc_8000A9B
		cmp	eax, 63h
		jg	short loc_8000A87
		cmp	eax, 0FFFFFF7Dh
		jz	loc_8000CD3
		cmp	eax, 0FFFFFF7Eh
		jz	loc_8000CC9
		jmp	loc_8000D19
; ---------------------------------------------------------------------------

loc_8000A87:				; CODE XREF: main+C0j
		cmp	eax, 72h
		jz	short loc_8000AB3
		cmp	eax, 73h
		jz	short loc_8000ACF
		cmp	eax, 6Fh
		jz	short loc_8000AA7
		jmp	loc_8000D19
; ---------------------------------------------------------------------------

loc_8000A9B:				; CODE XREF: main+BBj
		mov	ds:no_create, 1
		jmp	loc_8000D23
; ---------------------------------------------------------------------------

loc_8000AA7:				; CODE XREF: main+EAj
		mov	ds:block_mode, 1
		jmp	loc_8000D23
; ---------------------------------------------------------------------------

loc_8000AB3:				; CODE XREF: main+E0j
		mov	eax, ds:optarg
		mov	ds:ref_file, eax
		jmp	loc_8000D23
; ---------------------------------------------------------------------------

loc_8000AC2:				; CODE XREF: main+157j
		mov	eax, ds:optarg
		add	eax, 1
		mov	ds:optarg, eax

loc_8000ACF:				; CODE XREF: main+E5j
		call	__ctype_b_loc
		mov	esi, [eax]
		mov	eax, ds:optarg
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; ch_0
		call	to_uchar
		add	esp, 10h
		movzx	eax, al
		add	eax, eax
		add	eax, esi
		movzx	eax, word ptr [eax]
		movzx	eax, ax
		and	eax, 2000h
		test	eax, eax
		jnz	short loc_8000AC2
		mov	eax, ds:optarg
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		cmp	eax, 2Fh
		jz	short loc_8000B5D
		cmp	eax, 2Fh
		jg	short loc_8000B1F
		cmp	eax, 25h
		jz	short loc_8000B76
		jmp	short loc_8000B8E
; ---------------------------------------------------------------------------

loc_8000B1F:				; CODE XREF: main+16Cj
		cmp	eax, 3Ch
		jz	short loc_8000B2B
		cmp	eax, 3Eh
		jz	short loc_8000B44
		jmp	short loc_8000B8E
; ---------------------------------------------------------------------------

loc_8000B2B:				; CODE XREF: main+178j
		mov	[ebp+rel_mode],	3
		mov	eax, ds:optarg
		add	eax, 1
		mov	ds:optarg, eax
		jmp	short loc_8000B8E
; ---------------------------------------------------------------------------

loc_8000B44:				; CODE XREF: main+17Dj
		mov	[ebp+rel_mode],	2
		mov	eax, ds:optarg
		add	eax, 1
		mov	ds:optarg, eax
		jmp	short loc_8000B8E
; ---------------------------------------------------------------------------

loc_8000B5D:				; CODE XREF: main+167j
		mov	[ebp+rel_mode],	4
		mov	eax, ds:optarg
		add	eax, 1
		mov	ds:optarg, eax
		jmp	short loc_8000B8E
; ---------------------------------------------------------------------------

loc_8000B76:				; CODE XREF: main+171j
		mov	[ebp+rel_mode],	5
		mov	eax, ds:optarg
		add	eax, 1
		mov	ds:optarg, eax
		nop

loc_8000B8E:				; CODE XREF: main+173j	main+17Fj ...
		jmp	short loc_8000B9D
; ---------------------------------------------------------------------------

loc_8000B90:				; CODE XREF: main+225j
		mov	eax, ds:optarg
		add	eax, 1
		mov	ds:optarg, eax

loc_8000B9D:				; CODE XREF: main:loc_8000B8Ej
		call	__ctype_b_loc
		mov	esi, [eax]
		mov	eax, ds:optarg
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; ch_0
		call	to_uchar
		add	esp, 10h
		movzx	eax, al
		add	eax, eax
		add	eax, esi
		movzx	eax, word ptr [eax]
		movzx	eax, ax
		and	eax, 2000h
		test	eax, eax
		jnz	short loc_8000B90
		mov	eax, ds:optarg
		movzx	eax, byte ptr [eax]
		cmp	al, 2Bh
		jz	short loc_8000BE9
		mov	eax, ds:optarg
		movzx	eax, byte ptr [eax]
		cmp	al, 2Dh
		jnz	short loc_8000C26

loc_8000BE9:				; CODE XREF: main+231j
		cmp	[ebp+rel_mode],	0
		jz	short loc_8000C1C
		sub	esp, 0Ch
		push	offset aMultipleRelati ; "multiple relative modifiers specified"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8000C1C:				; CODE XREF: main+246j
		mov	[ebp+rel_mode],	1

loc_8000C26:				; CODE XREF: main+23Dj
		mov	eax, ds:optarg
		sub	esp, 8
		lea	edx, [ebp+size]
		push	edx		; size
		push	eax		; str
		call	parse_len
		add	esp, 10h
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_8000C7C
		mov	eax, ds:optarg
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	edi, eax
		sub	esp, 0Ch
		push	offset aInvalidNumberS ; "invalid number %s"
		call	gettext
		add	esp, 10h
		mov	esi, eax
		call	__errno_location
		mov	eax, [eax]
		push	edi
		push	esi		; format
		push	eax		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_8000C7C:				; CODE XREF: main+297j
		cmp	[ebp+rel_mode],	5
		jz	short loc_8000C8E
		cmp	[ebp+rel_mode],	4
		jnz	short loc_8000CC0

loc_8000C8E:				; CODE XREF: main+2D9j
		mov	eax, dword ptr [ebp+size]
		mov	edx, dword ptr [ebp+size+4]
		or	eax, edx
		test	eax, eax
		jnz	short loc_8000CC0
		sub	esp, 0Ch
		push	offset aDivisionByZero ; "division by zero"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_8000CC0:				; CODE XREF: main+2E2j	main+2F4j
		mov	[ebp+got_size],	1
		jmp	short loc_8000D23
; ---------------------------------------------------------------------------

loc_8000CC9:				; CODE XREF: main+D2j
		sub	esp, 0Ch
		push	0		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8000CD3:				; CODE XREF: main+C7j
		sub	esp, 8
		push	offset aPBdraigBrady ; "Pádraig Brady"
		push	offset aPadraigBrady ; "Padraig	Brady"
		call	proper_name_utf8
		add	esp, 10h
		mov	ecx, eax
		mov	edx, ds:Version
		mov	eax, ds:stdout
		sub	esp, 8
		push	0
		push	ecx
		push	edx
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	offset aTruncate ; "truncate"
		push	eax
		call	version_etc
		add	esp, 20h
		sub	esp, 0Ch
		push	0		; status
		call	exit
; ---------------------------------------------------------------------------

loc_8000D19:				; CODE XREF: main+D8j main+ECj
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8000D23:				; CODE XREF: main+ADj main+F8j ...
		sub	esp, 0Ch
		push	0		; longind
		push	offset longopts	; longopts
		push	offset shortopts ; "cor:s:"
		push	[ebp+argv]	; argv
		push	dword ptr [ebx]	; argc
		call	getopt_long
		add	esp, 20h
		mov	[ebp+c], eax
		cmp	[ebp+c], 0FFFFFFFFh
		jnz	loc_8000A5C
		mov	eax, ds:optind
		shl	eax, 2
		add	[ebp+argv], eax
		mov	eax, ds:optind
		sub	[ebx], eax
		mov	eax, ds:ref_file
		test	eax, eax
		jz	short loc_8000D7C
		cmp	[ebp+got_size],	0
		jnz	short loc_8000D93

loc_8000D7C:				; CODE XREF: main+3C7j
		mov	eax, ds:ref_file
		test	eax, eax
		jnz	short loc_8000DE7
		movzx	eax, [ebp+got_size]
		xor	eax, 1
		test	al, al
		jz	short loc_8000DE7

loc_8000D93:				; CODE XREF: main+3D0j
		sub	esp, 8
		push	offset aReference ; "--reference"
		push	1
		call	quote_n
		add	esp, 10h
		mov	esi, eax
		sub	esp, 8
		push	offset aSize	; "--size"
		push	0
		call	quote_n
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aYouMustSpecify ; "you must specify one of %s or	%s"
		call	gettext
		add	esp, 10h
		sub	esp, 0Ch
		push	esi
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 20h
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8000DE7:				; CODE XREF: main+3D9j	main+3E7j
		movzx	eax, ds:block_mode
		test	al, al
		jz	short loc_8000E54
		movzx	eax, [ebp+got_size]
		xor	eax, 1
		test	al, al
		jz	short loc_8000E54
		sub	esp, 8
		push	offset aSize	; "--size"
		push	1
		call	quote_n
		add	esp, 10h
		mov	esi, eax
		sub	esp, 8
		push	offset aIoBlocks ; "--io-blocks"
		push	0
		call	quote_n
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aSWasSpecifiedB ; "%s was specified but %s was not"
		call	gettext
		add	esp, 10h
		sub	esp, 0Ch
		push	esi
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 20h
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8000E54:				; CODE XREF: main+446j	main+454j
		cmp	dword ptr [ebx], 0
		jg	short loc_8000E83
		sub	esp, 0Ch
		push	offset aMissingFileOpe ; "missing file operand"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8000E83:				; CODE XREF: main+4ADj
		mov	eax, ds:ref_file
		test	eax, eax
		jz	short loc_8000EF0
		mov	eax, ds:ref_file
		sub	esp, 8
		lea	edx, [ebp+sb]
		push	edx
		push	eax
		call	stat64
		add	esp, 10h
		test	eax, eax
		jz	short loc_8000EDE
		mov	eax, ds:ref_file
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aCannotStatS ; "cannot stat %s"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		push	esi
		push	ebx		; format
		push	eax		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_8000EDE:				; CODE XREF: main+4F9j
		mov	eax, dword ptr [ebp+sb.st_size]
		mov	edx, dword ptr [ebp+sb.st_size+4]
		mov	dword ptr [ebp+size], eax
		mov	dword ptr [ebp+size+4],	edx

loc_8000EF0:				; CODE XREF: main+4E0j
		movzx	eax, ds:no_create
		test	al, al
		jz	short loc_8000F02
		mov	eax, 801h
		jmp	short loc_8000F07
; ---------------------------------------------------------------------------

loc_8000F02:				; CODE XREF: main+54Fj
		mov	eax, 841h

loc_8000F07:				; CODE XREF: main+556j
		mov	[ebp+oflags], eax
		mov	[ebp+omode], 1B6h
		jmp	loc_8001087
; ---------------------------------------------------------------------------

loc_8000F1C:				; CODE XREF: main+6FBj
		sub	esp, 4
		push	[ebp+omode]
		push	[ebp+oflags]
		push	[ebp+fname]
		call	open64
		add	esp, 10h
		mov	[ebp+fd], eax
		cmp	[ebp+fd], 0FFFFFFFFh
		jnz	loc_8000FF4
		movzx	eax, ds:no_create
		xor	eax, 1
		test	al, al
		jnz	short loc_8000F6A
		call	__errno_location
		mov	eax, [eax]
		cmp	eax, 2
		jz	loc_8001087

loc_8000F6A:				; CODE XREF: main+5AEj
		call	__errno_location
		mov	eax, [eax]
		mov	[ebp+open_errno], eax
		sub	esp, 8
		lea	eax, [ebp+sb]
		push	eax
		push	[ebp+fname]
		call	stat64
		add	esp, 10h
		test	eax, eax
		jnz	short loc_8000FB3
		mov	eax, [ebp+sb.st_mode]
		and	eax, 0F000h
		cmp	eax, 8000h
		jz	short loc_8000FB3
		mov	eax, [ebp+sb.st_mode]
		and	eax, 0F000h
		cmp	eax, 4000h
		jz	short loc_8000FB3
		jmp	loc_8001087
; ---------------------------------------------------------------------------

loc_8000FB3:				; CODE XREF: main+5E4j	main+5F3j ...
		sub	esp, 0Ch
		push	[ebp+fname]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aCannotOpenSFor ; "cannot open %s for writing"
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	[ebp+open_errno] ; errnum
		push	0		; status
		call	error
		add	esp, 10h
		add	[ebp+errors], 1
		jmp	loc_8001087
; ---------------------------------------------------------------------------

loc_8000FF4:				; CODE XREF: main+59Cj
		cmp	[ebp+fd], 0FFFFFFFFh
		jz	loc_8001087
		mov	eax, dword ptr [ebp+size]
		mov	edx, dword ptr [ebp+size+4]
		sub	esp, 0Ch
		push	[ebp+rel_mode]	; rel_mode
		push	edx
		push	eax		; ssize
		push	[ebp+fname]	; fname
		push	[ebp+fd]	; fd
		call	do_ftruncate
		add	esp, 20h
		add	[ebp+errors], eax
		sub	esp, 0Ch
		push	[ebp+fd]	; fd
		call	close
		add	esp, 10h
		test	eax, eax
		jz	short loc_8001087
		sub	esp, 0Ch
		push	[ebp+fname]
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aClosingS ; "closing %s"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		push	esi
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		add	[ebp+errors], 1

loc_8001087:				; CODE XREF: main+56Dj	main+5BAj ...
		mov	eax, [ebp+argv]
		lea	edx, [eax+4]
		mov	[ebp+argv], edx
		mov	eax, [eax]
		mov	[ebp+fname], eax
		cmp	[ebp+fname], 0
		jnz	loc_8000F1C
		cmp	[ebp+errors], 0
		setnz	al
		movzx	eax, al
		mov	edi, [ebp+var_1C]
		xor	edi, large gs:14h
		jz	short loc_80010C9
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_80010C9:				; CODE XREF: main+718j
		lea	esp, [ebp-10h]
		pop	ecx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		lea	esp, [ecx-4]

locret_80010D4:				; DATA XREF: .eh_frame:08001994o
					; .eh_frame:080019B4o ...
		retn
main		endp

_text		ends

; ===========================================================================

; Segment type:	Zero-length
; Segment permissions: Read/Write
_data		segment	byte public 'DATA' use32
_data		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
		assume cs:_bss
		;org 80010D8h
		assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing
; _Bool	no_create
no_create	db ?			; DATA XREF: main:loc_8000A9Bw
					; main:loc_8000EF0r ...
; _Bool	block_mode
block_mode	db ?			; DATA XREF: do_ftruncate+32r
					; do_ftruncate:loc_800043Cr ...
		align 4
; const	char *ref_file
ref_file	dd ?			; DATA XREF: main+10Ew	main+3C0r ...
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment '32byte' can not be represented in assembly
_rodata		segment	para public 'CONST' use32
		assume cs:_rodata
		;org 80010E0h
; char msgid[]
msgid		db 0Ah			; DATA XREF: emit_size_note+10o
		db 'SIZE may be (or may be an integer optionally followed by) one of '
		db 'following:',0Ah
		db 'KB 1000, K 1024, MB 1000*1000, M 1024*1024, and so on for G, T, P'
		db ', E, Z, Y.',0Ah,0
; char aReportSBugsToS[]
aReportSBugsToS	db 0Ah			; DATA XREF: emit_ancillary_info+1Do
		db 'Report %s bugs to %s',0Ah,0
aBugCoreutils@g	db 'bug-coreutils@gnu.org',0 ; DATA XREF: emit_ancillary_info+2Do
		align 4
; char aSHomePageHttpW[]
aSHomePageHttpW	db '%s home page: <http://www.gnu.org/software/%s/>',0Ah,0
					; DATA XREF: emit_ancillary_info+3Fo
; char domainname[]
domainname	db 'coreutils',0        ; DATA XREF: emit_ancillary_info+4Fo
					; main+80o ...
aGnuCoreutils	db 'GNU coreutils',0    ; DATA XREF: emit_ancillary_info+54o
					; main+352o
		align 4
; char aGeneralHelpUsi[]
aGeneralHelpUsi	db 'General help using GNU software: <http://www.gnu.org/gethelp/>',0Ah,0
					; DATA XREF: emit_ancillary_info+6Bo
; char s2[]
s2		db 'en_',0              ; DATA XREF: emit_ancillary_info+A2o
; char aReportSTransla[]
aReportSTransla	db 'Report %s translation bugs to <http://translationproject.org/team'
					; DATA XREF: emit_ancillary_info+CCo
		db '/>',0Ah,0
		align 10h
; char aForCompleteDoc[]
aForCompleteDoc	db 'For complete documentation, run: info coreutils ',27h,'%s invocation'
					; DATA XREF: emit_ancillary_info+FCo
		db 27h,0Ah,0
aNoCreate	db 'no-create',0        ; DATA XREF: .rodata:longoptso
aIoBlocks_0	db 'io-blocks',0        ; DATA XREF: .rodata:longoptso
aReference_0	db 'reference',0        ; DATA XREF: .rodata:longoptso
aSize_0		db 'size',0             ; DATA XREF: .rodata:longoptso
aHelp		db 'help',0             ; DATA XREF: .rodata:longoptso
aVersion	db 'version',0          ; DATA XREF: .rodata:longoptso
		align 10h
; const	option longopts[7]
longopts	option <offset aNoCreate, 0, 0,	63h> ; DATA XREF: main+37Eo
		option <offset aIoBlocks_0, 0, 0, 6Fh> ; "no-create"
		option <offset aReference_0, 1,	0, 72h>
		option <offset aSize_0,	1, 0, 73h>
		option <offset aHelp, 0, 0, 0FFFFFF7Eh>
		option <offset aVersion, 0, 0, 0FFFFFF7Dh>
		option	<0>
aEggkkmmpttyz0	db 'EgGkKmMPtTYZ0',0    ; DATA XREF: parse_len+20o
		align 10h
; char aTrySHelpForMor[]
aTrySHelpForMor	db 'Try `%s --help',27h,' for more information.',0Ah,0
					; DATA XREF: usage+16o
; char aUsageSOption__[]
aUsageSOption__	db 'Usage: %s OPTION... FILE...',0Ah,0 ; DATA XREF: usage+46o
; char aShrinkOrExtend[]
aShrinkOrExtend	db 'Shrink or extend the size of each FILE to the specified size',0Ah
					; DATA XREF: usage+69o
		db 0Ah
		db 'A FILE argument that does not exist is created.',0Ah
		db 0Ah
		db 'If a FILE is larger than the specified size, the extra data is lo'
		db 'st.',0Ah
		db 'If a FILE is shorter, it is extended and the extended part (hole)'
		db 0Ah
		db 'reads as zero bytes.',0Ah
		db 0Ah,0
		align 4
; char aMandatoryArgum[]
aMandatoryArgum	db 'Mandatory arguments to long options are mandatory for short optio'
					; DATA XREF: usage+8Co
		db 'ns too.',0Ah,0
		align 10h
; char aCNoCreateDoNot[]
aCNoCreateDoNot	db '  -c, --no-create        do not create any files',0Ah,0
					; DATA XREF: usage+AFo
		align 4
; char aOIoBlocksTreat[]
aOIoBlocksTreat	db '  -o, --io-blocks        Treat SIZE as number of IO blocks instea'
					; DATA XREF: usage+D2o
		db 'd of bytes',0Ah,0
		align 4
; char aRReferenceFile[]
aRReferenceFile	db '  -r, --reference=FILE   use this FILE',27h,'s size',0Ah
					; DATA XREF: usage+F5o
		db '  -s, --size=SIZE        use this SIZE',0Ah,0
		align 4
; char aHelpDisplayThi[]
aHelpDisplayThi	db '      --help     display this help and exit',0Ah,0
					; DATA XREF: usage+118o
		align 4
; char aVersionOutputV[]
aVersionOutputV	db '      --version  output version information and exit',0Ah,0
					; DATA XREF: usage+13Bo
		align 4
; char aSizeMayAlsoBeP[]
aSizeMayAlsoBeP	db 0Ah			; DATA XREF: usage+163o
		db 'SIZE may also be prefixed by one of the following modifying chara'
		db 'cters:',0Ah
		db '`+',27h,' extend by, `-',27h,' reduce by, `<',27h,' at most, `>',27h,' at lea'
		db 'st,',0Ah
		db '`/',27h,' round down to multiple of, `%',27h,' round up to multiple of.'
		db 0Ah,0
		align 4
; char aNoteThatTheRAn[]
aNoteThatTheRAn	db 0Ah			; DATA XREF: usage+186o
		db 'Note that the -r and -s options are mutually exclusive.',0Ah,0
; char aCannotFstatS[]
aCannotFstatS	db 'cannot fstat %s',0  ; DATA XREF: do_ftruncate+6Fo
					; do_ftruncate+552o
		align 10h
; char aOverflowInLldL[]
aOverflowInLldL	db 'overflow in %lld * %lld byte blocks for file %s',0
					; DATA XREF: do_ftruncate+154o
; char aSHasUnusableAp[]
aSHasUnusableAp	db '%s has unusable, apparently negative size',0
					; DATA XREF: do_ftruncate+232o
		align 4
; char aOverflowRoundi[]
aOverflowRoundi	db 'overflow rounding up size of file %s',0 ; DATA XREF: do_ftruncate+3E4o
		align 4
; char aOverflowExtend[]
aOverflowExtend	db 'overflow extending size of file %s',0 ; DATA XREF: do_ftruncate+472o
; char aTruncatingSAtL[]
aTruncatingSAtL	db 'truncating %s at %lld bytes',0 ; DATA XREF: do_ftruncate+5B0o
; char locale
locale		db 0			; DATA XREF: main+69o
; char dirname[]
dirname		db '/usr/local/share/locale',0 ; DATA XREF: main+7Bo
; char aMultipleRelati[]
aMultipleRelati	db 'multiple relative modifiers specified',0 ; DATA XREF: main+24Bo
; char aInvalidNumberS[]
aInvalidNumberS	db 'invalid number %s',0 ; DATA XREF: main+2AFo
; char aDivisionByZero[]
aDivisionByZero	db 'division by zero',0 ; DATA XREF: main+2F9o
aPBdraigBrady	db 'Pádraig Brady',0   ; DATA XREF: main+32Co
aPadraigBrady	db 'Padraig Brady',0    ; DATA XREF: main+331o
aTruncate	db 'truncate',0         ; DATA XREF: main+357o
; char shortopts[]
shortopts	db 'cor:s:',0           ; DATA XREF: main+383o
aReference	db '--reference',0      ; DATA XREF: main+3ECo
aSize		db '--size',0           ; DATA XREF: main+400o main+459o
		align 4
; char aYouMustSpecify[]
aYouMustSpecify	db 'you must specify one of %s or %s',0 ; DATA XREF: main+414o
aIoBlocks	db '--io-blocks',0      ; DATA XREF: main+46Do
		align 4
; char aSWasSpecifiedB[]
aSWasSpecifiedB	db '%s was specified but %s was not',0 ; DATA XREF: main+481o
; char aMissingFileOpe[]
aMissingFileOpe	db 'missing file operand',0 ; DATA XREF: main+4B2o
; char aCannotStatS[]
aCannotStatS	db 'cannot stat %s',0   ; DATA XREF: main+511o
; char aCannotOpenSFor[]
aCannotOpenSFor	db 'cannot open %s for writing',0 ; DATA XREF: main+61Fo
; char aClosingS[]
aClosingS	db 'closing %s',0       ; DATA XREF: main+6B3o
_rodata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_eh_frame	segment	dword public 'CONST' use32
		assume cs:_eh_frame
		;org 8001974h
		dd 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 2	dup(1Ch)
		dd offset locret_80010D4-8002A68h
		dd 12h,	80E4100h, 0D420285h, 0CC54E05h,	404h, 20h, 3Ch
		dd offset locret_80010D4-8002A76h
		dd 30h,	80E4100h, 0D420285h, 3834405h, 0CC3C568h, 404h
		dd 20h,	60h
		dd offset locret_80010D4-8002A6Ah
		dd 11Ch, 80E4100h, 0D420285h, 3834405h,	0C5011403h, 4040CC3h
		dd 1Ch,	84h
		dd offset locret_80010D4-8002972h
		dd 92h,	80E4100h, 0D420285h, 0C58E0205h, 4040Ch, 18h, 0A4h
		dd offset locret_80010D4-8002900h
		dd 1B0h, 80E4100h, 0D420285h, 3834405h,	2Ch, 0C0h
		dd offset locret_80010D4-800276Ch
		dd 60Ah, 80E4100h, 0D420285h, 3874905h,	5830486h, 0C305FA03h
		dd 0C741C641h, 40CC541h, 4, 40h, 0F0h
		dd offset locret_80010D4-8002192h
		dd 72Bh, 10C4400h, 5104700h, 46007502h,	7075030Fh, 2071006h
		dd 6107C75h, 10787502h,	74750203h, 0C1071203h, 4100010Ch
		dd 41C641C3h, 43C541C7h, 4040Ch
_eh_frame	ends

; ===========================================================================

; Segment type:	Externs
; extern
; struct _IO_FILE *stdout
		extrn stdout:dword	; DATA XREF: emit_size_note+7r
					; emit_ancillary_info+62r ...
; char *gettext(const char *msgid)
		extrn gettext:near	; CODE XREF: emit_size_note+15p
					; emit_ancillary_info+22p ...
		extrn fputs_unlocked:near ; CODE XREF: emit_size_note+22p
					; emit_ancillary_info+7Dp ...
		extrn program_name:dword ; DATA	XREF: emit_ancillary_info+7r
					; emit_ancillary_info+B6r ...
		extrn last_component:near ; CODE XREF: emit_ancillary_info+10p
					; emit_ancillary_info+BFp ...
; int printf(const char	*format, ...)
		extrn printf:near	; CODE XREF: emit_ancillary_info+34p
					; emit_ancillary_info+5Ap ...
; char *setlocale(int category,	const char *locale)
		extrn setlocale:near	; CODE XREF: emit_ancillary_info+8Cp
					; main+70p
; int strncmp(const char *s1, const char *s2, size_t n)
		extrn strncmp:near	; CODE XREF: emit_ancillary_info+AAp
		extrn xstrtoimax:near	; CODE XREF: parse_len+30p
; int *_errno_location(void)
		extrn __errno_location:near ; CODE XREF: parse_len+41p
					; parse_len:loc_80001BFp ...
		extrn __stack_chk_fail:near ; CODE XREF: parse_len+8Bp
					; do_ftruncate+5FDp ...
; struct _IO_FILE *stderr
		extrn stderr:dword	; DATA XREF: usage+25r
; int fprintf(FILE *stream, const char *format,	...)
		extrn fprintf:near	; CODE XREF: usage+30p
; void exit(int	status)
		extrn exit:near		; CODE XREF: usage+1ABp main+36Ap
		extrn __divdi3:near	; CODE XREF: do_ftruncate+EBp
					; do_ftruncate+11Ep
		extrn __udivdi3:near	; CODE XREF: do_ftruncate+2FFp
					; do_ftruncate+37Bp
		extrn fstat64:near	; CODE XREF: do_ftruncate+4Dp
					; do_ftruncate+530p
		extrn quote:near	; CODE XREF: do_ftruncate+62p
					; do_ftruncate+147p ...
; void error(int status, int errnum, const char	*format, ...)
		extrn error:near	; CODE XREF: do_ftruncate+8Ap
					; do_ftruncate+17Fp ...
		extrn ftruncate64:near	; CODE XREF: do_ftruncate+508p
		extrn set_program_name:near ; CODE XREF: main+5Ep
; char *bindtextdomain(const char *domainname, const char *dirname)
		extrn bindtextdomain:near ; CODE XREF: main+85p
; char *textdomain(const char *domainname)
		extrn textdomain:near	; CODE XREF: main+95p
; void close_stdout(void)
		extrn close_stdout	; DATA XREF: main+A0o
; int atexit(void (*func)(void))
		extrn atexit:near	; CODE XREF: main+A5p
; char *optarg
		extrn optarg:dword	; DATA XREF: main:loc_8000AB3r
					; main:loc_8000AC2r ...
; const	unsigned __int16 **_ctype_b_loc(void)
		extrn __ctype_b_loc:near ; CODE	XREF: main:loc_8000ACFp
					; main:loc_8000B9Dp
		extrn proper_name_utf8:near ; CODE XREF: main+336p
		extrn Version:dword	; DATA XREF: main+340r
		extrn version_etc:near	; CODE XREF: main+35Dp
; int getopt_long(int argc, char *const	*argv, const char *shortopts, const struct option *longopts, int *longind)
		extrn getopt_long:near	; CODE XREF: main+390p
; int optind
		extrn optind:dword	; DATA XREF: main+3ABr	main+3B9r
		extrn quote_n:near	; CODE XREF: main+3F3p	main+407p ...
		extrn stat64:near	; CODE XREF: main+4EFp	main+5DAp
		extrn open64:near	; CODE XREF: main+587p
; int close(int	fd)
		extrn close:near	; CODE XREF: main+691p


		end
