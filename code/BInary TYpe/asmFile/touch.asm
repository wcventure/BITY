;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B611-7234-BB			    |
; |		Doskey Lee, Kingsoft Internet Security Software		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	E2D477319A64E7C6C1489CB38D7ECEA5
; Input	CRC32 :	4E71E9AE

; File Name   :	D:\coreutils-o\touch.o
; Format      :	ELF for	Intel 386 (Relocatable)
;
; Source File :	'touch.c'

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	byte public 'CODE' use32
		assume cs:_text
		;org 8000000h
		assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void emit_ancillary_info()
emit_ancillary_info proc near		; CODE XREF: usage+178p

lc_messages	= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset msgid	; "\nReport %s bugs to %s\n"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset aBugCoreutils@g ; "bug-coreutils@gnu.org"
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	offset aSHomePageHttpW ; "%s home page:	<http://www.gnu.org/softw"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset domainname ; "coreutils"
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aGeneralHelpUsi ; "General help using GNU software: <http:"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		sub	esp, 8
		push	0		; locale
		push	5		; category
		call	setlocale
		add	esp, 10h
		mov	[ebp+lc_messages], eax
		cmp	[ebp+lc_messages], 0
		jz	short loc_80000E6
		sub	esp, 4
		push	3		; n
		push	offset s2	; "en_"
		push	[ebp+lc_messages] ; s1
		call	strncmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_80000E6
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aReportSTransla ; "Report %s translation	bugs to	<http://t"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h

loc_80000E6:				; CODE XREF: emit_ancillary_info+9Bj
					; emit_ancillary_info+B4j
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aForCompleteDoc ; "For complete documentation, run: info	c"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		nop
		mov	ebx, [ebp+var_4]
		leave
		retn
emit_ancillary_info endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; timespec *get_stat_atime(timespec *__return_ptr __struct_ptr retstr, const stat *st)
get_stat_atime	proc near		; CODE XREF: main+418p

retstr		= dword	ptr  8
st		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+retstr]
		mov	eax, [ebp+st]
		mov	edx, [eax+44h]
		mov	eax, [eax+40h]
		mov	[ecx], eax
		mov	[ecx+4], edx
		mov	eax, [ebp+retstr]
		pop	ebp
		retn	4
get_stat_atime	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; timespec *get_stat_mtime(timespec *__return_ptr __struct_ptr retstr, const stat *st)
get_stat_mtime	proc near		; CODE XREF: main+445p

retstr		= dword	ptr  8
st		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+retstr]
		mov	eax, [ebp+st]
		mov	edx, [eax+4Ch]
		mov	eax, [eax+48h]
		mov	[ecx], eax
		mov	[ecx+4], edx
		mov	eax, [ebp+retstr]
		pop	ebp
		retn	4
get_stat_mtime	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl get_reldate(timespec *result, const char	*flex_date, const timespec *now)
get_reldate	proc near		; CODE XREF: main+497p	main+4C2p ...

var_4		= dword	ptr -4
result		= dword	ptr  8
flex_date	= dword	ptr  0Ch
now		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 4
		sub	esp, 4
		push	[ebp+now]
		push	[ebp+flex_date]
		push	[ebp+result]
		call	get_date
		add	esp, 10h
		xor	eax, 1
		test	al, al
		jz	short loc_80001A2
		sub	esp, 0Ch
		push	[ebp+flex_date]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aInvalidDateFor ; "invalid date format %s"
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_80001A2:				; CODE XREF: get_reldate+20j
		nop
		mov	ebx, [ebp+var_4]
		leave
		retn
get_reldate	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; _Bool	__cdecl	touch(const char *file)
touch		proc near		; CODE XREF: main+7A0p

ok		= byte ptr -15h
fd		= dword	ptr -14h
open_errno	= dword	ptr -10h
t		= dword	ptr -0Ch
file		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	[ebp+fd], 0FFFFFFFFh
		mov	[ebp+open_errno], 0
		mov	[ebp+t], offset	newtime
		sub	esp, 8
		push	offset asc_8001073 ; "-"
		push	[ebp+file]	; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		jnz	short loc_80001E5
		mov	[ebp+fd], 1
		jmp	short loc_800024F
; ---------------------------------------------------------------------------

loc_80001E5:				; CODE XREF: touch+32j
		movzx	eax, ds:no_create
		xor	eax, 1
		test	al, al
		jz	short loc_800024F
		movzx	eax, ds:no_dereference
		xor	eax, 1
		test	al, al
		jz	short loc_800024F
		push	1B6h
		push	941h
		push	[ebp+file]
		push	0
		call	fd_reopen
		add	esp, 10h
		mov	[ebp+fd], eax
		cmp	[ebp+fd], 0FFFFFFFFh
		jnz	short loc_800024F
		call	__errno_location
		mov	eax, [eax]
		cmp	eax, 15h
		jz	short loc_800024F
		call	__errno_location
		mov	eax, [eax]
		cmp	eax, 16h
		jz	short loc_800024F
		call	__errno_location
		mov	eax, [eax]
		cmp	eax, 1
		jz	short loc_800024F
		call	__errno_location
		mov	eax, [eax]
		mov	[ebp+open_errno], eax

loc_800024F:				; CODE XREF: touch+3Bj	touch+49j ...
		mov	eax, ds:change_times
		cmp	eax, 3
		jz	short loc_800029C
		mov	eax, ds:change_times
		cmp	eax, 2
		jnz	short loc_800026F
		mov	ds:dword_8000DC0, 3FFFFFFEh
		jmp	short loc_800029C
; ---------------------------------------------------------------------------

loc_800026F:				; CODE XREF: touch+B9j
		mov	eax, ds:change_times
		cmp	eax, 1
		jz	short loc_8000292
		push	offset __PRETTY_FUNCTION___5199	; "touch"
		push	9Bh		; line
		push	offset file	; "touch.c"
		push	offset assertion ; "change_times == CH_ATIME"
		call	__assert_fail
; ---------------------------------------------------------------------------

loc_8000292:				; CODE XREF: touch+CFj
		mov	ds:now.tv_nsec,	3FFFFFFEh

loc_800029C:				; CODE XREF: touch+AFj	touch+C5j
		movzx	eax, ds:amtime_now
		test	al, al
		jz	short loc_80002AE
		mov	[ebp+t], 0

loc_80002AE:				; CODE XREF: touch+FDj
		movzx	eax, ds:no_dereference
		test	al, al
		jz	short loc_80002D7
		cmp	[ebp+fd], 0FFFFFFFFh
		jnz	short loc_80002D7
		sub	esp, 8
		push	[ebp+t]
		push	[ebp+file]
		call	lutimens
		add	esp, 10h
		test	eax, eax
		setz	al
		jmp	short loc_80002FE
; ---------------------------------------------------------------------------

loc_80002D7:				; CODE XREF: touch+10Fj touch+115j
		cmp	[ebp+fd], 1
		jz	short loc_80002E2
		mov	eax, [ebp+file]
		jmp	short loc_80002E7
; ---------------------------------------------------------------------------

loc_80002E2:				; CODE XREF: touch+133j
		mov	eax, 0

loc_80002E7:				; CODE XREF: touch+138j
		sub	esp, 4
		push	[ebp+t]
		push	eax
		push	[ebp+fd]
		call	gl_futimens
		add	esp, 10h
		test	eax, eax
		setz	al

loc_80002FE:				; CODE XREF: touch+12Dj
		mov	[ebp+ok], al
		cmp	[ebp+fd], 0
		jnz	short loc_8000358
		sub	esp, 0Ch
		push	0		; fd
		call	close
		add	esp, 10h
		test	eax, eax
		jz	short loc_800038A
		sub	esp, 0Ch
		push	[ebp+file]
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aClosingS ; "closing %s"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		push	esi
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	eax, 0
		jmp	loc_8000430
; ---------------------------------------------------------------------------

loc_8000358:				; CODE XREF: touch+15Dj
		cmp	[ebp+fd], 1
		jnz	short loc_800038A
		movzx	eax, [ebp+ok]
		xor	eax, 1
		test	al, al
		jz	short loc_800038A
		call	__errno_location
		mov	eax, [eax]
		cmp	eax, 9
		jnz	short loc_800038A
		movzx	eax, ds:no_create
		test	al, al
		jz	short loc_800038A
		mov	eax, 1
		jmp	loc_8000430
; ---------------------------------------------------------------------------

loc_800038A:				; CODE XREF: touch+16Ej touch+1B4j ...
		movzx	eax, [ebp+ok]
		xor	eax, 1
		test	al, al
		jz	loc_800042B
		cmp	[ebp+open_errno], 0
		jz	short loc_80003D0
		sub	esp, 0Ch
		push	[ebp+file]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aCannotTouchS ; "cannot touch %s"
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	[ebp+open_errno] ; errnum
		push	0		; status
		call	error
		add	esp, 10h
		jmp	short loc_8000424
; ---------------------------------------------------------------------------

loc_80003D0:				; CODE XREF: touch+1F5j
		movzx	eax, ds:no_create
		test	al, al
		jz	short loc_80003EE
		call	__errno_location
		mov	eax, [eax]
		cmp	eax, 2
		jnz	short loc_80003EE
		mov	eax, 1
		jmp	short loc_8000430
; ---------------------------------------------------------------------------

loc_80003EE:				; CODE XREF: touch+231j touch+23Dj
		sub	esp, 0Ch
		push	[ebp+file]
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aSettingTimesOf ; "setting times	of %s"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		push	esi
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h

loc_8000424:				; CODE XREF: touch+226j
		mov	eax, 0
		jmp	short loc_8000430
; ---------------------------------------------------------------------------

loc_800042B:				; CODE XREF: touch+1EBj
		mov	eax, 1

loc_8000430:				; CODE XREF: touch+1ABj touch+1DDj ...
		lea	esp, [ebp-8]
		pop	ebx
		pop	esi
		pop	ebp
		retn
touch		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; void __cdecl usage(int status)
		public usage
usage		proc near		; CODE XREF: main+296p	main+2E7p ...

status		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 4
		cmp	[ebp+status], 0
		jz	short loc_8000474
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, ds:stderr
		sub	esp, 4
		push	ebx
		push	edx		; format
		push	eax		; stream
		call	fprintf
		add	esp, 10h
		jmp	loc_80005B4
; ---------------------------------------------------------------------------

loc_8000474:				; CODE XREF: usage+Bj
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aUsageSOption__ ; "Usage: %s [OPTION]...	FILE...\n"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aUpdateTheAcces ; "Update the access and	modification time"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aMandatoryArgum ; "Mandatory arguments to long options are"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aAChangeOnlyThe ; "  -a			   change only th"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aHNoDereference ; "  -h,	--no-dereference   affect each sy"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aRReferenceFile ; "  -r,	--reference=FILE   use this file'"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aHelpDisplayThi ; "	--help	   display this	help and "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aVersionOutputV ; "	--version  output version informa"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aNoteThatTheDAn ; "\nNote that the -d and -t options accep"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		call	emit_ancillary_info

loc_80005B4:				; CODE XREF: usage+38j
		sub	esp, 0Ch
		push	[ebp+status]	; status
		call	exit
usage		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public main
main		proc near

var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= timespec ptr -0B8h
argv		= dword	ptr -0ACh
date_set	= byte ptr -9Eh
ok		= byte ptr -9Dh
long_idx	= dword	ptr -9Ch
flex_date	= dword	ptr -98h
c		= dword	ptr -94h
tm		= dword	ptr -90h
now		= timespec ptr -8Ch
notnow		= timespec ptr -84h
notnow1		= timespec ptr -7Ch
var_1C		= dword	ptr -1Ch
argc		= dword	ptr  0Ch
envp		= dword	ptr  14h

		lea	ecx, [esp+4]
		and	esp, 0FFFFFFF0h
		push	dword ptr [ecx-4]
		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		push	ecx
		sub	esp, 0C8h
		mov	edi, ecx
		mov	eax, [edi+4]
		mov	[ebp+argv], eax
		mov	eax, large gs:14h
		mov	[ebp+var_1C], eax
		xor	eax, eax
		mov	[ebp+date_set],	0
		mov	[ebp+ok], 1
		mov	[ebp+flex_date], 0
		mov	eax, [ebp+argv]
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	set_program_name
		add	esp, 10h
		sub	esp, 8
		push	offset locale	; locale
		push	6		; category
		call	setlocale
		add	esp, 10h
		sub	esp, 8
		push	offset dirname	; "/usr/local/share/locale"
		push	offset domainname ; "coreutils"
		call	bindtextdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset domainname ; "coreutils"
		call	textdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset close_stdout ; func
		call	atexit
		add	esp, 10h
		mov	ds:change_times, 0
		mov	ds:use_ref, 0
		movzx	eax, ds:use_ref
		mov	ds:no_create, al
		jmp	loc_80008AB
; ---------------------------------------------------------------------------

loc_8000681:				; CODE XREF: main+31Dj
		mov	eax, [ebp+c]
		cmp	eax, 66h
		jz	loc_80008AB
		cmp	eax, 66h
		jg	short loc_80006C9
		cmp	eax, 61h
		jz	short loc_80006FB
		cmp	eax, 61h
		jg	short loc_80006BA
		cmp	eax, 0FFFFFF7Dh
		jz	loc_800085A
		cmp	eax, 0FFFFFF7Eh
		jz	loc_8000850
		jmp	loc_80008A1
; ---------------------------------------------------------------------------

loc_80006BA:				; CODE XREF: main+DEj
		cmp	eax, 63h
		jz	short loc_800070D
		cmp	eax, 64h
		jz	short loc_8000719
		jmp	loc_80008A1
; ---------------------------------------------------------------------------

loc_80006C9:				; CODE XREF: main+D4j
		cmp	eax, 72h
		jz	short loc_8000747
		cmp	eax, 72h
		jg	short loc_80006E2
		cmp	eax, 68h
		jz	short loc_8000729
		cmp	eax, 6Dh
		jz	short loc_8000735
		jmp	loc_80008A1
; ---------------------------------------------------------------------------

loc_80006E2:				; CODE XREF: main+112j
		cmp	eax, 74h
		jz	loc_8000796
		cmp	eax, 80h
		jz	loc_8000812
		jmp	loc_80008A1
; ---------------------------------------------------------------------------

loc_80006FB:				; CODE XREF: main+D9j
		mov	eax, ds:change_times
		or	eax, 1
		mov	ds:change_times, eax
		jmp	loc_80008AB
; ---------------------------------------------------------------------------

loc_800070D:				; CODE XREF: main+FEj
		mov	ds:no_create, 1
		jmp	loc_80008AB
; ---------------------------------------------------------------------------

loc_8000719:				; CODE XREF: main+103j
		mov	eax, ds:optarg
		mov	[ebp+flex_date], eax
		jmp	loc_80008AB
; ---------------------------------------------------------------------------

loc_8000729:				; CODE XREF: main+117j
		mov	ds:no_dereference, 1
		jmp	loc_80008AB
; ---------------------------------------------------------------------------

loc_8000735:				; CODE XREF: main+11Cj
		mov	eax, ds:change_times
		or	eax, 2
		mov	ds:change_times, eax
		jmp	loc_80008AB
; ---------------------------------------------------------------------------

loc_8000747:				; CODE XREF: main+10Dj
		mov	eax, [ebp+long_idx]
		cmp	eax, 3
		jnz	short loc_8000780
		mov	eax, [ebp+long_idx]
		shl	eax, 4
		add	eax, offset longopts
		mov	ebx, [eax]
		sub	esp, 0Ch
		push	offset aWarningTheSOpt ; "warning: the --%s option is obsolete;	u"...
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h

loc_8000780:				; CODE XREF: main+191j
		mov	ds:use_ref, 1
		mov	eax, ds:optarg
		mov	ds:ref_file, eax
		jmp	loc_80008AB
; ---------------------------------------------------------------------------

loc_8000796:				; CODE XREF: main+126j
		mov	eax, ds:optarg
		sub	esp, 4
		push	0Dh
		push	eax
		push	offset newtime
		call	posixtime
		add	esp, 10h
		xor	eax, 1
		test	al, al
		jz	short loc_80007E6
		mov	eax, ds:optarg
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aInvalidDateFor ; "invalid date format %s"
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_80007E6:				; CODE XREF: main+1F4j
		mov	ds:dword_8000DC0, 0
		mov	eax, ds:newtime
		mov	edx, ds:dword_8000DC0
		mov	ds:now.tv_sec, eax
		mov	ds:now.tv_nsec,	edx
		mov	[ebp+date_set],	1
		jmp	loc_80008AB
; ---------------------------------------------------------------------------

loc_8000812:				; CODE XREF: main+131j
		mov	edx, ds:argmatch_die
		mov	eax, ds:optarg
		sub	esp, 8
		push	edx
		push	4
		push	offset time_masks
		push	offset time_args
		push	eax
		push	offset aTime	; "--time"
		call	__xargmatch_internal
		add	esp, 20h
		mov	edx, ds:time_masks[eax*4]
		mov	eax, ds:change_times
		or	eax, edx
		mov	ds:change_times, eax
		jmp	short loc_80008AB
; ---------------------------------------------------------------------------

loc_8000850:				; CODE XREF: main+F0j
		sub	esp, 0Ch
		push	0		; status
		call	usage
; ---------------------------------------------------------------------------

loc_800085A:				; CODE XREF: main+E5j
		mov	edx, ds:Version
		mov	eax, ds:stdout
		sub	esp, 8
		push	0
		push	offset aRandySmith ; "Randy Smith"
		push	offset aDavidMackenzie ; "David	MacKenzie"
		push	offset aJimKingdon ; "Jim Kingdon"
		push	offset aArnoldRobbins ;	"Arnold	Robbins"
		push	offset aPaulRubin ; "Paul Rubin"
		push	edx
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	offset aTouch	; "touch"
		push	eax
		call	version_etc
		add	esp, 30h
		sub	esp, 0Ch
		push	0		; status
		call	exit
; ---------------------------------------------------------------------------

loc_80008A1:				; CODE XREF: main+F6j main+105j ...
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_80008AB:				; CODE XREF: main+BDj main+CBj ...
		sub	esp, 0Ch
		lea	eax, [ebp+long_idx]
		push	eax		; longind
		push	offset longopts	; longopts
		push	offset shortopts ; "acd:fhmr:t:"
		push	[ebp+argv]	; argv
		push	dword ptr [edi]	; argc
		call	getopt_long
		add	esp, 20h
		mov	[ebp+c], eax
		cmp	[ebp+c], 0FFFFFFFFh
		jnz	loc_8000681
		mov	eax, ds:change_times
		test	eax, eax
		jnz	short loc_80008F5
		mov	ds:change_times, 3

loc_80008F5:				; CODE XREF: main+32Aj
		cmp	[ebp+date_set],	0
		jz	short loc_800093C
		movzx	eax, ds:use_ref
		test	al, al
		jnz	short loc_8000912
		cmp	[ebp+flex_date], 0
		jz	short loc_800093C

loc_8000912:				; CODE XREF: main+348j
		sub	esp, 0Ch
		push	offset aCannotSpecifyT ; "cannot specify times from more than one"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_800093C:				; CODE XREF: main+33Dj	main+351j
		movzx	eax, ds:use_ref
		test	al, al
		jz	loc_8000A8E
		movzx	eax, ds:no_dereference
		test	al, al
		jz	short loc_8000972
		mov	eax, ds:ref_file
		sub	esp, 8
		lea	edx, [ebp+notnow1]
		push	edx
		push	eax
		call	lstat64
		add	esp, 10h
		test	eax, eax
		setnz	al
		jmp	short loc_800098C
; ---------------------------------------------------------------------------

loc_8000972:				; CODE XREF: main+395j
		mov	eax, ds:ref_file
		sub	esp, 8
		lea	edx, [ebp+notnow1]
		push	edx
		push	eax
		call	stat64
		add	esp, 10h
		test	eax, eax
		setnz	al

loc_800098C:				; CODE XREF: main+3B1j
		test	al, al
		jz	short loc_80009C9
		mov	eax, ds:ref_file
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aFailedToGetAtt ; "failed to get	attributes of %s"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		push	esi
		push	ebx		; format
		push	eax		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_80009C9:				; CODE XREF: main+3CFj
		lea	eax, [ebp+var_B8]
		sub	esp, 8
		lea	edx, [ebp+notnow1]
		push	edx		; st
		push	eax		; retstr
		call	get_stat_atime
		add	esp, 0Ch
		mov	eax, [ebp+var_B8.tv_sec]
		mov	edx, [ebp+var_B8.tv_nsec]
		mov	ds:newtime, eax
		mov	ds:dword_8000DC0, edx
		lea	eax, [ebp+var_B8]
		sub	esp, 8
		lea	edx, [ebp+notnow1]
		push	edx		; st
		push	eax		; retstr
		call	get_stat_mtime
		add	esp, 0Ch
		mov	eax, [ebp+var_B8.tv_sec]
		mov	edx, [ebp+var_B8.tv_nsec]
		mov	ds:now.tv_sec, eax
		mov	ds:now.tv_nsec,	edx
		mov	[ebp+date_set],	1
		cmp	[ebp+flex_date], 0
		jz	loc_8000B63
		mov	eax, ds:change_times
		and	eax, 1
		test	eax, eax
		jz	short loc_8000A5E
		sub	esp, 4
		push	offset newtime	; now
		push	[ebp+flex_date]	; flex_date
		push	offset newtime	; result
		call	get_reldate
		add	esp, 10h

loc_8000A5E:				; CODE XREF: main+482j
		mov	eax, ds:change_times
		and	eax, 2
		test	eax, eax
		jz	loc_8000B63
		sub	esp, 4
		push	offset now	; now
		push	[ebp+flex_date]	; flex_date
		push	offset now	; result
		call	get_reldate
		add	esp, 10h
		jmp	loc_8000B63
; ---------------------------------------------------------------------------

loc_8000A8E:				; CODE XREF: main+386j
		cmp	[ebp+flex_date], 0
		jz	loc_8000B63
		sub	esp, 0Ch
		lea	eax, [ebp+now]
		push	eax
		call	gettime
		add	esp, 10h
		sub	esp, 4
		lea	eax, [ebp+now]
		push	eax		; now
		push	[ebp+flex_date]	; flex_date
		push	offset newtime	; result
		call	get_reldate
		add	esp, 10h
		mov	eax, ds:newtime
		mov	edx, ds:dword_8000DC0
		mov	ds:now.tv_sec, eax
		mov	ds:now.tv_nsec,	edx
		mov	[ebp+date_set],	1
		mov	eax, ds:change_times
		cmp	eax, 3
		jnz	short loc_8000B63
		mov	edx, ds:newtime
		mov	eax, [ebp+now.tv_sec]
		cmp	edx, eax
		jnz	short loc_8000B63
		mov	edx, ds:dword_8000DC0
		mov	eax, [ebp+now.tv_nsec]
		cmp	edx, eax
		jnz	short loc_8000B63
		mov	eax, [ebp+now.tv_sec]
		xor	eax, 1
		mov	[ebp+notnow.tv_sec], eax
		mov	eax, [ebp+now.tv_nsec]
		mov	[ebp+notnow.tv_nsec], eax
		sub	esp, 4
		lea	eax, [ebp+notnow]
		push	eax		; now
		push	[ebp+flex_date]	; flex_date
		lea	eax, [ebp+notnow1]
		push	eax		; result
		call	get_reldate
		add	esp, 10h
		mov	edx, [ebp+notnow1.tv_sec]
		mov	eax, [ebp+notnow.tv_sec]
		cmp	edx, eax
		jnz	short loc_8000B63
		mov	edx, [ebp+notnow1.tv_nsec]
		mov	eax, [ebp+notnow.tv_nsec]
		cmp	edx, eax
		jnz	short loc_8000B63
		mov	[ebp+date_set],	0

loc_8000B63:				; CODE XREF: main+472j	main+4A9j ...
		movzx	eax, [ebp+date_set]
		xor	eax, 1
		test	al, al
		jz	loc_8000CDD
		mov	eax, ds:optind
		mov	edx, [edi]
		sub	edx, eax
		mov	eax, edx
		cmp	eax, 1
		jle	loc_8000CDD
		call	posix2_version
		cmp	eax, 30DAFh
		jg	loc_8000CDD
		mov	eax, ds:optind
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 4
		push	12h
		push	eax
		push	offset newtime
		call	posixtime
		add	esp, 10h
		test	al, al
		jz	loc_8000CDD
		mov	ds:dword_8000DC0, 0
		mov	eax, ds:newtime
		mov	edx, ds:dword_8000DC0
		mov	ds:now.tv_sec, eax
		mov	ds:now.tv_nsec,	edx
		mov	[ebp+date_set],	1
		sub	esp, 0Ch
		push	offset name	; "POSIXLY_CORRECT"
		call	getenv
		add	esp, 10h
		test	eax, eax
		jnz	loc_8000CD0
		sub	esp, 0Ch
		push	offset newtime	; timer
		call	localtime
		add	esp, 10h
		mov	[ebp+tm], eax
		mov	eax, [ebp+tm]
		mov	esi, [eax]
		mov	eax, [ebp+tm]
		mov	eax, [eax+4]
		mov	[ebp+var_BC], eax
		mov	eax, [ebp+tm]
		mov	ecx, [eax+8]
		mov	[ebp+var_C0], ecx
		mov	eax, [ebp+tm]
		mov	ebx, [eax+0Ch]
		mov	[ebp+var_C4], ebx
		mov	eax, [ebp+tm]
		mov	eax, [eax+10h]
		lea	edx, [eax+1]
		mov	[ebp+var_C8], edx
		mov	eax, [ebp+tm]
		mov	eax, [eax+14h]
		add	eax, 76Ch
		mov	[ebp+var_CC], eax
		mov	eax, ds:optind
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		mov	ebx, [eax]
		sub	esp, 0Ch
		push	offset aWarningTouchSI ; "warning: `touch %s' is obsolete; use `t"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	esi
		push	[ebp+var_BC]
		push	[ebp+var_C0]
		push	[ebp+var_C4]
		push	[ebp+var_C8]
		push	[ebp+var_CC]
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 30h

loc_8000CD0:				; CODE XREF: main+644j
		mov	eax, ds:optind
		add	eax, 1
		mov	ds:optind, eax

loc_8000CDD:				; CODE XREF: main+5B0j	main+5C4j ...
		movzx	eax, [ebp+date_set]
		xor	eax, 1
		test	al, al
		jz	short loc_8000D12
		mov	eax, ds:change_times
		cmp	eax, 3
		jnz	short loc_8000CFE
		mov	ds:amtime_now, 1
		jmp	short loc_8000D12
; ---------------------------------------------------------------------------

loc_8000CFE:				; CODE XREF: main+734j
		mov	ds:dword_8000DC0, 3FFFFFFFh
		mov	eax, ds:dword_8000DC0
		mov	ds:now.tv_nsec,	eax

loc_8000D12:				; CODE XREF: main+72Aj	main+73Dj
		mov	eax, ds:optind
		cmp	eax, [edi]
		jnz	short loc_8000D8B
		sub	esp, 0Ch
		push	offset aMissingFileOpe ; "missing file operand"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8000D45:				; CODE XREF: main+7D3j
		mov	eax, ds:optind
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax		; file
		call	touch
		add	esp, 10h
		movzx	edx, [ebp+ok]
		movzx	eax, al
		and	eax, edx
		test	eax, eax
		setnz	al
		mov	[ebp+ok], al
		mov	eax, ds:optind
		add	eax, 1
		mov	ds:optind, eax

loc_8000D8B:				; CODE XREF: main+75Aj
		mov	eax, ds:optind
		cmp	eax, [edi]
		jl	short loc_8000D45
		cmp	[ebp+ok], 0
		jz	short loc_8000DA4
		mov	eax, 0
		jmp	short loc_8000DA9
; ---------------------------------------------------------------------------

loc_8000DA4:				; CODE XREF: main+7DCj
		mov	eax, 1

loc_8000DA9:				; CODE XREF: main+7E3j
		sub	esp, 0Ch
		push	eax		; status

loc_8000DAD:				; DATA XREF: .eh_frame:080017FCo
					; .eh_frame:08001820o ...
		call	exit
main		endp

_text		ends

; ===========================================================================

; Segment type:	Zero-length
; Segment permissions: Read/Write
_data		segment	byte public 'DATA' use32
_data		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
		assume cs:_bss
		;org 8000DB4h
		assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing
; int change_times
change_times	dd ?			; DATA XREF: touch:loc_800024Fr
					; touch+B1r ...
; _Bool	no_create
no_create	db ?			; DATA XREF: touch:loc_80001E5r
					; touch+1CDr ...
; _Bool	use_ref
use_ref		db ?			; DATA XREF: main+AAw main+B1r ...
; _Bool	no_dereference
no_dereference	db ?			; DATA XREF: touch+4Br
					; touch:loc_80002AEr ...
; _Bool	amtime_now
amtime_now	db ?			; DATA XREF: touch:loc_800029Cr
					; main+736w
; time_t newtime
newtime		dd ?			; DATA XREF: touch+16o	main+1E2o ...
dword_8000DC0	dd ?			; DATA XREF: touch+BBw
					; main:loc_80007E6w ...
; timespec now
now		timespec <?>		; DATA XREF: main+23Cw	main+459w ...
; char *ref_file
ref_file	dd ?			; DATA XREF: main+1CDw	main+397r ...
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment '32byte' can not be represented in assembly
_rodata		segment	para public 'CONST' use32
		assume cs:_rodata
		;org 8000DE0h
; char msgid[]
msgid		db 0Ah			; DATA XREF: emit_ancillary_info+1Do
		db 'Report %s bugs to %s',0Ah,0
aBugCoreutils@g	db 'bug-coreutils@gnu.org',0 ; DATA XREF: emit_ancillary_info+2Do
		align 10h
; char aSHomePageHttpW[]
aSHomePageHttpW	db '%s home page: <http://www.gnu.org/software/%s/>',0Ah,0
					; DATA XREF: emit_ancillary_info+3Fo
; char domainname[]
domainname	db 'coreutils',0        ; DATA XREF: emit_ancillary_info+4Fo
					; main+73o ...
aGnuCoreutils	db 'GNU coreutils',0    ; DATA XREF: emit_ancillary_info+54o
					; main+2C5o
		align 4
; char aGeneralHelpUsi[]
aGeneralHelpUsi	db 'General help using GNU software: <http://www.gnu.org/gethelp/>',0Ah,0
					; DATA XREF: emit_ancillary_info+6Bo
; char s2[]
s2		db 'en_',0              ; DATA XREF: emit_ancillary_info+A2o
; char aReportSTransla[]
aReportSTransla	db 'Report %s translation bugs to <http://translationproject.org/team'
					; DATA XREF: emit_ancillary_info+CCo
		db '/>',0Ah,0
		align 4
; char aForCompleteDoc[]
aForCompleteDoc	db 'For complete documentation, run: info coreutils ',27h,'%s invocation'
					; DATA XREF: emit_ancillary_info+FCo
		db 27h,0Ah,0
aTime_0		db 'time',0             ; DATA XREF: .rodata:longoptso
aNoCreate	db 'no-create',0        ; DATA XREF: .rodata:longoptso
aDate		db 'date',0             ; DATA XREF: .rodata:longoptso
aFile		db 'file',0             ; DATA XREF: .rodata:longoptso
aReference	db 'reference',0        ; DATA XREF: .rodata:longoptso
aNoDereference	db 'no-dereference',0   ; DATA XREF: .rodata:longoptso
aHelp		db 'help',0             ; DATA XREF: .rodata:longoptso
aVersion	db 'version',0          ; DATA XREF: .rodata:longoptso
		align 20h
; const	option longopts[9]
longopts	option <offset aTime_0,	1, 0, 80h> ; DATA XREF:	main+19Co
					; main+2F6o
		option <offset aNoCreate, 0, 0,	63h> ; "time"
		option <offset aDate, 1, 0, 64h>
		option <offset aFile, 1, 0, 72h>
		option <offset aReference, 1, 0, 72h>
		option <offset aNoDereference, 0, 0, 68h>
		option <offset aHelp, 0, 0, 0FFFFFF7Eh>
		option <offset aVersion, 0, 0, 0FFFFFF7Dh>
		option	<0>
aAtime		db 'atime',0            ; DATA XREF: .rodata:time_argso
aAccess		db 'access',0           ; DATA XREF: .rodata:time_argso
aUse		db 'use',0              ; DATA XREF: .rodata:time_argso
aMtime		db 'mtime',0            ; DATA XREF: .rodata:time_argso
aModify		db 'modify',0           ; DATA XREF: .rodata:time_argso
		align 10h
; const	char *const time_args[6]
time_args	dd offset aAtime, offset aAccess, offset aUse, offset aMtime
					; DATA XREF: main+269o
		dd offset aModify, 0	; "atime"
; const	int time_masks[5]
time_masks	dd 3 dup(1), 2 dup(2)	; DATA XREF: main+264o	main+27Cr
; char aInvalidDateFor[]
aInvalidDateFor	db 'invalid date format %s',0 ; DATA XREF: get_reldate+35o
					; main+20Co
; char asc_8001073[]
asc_8001073	db '-',0                ; DATA XREF: touch+20o
; char file[]
file		db 'touch.c',0          ; DATA XREF: touch+DBo
; char assertion[]
assertion	db 'change_times == CH_ATIME',0 ; DATA XREF: touch+E0o
; char aClosingS[]
aClosingS	db 'closing %s',0       ; DATA XREF: touch+183o
; char aCannotTouchS[]
aCannotTouchS	db 'cannot touch %s',0  ; DATA XREF: touch+20Ao
; char aSettingTimesOf[]
aSettingTimesOf	db 'setting times of %s',0 ; DATA XREF: touch+259o
		align 4
; char aTrySHelpForMor[]
aTrySHelpForMor	db 'Try `%s --help',27h,' for more information.',0Ah,0
					; DATA XREF: usage+16o
		align 10h
; char aUsageSOption__[]
aUsageSOption__	db 'Usage: %s [OPTION]... FILE...',0Ah,0 ; DATA XREF: usage+46o
		align 10h
; char aUpdateTheAcces[]
aUpdateTheAcces	db 'Update the access and modification times of each FILE to the curr'
					; DATA XREF: usage+69o
		db 'ent time.',0Ah
		db 0Ah
		db 'A FILE argument that does not exist is created empty, unless -c o'
		db 'r -h',0Ah
		db 'is supplied.',0Ah
		db 0Ah
		db 'A FILE argument string of - is handled specially and causes touch'
		db ' to',0Ah
		db 'change the times of the file associated with standard output.',0Ah
		db 0Ah,0
		align 4
; char aMandatoryArgum[]
aMandatoryArgum	db 'Mandatory arguments to long options are mandatory for short optio'
					; DATA XREF: usage+8Co
		db 'ns too.',0Ah,0
		align 4
; char aAChangeOnlyThe[]
aAChangeOnlyThe	db '  -a                     change only the access time',0Ah
					; DATA XREF: usage+AFo
		db '  -c, --no-create        do not create any files',0Ah
		db '  -d, --date=STRING      parse STRING and use it instead of curre'
		db 'nt time',0Ah
		db '  -f                     (ignored)',0Ah,0
		align 4
; char aHNoDereference[]
aHNoDereference	db '  -h, --no-dereference   affect each symbolic link instead of any'
					; DATA XREF: usage+D2o
		db ' referenced',0Ah
		db '                         file (useful only on systems that can ch'
		db 'ange the',0Ah
		db '                         timestamps of a symlink)',0Ah
		db '  -m                     change only the modification time',0Ah,0
		align 10h
; char aRReferenceFile[]
aRReferenceFile	db '  -r, --reference=FILE   use this file',27h,'s times instead of curr'
					; DATA XREF: usage+F5o
		db 'ent time',0Ah
		db '  -t STAMP               use [[CC]YY]MMDDhhmm[.ss] instead of cur'
		db 'rent time',0Ah
		db '  --time=WORD            change the specified time:',0Ah
		db '                           WORD is access, atime, or use: equival'
		db 'ent to -a',0Ah
		db '                           WORD is modify or mtime: equivalent to'
		db ' -m',0Ah,0
		align 4
; char aHelpDisplayThi[]
aHelpDisplayThi	db '      --help     display this help and exit',0Ah,0
					; DATA XREF: usage+118o
		align 4
; char aVersionOutputV[]
aVersionOutputV	db '      --version  output version information and exit',0Ah,0
					; DATA XREF: usage+13Bo
		align 10h
; char aNoteThatTheDAn[]
aNoteThatTheDAn	db 0Ah			; DATA XREF: usage+15Eo
		db 'Note that the -d and -t options accept different time-date format'
		db 's.',0Ah,0
; char locale
locale		db 0			; DATA XREF: main+5Co
; char dirname[]
dirname		db '/usr/local/share/locale',0 ; DATA XREF: main+6Eo
		align 10h
; char aWarningTheSOpt[]
aWarningTheSOpt	db 'warning: the --%s option is obsolete; use --reference',0
					; DATA XREF: main+1A6o
aTime		db '--time',0           ; DATA XREF: main+26Fo
aRandySmith	db 'Randy Smith',0      ; DATA XREF: main+2ABo
aDavidMackenzie	db 'David MacKenzie',0  ; DATA XREF: main+2B0o
aJimKingdon	db 'Jim Kingdon',0      ; DATA XREF: main+2B5o
aArnoldRobbins	db 'Arnold Robbins',0   ; DATA XREF: main+2BAo
aPaulRubin	db 'Paul Rubin',0       ; DATA XREF: main+2BFo
aTouch		db 'touch',0            ; DATA XREF: main+2CAo
; char shortopts[]
shortopts	db 'acd:fhmr:t:',0      ; DATA XREF: main+2FBo
		align 4
; char aCannotSpecifyT[]
aCannotSpecifyT	db 'cannot specify times from more than one source',0 ; DATA XREF: main+356o
		align 4
; char aFailedToGetAtt[]
aFailedToGetAtt	db 'failed to get attributes of %s',0 ; DATA XREF: main+3E7o
; char name[]
name		db 'POSIXLY_CORRECT',0  ; DATA XREF: main+635o
		align 4
; char aWarningTouchSI[]
aWarningTouchSI	db 'warning: `touch %s',27h,' is obsolete; use `touch -t %04ld%02d%02d%0'
					; DATA XREF: main+6D4o
		db '2d%02d.%02d',27h,0
; char aMissingFileOpe[]
aMissingFileOpe	db 'missing file operand',0 ; DATA XREF: main+75Fo
; Function-local static	variable
; const	char _PRETTY_FUNCTION___5199[6]
__PRETTY_FUNCTION___5199 db 'touch',0   ; DATA XREF: touch+D1o
_rodata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_eh_frame	segment	dword public 'CONST' use32
		assume cs:_eh_frame
		;org 80017DCh
		dd 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 20h, 1Ch
		dd offset loc_8000DAD-80025A9h
		dd 11Ch, 80E4100h, 0D420285h, 3834405h,	0C5011403h, 4040CC3h
		dd 1Ch,	40h
		dd offset loc_8000DAD-80024B1h
		dd 1Bh,	80E4100h, 0D420285h, 0CC55505h,	404h, 1Ch, 60h
		dd offset loc_8000DAD-80024B6h
		dd 1Bh,	80E4100h, 0D420285h, 0CC55505h,	404h, 20h, 80h
		dd offset loc_8000DAD-80024BBh
		dd 56h,	80E4100h, 0D420285h, 3834405h, 0C3C54E02h, 4040Ch
		dd 28h,	0A4h
		dd offset loc_8000DAD-8002489h
		dd 28Fh, 80E4100h, 0D420285h, 3864505h,	84030483h, 0C641C302h
		dd 40CC541h, 4,	18h, 0D0h
		dd offset loc_8000DAD-8002226h
		dd 188h, 80E4100h, 0D420285h, 3834405h,	2Ch, 0ECh
		dd offset loc_8000DAD-80020BAh
		dd 7F3h, 10C4400h, 5104700h, 46007502h,	7075030Fh, 2071006h
		dd 6107C75h, 10787502h,	74750203h
_eh_frame	ends

; ===========================================================================

; Segment type:	Externs
; extern
		extrn program_name:dword ; DATA	XREF: emit_ancillary_info+7r
					; emit_ancillary_info+B6r ...
		extrn last_component:near ; CODE XREF: emit_ancillary_info+10p
					; emit_ancillary_info+BFp ...
; char *gettext(const char *msgid)
		extrn gettext:near	; CODE XREF: emit_ancillary_info+22p
					; emit_ancillary_info+44p ...
; int printf(const char	*format, ...)
		extrn printf:near	; CODE XREF: emit_ancillary_info+34p
					; emit_ancillary_info+5Ap ...
; struct _IO_FILE *stdout
		extrn stdout:dword	; DATA XREF: emit_ancillary_info+62r
					; usage+60r ...
		extrn fputs_unlocked:near ; CODE XREF: emit_ancillary_info+7Dp
					; usage+7Bp ...
; char *setlocale(int category,	const char *locale)
		extrn setlocale:near	; CODE XREF: emit_ancillary_info+8Cp
					; main+63p
; int strncmp(const char *s1, const char *s2, size_t n)
		extrn strncmp:near	; CODE XREF: emit_ancillary_info+AAp
		extrn get_date:near	; CODE XREF: get_reldate+13p
		extrn quote:near	; CODE XREF: get_reldate+28p
					; touch+176p ...
; void error(int status, int errnum, const char	*format, ...)
		extrn error:near	; CODE XREF: get_reldate+48p
					; touch+19Ep ...
; int strcmp(const char	*s1, const char	*s2)
		extrn strcmp:near	; CODE XREF: touch+28p
		extrn fd_reopen:near	; CODE XREF: touch+68p
; int *_errno_location(void)
		extrn __errno_location:near ; CODE XREF: touch+79p touch+85p ...
; void _assert_fail(const char *assertion, const char *file, unsigned int line,	const char *function)
		extrn __assert_fail:near ; CODE	XREF: touch+E5p
		extrn lutimens:near	; CODE XREF: touch+120p
		extrn gl_futimens:near	; CODE XREF: touch+149p
; int close(int	fd)
		extrn close:near	; CODE XREF: touch+164p
; struct _IO_FILE *stderr
		extrn stderr:dword	; DATA XREF: usage+25r
; int fprintf(FILE *stream, const char *format,	...)
		extrn fprintf:near	; CODE XREF: usage+30p
; void exit(int	status)
		extrn exit:near		; CODE XREF: usage+183p main+2DDp ...
		extrn set_program_name:near ; CODE XREF: main+51p
; char *bindtextdomain(const char *domainname, const char *dirname)
		extrn bindtextdomain:near ; CODE XREF: main+78p
; char *textdomain(const char *domainname)
		extrn textdomain:near	; CODE XREF: main+88p
; void close_stdout(void)
		extrn close_stdout	; DATA XREF: main+93o
; int atexit(void (*func)(void))
		extrn atexit:near	; CODE XREF: main+98p
; char *optarg
		extrn optarg:dword	; DATA XREF: main:loc_8000719r
					; main+1C8r ...
		extrn posixtime:near	; CODE XREF: main+1E7p	main+5FBp
		extrn argmatch_die:dword ; DATA	XREF: main:loc_8000812r
		extrn __xargmatch_internal:near	; CODE XREF: main+274p
		extrn Version:dword	; DATA XREF: main:loc_800085Ar
		extrn version_etc:near	; CODE XREF: main+2D0p
; int getopt_long(int argc, char *const	*argv, const char *shortopts, const struct option *longopts, int *longind)
		extrn getopt_long:near	; CODE XREF: main+308p
		extrn lstat64:near	; CODE XREF: main+3A4p
		extrn stat64:near	; CODE XREF: main+3C0p
		extrn gettime:near	; CODE XREF: main+4E6p
; int optind
		extrn optind:dword	; DATA XREF: main+5B6r	main+5DAr ...
		extrn posix2_version:near ; CODE XREF: main+5CAp
; char *getenv(const char *name)
		extrn getenv:near	; CODE XREF: main+63Ap
; struct tm *localtime(const time_t *timer)
		extrn localtime:near	; CODE XREF: main+652p


		end
