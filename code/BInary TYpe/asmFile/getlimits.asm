;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B611-7234-BB			    |
; |		Doskey Lee, Kingsoft Internet Security Software		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	987B65588583877DA3437FED820A1BAB
; Input	CRC32 :	FA5B0659

; File Name   :	D:\coreutils-o\getlimits.o
; Format      :	ELF for	Intel 386 (Relocatable)
;
; Source File :	'getlimits.c'

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	byte public 'CODE' use32
		assume cs:_text
		;org 8000000h
		assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl initialize_exit_failure(int status)
initialize_exit_failure	proc near	; CODE XREF: main+72p

status		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		cmp	[ebp+status], 1
		jz	short loc_8000011
		mov	eax, [ebp+status]
		mov	ds:exit_failure, eax

loc_8000011:				; CODE XREF: initialize_exit_failure+7j
		nop
		pop	ebp
		retn
initialize_exit_failure	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void emit_ancillary_info()
emit_ancillary_info proc near		; CODE XREF: usage+C9p

lc_messages	= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset msgid	; "\nReport %s bugs to %s\n"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset aBugCoreutils@g ; "bug-coreutils@gnu.org"
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	offset aSHomePageHttpW ; "%s home page:	<http://www.gnu.org/softw"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset domainname ; "coreutils"
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aGeneralHelpUsi ; "General help using GNU software: <http:"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		sub	esp, 8
		push	0		; locale
		push	5		; category
		call	setlocale
		add	esp, 10h
		mov	[ebp+lc_messages], eax
		cmp	[ebp+lc_messages], 0
		jz	short loc_80000FA
		sub	esp, 4
		push	3		; n
		push	offset s2	; "en_"
		push	[ebp+lc_messages] ; s1
		call	strncmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_80000FA
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aReportSTransla ; "Report %s translation	bugs to	<http://t"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h

loc_80000FA:				; CODE XREF: emit_ancillary_info+9Bj
					; emit_ancillary_info+B4j
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aForCompleteDoc ; "For complete documentation, run: info	c"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		nop
		mov	ebx, [ebp+var_4]
		leave
		retn
emit_ancillary_info endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; void __cdecl usage(int status)
		public usage
usage		proc near		; DATA XREF: main+A2o

status		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 4
		cmp	[ebp+status], 0
		jz	short loc_800016D
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, ds:stderr
		sub	esp, 4
		push	ebx
		push	edx		; format
		push	eax		; stream
		call	fprintf
		add	esp, 10h
		jmp	loc_80001FE
; ---------------------------------------------------------------------------

loc_800016D:				; CODE XREF: usage+Bj
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aUsageS	; "Usage: %s\n"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aOutputPlatform ; "Output platform dependent limits in a	f"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aHelpDisplayThi ; "	--help	   display this	help and "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aVersionOutputV ; "	--version  output version informa"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		call	emit_ancillary_info

loc_80001FE:				; CODE XREF: usage+38j
		sub	esp, 0Ch
		push	[ebp+status]	; status
		call	exit
usage		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; char *__cdecl	decimal_ascii_add(const	char *str1, const char *str2)
decimal_ascii_add proc near		; CODE XREF: main+FDp main+163p ...

c1		= byte ptr -2Bh
c2		= byte ptr -2Ah
t1		= byte ptr -29h
rp		= dword	ptr -28h
d1		= dword	ptr -24h
d2		= dword	ptr -20h
carry		= dword	ptr -1Ch
len1		= dword	ptr -18h
len2		= dword	ptr -14h
rlen		= dword	ptr -10h
result		= dword	ptr -0Ch
str1		= dword	ptr  8
str2		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		sub	esp, 0Ch
		push	[ebp+str1]	; s
		call	strlen
		add	esp, 10h
		mov	[ebp+len1], eax
		sub	esp, 0Ch
		push	[ebp+str2]	; s
		call	strlen
		add	esp, 10h
		mov	[ebp+len2], eax
		mov	eax, [ebp+len1]
		cmp	[ebp+len2], eax
		cmovge	eax, [ebp+len2]
		add	eax, 3
		mov	[ebp+rlen], eax
		mov	eax, [ebp+rlen]
		sub	esp, 0Ch
		push	eax		; size_t
		call	xmalloc
		add	esp, 10h
		mov	[ebp+result], eax
		mov	eax, [ebp+rlen]
		lea	edx, [eax-1]
		mov	eax, [ebp+result]
		add	eax, edx
		mov	[ebp+rp], eax
		mov	eax, [ebp+len1]
		lea	edx, [eax-1]
		mov	eax, [ebp+str1]
		add	eax, edx
		mov	[ebp+d1], eax
		mov	eax, [ebp+len2]
		lea	edx, [eax-1]
		mov	eax, [ebp+str2]
		add	eax, edx
		mov	[ebp+d2], eax
		mov	[ebp+carry], 0
		mov	eax, [ebp+rp]
		mov	byte ptr [eax],	0

loc_800028A:				; CODE XREF: decimal_ascii_add+16Dj
		mov	eax, [ebp+d1]
		cmp	eax, [ebp+str1]
		jb	short loc_80002B1
		mov	eax, [ebp+d1]
		movzx	eax, byte ptr [eax]
		cmp	al, 2Dh
		jz	short loc_80002AA
		mov	eax, [ebp+d1]
		lea	edx, [eax-1]
		mov	[ebp+d1], edx
		movzx	eax, byte ptr [eax]
		jmp	short loc_80002B6
; ---------------------------------------------------------------------------

loc_80002AA:				; CODE XREF: decimal_ascii_add+91j
		mov	eax, 20h
		jmp	short loc_80002B6
; ---------------------------------------------------------------------------

loc_80002B1:				; CODE XREF: decimal_ascii_add+87j
		mov	eax, 20h

loc_80002B6:				; CODE XREF: decimal_ascii_add+9Fj
					; decimal_ascii_add+A6j
		mov	[ebp+c1], al
		mov	eax, [ebp+d2]
		cmp	eax, [ebp+str2]
		jb	short loc_80002E0
		mov	eax, [ebp+d2]
		movzx	eax, byte ptr [eax]
		cmp	al, 2Dh
		jz	short loc_80002D9
		mov	eax, [ebp+d2]
		lea	edx, [eax-1]
		mov	[ebp+d2], edx
		movzx	eax, byte ptr [eax]
		jmp	short loc_80002E5
; ---------------------------------------------------------------------------

loc_80002D9:				; CODE XREF: decimal_ascii_add+C0j
		mov	eax, 20h
		jmp	short loc_80002E5
; ---------------------------------------------------------------------------

loc_80002E0:				; CODE XREF: decimal_ascii_add+B6j
		mov	eax, 20h

loc_80002E5:				; CODE XREF: decimal_ascii_add+CEj
					; decimal_ascii_add+D5j
		mov	[ebp+c2], al
		movzx	edx, [ebp+c1]
		movzx	eax, [ebp+c2]
		add	edx, eax
		mov	eax, [ebp+carry]
		add	eax, edx
		mov	[ebp+t1], al
		movsx	eax, [ebp+c1]
		sub	esp, 0Ch
		push	eax
		call	c_isdigit
		add	esp, 10h
		xor	eax, 1
		test	al, al
		jz	short loc_800032E
		movsx	eax, [ebp+c2]
		sub	esp, 0Ch
		push	eax
		call	c_isdigit
		add	esp, 10h
		xor	eax, 1
		test	al, al
		jz	short loc_800032E
		cmp	[ebp+carry], 0
		jz	short loc_800037B

loc_800032E:				; CODE XREF: decimal_ascii_add+106j
					; decimal_ascii_add+11Dj
		cmp	[ebp+t1], 69h
		jg	short loc_800033A
		cmp	[ebp+t1], 5Ah
		jnz	short loc_8000341

loc_800033A:				; CODE XREF: decimal_ascii_add+129j
		mov	eax, 1
		jmp	short loc_8000346
; ---------------------------------------------------------------------------

loc_8000341:				; CODE XREF: decimal_ascii_add+12Fj
		mov	eax, 0

loc_8000346:				; CODE XREF: decimal_ascii_add+136j
		mov	[ebp+carry], eax
		mov	eax, [ebp+carry]
		mov	edx, eax
		mov	eax, edx
		add	eax, eax
		add	eax, edx
		add	eax, eax
		mov	edx, eax
		movzx	eax, [ebp+t1]
		add	eax, edx
		mov	[ebp+t1], al
		sub	[ebp+rp], 1
		movzx	eax, [ebp+t1]
		and	eax, 0Fh
		or	eax, 30h
		mov	edx, eax
		mov	eax, [ebp+rp]
		mov	[eax], dl
		jmp	loc_800028A
; ---------------------------------------------------------------------------

loc_800037B:				; CODE XREF: decimal_ascii_add+123j
		nop
		mov	eax, [ebp+d1]
		cmp	eax, [ebp+str1]
		jb	short loc_800038E
		mov	eax, [ebp+d1]
		movzx	eax, byte ptr [eax]
		cmp	al, 2Dh
		jz	short loc_80003A0

loc_800038E:				; CODE XREF: decimal_ascii_add+179j
		mov	eax, [ebp+d2]
		cmp	eax, [ebp+str2]
		jb	short loc_80003AA
		mov	eax, [ebp+d2]
		movzx	eax, byte ptr [eax]
		cmp	al, 2Dh
		jnz	short loc_80003AA

loc_80003A0:				; CODE XREF: decimal_ascii_add+183j
		sub	[ebp+rp], 1
		mov	eax, [ebp+rp]
		mov	byte ptr [eax],	2Dh

loc_80003AA:				; CODE XREF: decimal_ascii_add+18Bj
					; decimal_ascii_add+195j
		mov	eax, [ebp+rp]
		cmp	eax, [ebp+result]
		jz	short loc_80003D1
		mov	edx, [ebp+rp]
		mov	eax, [ebp+result]
		sub	edx, eax
		mov	eax, [ebp+rlen]
		sub	eax, edx
		sub	esp, 4
		push	eax		; n
		push	[ebp+rp]	; src
		push	[ebp+result]	; dest
		call	memmove
		add	esp, 10h

loc_80003D1:				; CODE XREF: decimal_ascii_add+1A7j
		mov	eax, [ebp+result]
		leave
		retn
decimal_ascii_add endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public main
main		proc near

argv		= dword	ptr -5Ch
oflow		= dword	ptr -50h
limit		= byte ptr -4Ch
var_C		= dword	ptr -0Ch
argc		= dword	ptr  0Ch
envp		= dword	ptr  14h

		lea	ecx, [esp+4]
		and	esp, 0FFFFFFF0h
		push	dword ptr [ecx-4]
		push	ebp
		mov	ebp, esp
		push	ebx
		push	ecx
		sub	esp, 60h
		mov	ebx, ecx
		mov	eax, [ebx+4]
		mov	[ebp+argv], eax
		mov	eax, large gs:14h
		mov	[ebp+var_C], eax
		xor	eax, eax
		mov	eax, [ebp+argv]
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	set_program_name
		add	esp, 10h
		sub	esp, 8
		push	offset locale	; locale
		push	6		; category
		call	setlocale
		add	esp, 10h
		sub	esp, 8
		push	offset dirname	; "/usr/local/share/locale"
		push	offset domainname ; "coreutils"
		call	bindtextdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset domainname ; "coreutils"
		call	textdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	1		; status
		call	initialize_exit_failure
		add	esp, 10h
		sub	esp, 0Ch
		push	offset close_stdout ; func
		call	atexit
		add	esp, 10h
		sub	esp, 8
		push	offset aPBdraigBrady ; "Pádraig Brady"
		push	offset aPadraigBrady ; "Padraig	Brady"
		call	proper_name_utf8
		add	esp, 10h
		push	0
		push	eax
		push	offset usage
		push	offset a8_4	; "8.4"
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	offset aGetlimits ; "getlimits"
		push	[ebp+argv]
		push	dword ptr [ebx]
		call	parse_long_options
		add	esp, 20h
		sub	esp, 0Ch
		push	0
		push	7Fh
		push	offset format	; "%llu"
		push	40h		; maxlen
		lea	eax, [ebp+limit]
		push	eax		; s
		call	snprintf
		add	esp, 20h
		sub	esp, 8
		lea	eax, [ebp+limit]
		push	eax
		push	offset aChar_maxS ; "CHAR_MAX=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 8
		push	offset str2	; "1"
		lea	eax, [ebp+limit]
		push	eax		; str1
		call	decimal_ascii_add
		add	esp, 10h
		mov	[ebp+oflow], eax
		sub	esp, 8
		push	[ebp+oflow]
		push	offset aChar_oflowS ; "CHAR_OFLOW=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+oflow]	; ptr
		call	free
		add	esp, 10h
		sub	esp, 0Ch
		push	0FFFFFFFFh
		push	0FFFFFF80h
		push	offset aLld	; "%lld"
		push	40h		; maxlen
		lea	eax, [ebp+limit]
		push	eax		; s
		call	snprintf
		add	esp, 20h
		sub	esp, 8
		lea	eax, [ebp+limit]
		push	eax
		push	offset aChar_minS ; "CHAR_MIN=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 8
		push	offset a1_0	; "-1"
		lea	eax, [ebp+limit]
		push	eax		; str1
		call	decimal_ascii_add
		add	esp, 10h
		mov	[ebp+oflow], eax
		sub	esp, 8
		push	[ebp+oflow]
		push	offset aChar_uflowS ; "CHAR_UFLOW=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+oflow]	; ptr
		call	free
		add	esp, 10h
		sub	esp, 0Ch
		push	0
		push	7Fh
		push	offset format	; "%llu"
		push	40h		; maxlen
		lea	eax, [ebp+limit]
		push	eax		; s
		call	snprintf
		add	esp, 20h
		sub	esp, 8
		lea	eax, [ebp+limit]
		push	eax
		push	offset aSchar_maxS ; "SCHAR_MAX=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 8
		push	offset str2	; "1"
		lea	eax, [ebp+limit]
		push	eax		; str1
		call	decimal_ascii_add
		add	esp, 10h
		mov	[ebp+oflow], eax
		sub	esp, 8
		push	[ebp+oflow]
		push	offset aSchar_oflowS ; "SCHAR_OFLOW=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+oflow]	; ptr
		call	free
		add	esp, 10h
		sub	esp, 0Ch
		push	0FFFFFFFFh
		push	0FFFFFF80h
		push	offset aLld	; "%lld"
		push	40h		; maxlen
		lea	eax, [ebp+limit]
		push	eax		; s
		call	snprintf
		add	esp, 20h
		sub	esp, 8
		lea	eax, [ebp+limit]
		push	eax
		push	offset aSchar_minS ; "SCHAR_MIN=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 8
		push	offset a1_0	; "-1"
		lea	eax, [ebp+limit]
		push	eax		; str1
		call	decimal_ascii_add
		add	esp, 10h
		mov	[ebp+oflow], eax
		sub	esp, 8
		push	[ebp+oflow]
		push	offset aSchar_uflowS ; "SCHAR_UFLOW=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+oflow]	; ptr
		call	free
		add	esp, 10h
		sub	esp, 0Ch
		push	0
		push	0FFh
		push	offset format	; "%llu"
		push	40h		; maxlen
		lea	eax, [ebp+limit]
		push	eax		; s
		call	snprintf
		add	esp, 20h
		sub	esp, 8
		lea	eax, [ebp+limit]
		push	eax
		push	offset aUchar_maxS ; "UCHAR_MAX=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 8
		push	offset str2	; "1"
		lea	eax, [ebp+limit]
		push	eax		; str1
		call	decimal_ascii_add
		add	esp, 10h
		mov	[ebp+oflow], eax
		sub	esp, 8
		push	[ebp+oflow]
		push	offset aUchar_oflowS ; "UCHAR_OFLOW=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+oflow]	; ptr
		call	free
		add	esp, 10h
		sub	esp, 0Ch
		push	0
		push	7FFFh
		push	offset format	; "%llu"
		push	40h		; maxlen
		lea	eax, [ebp+limit]
		push	eax		; s
		call	snprintf
		add	esp, 20h
		sub	esp, 8
		lea	eax, [ebp+limit]
		push	eax
		push	offset aShrt_maxS ; "SHRT_MAX=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 8
		push	offset str2	; "1"
		lea	eax, [ebp+limit]
		push	eax		; str1
		call	decimal_ascii_add
		add	esp, 10h
		mov	[ebp+oflow], eax
		sub	esp, 8
		push	[ebp+oflow]
		push	offset aShrt_oflowS ; "SHRT_OFLOW=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+oflow]	; ptr
		call	free
		add	esp, 10h
		sub	esp, 0Ch
		push	0FFFFFFFFh
		push	0FFFF8000h
		push	offset aLld	; "%lld"
		push	40h		; maxlen
		lea	eax, [ebp+limit]
		push	eax		; s
		call	snprintf
		add	esp, 20h
		sub	esp, 8
		lea	eax, [ebp+limit]
		push	eax
		push	offset aShrt_minS ; "SHRT_MIN=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 8
		push	offset a1_0	; "-1"
		lea	eax, [ebp+limit]
		push	eax		; str1
		call	decimal_ascii_add
		add	esp, 10h
		mov	[ebp+oflow], eax
		sub	esp, 8
		push	[ebp+oflow]
		push	offset aShrt_uflowS ; "SHRT_UFLOW=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+oflow]	; ptr
		call	free
		add	esp, 10h
		sub	esp, 0Ch
		push	0
		push	7FFFFFFFh
		push	offset format	; "%llu"
		push	40h		; maxlen
		lea	eax, [ebp+limit]
		push	eax		; s
		call	snprintf
		add	esp, 20h
		sub	esp, 8
		lea	eax, [ebp+limit]
		push	eax
		push	offset aInt_maxS ; "INT_MAX=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 8
		push	offset str2	; "1"
		lea	eax, [ebp+limit]
		push	eax		; str1
		call	decimal_ascii_add
		add	esp, 10h
		mov	[ebp+oflow], eax
		sub	esp, 8
		push	[ebp+oflow]
		push	offset aInt_oflowS ; "INT_OFLOW=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+oflow]	; ptr
		call	free
		add	esp, 10h
		sub	esp, 0Ch
		push	0FFFFFFFFh
		push	80000000h
		push	offset aLld	; "%lld"
		push	40h		; maxlen
		lea	eax, [ebp+limit]
		push	eax		; s
		call	snprintf
		add	esp, 20h
		sub	esp, 8
		lea	eax, [ebp+limit]
		push	eax
		push	offset aInt_minS ; "INT_MIN=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 8
		push	offset a1_0	; "-1"
		lea	eax, [ebp+limit]
		push	eax		; str1
		call	decimal_ascii_add
		add	esp, 10h
		mov	[ebp+oflow], eax
		sub	esp, 8
		push	[ebp+oflow]
		push	offset aInt_uflowS ; "INT_UFLOW=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+oflow]	; ptr
		call	free
		add	esp, 10h
		sub	esp, 0Ch
		push	0
		push	0FFFFFFFFh
		push	offset format	; "%llu"
		push	40h		; maxlen
		lea	eax, [ebp+limit]
		push	eax		; s
		call	snprintf
		add	esp, 20h
		sub	esp, 8
		lea	eax, [ebp+limit]
		push	eax
		push	offset aUint_maxS ; "UINT_MAX=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 8
		push	offset str2	; "1"
		lea	eax, [ebp+limit]
		push	eax		; str1
		call	decimal_ascii_add
		add	esp, 10h
		mov	[ebp+oflow], eax
		sub	esp, 8
		push	[ebp+oflow]
		push	offset aUint_oflowS ; "UINT_OFLOW=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+oflow]	; ptr
		call	free
		add	esp, 10h
		sub	esp, 0Ch
		push	0
		push	7FFFFFFFh
		push	offset format	; "%llu"
		push	40h		; maxlen
		lea	eax, [ebp+limit]
		push	eax		; s
		call	snprintf
		add	esp, 20h
		sub	esp, 8
		lea	eax, [ebp+limit]
		push	eax
		push	offset aLong_maxS ; "LONG_MAX=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 8
		push	offset str2	; "1"
		lea	eax, [ebp+limit]
		push	eax		; str1
		call	decimal_ascii_add
		add	esp, 10h
		mov	[ebp+oflow], eax
		sub	esp, 8
		push	[ebp+oflow]
		push	offset aLong_oflowS ; "LONG_OFLOW=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+oflow]	; ptr
		call	free
		add	esp, 10h
		sub	esp, 0Ch
		push	0FFFFFFFFh
		push	80000000h
		push	offset aLld	; "%lld"
		push	40h		; maxlen
		lea	eax, [ebp+limit]
		push	eax		; s
		call	snprintf
		add	esp, 20h
		sub	esp, 8
		lea	eax, [ebp+limit]
		push	eax
		push	offset aLong_minS ; "LONG_MIN=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 8
		push	offset a1_0	; "-1"
		lea	eax, [ebp+limit]
		push	eax		; str1
		call	decimal_ascii_add
		add	esp, 10h
		mov	[ebp+oflow], eax
		sub	esp, 8
		push	[ebp+oflow]
		push	offset aLong_uflowS ; "LONG_UFLOW=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+oflow]	; ptr
		call	free
		add	esp, 10h
		sub	esp, 0Ch
		push	0
		push	0FFFFFFFFh
		push	offset format	; "%llu"
		push	40h		; maxlen
		lea	eax, [ebp+limit]
		push	eax		; s
		call	snprintf
		add	esp, 20h
		sub	esp, 8
		lea	eax, [ebp+limit]
		push	eax
		push	offset aUlong_maxS ; "ULONG_MAX=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 8
		push	offset str2	; "1"
		lea	eax, [ebp+limit]
		push	eax		; str1
		call	decimal_ascii_add
		add	esp, 10h
		mov	[ebp+oflow], eax
		sub	esp, 8
		push	[ebp+oflow]
		push	offset aUlong_oflowS ; "ULONG_OFLOW=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+oflow]	; ptr
		call	free
		add	esp, 10h
		sub	esp, 0Ch
		push	0
		push	0FFFFFFFFh
		push	offset format	; "%llu"
		push	40h		; maxlen
		lea	eax, [ebp+limit]
		push	eax		; s
		call	snprintf
		add	esp, 20h
		sub	esp, 8
		lea	eax, [ebp+limit]
		push	eax
		push	offset aSize_maxS ; "SIZE_MAX=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 8
		push	offset str2	; "1"
		lea	eax, [ebp+limit]
		push	eax		; str1
		call	decimal_ascii_add
		add	esp, 10h
		mov	[ebp+oflow], eax
		sub	esp, 8
		push	[ebp+oflow]
		push	offset aSize_oflowS ; "SIZE_OFLOW=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+oflow]	; ptr
		call	free
		add	esp, 10h
		sub	esp, 0Ch
		push	0
		push	7FFFFFFFh
		push	offset format	; "%llu"
		push	40h		; maxlen
		lea	eax, [ebp+limit]
		push	eax		; s
		call	snprintf
		add	esp, 20h
		sub	esp, 8
		lea	eax, [ebp+limit]
		push	eax
		push	offset aSsize_maxS ; "SSIZE_MAX=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 8
		push	offset str2	; "1"
		lea	eax, [ebp+limit]
		push	eax		; str1
		call	decimal_ascii_add
		add	esp, 10h
		mov	[ebp+oflow], eax
		sub	esp, 8
		push	[ebp+oflow]
		push	offset aSsize_oflowS ; "SSIZE_OFLOW=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+oflow]	; ptr
		call	free
		add	esp, 10h
		sub	esp, 0Ch
		push	0FFFFFFFFh
		push	80000000h
		push	offset aLld	; "%lld"
		push	40h		; maxlen
		lea	eax, [ebp+limit]
		push	eax		; s
		call	snprintf
		add	esp, 20h
		sub	esp, 8
		lea	eax, [ebp+limit]
		push	eax
		push	offset aSsize_minS ; "SSIZE_MIN=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 8
		push	offset a1_0	; "-1"
		lea	eax, [ebp+limit]
		push	eax		; str1
		call	decimal_ascii_add
		add	esp, 10h
		mov	[ebp+oflow], eax
		sub	esp, 8
		push	[ebp+oflow]
		push	offset aSsize_uflowS ; "SSIZE_UFLOW=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+oflow]	; ptr
		call	free
		add	esp, 10h
		sub	esp, 0Ch
		push	0
		push	7FFFFFFFh
		push	offset format	; "%llu"
		push	40h		; maxlen
		lea	eax, [ebp+limit]
		push	eax		; s
		call	snprintf
		add	esp, 20h
		sub	esp, 8
		lea	eax, [ebp+limit]
		push	eax
		push	offset aTime_t_maxS ; "TIME_T_MAX=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 8
		push	offset str2	; "1"
		lea	eax, [ebp+limit]
		push	eax		; str1
		call	decimal_ascii_add
		add	esp, 10h
		mov	[ebp+oflow], eax
		sub	esp, 8
		push	[ebp+oflow]
		push	offset aTime_t_oflowS ;	"TIME_T_OFLOW=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+oflow]	; ptr
		call	free
		add	esp, 10h
		sub	esp, 0Ch
		push	0FFFFFFFFh
		push	80000000h
		push	offset aLld	; "%lld"
		push	40h		; maxlen
		lea	eax, [ebp+limit]
		push	eax		; s
		call	snprintf
		add	esp, 20h
		sub	esp, 8
		lea	eax, [ebp+limit]
		push	eax
		push	offset aTime_t_minS ; "TIME_T_MIN=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 8
		push	offset a1_0	; "-1"
		lea	eax, [ebp+limit]
		push	eax		; str1
		call	decimal_ascii_add
		add	esp, 10h
		mov	[ebp+oflow], eax
		sub	esp, 8
		push	[ebp+oflow]
		push	offset aTime_t_uflowS ;	"TIME_T_UFLOW=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+oflow]	; ptr
		call	free
		add	esp, 10h
		sub	esp, 0Ch
		push	0
		push	0FFFFFFFFh
		push	offset format	; "%llu"
		push	40h		; maxlen
		lea	eax, [ebp+limit]
		push	eax		; s
		call	snprintf
		add	esp, 20h
		sub	esp, 8
		lea	eax, [ebp+limit]
		push	eax
		push	offset aUid_t_maxS ; "UID_T_MAX=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 8
		push	offset str2	; "1"
		lea	eax, [ebp+limit]
		push	eax		; str1
		call	decimal_ascii_add
		add	esp, 10h
		mov	[ebp+oflow], eax
		sub	esp, 8
		push	[ebp+oflow]
		push	offset aUid_t_oflowS ; "UID_T_OFLOW=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+oflow]	; ptr
		call	free
		add	esp, 10h
		sub	esp, 0Ch
		push	0
		push	0FFFFFFFFh
		push	offset format	; "%llu"
		push	40h		; maxlen
		lea	eax, [ebp+limit]
		push	eax		; s
		call	snprintf
		add	esp, 20h
		sub	esp, 8
		lea	eax, [ebp+limit]
		push	eax
		push	offset aGid_t_maxS ; "GID_T_MAX=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 8
		push	offset str2	; "1"
		lea	eax, [ebp+limit]
		push	eax		; str1
		call	decimal_ascii_add
		add	esp, 10h
		mov	[ebp+oflow], eax
		sub	esp, 8
		push	[ebp+oflow]
		push	offset aGid_t_oflowS ; "GID_T_OFLOW=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+oflow]	; ptr
		call	free
		add	esp, 10h
		sub	esp, 0Ch
		push	0
		push	7FFFFFFFh
		push	offset format	; "%llu"
		push	40h		; maxlen
		lea	eax, [ebp+limit]
		push	eax		; s
		call	snprintf
		add	esp, 20h
		sub	esp, 8
		lea	eax, [ebp+limit]
		push	eax
		push	offset aPid_t_maxS ; "PID_T_MAX=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 8
		push	offset str2	; "1"
		lea	eax, [ebp+limit]
		push	eax		; str1
		call	decimal_ascii_add
		add	esp, 10h
		mov	[ebp+oflow], eax
		sub	esp, 8
		push	[ebp+oflow]
		push	offset aPid_t_oflowS ; "PID_T_OFLOW=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+oflow]	; ptr
		call	free
		add	esp, 10h
		sub	esp, 0Ch
		push	0FFFFFFFFh
		push	80000000h
		push	offset aLld	; "%lld"
		push	40h		; maxlen
		lea	eax, [ebp+limit]
		push	eax		; s
		call	snprintf
		add	esp, 20h
		sub	esp, 8
		lea	eax, [ebp+limit]
		push	eax
		push	offset aPid_t_minS ; "PID_T_MIN=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 8
		push	offset a1_0	; "-1"
		lea	eax, [ebp+limit]
		push	eax		; str1
		call	decimal_ascii_add
		add	esp, 10h
		mov	[ebp+oflow], eax
		sub	esp, 8
		push	[ebp+oflow]
		push	offset aPid_t_uflowS ; "PID_T_UFLOW=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+oflow]	; ptr
		call	free
		add	esp, 10h
		sub	esp, 0Ch
		push	7FFFFFFFh
		push	0FFFFFFFFh
		push	offset format	; "%llu"
		push	40h		; maxlen
		lea	eax, [ebp+limit]
		push	eax		; s
		call	snprintf
		add	esp, 20h
		sub	esp, 8
		lea	eax, [ebp+limit]
		push	eax
		push	offset aOff_t_maxS ; "OFF_T_MAX=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 8
		push	offset str2	; "1"
		lea	eax, [ebp+limit]
		push	eax		; str1
		call	decimal_ascii_add
		add	esp, 10h
		mov	[ebp+oflow], eax
		sub	esp, 8
		push	[ebp+oflow]
		push	offset aOff_t_oflowS ; "OFF_T_OFLOW=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+oflow]	; ptr
		call	free
		add	esp, 10h
		sub	esp, 0Ch
		push	80000000h
		push	0
		push	offset aLld	; "%lld"
		push	40h		; maxlen
		lea	eax, [ebp+limit]
		push	eax		; s
		call	snprintf
		add	esp, 20h
		sub	esp, 8
		lea	eax, [ebp+limit]
		push	eax
		push	offset aOff_t_minS ; "OFF_T_MIN=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 8
		push	offset a1_0	; "-1"
		lea	eax, [ebp+limit]
		push	eax		; str1
		call	decimal_ascii_add
		add	esp, 10h
		mov	[ebp+oflow], eax
		sub	esp, 8
		push	[ebp+oflow]
		push	offset aOff_t_uflowS ; "OFF_T_UFLOW=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+oflow]	; ptr
		call	free
		add	esp, 10h
		sub	esp, 0Ch
		push	7FFFFFFFh
		push	0FFFFFFFFh
		push	offset format	; "%llu"
		push	40h		; maxlen
		lea	eax, [ebp+limit]
		push	eax		; s
		call	snprintf
		add	esp, 20h
		sub	esp, 8
		lea	eax, [ebp+limit]
		push	eax
		push	offset aIntmax_maxS ; "INTMAX_MAX=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 8
		push	offset str2	; "1"
		lea	eax, [ebp+limit]
		push	eax		; str1
		call	decimal_ascii_add
		add	esp, 10h
		mov	[ebp+oflow], eax
		sub	esp, 8
		push	[ebp+oflow]
		push	offset aIntmax_oflowS ;	"INTMAX_OFLOW=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+oflow]	; ptr
		call	free
		add	esp, 10h
		sub	esp, 0Ch
		push	80000000h
		push	0
		push	offset aLld	; "%lld"
		push	40h		; maxlen
		lea	eax, [ebp+limit]
		push	eax		; s
		call	snprintf
		add	esp, 20h
		sub	esp, 8
		lea	eax, [ebp+limit]
		push	eax
		push	offset aIntmax_minS ; "INTMAX_MIN=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 8
		push	offset a1_0	; "-1"
		lea	eax, [ebp+limit]
		push	eax		; str1
		call	decimal_ascii_add
		add	esp, 10h
		mov	[ebp+oflow], eax
		sub	esp, 8
		push	[ebp+oflow]
		push	offset aIntmax_uflowS ;	"INTMAX_UFLOW=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+oflow]	; ptr
		call	free
		add	esp, 10h
		sub	esp, 0Ch
		push	0FFFFFFFFh
		push	0FFFFFFFFh
		push	offset format	; "%llu"
		push	40h		; maxlen
		lea	eax, [ebp+limit]
		push	eax		; s
		call	snprintf
		add	esp, 20h
		sub	esp, 8
		lea	eax, [ebp+limit]
		push	eax
		push	offset aUintmax_maxS ; "UINTMAX_MAX=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 8
		push	offset str2	; "1"
		lea	eax, [ebp+limit]
		push	eax		; str1
		call	decimal_ascii_add
		add	esp, 10h
		mov	[ebp+oflow], eax
		sub	esp, 8
		push	[ebp+oflow]
		push	offset aUintmax_oflowS ; "UINTMAX_OFLOW=%s\n"
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+oflow]	; ptr
		call	free
		add	esp, 10h
		mov	eax, 0
		mov	edx, [ebp+var_C]
		xor	edx, large gs:14h
		jz	short loc_8000FA4
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_8000FA4:				; CODE XREF: main+BC7j
		lea	esp, [ebp-8]
		pop	ecx
		pop	ebx
		pop	ebp
		lea	esp, [ecx-4]

locret_8000FAD:				; DATA XREF: .eh_frame:08001574o
					; .eh_frame:08001594o ...
		retn
main		endp

_text		ends

; ===========================================================================

; Segment type:	Zero-length
; Segment permissions: Read/Write
_data		segment	byte public 'DATA' use32
_data		ends

; ===========================================================================

; Segment type:	Zero-length
; Segment permissions: Read/Write
_bss		segment	byte public 'BSS' use32
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rodata		segment	dword public 'CONST' use32
		assume cs:_rodata
		;org 8000FB0h
; char msgid[]
msgid		db 0Ah			; DATA XREF: emit_ancillary_info+1Do
		db 'Report %s bugs to %s',0Ah,0
aBugCoreutils@g	db 'bug-coreutils@gnu.org',0 ; DATA XREF: emit_ancillary_info+2Do
		align 10h
; char aSHomePageHttpW[]
aSHomePageHttpW	db '%s home page: <http://www.gnu.org/software/%s/>',0Ah,0
					; DATA XREF: emit_ancillary_info+3Fo
; char domainname[]
domainname	db 'coreutils',0        ; DATA XREF: emit_ancillary_info+4Fo
					; main+50o ...
aGnuCoreutils	db 'GNU coreutils',0    ; DATA XREF: emit_ancillary_info+54o
					; main+ACo
		align 4
; char aGeneralHelpUsi[]
aGeneralHelpUsi	db 'General help using GNU software: <http://www.gnu.org/gethelp/>',0Ah,0
					; DATA XREF: emit_ancillary_info+6Bo
; char s2[]
s2		db 'en_',0              ; DATA XREF: emit_ancillary_info+A2o
; char aReportSTransla[]
aReportSTransla	db 'Report %s translation bugs to <http://translationproject.org/team'
					; DATA XREF: emit_ancillary_info+CCo
		db '/>',0Ah,0
		align 4
; char aForCompleteDoc[]
aForCompleteDoc	db 'For complete documentation, run: info coreutils ',27h,'%s invocation'
					; DATA XREF: emit_ancillary_info+FCo
		db 27h,0Ah,0
		align 4
; char aTrySHelpForMor[]
aTrySHelpForMor	db 'Try `%s --help',27h,' for more information.',0Ah,0
					; DATA XREF: usage+16o
; char aUsageS[]
aUsageS		db 'Usage: %s',0Ah,0    ; DATA XREF: usage+46o
		align 10h
; char aOutputPlatform[]
aOutputPlatform	db 'Output platform dependent limits in a format useful for shell scr'
					; DATA XREF: usage+69o
		db 'ipts.',0Ah
		db 0Ah,0
		align 4
; char aHelpDisplayThi[]
aHelpDisplayThi	db '      --help     display this help and exit',0Ah,0
					; DATA XREF: usage+8Co
		align 4
; char aVersionOutputV[]
aVersionOutputV	db '      --version  output version information and exit',0Ah,0
					; DATA XREF: usage+AFo
; char locale
locale		db 0			; DATA XREF: main+39o
; char dirname[]
dirname		db '/usr/local/share/locale',0 ; DATA XREF: main+4Bo
aPBdraigBrady	db 'Pádraig Brady',0   ; DATA XREF: main+8Do
aPadraigBrady	db 'Padraig Brady',0    ; DATA XREF: main+92o
a8_4		db '8.4',0              ; DATA XREF: main+A7o
aGetlimits	db 'getlimits',0        ; DATA XREF: main+B1o
; char format[]
format		db '%llu',0             ; DATA XREF: main+CAo main+196o ...
; char aChar_maxS[]
aChar_maxS	db 'CHAR_MAX=%s',0Ah,0  ; DATA XREF: main+E4o
; char str2[]
str2		db '1',0                ; DATA XREF: main+F4o main+1C0o ...
; char aChar_oflowS[]
aChar_oflowS	db 'CHAR_OFLOW=%s',0Ah,0 ; DATA XREF: main+10Eo
; char aLld[]
aLld		db '%lld',0             ; DATA XREF: main+130o main+1FCo ...
; char aChar_minS[]
aChar_minS	db 'CHAR_MIN=%s',0Ah,0  ; DATA XREF: main+14Ao
; char a1_0[]
a1_0		db '-1',0               ; DATA XREF: main+15Ao main+226o ...
; char aChar_uflowS[]
aChar_uflowS	db 'CHAR_UFLOW=%s',0Ah,0 ; DATA XREF: main+174o
; char aSchar_maxS[]
aSchar_maxS	db 'SCHAR_MAX=%s',0Ah,0 ; DATA XREF: main+1B0o
; char aSchar_oflowS[]
aSchar_oflowS	db 'SCHAR_OFLOW=%s',0Ah,0 ; DATA XREF: main+1DAo
; char aSchar_minS[]
aSchar_minS	db 'SCHAR_MIN=%s',0Ah,0 ; DATA XREF: main+216o
; char aSchar_uflowS[]
aSchar_uflowS	db 'SCHAR_UFLOW=%s',0Ah,0 ; DATA XREF: main+240o
; char aUchar_maxS[]
aUchar_maxS	db 'UCHAR_MAX=%s',0Ah,0 ; DATA XREF: main+27Fo
; char aUchar_oflowS[]
aUchar_oflowS	db 'UCHAR_OFLOW=%s',0Ah,0 ; DATA XREF: main+2A9o
; char aShrt_maxS[]
aShrt_maxS	db 'SHRT_MAX=%s',0Ah,0  ; DATA XREF: main+2E8o
; char aShrt_oflowS[]
aShrt_oflowS	db 'SHRT_OFLOW=%s',0Ah,0 ; DATA XREF: main+312o
; char aShrt_minS[]
aShrt_minS	db 'SHRT_MIN=%s',0Ah,0  ; DATA XREF: main+351o
; char aShrt_uflowS[]
aShrt_uflowS	db 'SHRT_UFLOW=%s',0Ah,0 ; DATA XREF: main+37Bo
; char aInt_maxS[]
aInt_maxS	db 'INT_MAX=%s',0Ah,0   ; DATA XREF: main+3BAo
; char aInt_oflowS[]
aInt_oflowS	db 'INT_OFLOW=%s',0Ah,0 ; DATA XREF: main+3E4o
; char aInt_minS[]
aInt_minS	db 'INT_MIN=%s',0Ah,0   ; DATA XREF: main+423o
; char aInt_uflowS[]
aInt_uflowS	db 'INT_UFLOW=%s',0Ah,0 ; DATA XREF: main+44Do
; char aUint_maxS[]
aUint_maxS	db 'UINT_MAX=%s',0Ah,0  ; DATA XREF: main+489o
; char aUint_oflowS[]
aUint_oflowS	db 'UINT_OFLOW=%s',0Ah,0 ; DATA XREF: main+4B3o
; char aLong_maxS[]
aLong_maxS	db 'LONG_MAX=%s',0Ah,0  ; DATA XREF: main+4F2o
; char aLong_oflowS[]
aLong_oflowS	db 'LONG_OFLOW=%s',0Ah,0 ; DATA XREF: main+51Co
; char aLong_minS[]
aLong_minS	db 'LONG_MIN=%s',0Ah,0  ; DATA XREF: main+55Bo
; char aLong_uflowS[]
aLong_uflowS	db 'LONG_UFLOW=%s',0Ah,0 ; DATA XREF: main+585o
; char aUlong_maxS[]
aUlong_maxS	db 'ULONG_MAX=%s',0Ah,0 ; DATA XREF: main+5C1o
; char aUlong_oflowS[]
aUlong_oflowS	db 'ULONG_OFLOW=%s',0Ah,0 ; DATA XREF: main+5EBo
; char aSize_maxS[]
aSize_maxS	db 'SIZE_MAX=%s',0Ah,0  ; DATA XREF: main+627o
; char aSize_oflowS[]
aSize_oflowS	db 'SIZE_OFLOW=%s',0Ah,0 ; DATA XREF: main+651o
; char aSsize_maxS[]
aSsize_maxS	db 'SSIZE_MAX=%s',0Ah,0 ; DATA XREF: main+690o
; char aSsize_oflowS[]
aSsize_oflowS	db 'SSIZE_OFLOW=%s',0Ah,0 ; DATA XREF: main+6BAo
; char aSsize_minS[]
aSsize_minS	db 'SSIZE_MIN=%s',0Ah,0 ; DATA XREF: main+6F9o
; char aSsize_uflowS[]
aSsize_uflowS	db 'SSIZE_UFLOW=%s',0Ah,0 ; DATA XREF: main+723o
; char aTime_t_maxS[]
aTime_t_maxS	db 'TIME_T_MAX=%s',0Ah,0 ; DATA XREF: main+762o
; char aTime_t_oflowS[]
aTime_t_oflowS	db 'TIME_T_OFLOW=%s',0Ah,0 ; DATA XREF: main+78Co
; char aTime_t_minS[]
aTime_t_minS	db 'TIME_T_MIN=%s',0Ah,0 ; DATA XREF: main+7CBo
; char aTime_t_uflowS[]
aTime_t_uflowS	db 'TIME_T_UFLOW=%s',0Ah,0 ; DATA XREF: main+7F5o
; char aUid_t_maxS[]
aUid_t_maxS	db 'UID_T_MAX=%s',0Ah,0 ; DATA XREF: main+831o
; char aUid_t_oflowS[]
aUid_t_oflowS	db 'UID_T_OFLOW=%s',0Ah,0 ; DATA XREF: main+85Bo
; char aGid_t_maxS[]
aGid_t_maxS	db 'GID_T_MAX=%s',0Ah,0 ; DATA XREF: main+897o
; char aGid_t_oflowS[]
aGid_t_oflowS	db 'GID_T_OFLOW=%s',0Ah,0 ; DATA XREF: main+8C1o
; char aPid_t_maxS[]
aPid_t_maxS	db 'PID_T_MAX=%s',0Ah,0 ; DATA XREF: main+900o
; char aPid_t_oflowS[]
aPid_t_oflowS	db 'PID_T_OFLOW=%s',0Ah,0 ; DATA XREF: main+92Ao
; char aPid_t_minS[]
aPid_t_minS	db 'PID_T_MIN=%s',0Ah,0 ; DATA XREF: main+969o
; char aPid_t_uflowS[]
aPid_t_uflowS	db 'PID_T_UFLOW=%s',0Ah,0 ; DATA XREF: main+993o
; char aOff_t_maxS[]
aOff_t_maxS	db 'OFF_T_MAX=%s',0Ah,0 ; DATA XREF: main+9D2o
; char aOff_t_oflowS[]
aOff_t_oflowS	db 'OFF_T_OFLOW=%s',0Ah,0 ; DATA XREF: main+9FCo
; char aOff_t_minS[]
aOff_t_minS	db 'OFF_T_MIN=%s',0Ah,0 ; DATA XREF: main+A3Bo
; char aOff_t_uflowS[]
aOff_t_uflowS	db 'OFF_T_UFLOW=%s',0Ah,0 ; DATA XREF: main+A65o
; char aIntmax_maxS[]
aIntmax_maxS	db 'INTMAX_MAX=%s',0Ah,0 ; DATA XREF: main+AA4o
; char aIntmax_oflowS[]
aIntmax_oflowS	db 'INTMAX_OFLOW=%s',0Ah,0 ; DATA XREF: main+ACEo
; char aIntmax_minS[]
aIntmax_minS	db 'INTMAX_MIN=%s',0Ah,0 ; DATA XREF: main+B0Do
; char aIntmax_uflowS[]
aIntmax_uflowS	db 'INTMAX_UFLOW=%s',0Ah,0 ; DATA XREF: main+B37o
; char aUintmax_maxS[]
aUintmax_maxS	db 'UINTMAX_MAX=%s',0Ah,0 ; DATA XREF: main+B73o
; char aUintmax_oflowS[]
aUintmax_oflowS	db 'UINTMAX_OFLOW=%s',0Ah,0 ; DATA XREF: main+B9Do
_rodata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_eh_frame	segment	dword public 'CONST' use32
		assume cs:_eh_frame
		;org 8001554h
		dd 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 2	dup(1Ch)
		dd offset locret_8000FAD-8002521h
		dd 14h,	80E4100h, 0D420285h, 0CC55005h,	404h, 20h, 3Ch
		dd offset locret_8000FAD-800252Dh
		dd 11Ch, 80E4100h, 0D420285h, 3834405h,	0C5011403h, 4040CC3h
		dd 18h,	60h
		dd offset locret_8000FAD-8002435h
		dd 0D9h, 80E4100h, 0D420285h, 3834405h,	1Ch, 7Ch
		dd offset locret_8000FAD-8002378h
		dd 1CDh, 80E4100h, 0D420285h, 1C90305h,	4040CC5h, 34h
		dd 9Ch
		dd offset locret_8000FAD-80021CBh
		dd 0BD8h, 10C4400h, 5104700h, 44007502h, 7875030Fh, 2031006h
		dd 0C3037C75h, 10CC10Bh, 41C34100h, 40C43C5h, 4
_eh_frame	ends

; ===========================================================================

; Segment type:	Externs
; extern
		extrn exit_failure:dword ; DATA	XREF: initialize_exit_failure+Cw
		extrn program_name:dword ; DATA	XREF: emit_ancillary_info+7r
					; emit_ancillary_info+B6r ...
		extrn last_component:near ; CODE XREF: emit_ancillary_info+10p
					; emit_ancillary_info+BFp ...
; char *gettext(const char *msgid)
		extrn gettext:near	; CODE XREF: emit_ancillary_info+22p
					; emit_ancillary_info+44p ...
; int printf(const char	*format, ...)
		extrn printf:near	; CODE XREF: emit_ancillary_info+34p
					; emit_ancillary_info+5Ap ...
; struct _IO_FILE *stdout
		extrn stdout:dword	; DATA XREF: emit_ancillary_info+62r
					; usage+60r ...
		extrn fputs_unlocked:near ; CODE XREF: emit_ancillary_info+7Dp
					; usage+7Bp ...
; char *setlocale(int category,	const char *locale)
		extrn setlocale:near	; CODE XREF: emit_ancillary_info+8Cp
					; main+40p
; int strncmp(const char *s1, const char *s2, size_t n)
		extrn strncmp:near	; CODE XREF: emit_ancillary_info+AAp
; struct _IO_FILE *stderr
		extrn stderr:dword	; DATA XREF: usage+25r
; int fprintf(FILE *stream, const char *format,	...)
		extrn fprintf:near	; CODE XREF: usage+30p
; void exit(int	status)
		extrn exit:near		; CODE XREF: usage+D4p
; size_t strlen(const char *s)
		extrn strlen:near	; CODE XREF: decimal_ascii_add+Cp
					; decimal_ascii_add+1Dp
; void *xmalloc(size_t)
		extrn xmalloc:near	; CODE XREF: decimal_ascii_add+3Fp
		extrn c_isdigit:near	; CODE XREF: decimal_ascii_add+F9p
					; decimal_ascii_add+110p
; void *memmove(void *dest, const void *src, size_t n)
		extrn memmove:near	; CODE XREF: decimal_ascii_add+1C0p
		extrn set_program_name:near ; CODE XREF: main+2Ep
; char *bindtextdomain(const char *domainname, const char *dirname)
		extrn bindtextdomain:near ; CODE XREF: main+55p
; char *textdomain(const char *domainname)
		extrn textdomain:near	; CODE XREF: main+65p
; void close_stdout(void)
		extrn close_stdout	; DATA XREF: main+7Do
; int atexit(void (*func)(void))
		extrn atexit:near	; CODE XREF: main+82p
		extrn proper_name_utf8:near ; CODE XREF: main+97p
		extrn parse_long_options:near ;	CODE XREF: main+BBp
; int snprintf(char *s,	size_t maxlen, const char *format, ...)
		extrn snprintf:near	; CODE XREF: main+D5p main+13Bp ...
; void free(void *ptr)
		extrn free:near		; CODE XREF: main+121p	main+187p ...
		extrn __stack_chk_fail:near ; CODE XREF: main+BC9p


		end
