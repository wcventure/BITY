;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B611-7234-BB			    |
; |		Doskey Lee, Kingsoft Internet Security Software		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	000CC183EE26FEB20D7F182C0FAB1C82
; Input	CRC32 :	76857F0F

; File Name   :	D:\coreutils-o\du.o
; Format      :	ELF for	Intel 386 (Relocatable)
;
; Source File :	'du.c'

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	byte public 'CODE' use32
		assume cs:_text
		;org 8000000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; int __cdecl timespec_cmp(timespec a, timespec	b)
timespec_cmp	proc near		; CODE XREF: duinfo_add+35p

a		= timespec ptr	8
b		= timespec ptr	10h

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+a.tv_sec]
		mov	eax, [ebp+b.tv_sec]
		cmp	edx, eax
		jl	short loc_800003F
		mov	edx, [ebp+a.tv_sec]
		mov	eax, [ebp+b.tv_sec]
		cmp	edx, eax
		jg	short loc_8000038
		mov	edx, [ebp+a.tv_nsec]
		mov	eax, [ebp+b.tv_nsec]
		cmp	edx, eax
		jl	short loc_8000031
		mov	edx, [ebp+a.tv_nsec]
		mov	eax, [ebp+b.tv_nsec]
		cmp	edx, eax
		setnle	al
		movzx	eax, al
		jmp	short loc_8000044
; ---------------------------------------------------------------------------

loc_8000031:				; CODE XREF: timespec_cmp+1Fj
		mov	eax, 0FFFFFFFFh
		jmp	short loc_8000044
; ---------------------------------------------------------------------------

loc_8000038:				; CODE XREF: timespec_cmp+15j
		mov	eax, 1
		jmp	short loc_8000044
; ---------------------------------------------------------------------------

loc_800003F:				; CODE XREF: timespec_cmp+Bj
		mov	eax, 0FFFFFFFFh

loc_8000044:				; CODE XREF: timespec_cmp+2Fj
					; timespec_cmp+36j ...
		pop	ebp
		retn
timespec_cmp	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void emit_size_note()
emit_size_note	proc near		; CODE XREF: usage+1F6p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 4
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset msgid	; "\nSIZE may be (or may be an integer opt"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		nop
		mov	ebx, [ebp+var_4]
		leave
		retn
emit_size_note	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl emit_blocksize_note(const char *program)
emit_blocksize_note proc near		; CODE XREF: usage+1EEp

program		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		sub	esp, 0Ch
		push	offset aDisplayValuesA ; "\nDisplay values are in units	of the fi"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	[ebp+program]
		push	eax		; format
		call	printf
		add	esp, 10h
		nop
		leave
		retn
emit_blocksize_note endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void emit_ancillary_info()
emit_ancillary_info proc near		; CODE XREF: usage+1FBp

lc_messages	= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aReportSBugsToS ; "\nReport %s bugs to %s\n"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset aBugCoreutils@g ; "bug-coreutils@gnu.org"
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	offset aSHomePageHttpW ; "%s home page:	<http://www.gnu.org/softw"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset domainname ; "coreutils"
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aGeneralHelpUsi ; "General help using GNU software: <http:"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		sub	esp, 8
		push	0		; locale
		push	5		; category
		call	setlocale
		add	esp, 10h
		mov	[ebp+lc_messages], eax
		cmp	[ebp+lc_messages], 0
		jz	short loc_8000184
		sub	esp, 4
		push	3		; n
		push	offset s2	; "en_"
		push	[ebp+lc_messages] ; s1
		call	strncmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_8000184
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aReportSTransla ; "Report %s translation	bugs to	<http://t"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h

loc_8000184:				; CODE XREF: emit_ancillary_info+9Bj
					; emit_ancillary_info+B4j
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aForCompleteDoc ; "For complete documentation, run: info	c"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		nop
		mov	ebx, [ebp+var_4]
		leave
		retn
emit_ancillary_info endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; char *__cdecl	timetostr(time_t t, char *buf)
timetostr	proc near		; CODE XREF: show_date+3Bp

t		= dword	ptr  8
buf		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	eax, [ebp+t]
		cdq
		sub	esp, 4
		push	[ebp+buf]
		push	edx
		push	eax
		call	imaxtostr
		add	esp, 10h
		leave
		retn
timetostr	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; char *__cdecl	bad_cast(const char *s)
bad_cast	proc near		; CODE XREF: main+4Cp

s		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+s]
		pop	ebp
		retn
bad_cast	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; timespec *get_stat_atime(timespec *__return_ptr __struct_ptr retstr, const stat *st)
get_stat_atime	proc near		; CODE XREF: process_file+263p

retstr		= dword	ptr  8
st		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+retstr]
		mov	eax, [ebp+st]
		mov	edx, [eax+44h]
		mov	eax, [eax+40h]
		mov	[ecx], eax
		mov	[ecx+4], edx
		mov	eax, [ebp+retstr]
		pop	ebp
		retn	4
get_stat_atime	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; timespec *get_stat_ctime(timespec *__return_ptr __struct_ptr retstr, const stat *st)
get_stat_ctime	proc near		; CODE XREF: process_file+283p

retstr		= dword	ptr  8
st		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+retstr]
		mov	eax, [ebp+st]
		mov	edx, [eax+54h]
		mov	eax, [eax+50h]
		mov	[ecx], eax
		mov	[ecx+4], edx
		mov	eax, [ebp+retstr]
		pop	ebp
		retn	4
get_stat_ctime	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; timespec *get_stat_mtime(timespec *__return_ptr __struct_ptr retstr, const stat *st)
get_stat_mtime	proc near		; CODE XREF: process_file+245p

retstr		= dword	ptr  8
st		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+retstr]
		mov	eax, [ebp+st]
		mov	edx, [eax+4Ch]
		mov	eax, [eax+48h]
		mov	[ecx], eax
		mov	[ecx+4], edx
		mov	eax, [ebp+retstr]
		pop	ebp
		retn	4
get_stat_mtime	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl duinfo_init(duinfo *a)
duinfo_init	proc near		; CODE XREF: process_file+221p
					; process_file+38Fp ...

a		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+a]
		mov	dword ptr [eax], 0
		mov	dword ptr [eax+4], 0
		mov	eax, [ebp+a]
		mov	dword ptr [eax+8], 80000000h
		mov	eax, [ebp+a]
		mov	dword ptr [eax+0Ch], 0FFFFFFFFh
		nop
		pop	ebp
		retn
duinfo_init	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl duinfo_set(duinfo *a, uintmax_t size, timespec tmax)
duinfo_set	proc near		; CODE XREF: process_file+2CCp

size		= qword	ptr -8
a		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
tmax		= timespec ptr	14h

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	eax, [ebp+arg_4]
		mov	dword ptr [ebp+size], eax
		mov	eax, [ebp+arg_8]
		mov	dword ptr [ebp+size+4],	eax
		mov	ecx, [ebp+a]
		mov	eax, dword ptr [ebp+size]
		mov	edx, dword ptr [ebp+size+4]
		mov	[ecx], eax
		mov	[ecx+4], edx
		mov	ecx, [ebp+a]
		mov	eax, [ebp+tmax.tv_sec]
		mov	edx, [ebp+tmax.tv_nsec]
		mov	[ecx+8], eax
		mov	[ecx+0Ch], edx
		nop
		leave
		retn
duinfo_set	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl duinfo_add(duinfo *a, const duinfo *b)
duinfo_add	proc near		; CODE XREF: process_file+402p
					; process_file+433p ...

var_4		= dword	ptr -4
a		= dword	ptr  8
b		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 4
		mov	eax, [ebp+a]
		mov	ecx, [eax]
		mov	ebx, [eax+4]
		mov	eax, [ebp+b]
		mov	edx, [eax+4]
		mov	eax, [eax]
		add	eax, ecx
		adc	edx, ebx
		mov	ecx, [ebp+a]
		mov	[ecx], eax
		mov	[ecx+4], edx
		mov	eax, [ebp+b]
		push	dword ptr [eax+0Ch]
		push	dword ptr [eax+8] ; b
		mov	eax, [ebp+a]
		push	dword ptr [eax+0Ch]
		push	dword ptr [eax+8] ; a
		call	timespec_cmp
		add	esp, 10h
		test	eax, eax
		jns	short loc_80002DE
		mov	ecx, [ebp+a]
		mov	eax, [ebp+b]
		mov	edx, [eax+0Ch]
		mov	eax, [eax+8]
		mov	[ecx+8], eax
		mov	[ecx+0Ch], edx

loc_80002DE:				; CODE XREF: duinfo_add+3Fj
		nop
		mov	ebx, [ebp+var_4]
		leave
		retn
duinfo_add	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; void __cdecl usage(int status)
		public usage
usage		proc near		; CODE XREF: main+550p	main+5C4p ...

status		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		cmp	[ebp+status], 0
		jz	short loc_800031F
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, ds:stderr
		sub	esp, 4
		push	ebx
		push	edx		; format
		push	eax		; stream
		call	fprintf
		add	esp, 10h
		jmp	loc_80004E4
; ---------------------------------------------------------------------------

loc_800031F:				; CODE XREF: usage+9j
		mov	esi, ds:program_name
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aUsageSOption__ ; "Usage: %s [OPTION]...	[FILE]...\n  or: "...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	esi
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aSummarizeDiskU ; "Summarize disk usage of each FILE, recu"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aMandatoryArgum ; "Mandatory arguments to long options are"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aAAllWriteCount ; "  -a,	--all		  write	counts fo"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aBBlockSizeSize ; "  -B,	--block-size=SIZE  use SIZE-byte "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aFiles0FromFSum ; "	--files0-from=F	  summarize disk "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aKLikeBlockSize ; "  -k			  like --block-si"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aLDereferenceDe ; "  -L,	--dereference	  dereference all"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aXOneFileSystem ; "  -x,	--one-file-system    skip directo"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aTimeShowTimeOf ; "	--time		  show time of th"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aHelpDisplayThi ; "	--help	   display this	help and "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aVersionOutputV ; "	--version  output version informa"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		sub	esp, 0Ch
		push	offset program	; "DU"
		call	emit_blocksize_note
		add	esp, 10h
		call	emit_size_note
		call	emit_ancillary_info

loc_80004E4:				; CODE XREF: usage+36j
		sub	esp, 0Ch
		push	[ebp+status]	; status
		call	exit
usage		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; size_t __cdecl entry_hash(const void *x, size_t table_size)
entry_hash	proc near		; DATA XREF: hash_init+13o

p		= dword	ptr -0Ch
var_4		= dword	ptr -4
x		= dword	ptr  8
table_size	= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, [ebp+x]
		mov	[ebp+p], eax
		mov	eax, [ebp+p]
		mov	edx, [eax+4]
		mov	eax, [eax]
		mov	ecx, [ebp+table_size]
		mov	ebx, 0
		push	ebx
		push	ecx
		push	edx
		push	eax
		call	__umoddi3
		add	esp, 10h
		mov	ebx, [ebp+var_4]
		leave
		retn
entry_hash	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; _Bool	__cdecl	entry_compare(const void *x, const void	*y)
entry_compare	proc near		; DATA XREF: hash_init+Eo

a		= dword	ptr -10h
b		= dword	ptr -0Ch
x		= dword	ptr  8
y		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	eax, [ebp+x]
		mov	[ebp+a], eax
		mov	eax, [ebp+y]
		mov	[ebp+b], eax
		mov	eax, [ebp+a]
		mov	ecx, [eax]
		mov	ebx, [eax+4]
		mov	eax, [ebp+b]
		mov	edx, [eax+4]
		mov	eax, [eax]
		mov	esi, ebx
		xor	esi, edx
		xor	eax, ecx
		or	eax, esi
		test	eax, eax
		jnz	short loc_8000572
		mov	eax, [ebp+a]
		mov	ecx, [eax+8]
		mov	ebx, [eax+0Ch]
		mov	eax, [ebp+b]
		mov	edx, [eax+0Ch]
		mov	eax, [eax+8]
		mov	esi, ebx
		xor	esi, edx
		xor	eax, ecx
		or	eax, esi
		test	eax, eax
		jnz	short loc_8000572
		mov	eax, 1
		jmp	short loc_8000577
; ---------------------------------------------------------------------------

loc_8000572:				; CODE XREF: entry_compare+2Ej
					; entry_compare+4Cj
		mov	eax, 0

loc_8000577:				; CODE XREF: entry_compare+53j
		and	eax, 1
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	ebp
		retn
entry_compare	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; _Bool	__cdecl	hash_ins(ino_t ino, dev_t dev)
hash_ins	proc near		; CODE XREF: process_file+20Bp

dev		= qword	ptr -28h
ino		= qword	ptr -20h
ent		= dword	ptr -10h
ent_from_table	= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, [ebp+arg_0]
		mov	dword ptr [ebp+ino], eax
		mov	eax, [ebp+arg_4]
		mov	dword ptr [ebp+ino+4], eax
		mov	eax, [ebp+arg_8]
		mov	dword ptr [ebp+dev], eax
		mov	eax, [ebp+arg_C]
		mov	dword ptr [ebp+dev+4], eax
		sub	esp, 0Ch
		push	10h		; size_t
		call	xmalloc
		add	esp, 10h
		mov	[ebp+ent], eax
		mov	ecx, [ebp+ent]
		mov	eax, dword ptr [ebp+ino]
		mov	edx, dword ptr [ebp+ino+4]
		mov	[ecx], eax
		mov	[ecx+4], edx
		mov	ecx, [ebp+ent]
		mov	eax, dword ptr [ebp+dev]
		mov	edx, dword ptr [ebp+dev+4]
		mov	[ecx+8], eax
		mov	[ecx+0Ch], edx
		mov	eax, ds:htab
		sub	esp, 8
		push	[ebp+ent]
		push	eax
		call	hash_insert
		add	esp, 10h
		mov	[ebp+ent_from_table], eax
		cmp	[ebp+ent_from_table], 0
		jnz	short loc_80005EE
		call	xalloc_die

loc_80005EE:				; CODE XREF: hash_ins+66j
		mov	eax, [ebp+ent_from_table]
		cmp	eax, [ebp+ent]
		jnz	short loc_80005FD
		mov	eax, 1
		jmp	short locret_8000610
; ---------------------------------------------------------------------------

loc_80005FD:				; CODE XREF: hash_ins+73j
		sub	esp, 0Ch
		push	[ebp+ent]	; ptr
		call	free
		add	esp, 10h
		mov	eax, 0

locret_8000610:				; CODE XREF: hash_ins+7Aj
		leave
		retn
hash_ins	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void hash_init()
hash_init	proc near		; CODE XREF: main:loc_8001778p
		push	ebp
		mov	ebp, esp
		sub	esp, 8
		sub	esp, 0Ch
		push	offset free
		push	offset entry_compare
		push	offset entry_hash
		push	0
		push	67h
		call	hash_initialize
		add	esp, 20h
		mov	ds:htab, eax
		mov	eax, ds:htab
		test	eax, eax
		jnz	short loc_8000649
		call	xalloc_die

loc_8000649:				; CODE XREF: hash_init+30j
		nop
		leave
		retn
hash_init	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl show_date(const char *format, timespec when)
show_date	proc near		; CODE XREF: print_size+45p

format		= dword	ptr -2Ch
tm		= dword	ptr -28h
buf		= byte ptr -21h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
when		= timespec ptr	0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 34h
		mov	eax, [ebp+arg_0]
		mov	[ebp+format], eax
		mov	eax, large gs:14h
		mov	[ebp+var_C], eax
		xor	eax, eax
		sub	esp, 0Ch
		lea	eax, [ebp+when]
		push	eax		; timer
		call	localtime
		add	esp, 10h
		mov	[ebp+tm], eax
		cmp	[ebp+tm], 0
		jnz	short loc_80006C7
		mov	eax, [ebp+when.tv_sec]
		sub	esp, 8
		lea	edx, [ebp+buf]
		push	edx		; buf
		push	eax		; t
		call	timetostr
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aTimeSIsOutOfRa ; "time %s is out of range"
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	eax, ds:stdout
		sub	esp, 8
		push	eax
		lea	eax, [ebp+buf]
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		nop
		jmp	short loc_80006E4
; ---------------------------------------------------------------------------

loc_80006C7:				; CODE XREF: show_date+2Ej
		mov	edx, [ebp+when.tv_nsec]
		mov	eax, ds:stdout
		sub	esp, 0Ch
		push	edx
		push	0
		push	[ebp+tm]
		push	[ebp+format]
		push	eax
		call	fprintftime
		add	esp, 20h

loc_80006E4:				; CODE XREF: show_date+79j
		mov	eax, [ebp+var_C]
		xor	eax, large gs:14h
		jz	short loc_80006F5
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_80006F5:				; CODE XREF: show_date+A2j
		mov	ebx, [ebp+var_4]
		leave
		retn
show_date	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl print_only_size(uintmax_t n_bytes)
print_only_size	proc near		; CODE XREF: print_size+13p

n_bytes		= qword	ptr -2A0h
buf		= byte ptr -298h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 2A4h
		mov	eax, [ebp+arg_0]
		mov	dword ptr [ebp+n_bytes], eax
		mov	eax, [ebp+arg_4]
		mov	dword ptr [ebp+n_bytes+4], eax
		mov	eax, large gs:14h
		mov	[ebp+var_C], eax
		xor	eax, eax
		mov	ebx, ds:stdout
		mov	eax, dword ptr ds:output_block_size
		mov	edx, dword ptr ds:output_block_size+4
		mov	ecx, ds:human_output_opts
		push	edx
		push	eax
		push	0
		push	1
		push	ecx
		lea	eax, [ebp+buf]
		push	eax
		push	dword ptr [ebp+n_bytes+4]
		push	dword ptr [ebp+n_bytes]
		call	human_readable
		add	esp, 20h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		nop
		mov	eax, [ebp+var_C]
		xor	eax, large gs:14h
		jz	short loc_8000779
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_8000779:				; CODE XREF: print_only_size+78j
		mov	ebx, [ebp+var_4]
		leave
		retn
print_only_size	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl print_size(const	duinfo *pdui, const char *string)
print_size	proc near		; CODE XREF: process_file+557p
					; main+B64p

pdui		= dword	ptr  8
string		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	eax, [ebp+pdui]
		mov	edx, [eax+4]
		mov	eax, [eax]
		sub	esp, 8
		push	edx
		push	eax		; n_bytes
		call	print_only_size
		add	esp, 10h
		movzx	eax, ds:opt_time
		test	al, al
		jz	short loc_80007CB
		sub	esp, 0Ch
		push	9		; c
		call	putchar_unlocked
		add	esp, 10h
		mov	eax, ds:time_format
		sub	esp, 4
		mov	edx, [ebp+pdui]
		push	dword ptr [edx+0Ch]
		push	dword ptr [edx+8] ; when
		push	eax		; format
		call	show_date
		add	esp, 10h

loc_80007CB:				; CODE XREF: print_size+24j
		movzx	eax, ds:opt_nul_terminate_output
		test	al, al
		jz	short loc_80007DD
		mov	eax, 0
		jmp	short loc_80007E2
; ---------------------------------------------------------------------------

loc_80007DD:				; CODE XREF: print_size+56j
		mov	eax, 0Ah

loc_80007E2:				; CODE XREF: print_size+5Dj
		sub	esp, 4
		push	eax
		push	[ebp+string]
		push	offset format	; "\t%s%c"
		call	printf
		add	esp, 10h
		mov	eax, ds:stdout
		sub	esp, 0Ch
		push	eax		; stream
		call	fflush_unlocked
		add	esp, 10h
		nop
		leave
		retn
print_size	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; _Bool	__cdecl	process_file(FTS *fts, FTSENT *ent)
process_file	proc near		; CODE XREF: du_files+87p

var_58		= timespec ptr -58h
ent		= dword	ptr -50h
fts		= dword	ptr -4Ch
ok		= byte ptr -47h
print		= byte ptr -46h
skip		= byte ptr -45h
i		= dword	ptr -44h
file		= dword	ptr -40h
sb		= dword	ptr -3Ch
level		= dword	ptr -38h
tmax		= timespec ptr -34h
dui		= duinfo ptr -2Ch
dui_to_print	= duinfo ptr -1Ch
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 54h
		mov	eax, [ebp+arg_0]
		mov	[ebp+fts], eax
		mov	eax, [ebp+arg_4]
		mov	[ebp+ent], eax
		mov	eax, large gs:14h
		mov	[ebp+var_C], eax
		xor	eax, eax
		mov	[ebp+print], 1
		mov	eax, [ebp+ent]
		mov	eax, [eax+18h]
		mov	[ebp+file], eax
		mov	eax, [ebp+ent]
		add	eax, 40h
		mov	[ebp+sb], eax
		mov	eax, ds:exclude_0
		sub	esp, 8
		push	[ebp+file]
		push	eax
		call	excluded_file_name
		add	esp, 10h
		mov	[ebp+skip], al
		cmp	[ebp+skip], 0
		jz	short loc_800086E
		sub	esp, 4
		push	4		; int
		push	[ebp+ent]	; FTSENT *
		push	[ebp+fts]	; FTS *
		call	fts_set
		add	esp, 10h

loc_800086E:				; CODE XREF: process_file+4Fj
		mov	eax, [ebp+ent]
		movzx	eax, word ptr [eax+38h]
		movzx	eax, ax
		cmp	eax, 4
		jz	loc_8000920
		cmp	eax, 4
		jg	short loc_8000894
		cmp	eax, 2
		jz	loc_800095B
		jmp	loc_80009AE
; ---------------------------------------------------------------------------

loc_8000894:				; CODE XREF: process_file+7Aj
		cmp	eax, 7
		jz	short loc_80008E1
		cmp	eax, 0Ah
		jnz	loc_80009AE
		sub	esp, 0Ch
		push	[ebp+file]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aCannotAccessS ;	"cannot	access %s"
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, [ebp+ent]
		mov	eax, [eax+1Ch]
		push	ebx
		push	edx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	eax, 0
		jmp	loc_8000D6D
; ---------------------------------------------------------------------------

loc_80008E1:				; CODE XREF: process_file+8Dj
		sub	esp, 0Ch
		push	[ebp+file]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aS	; "%s"
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, [ebp+ent]
		mov	eax, [eax+1Ch]
		push	ebx
		push	edx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	eax, 0
		jmp	loc_8000D6D
; ---------------------------------------------------------------------------

loc_8000920:				; CODE XREF: process_file+71j
		sub	esp, 0Ch
		push	[ebp+file]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aCannotReadDire ; "cannot read directory	%s"
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, [ebp+ent]
		mov	eax, [eax+1Ch]
		push	ebx
		push	edx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	[ebp+ok], 0
		jmp	short loc_80009B3
; ---------------------------------------------------------------------------

loc_800095B:				; CODE XREF: process_file+7Fj
		sub	esp, 8
		push	[ebp+ent]
		push	[ebp+fts]
		call	cycle_warning_required
		add	esp, 10h
		test	al, al
		jz	short loc_80009A8
		sub	esp, 0Ch
		push	[ebp+file]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aWarningCircula ; "WARNING: Circular directory structure.\"...
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	eax, 0
		jmp	loc_8000D6D
; ---------------------------------------------------------------------------

loc_80009A8:				; CODE XREF: process_file+164j
		mov	[ebp+ok], 1
		jmp	short loc_80009B3
; ---------------------------------------------------------------------------

loc_80009AE:				; CODE XREF: process_file+85j
					; process_file+92j
		mov	[ebp+ok], 1
		nop

loc_80009B3:				; CODE XREF: process_file+14Fj
					; process_file+1A2j
		mov	eax, [ebp+ent]
		movzx	eax, word ptr [eax+38h]
		cmp	ax, 1
		jz	short loc_80009C6
		cmp	[ebp+skip], 0
		jz	short loc_80009CF

loc_80009C6:				; CODE XREF: process_file+1B4j
		movzx	eax, [ebp+ok]
		jmp	loc_8000D6D
; ---------------------------------------------------------------------------

loc_80009CF:				; CODE XREF: process_file+1BAj
		cmp	[ebp+skip], 0
		jnz	short loc_8000A24
		movzx	eax, ds:opt_count_all
		xor	eax, 1
		test	al, al
		jz	short loc_8000A3C
		mov	eax, [ebp+sb]
		mov	eax, [eax+10h]
		and	eax, 0F000h
		cmp	eax, 4000h
		jz	short loc_8000A3C
		mov	eax, [ebp+sb]
		mov	eax, [eax+14h]
		cmp	eax, 1
		jbe	short loc_8000A3C
		mov	eax, [ebp+sb]
		mov	ecx, [eax]
		mov	ebx, [eax+4]
		mov	eax, [ebp+sb]
		mov	edx, [eax+5Ch]
		mov	eax, [eax+58h]
		push	ebx
		push	ecx		; dev
		push	edx
		push	eax		; ino
		call	hash_ins
		add	esp, 10h
		xor	eax, 1
		test	al, al
		jz	short loc_8000A3C

loc_8000A24:				; CODE XREF: process_file+1C9j
		sub	esp, 0Ch
		lea	eax, [ebp+dui]
		push	eax		; a
		call	duinfo_init
		add	esp, 10h
		mov	[ebp+print], 0
		jmp	loc_8000ADE
; ---------------------------------------------------------------------------

loc_8000A3C:				; CODE XREF: process_file+1D7j
					; process_file+1E9j ...
		mov	eax, ds:time_type_0
		test	eax, eax
		jnz	short loc_8000A59
		lea	eax, [ebp+tmax]
		sub	esp, 8
		push	[ebp+sb]	; st
		push	eax		; retstr
		call	get_stat_mtime
		add	esp, 0Ch
		jmp	short loc_8000AA1
; ---------------------------------------------------------------------------

loc_8000A59:				; CODE XREF: process_file+239j
		mov	eax, ds:time_type_0
		cmp	eax, 2
		jnz	short loc_8000A83
		lea	eax, [ebp+var_58]
		sub	esp, 8
		push	[ebp+sb]	; st
		push	eax		; retstr
		call	get_stat_atime
		add	esp, 0Ch
		mov	eax, [ebp+var_58.tv_sec]
		mov	edx, [ebp+var_58.tv_nsec]
		mov	[ebp+tmax.tv_sec], eax
		mov	[ebp+tmax.tv_nsec], edx
		jmp	short loc_8000AA1
; ---------------------------------------------------------------------------

loc_8000A83:				; CODE XREF: process_file+257j
		lea	eax, [ebp+var_58]
		sub	esp, 8
		push	[ebp+sb]	; st
		push	eax		; retstr
		call	get_stat_ctime
		add	esp, 0Ch
		mov	eax, [ebp+var_58.tv_sec]
		mov	edx, [ebp+var_58.tv_nsec]
		mov	[ebp+tmax.tv_sec], eax
		mov	[ebp+tmax.tv_nsec], edx

loc_8000AA1:				; CODE XREF: process_file+24Dj
					; process_file+277j
		movzx	eax, ds:apparent_size
		test	al, al
		jz	short loc_8000AB7
		mov	eax, [ebp+sb]
		mov	edx, [eax+30h]
		mov	eax, [eax+2Ch]
		jmp	short loc_8000AC7
; ---------------------------------------------------------------------------

loc_8000AB7:				; CODE XREF: process_file+2A0j
		mov	eax, [ebp+sb]
		mov	edx, [eax+3Ch]
		mov	eax, [eax+38h]
		shld	edx, eax, 9
		shl	eax, 9

loc_8000AC7:				; CODE XREF: process_file+2ABj
		sub	esp, 0Ch
		push	[ebp+tmax.tv_nsec]
		push	[ebp+tmax.tv_sec] ; tmax
		push	edx
		push	eax		; size
		lea	eax, [ebp+dui]
		push	eax		; a
		call	duinfo_set
		add	esp, 20h

loc_8000ADE:				; CODE XREF: process_file+22Dj
		mov	eax, [ebp+ent]
		mov	eax, [eax+2Ch]
		mov	[ebp+level], eax
		mov	eax, dword ptr [ebp+dui.size]
		mov	dword ptr [ebp+dui_to_print.size], eax
		mov	eax, dword ptr [ebp+dui.size+4]
		mov	dword ptr [ebp+dui_to_print.size+4], eax
		mov	eax, [ebp+dui.tmax.tv_sec]
		mov	[ebp+dui_to_print.tmax.tv_sec],	eax
		mov	eax, [ebp+dui.tmax.tv_nsec]
		mov	[ebp+dui_to_print.tmax.tv_nsec], eax
		mov	eax, ds:n_alloc_5658
		test	eax, eax
		jnz	short loc_8000B30
		mov	eax, [ebp+level]
		add	eax, 0Ah
		mov	ds:n_alloc_5658, eax
		mov	eax, ds:n_alloc_5658
		sub	esp, 8
		push	20h		; size_t
		push	eax		; size_t
		call	xcalloc
		add	esp, 10h
		mov	ds:dulvl_5659, eax
		jmp	loc_8000CA4
; ---------------------------------------------------------------------------

loc_8000B30:				; CODE XREF: process_file+2FCj
		mov	eax, ds:prev_level_5657
		cmp	[ebp+level], eax
		jz	loc_8000CA4
		mov	eax, ds:prev_level_5657
		cmp	[ebp+level], eax
		jbe	loc_8000BCE
		mov	eax, ds:n_alloc_5658
		cmp	eax, [ebp+level]
		ja	short loc_8000B7B
		mov	eax, ds:dulvl_5659
		sub	esp, 4
		push	40h
		push	[ebp+level]
		push	eax
		call	xnrealloc
		add	esp, 10h
		mov	ds:dulvl_5659, eax
		mov	eax, [ebp+level]
		add	eax, eax
		mov	ds:n_alloc_5658, eax

loc_8000B7B:				; CODE XREF: process_file+34Aj
		mov	eax, ds:prev_level_5657
		add	eax, 1
		mov	[ebp+i], eax
		jmp	short loc_8000BC1
; ---------------------------------------------------------------------------

loc_8000B88:				; CODE XREF: process_file+3BDj
		mov	eax, ds:dulvl_5659
		mov	edx, [ebp+i]
		shl	edx, 5
		add	eax, edx
		sub	esp, 0Ch
		push	eax		; a
		call	duinfo_init
		add	esp, 10h
		mov	eax, ds:dulvl_5659
		mov	edx, [ebp+i]
		shl	edx, 5
		add	eax, edx
		add	eax, 10h
		sub	esp, 0Ch
		push	eax		; a
		call	duinfo_init
		add	esp, 10h
		add	[ebp+i], 1

loc_8000BC1:				; CODE XREF: process_file+37Cj
		mov	eax, [ebp+i]
		cmp	eax, [ebp+level]
		jbe	short loc_8000B88
		jmp	loc_8000CA4
; ---------------------------------------------------------------------------

loc_8000BCE:				; CODE XREF: process_file+33Cj
		mov	eax, ds:prev_level_5657
		sub	eax, 1
		cmp	eax, [ebp+level]
		jz	short loc_8000BF4
		push	offset __PRETTY_FUNCTION___5674	; "process_file"
		push	247h		; line
		push	offset file	; "du.c"
		push	offset assertion ; "level == prev_level	- 1"
		call	__assert_fail
; ---------------------------------------------------------------------------

loc_8000BF4:				; CODE XREF: process_file+3CFj
		mov	eax, ds:dulvl_5659
		mov	edx, ds:prev_level_5657
		shl	edx, 5
		add	eax, edx
		sub	esp, 8
		push	eax		; b
		lea	eax, [ebp+dui_to_print]
		push	eax		; a
		call	duinfo_add
		add	esp, 10h
		movzx	eax, ds:opt_separate_dirs
		xor	eax, 1
		test	al, al
		jz	short loc_8000C45
		mov	eax, ds:dulvl_5659
		mov	edx, ds:prev_level_5657
		shl	edx, 5
		add	eax, edx
		add	eax, 10h
		sub	esp, 8
		push	eax		; b
		lea	eax, [ebp+dui_to_print]
		push	eax		; a
		call	duinfo_add
		add	esp, 10h

loc_8000C45:				; CODE XREF: process_file+416j
		mov	eax, ds:dulvl_5659
		mov	edx, ds:prev_level_5657
		shl	edx, 5
		add	eax, edx
		mov	ecx, eax
		mov	eax, ds:dulvl_5659
		mov	edx, [ebp+level]
		shl	edx, 5
		add	eax, edx
		add	eax, 10h
		sub	esp, 8
		push	ecx		; b
		push	eax		; a
		call	duinfo_add
		add	esp, 10h
		mov	eax, ds:dulvl_5659
		mov	edx, ds:prev_level_5657
		shl	edx, 5
		add	eax, edx
		lea	edx, [eax+10h]
		mov	eax, ds:dulvl_5659
		mov	ecx, [ebp+level]
		shl	ecx, 5
		add	eax, ecx
		add	eax, 10h
		sub	esp, 8
		push	edx		; b
		push	eax		; a
		call	duinfo_add
		add	esp, 10h

loc_8000CA4:				; CODE XREF: process_file+321j
					; process_file+32Ej ...
		mov	eax, [ebp+level]
		mov	ds:prev_level_5657, eax
		movzx	eax, ds:opt_separate_dirs
		xor	eax, 1
		test	al, al
		jnz	short loc_8000CD4
		mov	eax, [ebp+ent]
		movzx	eax, word ptr [eax+38h]
		cmp	ax, 6
		jz	short loc_8000CF3
		mov	eax, [ebp+ent]
		movzx	eax, word ptr [eax+38h]
		cmp	ax, 4
		jz	short loc_8000CF3

loc_8000CD4:				; CODE XREF: process_file+4AEj
		mov	eax, ds:dulvl_5659
		mov	edx, [ebp+level]
		shl	edx, 5
		add	eax, edx
		mov	edx, eax
		sub	esp, 8
		lea	eax, [ebp+dui]
		push	eax		; b
		push	edx		; a
		call	duinfo_add
		add	esp, 10h

loc_8000CF3:				; CODE XREF: process_file+4BBj
					; process_file+4C8j
		sub	esp, 8
		lea	eax, [ebp+dui]
		push	eax		; b
		push	offset tot_dui	; a
		call	duinfo_add
		add	esp, 10h
		movzx	eax, [ebp+print]
		xor	eax, 1
		test	al, al
		jz	short loc_8000D18
		movzx	eax, [ebp+ok]
		jmp	short loc_8000D6D
; ---------------------------------------------------------------------------

loc_8000D18:				; CODE XREF: process_file+506j
		mov	eax, [ebp+ent]
		movzx	eax, word ptr [eax+38h]
		cmp	ax, 6
		jz	short loc_8000D32
		mov	eax, [ebp+ent]
		movzx	eax, word ptr [eax+38h]
		cmp	ax, 4
		jnz	short loc_8000D3C

loc_8000D32:				; CODE XREF: process_file+519j
		mov	eax, max_depth
		cmp	[ebp+level], eax
		jbe	short loc_8000D57

loc_8000D3C:				; CODE XREF: process_file+526j
		movzx	eax, ds:opt_all
		test	al, al
		jz	short loc_8000D51
		mov	eax, max_depth
		cmp	[ebp+level], eax
		jbe	short loc_8000D57

loc_8000D51:				; CODE XREF: process_file+53Bj
		cmp	[ebp+level], 0
		jnz	short loc_8000D69

loc_8000D57:				; CODE XREF: process_file+530j
					; process_file+545j
		sub	esp, 8
		push	[ebp+file]	; string
		lea	eax, [ebp+dui_to_print]
		push	eax		; pdui
		call	print_size
		add	esp, 10h

loc_8000D69:				; CODE XREF: process_file+54Bj
		movzx	eax, [ebp+ok]

loc_8000D6D:				; CODE XREF: process_file+D2j
					; process_file+111j ...
		mov	ecx, [ebp+var_C]
		xor	ecx, large gs:14h
		jz	short loc_8000D7E
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_8000D7E:				; CODE XREF: process_file+56Dj
		mov	ebx, [ebp+var_4]
		leave
		retn
process_file	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; _Bool	__cdecl	du_files(char **files, int bit_flags)
du_files	proc near		; CODE XREF: main+ACAp

ok		= byte ptr -11h
fts		= dword	ptr -10h
ent		= dword	ptr -0Ch
var_4		= dword	ptr -4
files		= dword	ptr  8
bit_flags	= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	[ebp+ok], 1
		mov	eax, [ebp+files]
		mov	eax, [eax]
		test	eax, eax
		jz	loc_8000E64
		sub	esp, 4
		push	0
		push	[ebp+bit_flags]
		push	[ebp+files]
		call	xfts_open
		add	esp, 10h
		mov	[ebp+fts], eax

loc_8000DB1:				; CODE XREF: du_files+A0j
		sub	esp, 0Ch
		push	[ebp+fts]	; FTS *
		call	fts_read
		add	esp, 10h
		mov	[ebp+ent], eax
		cmp	[ebp+ent], 0
		jnz	short loc_8000E01
		call	__errno_location
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_8000E25
		sub	esp, 0Ch
		push	offset aFts_readFailed ; "fts_read failed"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		sub	esp, 4
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	[ebp+ok], 0
		jmp	short loc_8000E25
; ---------------------------------------------------------------------------

loc_8000E01:				; CODE XREF: du_files+43j
		sub	esp, 8
		push	[ebp+ent]	; ent
		push	[ebp+fts]	; fts
		call	process_file
		add	esp, 10h
		movzx	edx, [ebp+ok]
		movzx	eax, al
		and	eax, edx
		test	eax, eax
		setnz	al
		mov	[ebp+ok], al
		jmp	short loc_8000DB1
; ---------------------------------------------------------------------------

loc_8000E25:				; CODE XREF: du_files+4Ej du_files+7Cj
		nop
		sub	esp, 0Ch
		push	[ebp+fts]	; FTS *
		call	fts_close
		add	esp, 10h
		test	eax, eax
		jz	short loc_8000E64
		sub	esp, 0Ch
		push	offset aFts_closeFaile ; "fts_close failed"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		sub	esp, 4
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	[ebp+ok], 0

loc_8000E64:				; CODE XREF: du_files+12j du_files+B3j
		movzx	eax, [ebp+ok]
		mov	ebx, [ebp+var_4]
		leave
		retn
du_files	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public main
main		proc near

argv		= dword	ptr -6Ch
max_depth_specified= byte ptr -5Ch
ok		= byte ptr -5Bh
opt_summarize_only= byte ptr -5Ah
skip_file	= byte ptr -59h
oi		= dword	ptr -58h
ai_err		= dword	ptr -54h
files_from	= dword	ptr -50h
bit_flags	= dword	ptr -4Ch
symlink_deref_bits= dword ptr -48h
ai		= dword	ptr -44h
c		= dword	ptr -40h
e		= dword	ptr -3Ch
d		= dword	ptr -38h
p		= dword	ptr -34h
files		= dword	ptr -30h
file_name	= dword	ptr -2Ch
file_number	= dword	ptr -28h
cwd_only	= dword	ptr -24h
var_1C		= dword	ptr -1Ch
argc		= dword	ptr  0Ch
envp		= dword	ptr  14h

		lea	ecx, [esp+4]
		and	esp, 0FFFFFFF0h
		push	dword ptr [ecx-4]
		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		push	ecx
		sub	esp, 6Ch
		mov	ebx, ecx
		mov	eax, [ebx+4]
		mov	[ebp+argv], eax
		mov	eax, large gs:14h
		mov	[ebp+var_1C], eax
		xor	eax, eax
		mov	[ebp+max_depth_specified], 0
		mov	[ebp+ok], 1
		mov	[ebp+files_from], 0
		mov	[ebp+bit_flags], 500h
		mov	[ebp+symlink_deref_bits], 10h
		mov	[ebp+opt_summarize_only], 0
		push	offset s	; "."
		call	bad_cast
		add	esp, 4
		mov	[ebp+cwd_only],	eax
		mov	[ebp+cwd_only+4], 0
		mov	eax, [ebp+argv]
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	set_program_name
		add	esp, 10h
		sub	esp, 8
		push	offset locale	; locale
		push	6		; category
		call	setlocale
		add	esp, 10h
		sub	esp, 8
		push	offset dirname	; "/usr/local/share/locale"
		push	offset domainname ; "coreutils"
		call	bindtextdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset domainname ; "coreutils"
		call	textdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset close_stdout ; func
		call	atexit
		add	esp, 10h
		call	new_exclude
		mov	ds:exclude_0, eax
		sub	esp, 0Ch
		push	offset name	; "DU_BLOCK_SIZE"
		call	getenv
		add	esp, 10h
		sub	esp, 4
		push	offset output_block_size
		push	offset human_output_opts
		push	eax
		call	human_options
		add	esp, 10h

loc_8000F53:				; CODE XREF: main+5AEj	main+5B4j ...
		mov	[ebp+oi], 0FFFFFFFFh
		sub	esp, 0Ch
		lea	eax, [ebp+oi]
		push	eax		; longind
		push	offset long_options ; longopts
		push	offset shortopts ; "0abchHklmsxB:DLPSX:"
		push	[ebp+argv]	; argv
		push	dword ptr [ebx]	; argc
		call	getopt_long
		add	esp, 20h
		mov	[ebp+c], eax
		cmp	[ebp+c], 0FFFFFFFFh
		jnz	short loc_8000F95
		movzx	eax, [ebp+ok]
		xor	eax, 1
		test	al, al
		jnz	loc_800142C
		jmp	loc_8001436
; ---------------------------------------------------------------------------

loc_8000F95:				; CODE XREF: main+112j
		mov	eax, [ebp+c]
		cmp	eax, 63h
		jz	loc_8001135
		cmp	eax, 63h
		jg	loc_800103D
		cmp	eax, 48h
		jz	loc_800129F
		cmp	eax, 48h
		jg	short loc_8000FF8
		cmp	eax, 30h
		jz	loc_80010E7
		cmp	eax, 30h
		jg	short loc_8000FE1
		cmp	eax, 0FFFFFF7Dh
		jz	loc_80013C2
		cmp	eax, 0FFFFFF7Eh
		jz	loc_80013B8
		jmp	loc_8001417
; ---------------------------------------------------------------------------

loc_8000FE1:				; CODE XREF: main+157j
		cmp	eax, 42h
		jz	loc_8001255
		cmp	eax, 44h
		jz	loc_800129F
		jmp	loc_8001417
; ---------------------------------------------------------------------------

loc_8000FF8:				; CODE XREF: main+149j
		cmp	eax, 53h
		jz	loc_80012C3
		cmp	eax, 53h
		jg	short loc_800101D
		cmp	eax, 4Ch
		jz	loc_80012AB
		cmp	eax, 50h
		jz	loc_80012B7
		jmp	loc_8001417
; ---------------------------------------------------------------------------

loc_800101D:				; CODE XREF: main+197j
		cmp	eax, 61h
		jz	loc_80010F3
		cmp	eax, 61h
		jg	loc_800110B
		cmp	eax, 58h
		jz	loc_80012CF
		jmp	loc_8001417
; ---------------------------------------------------------------------------

loc_800103D:				; CODE XREF: main+137j
		cmp	eax, 80h
		jz	loc_80010FF
		cmp	eax, 80h
		jg	short loc_8001094
		cmp	eax, 6Ch
		jz	loc_8001237
		cmp	eax, 6Ch
		jg	short loc_8001074
		cmp	eax, 68h
		jz	loc_8001141
		cmp	eax, 6Bh
		jz	loc_8001187
		jmp	loc_8001417
; ---------------------------------------------------------------------------

loc_8001074:				; CODE XREF: main+1EEj
		cmp	eax, 73h
		jz	loc_8001243
		cmp	eax, 78h
		jz	loc_800124C
		cmp	eax, 6Dh
		jz	loc_8001214
		jmp	loc_8001417
; ---------------------------------------------------------------------------

loc_8001094:				; CODE XREF: main+1E0j
		cmp	eax, 83h
		jz	loc_8001164
		cmp	eax, 83h
		jg	short loc_80010C1
		cmp	eax, 81h
		jz	loc_800133C
		cmp	eax, 82h
		jz	loc_800132F
		jmp	loc_8001417
; ---------------------------------------------------------------------------

loc_80010C1:				; CODE XREF: main+237j
		cmp	eax, 85h
		jz	loc_800135E
		cmp	eax, 85h
		jl	loc_80011AA
		cmp	eax, 86h
		jz	loc_80013AC
		jmp	loc_8001417
; ---------------------------------------------------------------------------

loc_80010E7:				; CODE XREF: main+14Ej
		mov	ds:opt_nul_terminate_output, 1
		jmp	loc_8001427
; ---------------------------------------------------------------------------

loc_80010F3:				; CODE XREF: main+1B3j
		mov	ds:opt_all, 1
		jmp	loc_8001427
; ---------------------------------------------------------------------------

loc_80010FF:				; CODE XREF: main+1D5j
		mov	ds:apparent_size, 1
		jmp	loc_8001427
; ---------------------------------------------------------------------------

loc_800110B:				; CODE XREF: main+1BCj
		mov	ds:apparent_size, 1
		mov	ds:human_output_opts, 0
		mov	dword ptr ds:output_block_size,	1
		mov	dword ptr ds:output_block_size+4, 0
		jmp	loc_8001427
; ---------------------------------------------------------------------------

loc_8001135:				; CODE XREF: main+12Ej
		mov	ds:print_grand_total, 1
		jmp	loc_8001427
; ---------------------------------------------------------------------------

loc_8001141:				; CODE XREF: main+1F3j
		mov	ds:human_output_opts, 0B0h
		mov	dword ptr ds:output_block_size,	1
		mov	dword ptr ds:output_block_size+4, 0
		jmp	loc_8001427
; ---------------------------------------------------------------------------

loc_8001164:				; CODE XREF: main+22Cj
		mov	ds:human_output_opts, 90h
		mov	dword ptr ds:output_block_size,	1
		mov	dword ptr ds:output_block_size+4, 0
		jmp	loc_8001427
; ---------------------------------------------------------------------------

loc_8001187:				; CODE XREF: main+1FCj
		mov	ds:human_output_opts, 0
		mov	dword ptr ds:output_block_size,	400h
		mov	dword ptr ds:output_block_size+4, 0
		jmp	loc_8001427
; ---------------------------------------------------------------------------

loc_80011AA:				; CODE XREF: main+264j
		mov	eax, ds:optarg
		sub	esp, 0Ch
		push	0
		lea	edx, [ebp+ai_err]
		push	edx
		push	0
		push	0
		push	eax
		call	xstrtoul
		add	esp, 20h
		test	eax, eax
		jnz	short loc_80011DA
		mov	[ebp+max_depth_specified], 1
		mov	eax, [ebp+ai_err]
		mov	max_depth, eax
		jmp	loc_8001427
; ---------------------------------------------------------------------------

loc_80011DA:				; CODE XREF: main+35Aj
		mov	eax, ds:optarg
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aInvalidMaximum ; "invalid maximum depth	%s"
		call	gettext
		add	esp, 10h
		push	esi
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	[ebp+ok], 0
		jmp	loc_8001427
; ---------------------------------------------------------------------------

loc_8001214:				; CODE XREF: main+21Cj
		mov	ds:human_output_opts, 0
		mov	dword ptr ds:output_block_size,	100000h
		mov	dword ptr ds:output_block_size+4, 0
		jmp	loc_8001427
; ---------------------------------------------------------------------------

loc_8001237:				; CODE XREF: main+1E5j
		mov	ds:opt_count_all, 1
		jmp	loc_8001427
; ---------------------------------------------------------------------------

loc_8001243:				; CODE XREF: main+20Aj
		mov	[ebp+opt_summarize_only], 1
		jmp	loc_8001427
; ---------------------------------------------------------------------------

loc_800124C:				; CODE XREF: main+213j
		or	[ebp+bit_flags], 40h
		jmp	loc_8001427
; ---------------------------------------------------------------------------

loc_8001255:				; CODE XREF: main+177j
		mov	eax, ds:optarg
		sub	esp, 4
		push	offset output_block_size
		push	offset human_output_opts
		push	eax
		call	human_options
		add	esp, 10h
		mov	[ebp+e], eax
		cmp	[ebp+e], 0
		jz	loc_8001420
		mov	ecx, ds:optarg
		mov	eax, [ebp+c]
		movsx	edx, al
		mov	eax, [ebp+oi]
		sub	esp, 0Ch
		push	ecx
		push	offset long_options
		push	edx
		push	eax
		push	[ebp+e]
		call	xstrtol_fatal

loc_800129F:				; CODE XREF: main+140j	main+180j
		mov	[ebp+symlink_deref_bits], 11h
		jmp	loc_8001427
; ---------------------------------------------------------------------------

loc_80012AB:				; CODE XREF: main+19Cj
		mov	[ebp+symlink_deref_bits], 2
		jmp	loc_8001427
; ---------------------------------------------------------------------------

loc_80012B7:				; CODE XREF: main+1A5j
		mov	[ebp+symlink_deref_bits], 10h
		jmp	loc_8001427
; ---------------------------------------------------------------------------

loc_80012C3:				; CODE XREF: main+18Ej
		mov	ds:opt_separate_dirs, 1
		jmp	loc_8001427
; ---------------------------------------------------------------------------

loc_80012CF:				; CODE XREF: main+1C5j
		mov	edx, ds:optarg
		mov	eax, ds:exclude_0
		sub	esp, 0Ch
		push	0Ah
		push	10000000h
		push	edx
		push	eax
		push	offset add_exclude
		call	add_exclude_file
		add	esp, 20h
		test	eax, eax
		jz	loc_8001426
		mov	eax, ds:optarg
		sub	esp, 0Ch
		push	eax
		call	quotearg_colon
		add	esp, 10h
		mov	esi, eax
		call	__errno_location
		mov	eax, [eax]
		push	esi
		push	offset aS	; "%s"
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	[ebp+ok], 0
		jmp	loc_8001426
; ---------------------------------------------------------------------------

loc_800132F:				; CODE XREF: main+249j
		mov	eax, ds:optarg
		mov	[ebp+files_from], eax
		jmp	loc_8001427
; ---------------------------------------------------------------------------

loc_800133C:				; CODE XREF: main+23Ej
		mov	edx, ds:optarg
		mov	eax, ds:exclude_0
		sub	esp, 4
		push	10000000h
		push	edx
		push	eax
		call	add_exclude
		add	esp, 10h
		jmp	loc_8001427
; ---------------------------------------------------------------------------

loc_800135E:				; CODE XREF: main+259j
		mov	ds:opt_time, 1
		mov	eax, ds:optarg
		test	eax, eax
		jz	short loc_80013A0
		mov	edx, ds:argmatch_die
		mov	eax, ds:optarg
		sub	esp, 8
		push	edx
		push	4
		push	offset time_types
		push	offset time_args
		push	eax
		push	offset aTime	; "--time"
		call	__xargmatch_internal
		add	esp, 20h
		mov	eax, ds:time_types[eax*4]
		jmp	short loc_80013A5
; ---------------------------------------------------------------------------

loc_80013A0:				; CODE XREF: main+4FFj
		mov	eax, 0

loc_80013A5:				; CODE XREF: main+531j
		mov	ds:time_type_0,	eax
		jmp	short loc_8001427
; ---------------------------------------------------------------------------

loc_80013AC:				; CODE XREF: main+26Fj
		mov	eax, ds:optarg
		mov	ds:time_style_0, eax
		jmp	short loc_8001427
; ---------------------------------------------------------------------------

loc_80013B8:				; CODE XREF: main+169j
		sub	esp, 0Ch
		push	0		; status
		call	usage
; ---------------------------------------------------------------------------

loc_80013C2:				; CODE XREF: main+15Ej
		sub	esp, 8
		push	offset aTorbjRnGranlun ; "Torbjörn Granlund"
		push	offset aTorbjornGranlu ; "Torbjorn Granlund"
		call	proper_name_utf8
		add	esp, 10h
		mov	ecx, eax
		mov	edx, ds:Version
		mov	eax, ds:stdout
		sub	esp, 0Ch
		push	0
		push	offset aJimMeyering ; "Jim Meyering"
		push	offset aPaulEggert ; "Paul Eggert"
		push	offset aDavidMackenzie ; "David	MacKenzie"
		push	ecx
		push	edx
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	offset aDu_0	; "du"
		push	eax
		call	version_etc
		add	esp, 30h
		sub	esp, 0Ch
		push	0		; status
		call	exit
; ---------------------------------------------------------------------------

loc_8001417:				; CODE XREF: main+16Fj	main+186j ...
		mov	[ebp+ok], 0
		jmp	loc_8000F53
; ---------------------------------------------------------------------------

loc_8001420:				; CODE XREF: main+40Aj
		nop
		jmp	loc_8000F53
; ---------------------------------------------------------------------------

loc_8001426:				; CODE XREF: main+488j	main+4BDj
		nop

loc_8001427:				; CODE XREF: main+281j	main+28Dj ...
		jmp	loc_8000F53
; ---------------------------------------------------------------------------

loc_800142C:				; CODE XREF: main+11Dj
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8001436:				; CODE XREF: main+123j
		movzx	eax, ds:opt_all
		test	al, al
		jz	short loc_8001471
		cmp	[ebp+opt_summarize_only], 0
		jz	short loc_8001471
		sub	esp, 0Ch
		push	offset aCannotBothSumm ; "cannot both summarize	and show all entr"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8001471:				; CODE XREF: main+5D2j	main+5D8j
		cmp	[ebp+opt_summarize_only], 0
		jz	short loc_80014A6
		cmp	[ebp+max_depth_specified], 0
		jz	short loc_80014A6
		mov	eax, max_depth
		test	eax, eax
		jnz	short loc_80014A6
		sub	esp, 0Ch
		push	offset aWarningSummari ; "warning: summarizing is the same as usi"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h

loc_80014A6:				; CODE XREF: main+608j	main+60Ej ...
		cmp	[ebp+opt_summarize_only], 0
		jz	short loc_80014ED
		cmp	[ebp+max_depth_specified], 0
		jz	short loc_80014ED
		mov	eax, max_depth
		test	eax, eax
		jz	short loc_80014ED
		mov	eax, max_depth
		mov	[ebp+d], eax
		sub	esp, 0Ch
		push	offset aWarningSumma_0 ; "warning: summarizing conflicts with --m"...
		call	gettext
		add	esp, 10h
		push	[ebp+d]
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_80014ED:				; CODE XREF: main+63Dj	main+643j ...
		cmp	[ebp+opt_summarize_only], 0
		jz	short loc_80014FD
		mov	max_depth, 0

loc_80014FD:				; CODE XREF: main+684j
		movzx	eax, ds:opt_time
		test	al, al
		jz	loc_8001635
		mov	eax, ds:time_style_0
		test	eax, eax
		jnz	loc_80015B6
		sub	esp, 0Ch
		push	offset aTime_style ; "TIME_STYLE"
		call	getenv
		add	esp, 10h
		mov	ds:time_style_0, eax
		mov	eax, ds:time_style_0
		test	eax, eax
		jz	short loc_8001551
		mov	eax, ds:time_style_0
		sub	esp, 8
		push	offset aLocale	; "locale"
		push	eax		; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		jnz	short loc_800155D

loc_8001551:				; CODE XREF: main+6C8j
		mov	ds:time_style_0, offset	aLongIso ; "long-iso"
		jmp	short loc_80015B6
; ---------------------------------------------------------------------------

loc_800155D:				; CODE XREF: main+6E2j
		mov	eax, ds:time_style_0
		movzx	eax, byte ptr [eax]
		cmp	al, 2Bh
		jnz	short loc_800159A
		mov	eax, ds:time_style_0
		sub	esp, 8
		push	0Ah		; c
		push	eax		; s
		call	strchr
		add	esp, 10h
		mov	[ebp+p], eax
		cmp	[ebp+p], 0
		jz	short loc_80015B6
		mov	eax, [ebp+p]
		mov	byte ptr [eax],	0
		jmp	short loc_80015B6
; ---------------------------------------------------------------------------

loc_800158D:				; CODE XREF: main+747j
		mov	eax, ds:time_style_0
		add	eax, 6
		mov	ds:time_style_0, eax

loc_800159A:				; CODE XREF: main+6FAj
		mov	eax, ds:time_style_0
		sub	esp, 4
		push	6		; n
		push	offset posix_prefix_5731 ; "posix-"
		push	eax		; s1
		call	strncmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_800158D

loc_80015B6:				; CODE XREF: main+6A6j	main+6EEj ...
		mov	eax, ds:time_style_0
		movzx	eax, byte ptr [eax]
		cmp	al, 2Bh
		jnz	short loc_80015D1
		mov	eax, ds:time_style_0
		add	eax, 1
		mov	ds:time_format,	eax
		jmp	short loc_8001635
; ---------------------------------------------------------------------------

loc_80015D1:				; CODE XREF: main+753j
		mov	edx, ds:argmatch_die
		mov	eax, ds:time_style_0
		sub	esp, 8
		push	edx
		push	4
		push	offset time_style_types
		push	offset time_style_args
		push	eax
		push	offset aTimeStyle ; "time style"
		call	__xargmatch_internal
		add	esp, 20h
		mov	eax, ds:time_style_types[eax*4]
		cmp	eax, 1
		jz	short loc_800161E
		cmp	eax, 1
		jb	short loc_8001612
		cmp	eax, 2
		jz	short loc_800162A
		jmp	short loc_8001635
; ---------------------------------------------------------------------------

loc_8001612:				; CODE XREF: main+79Cj
		mov	ds:time_format,	offset aYMDHMS_NZ ; "%Y-%m-%d %H:%M:%S.%N %z"
		jmp	short loc_8001635
; ---------------------------------------------------------------------------

loc_800161E:				; CODE XREF: main+797j
		mov	ds:time_format,	offset aYMDHM ;	"%Y-%m-%d %H:%M"
		jmp	short loc_8001635
; ---------------------------------------------------------------------------

loc_800162A:				; CODE XREF: main+7A1j
		mov	ds:time_format,	offset aYMD ; "%Y-%m-%d"
		nop

loc_8001635:				; CODE XREF: main+699j	main+762j ...
		cmp	[ebp+files_from], 0
		jz	loc_800173A
		mov	eax, ds:optind
		cmp	eax, [ebx]
		jge	short loc_80016BA
		mov	eax, ds:optind
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aExtraOperandS ;	"extra operand %s"
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		sub	esp, 0Ch
		push	offset aFileOperandsCa ; "file operands	cannot be combined with	-"...
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, ds:stderr
		sub	esp, 4
		push	edx
		push	offset aS_0	; "%s\n"
		push	eax		; stream
		call	fprintf
		add	esp, 10h
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_80016BA:				; CODE XREF: main+7D9j
		sub	esp, 8
		push	offset asc_8002E5C ; "-"
		push	[ebp+files_from] ; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_8001724
		mov	eax, ds:stdin
		sub	esp, 4
		push	eax
		push	offset aR	; "r"
		push	[ebp+files_from]
		call	freopen_safer
		add	esp, 10h
		test	eax, eax
		jnz	short loc_8001724
		sub	esp, 0Ch
		push	[ebp+files_from]
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aCannotOpenSFor ; "cannot open %s for reading"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		push	esi
		push	ebx		; format
		push	eax		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_8001724:				; CODE XREF: main+862j	main+87Fj
		mov	eax, ds:stdin
		sub	esp, 0Ch
		push	eax
		call	argv_iter_init_stream
		add	esp, 10h
		mov	[ebp+ai], eax
		jmp	short loc_800176D
; ---------------------------------------------------------------------------

loc_800173A:				; CODE XREF: main+7CCj
		mov	eax, ds:optind
		cmp	eax, [ebx]
		jge	short loc_8001756
		mov	eax, ds:optind
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		jmp	short loc_8001759
; ---------------------------------------------------------------------------

loc_8001756:				; CODE XREF: main+8D4j
		lea	eax, [ebp+cwd_only]

loc_8001759:				; CODE XREF: main+8E7j
		mov	[ebp+files], eax
		sub	esp, 0Ch
		push	[ebp+files]
		call	argv_iter_init_argv
		add	esp, 10h
		mov	[ebp+ai], eax

loc_800176D:				; CODE XREF: main+8CBj
		cmp	[ebp+ai], 0
		jnz	short loc_8001778
		call	xalloc_die

loc_8001778:				; CODE XREF: main+904j
		call	hash_init
		mov	eax, [ebp+symlink_deref_bits]
		or	[ebp+bit_flags], eax

loc_8001783:				; CODE XREF: main+99Dj	main+AB2j ...
		mov	[ebp+skip_file], 0
		sub	esp, 8
		lea	eax, [ebp+ai_err]
		push	eax
		push	[ebp+ai]
		call	argv_iter
		add	esp, 10h
		mov	[ebp+file_name], eax
		mov	eax, [ebp+ai_err]
		cmp	eax, 2
		jnz	short loc_80017C1
		sub	esp, 0Ch
		push	[ebp+ai]
		call	argv_iter_free
		add	esp, 10h
		cmp	[ebp+files_from], 0
		jnz	loc_8001955
		jmp	loc_80019AD
; ---------------------------------------------------------------------------

loc_80017C1:				; CODE XREF: main+935j
		cmp	[ebp+file_name], 0
		jnz	short loc_800182D
		mov	eax, [ebp+ai_err]
		cmp	eax, 3
		jz	short loc_800180F
		cmp	eax, 4
		jnz	short loc_8001814
		sub	esp, 0Ch
		push	[ebp+files_from]
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aSReadError ; "%s: read error"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		push	esi
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		jmp	loc_8001783
; ---------------------------------------------------------------------------

loc_800180F:				; CODE XREF: main+960j
		call	xalloc_die

loc_8001814:				; CODE XREF: main+965j
		push	offset __PRETTY_FUNCTION___5750	; "main"
		push	3CEh		; line
		push	offset file	; "du.c"
		push	offset aUnexpectedErro ; "!\"unexpected	error code from	argv_iter"...
		call	__assert_fail
; ---------------------------------------------------------------------------

loc_800182D:				; CODE XREF: main+958j
		cmp	[ebp+files_from], 0
		jz	short loc_8001893
		sub	esp, 8
		push	offset asc_8002E5C ; "-"
		push	[ebp+files_from] ; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		jnz	short loc_8001893
		sub	esp, 8
		push	offset asc_8002E5C ; "-"
		push	[ebp+file_name]	; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		jnz	short loc_8001893
		sub	esp, 0Ch
		push	[ebp+file_name]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aWhenReadingFil ; "when reading file names from stdin, no "...
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	[ebp+skip_file], 1

loc_8001893:				; CODE XREF: main+9C4j	main+9DBj ...
		mov	eax, [ebp+file_name]
		movzx	eax, byte ptr [eax]
		test	al, al
		jnz	short loc_8001915
		cmp	[ebp+files_from], 0
		jnz	short loc_80018C7
		sub	esp, 0Ch
		push	offset aInvalidZeroLen ; "invalid zero-length file name"
		call	gettext
		add	esp, 10h
		push	eax
		push	offset aS	; "%s"
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		jmp	short loc_8001911
; ---------------------------------------------------------------------------

loc_80018C7:				; CODE XREF: main+A34j
		sub	esp, 0Ch
		push	[ebp+ai]
		call	argv_iter_n_args
		add	esp, 10h
		mov	[ebp+file_number], eax
		sub	esp, 0Ch
		push	offset aInvalidZeroLen ; "invalid zero-length file name"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	[ebp+files_from]
		call	quotearg_colon
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	[ebp+file_number]
		push	eax
		push	offset aSLuS	; "%s:%lu: %s"
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 20h

loc_8001911:				; CODE XREF: main+A58j
		mov	[ebp+skip_file], 1

loc_8001915:				; CODE XREF: main+A2Ej
		cmp	[ebp+skip_file], 0
		jz	short loc_8001924
		mov	[ebp+ok], 0
		jmp	loc_8001783
; ---------------------------------------------------------------------------

loc_8001924:				; CODE XREF: main+AACj
		mov	eax, [ebp+file_name]
		mov	ds:temp_argv_5741, eax
		sub	esp, 8
		push	[ebp+bit_flags]	; bit_flags
		push	offset temp_argv_5741 ;	files
		call	du_files
		add	esp, 10h
		movzx	edx, [ebp+ok]
		movzx	eax, al
		and	eax, edx
		test	eax, eax
		setnz	al
		mov	[ebp+ok], al
		jmp	loc_8001783
; ---------------------------------------------------------------------------

loc_8001955:				; CODE XREF: main+949j
		mov	eax, ds:stdin
		sub	esp, 0Ch
		push	eax		; stream
		call	ferror_unlocked
		add	esp, 10h
		test	eax, eax
		jnz	short loc_800197F
		mov	eax, ds:stdin
		sub	esp, 0Ch
		push	eax		; stream
		call	fclose
		add	esp, 10h
		test	eax, eax
		jz	short loc_80019AD

loc_800197F:				; CODE XREF: main+AFBj
		sub	esp, 0Ch
		push	[ebp+files_from]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aErrorReadingS ;	"error reading %s"
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_80019AD:				; CODE XREF: main+94Fj	main+B10j
		movzx	eax, ds:print_grand_total
		test	al, al
		jz	short loc_80019D9
		sub	esp, 0Ch
		push	offset aTotal	; "total"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	eax		; string
		push	offset tot_dui	; pdui
		call	print_size
		add	esp, 10h

loc_80019D9:				; CODE XREF: main+B49j
		mov	eax, ds:htab
		sub	esp, 0Ch
		push	eax
		call	hash_free
		add	esp, 10h
		cmp	[ebp+ok], 0
		jz	short loc_80019F7
		mov	eax, 0
		jmp	short loc_80019FC
; ---------------------------------------------------------------------------

loc_80019F7:				; CODE XREF: main+B81j
		mov	eax, 1

loc_80019FC:				; CODE XREF: main+B88j
		sub	esp, 0Ch
		push	eax		; status

loc_8001A00:				; DATA XREF: .eh_frame:08002F70o
					; .eh_frame:08002F90o ...
		call	exit
main		endp

_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 8001A08h
; size_t max_depth
max_depth	dd 0FFFFFFFFh		; DATA XREF: process_file:loc_8000D32r
					; process_file+53Dr ...
_data		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 8001A10h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
; Hash_table *htab
htab		dd ?			; DATA XREF: hash_ins+4Br
					; hash_init+24w ...
; _Bool	opt_all
opt_all		db ?			; DATA XREF: process_file:loc_8000D3Cr
					; main:loc_80010F3w ...
; _Bool	apparent_size
apparent_size	db ?			; DATA XREF: process_file:loc_8000AA1r
					; main:loc_80010FFw ...
; _Bool	opt_count_all
opt_count_all	db ?			; DATA XREF: process_file+1CBr
					; main:loc_8001237w
; _Bool	opt_nul_terminate_output
opt_nul_terminate_output db ?		; DATA XREF: print_size:loc_80007CBr
					; main:loc_80010E7w
; _Bool	print_grand_total
print_grand_total db ?			; DATA XREF: main:loc_8001135w
					; main:loc_80019ADr
; _Bool	opt_separate_dirs
opt_separate_dirs db ?			; DATA XREF: process_file+40Ar
					; process_file+4A2r ...
		align 4
; int human_output_opts
human_output_opts dd ?			; DATA XREF: print_only_size+38r
					; main+D8o ...
; _Bool	opt_time
opt_time	db ?			; DATA XREF: print_size+1Br
					; main:loc_800135Ew ...
		align 4
; time_type time_type_0
time_type_0	dd ?			; DATA XREF: process_file:loc_8000A3Cr
					; process_file:loc_8000A59r ...
; const	char *time_style_0
time_style_0	dd ?			; DATA XREF: main+544w	main+69Fr ...
; const	char *time_format
time_format	dd ?			; DATA XREF: print_size+33r main+75Dw	...
; uintmax_t output_block_size
output_block_size dq ?			; DATA XREF: print_only_size+2Dr
					; main+D3o ...
; exclude *exclude_0
exclude_0	dd ?			; DATA XREF: process_file+34r main+BBw ...
; duinfo tot_dui
tot_dui		duinfo <?>		; DATA XREF: process_file+4F0o
					; main+B5Fo
; Function-local static	variable
; size_t n_alloc_5658
n_alloc_5658	dd ?			; DATA XREF: process_file+2F5r
					; process_file+304w ...
; Function-local static	variable
; dulevel *dulvl_5659
dulvl_5659	dd ?			; DATA XREF: process_file+31Cw
					; process_file+34Cr ...
; Function-local static	variable
; size_t prev_level_5657
prev_level_5657	dd ?			; DATA XREF: process_file:loc_8000B30r
					; process_file+334r ...
; Function-local static	variable
; char *temp_argv_5741[2]
temp_argv_5741	dd ?			; DATA XREF: main+ABAw	main+AC5o
		align 10h
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment '32byte' can not be represented in assembly
_rodata		segment	para public 'CONST' use32
		assume cs:_rodata
		;org 8001A60h
; char msgid[]
msgid		db 0Ah			; DATA XREF: emit_size_note+10o
		db 'SIZE may be (or may be an integer optionally followed by) one of '
		db 'following:',0Ah
		db 'KB 1000, K 1024, MB 1000*1000, M 1024*1024, and so on for G, T, P'
		db ', E, Z, Y.',0Ah,0
		align 4
; char aDisplayValuesA[]
aDisplayValuesA	db 0Ah			; DATA XREF: emit_blocksize_note+9o
		db 'Display values are in units of the first available SIZE from --bl'
		db 'ock-size,',0Ah
		db 'and the %s_BLOCK_SIZE, BLOCK_SIZE and BLOCKSIZE environment varia'
		db 'bles.',0Ah
		db 'Otherwise, units default to 1024 bytes (or 512 if POSIXLY_CORRECT'
		db ' is set).',0Ah,0
; char aReportSBugsToS[]
aReportSBugsToS	db 0Ah			; DATA XREF: emit_ancillary_info+1Do
		db 'Report %s bugs to %s',0Ah,0
aBugCoreutils@g	db 'bug-coreutils@gnu.org',0 ; DATA XREF: emit_ancillary_info+2Do
; char aSHomePageHttpW[]
aSHomePageHttpW	db '%s home page: <http://www.gnu.org/software/%s/>',0Ah,0
					; DATA XREF: emit_ancillary_info+3Fo
; char domainname[]
domainname	db 'coreutils',0        ; DATA XREF: emit_ancillary_info+4Fo
					; main+89o ...
aGnuCoreutils	db 'GNU coreutils',0    ; DATA XREF: emit_ancillary_info+54o
					; main+58Do
		align 4
; char aGeneralHelpUsi[]
aGeneralHelpUsi	db 'General help using GNU software: <http://www.gnu.org/gethelp/>',0Ah,0
					; DATA XREF: emit_ancillary_info+6Bo
; char s2[]
s2		db 'en_',0              ; DATA XREF: emit_ancillary_info+A2o
; char aReportSTransla[]
aReportSTransla	db 'Report %s translation bugs to <http://translationproject.org/team'
					; DATA XREF: emit_ancillary_info+CCo
		db '/>',0Ah,0
		align 10h
; char aForCompleteDoc[]
aForCompleteDoc	db 'For complete documentation, run: info coreutils ',27h,'%s invocation'
					; DATA XREF: emit_ancillary_info+FCo
		db 27h,0Ah,0
aAll		db 'all',0              ; DATA XREF: .rodata:long_optionso
aApparentSize	db 'apparent-size',0    ; DATA XREF: .rodata:long_optionso
aBlockSize	db 'block-size',0       ; DATA XREF: .rodata:long_optionso
aBytes		db 'bytes',0            ; DATA XREF: .rodata:long_optionso
aCountLinks	db 'count-links',0      ; DATA XREF: .rodata:long_optionso
aDereference	db 'dereference',0      ; DATA XREF: .rodata:long_optionso
aDereferenceArg	db 'dereference-args',0 ; DATA XREF: .rodata:long_optionso
aExclude	db 'exclude',0          ; DATA XREF: .rodata:long_optionso
aExcludeFrom	db 'exclude-from',0     ; DATA XREF: .rodata:long_optionso
aFiles0From	db 'files0-from',0      ; DATA XREF: .rodata:long_optionso
aHumanReadable	db 'human-readable',0   ; DATA XREF: .rodata:long_optionso
aSi		db 'si',0               ; DATA XREF: .rodata:long_optionso
aMaxDepth	db 'max-depth',0        ; DATA XREF: .rodata:long_optionso
aNull		db 'null',0             ; DATA XREF: .rodata:long_optionso
aNoDereference	db 'no-dereference',0   ; DATA XREF: .rodata:long_optionso
aOneFileSystem	db 'one-file-system',0  ; DATA XREF: .rodata:long_optionso
aSeparateDirs	db 'separate-dirs',0    ; DATA XREF: .rodata:long_optionso
aSummarize	db 'summarize',0        ; DATA XREF: .rodata:long_optionso
; char aTotal[]
aTotal		db 'total',0            ; DATA XREF: main+B4Eo
					; .rodata:long_optionso
aTime_0		db 'time',0             ; DATA XREF: .rodata:long_optionso
aTimeStyle_0	db 'time-style',0       ; DATA XREF: .rodata:long_optionso
aHelp		db 'help',0             ; DATA XREF: .rodata:long_optionso
aVersion	db 'version',0          ; DATA XREF: .rodata:long_optionso
		align 20h
; const	option long_options[24]
long_options	option <offset aAll, 0,	0, 61h>	; DATA XREF: main+F4o
					; main+423o
		option <offset aApparentSize, 0, 0, 80h> ; "all"
		option <offset aBlockSize, 1, 0, 42h>
		option <offset aBytes, 0, 0, 62h>
		option <offset aCountLinks, 0, 0, 6Ch>
		option <offset aDereference, 0,	0, 4Ch>
		option <offset aDereferenceArg,	0, 0, 44h>
		option <offset aExclude, 1, 0, 81h>
		option <offset aExcludeFrom, 1,	0, 58h>
		option <offset aFiles0From, 1, 0, 82h>
		option <offset aHumanReadable, 0, 0, 68h>
		option <offset aSi, 0, 0, 83h>
		option <offset aMaxDepth, 1, 0,	84h>
		option <offset aNull, 0, 0, 30h>
		option <offset aNoDereference, 0, 0, 50h>
		option <offset aOneFileSystem, 0, 0, 78h>
		option <offset aSeparateDirs, 0, 0, 53h>
		option <offset aSummarize, 0, 0, 73h>
		option <offset aTotal, 0, 0, 63h>
		option <offset aTime_0,	2, 0, 85h>
		option <offset aTimeStyle_0, 1,	0, 86h>
		option <offset aHelp, 0, 0, 0FFFFFF7Eh>
		option <offset aVersion, 0, 0, 0FFFFFF7Dh>
		option	<0>
aAtime		db 'atime',0            ; DATA XREF: .rodata:time_argso
aAccess		db 'access',0           ; DATA XREF: .rodata:time_argso
aUse		db 'use',0              ; DATA XREF: .rodata:time_argso
aCtime		db 'ctime',0            ; DATA XREF: .rodata:time_argso
aStatus		db 'status',0           ; DATA XREF: .rodata:time_argso
		align 10h
; const	char *const time_args[6]
time_args	dd offset aAtime, offset aAccess, offset aUse, offset aCtime
					; DATA XREF: main+517o
		dd offset aStatus, 0	; "atime"
; const	time_type time_types[5]
time_types	dd 3 dup(time_atime), 2	dup(time_ctime)	; DATA XREF: main+512o
					; main+52Ar
aFullIso	db 'full-iso',0         ; DATA XREF: .rodata:time_style_argso
aLongIso	db 'long-iso',0         ; DATA XREF: main:loc_8001551o
					; .rodata:time_style_argso
aIso		db 'iso',0              ; DATA XREF: .rodata:time_style_argso
		align 4
; const	char *const time_style_args[4]
time_style_args	dd offset aFullIso, offset aLongIso, offset aIso, 0 ; DATA XREF: main+77Ao
					; "full-iso"
; const	time_style time_style_types[3]
time_style_types dd full_iso_time_style, long_iso_time_style, iso_time_style
					; DATA XREF: main+775o	main+78Dr
; char aTrySHelpForMor[]
aTrySHelpForMor	db 'Try `%s --help',27h,' for more information.',0Ah,0
					; DATA XREF: usage+14o
		align 4
; char aUsageSOption__[]
aUsageSOption__	db 'Usage: %s [OPTION]... [FILE]...',0Ah ; DATA XREF: usage+4Ao
		db '  or:  %s [OPTION]... --files0-from=F',0Ah,0
		align 10h
; char aSummarizeDiskU[]
aSummarizeDiskU	db 'Summarize disk usage of each FILE, recursively for directories.',0Ah
					; DATA XREF: usage+6Eo
		db 0Ah,0
		align 4
; char aMandatoryArgum[]
aMandatoryArgum	db 'Mandatory arguments to long options are mandatory for short optio'
					; DATA XREF: usage+91o
		db 'ns too.',0Ah,0
		align 10h
; char aAAllWriteCount[]
aAAllWriteCount	db '  -a, --all             write counts for all files, not just dire'
					; DATA XREF: usage+B4o
		db 'ctories',0Ah
		db '      --apparent-size   print apparent sizes, rather than disk us'
		db 'age; although',0Ah
		db '                          the apparent size is usually smaller, i'
		db 't may be',0Ah
		db '                          larger due to holes in (`sparse',27h,') fi'
		db 'les, internal',0Ah
		db '                          fragmentation, indirect blocks, and the'
		db ' like',0Ah,0
		align 4
; char aBBlockSizeSize[]
aBBlockSizeSize	db '  -B, --block-size=SIZE  use SIZE-byte blocks',0Ah
					; DATA XREF: usage+D7o
		db '  -b, --bytes           equivalent to `--apparent-size --block-si'
		db 'ze=1',27h,0Ah
		db '  -c, --total           produce a grand total',0Ah
		db '  -D, --dereference-args  dereference only symlinks that are list'
		db 'ed on the',0Ah
		db '                          command line',0Ah,0
		align 10h
; char aFiles0FromFSum[]
aFiles0FromFSum	db '      --files0-from=F   summarize disk usage of the NUL-terminate'
					; DATA XREF: usage+FAo
		db 'd file',0Ah
		db '                          names specified in file F;',0Ah
		db '                          If F is - then read names from standard'
		db ' input',0Ah
		db '  -H                    equivalent to --dereference-args (-D)',0Ah
		db '  -h, --human-readable  print sizes in human readable format (e.g'
		db '., 1K 234M 2G)',0Ah
		db '      --si              like -h, but use powers of 1000 not 1024',0Ah
		db 0
		align 4
; char aKLikeBlockSize[]
aKLikeBlockSize	db '  -k                    like --block-size=1K',0Ah
					; DATA XREF: usage+11Do
		db '  -l, --count-links     count sizes many times if hard linked',0Ah
		db '  -m                    like --block-size=1M',0Ah,0
		align 4
; char aLDereferenceDe[]
aLDereferenceDe	db '  -L, --dereference     dereference all symbolic links',0Ah
					; DATA XREF: usage+140o
		db '  -P, --no-dereference  don',27h,'t follow any symbolic links (this '
		db 'is the default)',0Ah
		db '  -0, --null            end each output line with 0 byte rather t'
		db 'han newline',0Ah
		db '  -S, --separate-dirs   do not include size of subdirectories',0Ah
		db '  -s, --summarize       display only a total for each argument',0Ah,0
; char aXOneFileSystem[]
aXOneFileSystem	db '  -x, --one-file-system    skip directories on different file sys'
					; DATA XREF: usage+163o
		db 'tems',0Ah
		db '  -X, --exclude-from=FILE  exclude files that match any pattern i'
		db 'n FILE',0Ah
		db '      --exclude=PATTERN    exclude files that match PATTERN',0Ah
		db '      --max-depth=N     print the total for a directory (or file,'
		db ' with --all)',0Ah
		db '                          only if it is N or fewer levels below t'
		db 'he command',0Ah
		db '                          line argument;  --max-depth=0 is the sa'
		db 'me as',0Ah
		db '                          --summarize',0Ah,0
		align 4
; char aTimeShowTimeOf[]
aTimeShowTimeOf	db '      --time            show time of the last modification of any'
					; DATA XREF: usage+186o
		db ' file in the',0Ah
		db '                          directory, or any of its subdirectories'
		db 0Ah
		db '      --time=WORD       show time as WORD instead of modification'
		db ' time:',0Ah
		db '                          atime, access, use, ctime or status',0Ah
		db '      --time-style=STYLE  show times using style STYLE:',0Ah
		db '                          full-iso, long-iso, iso, +FORMAT',0Ah
		db '                          FORMAT is interpreted like `date',27h,0Ah,0
		align 10h
; char aHelpDisplayThi[]
aHelpDisplayThi	db '      --help     display this help and exit',0Ah,0
					; DATA XREF: usage+1A9o
		align 10h
; char aVersionOutputV[]
aVersionOutputV	db '      --version  output version information and exit',0Ah,0
					; DATA XREF: usage+1CCo
; char program[]
program		db 'DU',0               ; DATA XREF: usage+1E9o
; char aTimeSIsOutOfRa[]
aTimeSIsOutOfRa	db 'time %s is out of range',0 ; DATA XREF: show_date+48o
; char format[]
format		db 9,'%s%c',0           ; DATA XREF: print_size+6Bo
; char aCannotAccessS[]
aCannotAccessS	db 'cannot access %s',0 ; DATA XREF: process_file+ABo
; char aS[]
aS		db '%s',0               ; DATA XREF: process_file+EAo
					; main+4A9o ...
; char aCannotReadDire[]
aCannotReadDire	db 'cannot read directory %s',0 ; DATA XREF: process_file+129o
; char aWarningCircula[]
aWarningCircula	db 'WARNING: Circular directory structure.',0Ah
					; DATA XREF: process_file+179o
		db 'This almost certainly means that you have a corrupted file system'
		db '.',0Ah
		db 'NOTIFY YOUR SYSTEM MANAGER.',0Ah
		db 'The following directory is part of the cycle:',0Ah
		db '  %s',0Ah,0
; char file[]
file		db 'du.c',0             ; DATA XREF: process_file+3DBo
					; main+9B1o
; char assertion[]
assertion	db 'level == prev_level - 1',0 ; DATA XREF: process_file+3E0o
; char aFts_readFailed[]
aFts_readFailed	db 'fts_read failed',0  ; DATA XREF: du_files+53o
; char aFts_closeFaile[]
aFts_closeFaile	db 'fts_close failed',0 ; DATA XREF: du_files+B8o
; char s[]
s		db '.',0                ; DATA XREF: main+47o
; char locale
locale		db 0			; DATA XREF: main+72o
; char dirname[]
dirname		db '/usr/local/share/locale',0 ; DATA XREF: main+84o
; char name[]
name		db 'DU_BLOCK_SIZE',0    ; DATA XREF: main+C3o
; char shortopts[]
shortopts	db '0abchHklmsxB:DLPSX:',0 ; DATA XREF: main+F9o
; char aInvalidMaximum[]
aInvalidMaximum	db 'invalid maximum depth %s',0 ; DATA XREF: main+383o
aTime		db '--time',0           ; DATA XREF: main+51Do
aTorbjRnGranlun	db 'Torbjörn Granlund',0 ; DATA XREF: main+558o
aTorbjornGranlu	db 'Torbjorn Granlund',0 ; DATA XREF: main+55Do
aJimMeyering	db 'Jim Meyering',0     ; DATA XREF: main+57Co
aPaulEggert	db 'Paul Eggert',0      ; DATA XREF: main+581o
aDavidMackenzie	db 'David MacKenzie',0  ; DATA XREF: main+586o
aDu_0		db 'du',0               ; DATA XREF: main+592o
		align 4
; char aCannotBothSumm[]
aCannotBothSumm	db 'cannot both summarize and show all entries',0 ; DATA XREF: main+5DDo
		align 4
; char aWarningSummari[]
aWarningSummari	db 'warning: summarizing is the same as using --max-depth=0',0
					; DATA XREF: main+61Co
; char aWarningSumma_0[]
aWarningSumma_0	db 'warning: summarizing conflicts with --max-depth=%lu',0
					; DATA XREF: main+659o
; char aTime_style[]
aTime_style	db 'TIME_STYLE',0       ; DATA XREF: main+6AFo
; char aLocale[]
aLocale		db 'locale',0           ; DATA XREF: main+6D2o
aTimeStyle	db 'time style',0       ; DATA XREF: main+780o
aYMDHMS_NZ	db '%Y-%m-%d %H:%M:%S.%N %z',0 ; DATA XREF: main:loc_8001612o
aYMDHM		db '%Y-%m-%d %H:%M',0   ; DATA XREF: main:loc_800161Eo
aYMD		db '%Y-%m-%d',0         ; DATA XREF: main:loc_800162Ao
; char aExtraOperandS[]
aExtraOperandS	db 'extra operand %s',0 ; DATA XREF: main+7FFo
		align 4
; char aFileOperandsCa[]
aFileOperandsCa	db 'file operands cannot be combined with --files0-from',0
					; DATA XREF: main+81Do
; char aS_0[]
aS_0		db '%s',0Ah,0           ; DATA XREF: main+835o
; char asc_8002E5C[]
asc_8002E5C	db '-',0                ; DATA XREF: main+850o main+9C9o ...
aR		db 'r',0                ; DATA XREF: main+86Do
; char aCannotOpenSFor[]
aCannotOpenSFor	db 'cannot open %s for reading',0 ; DATA XREF: main+894o
; char aSReadError[]
aSReadError	db '%s: read error',0   ; DATA XREF: main+97Ao
		align 4
; char aUnexpectedErro[]
aUnexpectedErro	db '!"unexpected error code from argv_iter"',0 ; DATA XREF: main+9B6o
; char aWhenReadingFil[]
aWhenReadingFil	db 'when reading file names from stdin, no file name of %s allowed',0
					; DATA XREF: main+A07o
; char aInvalidZeroLen[]
aInvalidZeroLen	db 'invalid zero-length file name',0 ; DATA XREF: main+A39o
					; main+A6Eo
; char aSLuS[]
aSLuS		db '%s:%lu: %s',0       ; DATA XREF: main+A93o
; char aErrorReadingS[]
aErrorReadingS	db 'error reading %s',0 ; DATA XREF: main+B25o
		align 10h
; Function-local static	variable
; const	char _PRETTY_FUNCTION___5674[13]
__PRETTY_FUNCTION___5674 db 'process_file',0 ; DATA XREF: process_file+3D1o
		align 10h
; Function-local static	variable
; const	char posix_prefix_5731[7]
posix_prefix_5731 db 'posix-',0         ; DATA XREF: main+737o
		align 4
; Function-local static	variable
; const	char _PRETTY_FUNCTION___5750[5]
__PRETTY_FUNCTION___5750 db 'main',0    ; DATA XREF: main:loc_8001814o
_rodata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_eh_frame	segment	dword public 'CONST' use32
		assume cs:_eh_frame
		;org 8002F50h
		dd 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 2	dup(1Ch)
		dd offset loc_8001A00-8004970h
		dd 46h,	80E4100h, 0D420285h, 0C5420205h, 4040Ch, 20h, 3Ch
		dd offset loc_8001A00-800494Ah
		dd 30h,	80E4100h, 0D420285h, 3834405h, 0CC3C568h, 404h
		dd 1Ch,	60h
		dd offset loc_8001A00-800493Eh
		dd 28h,	80E4100h, 0D420285h, 0CC56405h,	404h, 20h, 80h
		dd offset loc_8001A00-8004936h
		dd 11Ch, 80E4100h, 0D420285h, 3834405h,	0C5011403h, 4040CC3h
		dd 1Ch,	0A4h
		dd offset loc_8001A00-800483Eh
		dd 1Ch,	80E4100h, 0D420285h, 0CC55805h,	404h, 1Ch, 0C4h
		dd offset loc_8001A00-8004842h
		dd 8, 80E4100h,	0D420285h, 0CC54405h, 404h, 1Ch, 0E4h
		dd offset loc_8001A00-800485Ah
		dd 1Bh,	80E4100h, 0D420285h, 0CC55505h,	404h, 1Ch, 104h
		dd offset loc_8001A00-800485Fh
		dd 1Bh,	80E4100h, 0D420285h, 0CC55505h,	404h, 1Ch, 124h
		dd offset loc_8001A00-8004864h
		dd 1Bh,	80E4100h, 0D420285h, 0CC55505h,	404h, 1Ch, 144h
		dd offset loc_8001A00-8004869h
		dd 2Ah,	80E4100h, 0D420285h, 0CC56605h,	404h, 1Ch, 164h
		dd offset loc_8001A00-800485Fh
		dd 32h,	80E4100h, 0D420285h, 0CC56E05h,	404h, 20h, 184h
		dd offset loc_8001A00-800484Dh
		dd 59h,	80E4100h, 0D420285h, 3834405h, 0C3C55102h, 4040Ch
		dd 1Ch,	1A8h
		dd offset loc_8001A00-8004818h
		dd 20Bh, 80E4100h, 0D420285h, 3864205h,	483h, 20h, 1C8h
		dd offset loc_8001A00-800462Dh
		dd 2Eh,	80E4100h, 0D420285h, 3834405h, 0CC3C566h, 404h
		dd 24h,	1ECh
		dd offset loc_8001A00-8004623h
		dd 64h,	80E4100h, 0D420285h, 3864505h, 59020483h, 41C641C3h
		dd 4040CC5h, 1Ch, 214h
		dd offset loc_8001A00-80045E7h
		dd 91h,	80E4100h, 0D420285h, 0C58D0205h, 4040Ch, 1Ch, 234h
		dd offset loc_8001A00-8004576h
		dd 3Ah,	80E4100h, 0D420285h, 0CC57605h,	404h, 20h, 254h
		dd offset loc_8001A00-800455Ch
		dd 0AEh, 80E4100h, 0D420285h, 3834405h,	0C3C5A602h, 4040Ch
		dd 20h,	278h
		dd offset loc_8001A00-80044D2h
		dd 84h,	80E4100h, 0D420285h, 3834705h, 0C3C57902h, 4040Ch
		dd 1Ch,	29Ch
		dd offset loc_8001A00-8004472h
		dd 8Ch,	80E4100h, 0D420285h, 0C5880205h, 4040Ch, 20h, 2BCh
		dd offset loc_8001A00-8004406h
		dd 579h, 80E4100h, 0D420285h, 3834405h,	0C5057103h, 4040CC3h
		dd 20h,	2E0h
		dd offset loc_8001A00-8003EB1h
		dd 0EAh, 80E4100h, 0D420285h, 3834405h,	0C3C5E202h, 4040Ch
		dd 28h,	304h
		dd offset loc_8001A00-8003DEBh
		dd 0B98h, 10C4400h, 5104700h, 45007502h, 7475030Fh, 2061006h
		dd 3107C75h, 787502h
_eh_frame	ends

; ===========================================================================

; Segment type:	Externs
; extern
; struct _IO_FILE *stdout
		extrn stdout:dword	; DATA XREF: emit_size_note+7r
					; emit_ancillary_info+62r ...
; char *gettext(const char *msgid)
		extrn gettext:near	; CODE XREF: emit_size_note+15p
					; emit_blocksize_note+Ep ...
		extrn fputs_unlocked:near ; CODE XREF: emit_size_note+22p
					; emit_ancillary_info+7Dp ...
; int printf(const char	*format, ...)
		extrn printf:near	; CODE XREF: emit_blocksize_note+1Dp
					; emit_ancillary_info+34p ...
		extrn program_name:dword ; DATA	XREF: emit_ancillary_info+7r
					; emit_ancillary_info+B6r ...
		extrn last_component:near ; CODE XREF: emit_ancillary_info+10p
					; emit_ancillary_info+BFp ...
; char *setlocale(int category,	const char *locale)
		extrn setlocale:near	; CODE XREF: emit_ancillary_info+8Cp
					; main+79p
; int strncmp(const char *s1, const char *s2, size_t n)
		extrn strncmp:near	; CODE XREF: emit_ancillary_info+AAp
					; main+73Dp
		extrn imaxtostr:near	; CODE XREF: timetostr+12p
; struct _IO_FILE *stderr
		extrn stderr:dword	; DATA XREF: usage+23r	main+82Cr
; int fprintf(FILE *stream, const char *format,	...)
		extrn fprintf:near	; CODE XREF: usage+2Ep	main+83Bp
; void exit(int	status)
		extrn exit:near		; CODE XREF: usage+206p main+5A5p ...
		extrn __umoddi3:near	; CODE XREF: entry_hash+21p
; void *xmalloc(size_t)
		extrn xmalloc:near	; CODE XREF: hash_ins+23p
		extrn hash_insert:near	; CODE XREF: hash_ins+57p
		extrn xalloc_die:near	; CODE XREF: hash_ins+68p
					; hash_init+32p ...
; void free(void *ptr)
		extrn free:near		; CODE XREF: hash_ins+82p
					; DATA XREF: hash_init+9o
		extrn hash_initialize:near ; CODE XREF:	hash_init+1Cp
; struct tm *localtime(const time_t *timer)
		extrn localtime:near	; CODE XREF: show_date+1Fp
; void error(int status, int errnum, const char	*format, ...)
		extrn error:near	; CODE XREF: show_date+5Bp
					; process_file+C5p ...
		extrn fprintftime:near	; CODE XREF: show_date+90p
		extrn __stack_chk_fail:near ; CODE XREF: show_date+A4p
					; print_only_size+7Ap ...
		extrn human_readable:near ; CODE XREF: print_only_size+58p
; int putchar_unlocked(int c)
		extrn putchar_unlocked:near ; CODE XREF: print_size+2Bp
; int fflush_unlocked(FILE *stream)
		extrn fflush_unlocked:near ; CODE XREF:	print_size+81p
		extrn excluded_file_name:near ;	CODE XREF: process_file+40p
; int fts_set(FTS *, FTSENT *, int)
		extrn fts_set:near	; CODE XREF: process_file+5Cp
		extrn quote:near	; CODE XREF: process_file+9Ep
					; process_file+DDp ...
		extrn cycle_warning_required:near ; CODE XREF: process_file+15Ap
; void *xcalloc(size_t,	size_t)
		extrn xcalloc:near	; CODE XREF: process_file+314p
		extrn xnrealloc:near	; CODE XREF: process_file+35Ap
; void _assert_fail(const char *assertion, const char *file, unsigned int line,	const char *function)
		extrn __assert_fail:near ; CODE	XREF: process_file+3E5p
					; main+9BBp
		extrn xfts_open:near	; CODE XREF: du_files+23p
; FTSENT *fts_read(FTS *)
		extrn fts_read:near	; CODE XREF: du_files+34p
; int *_errno_location(void)
		extrn __errno_location:near ; CODE XREF: du_files+45p
					; du_files+62p	...
; int fts_close(FTS *)
		extrn fts_close:near	; CODE XREF: du_files+A9p
		extrn set_program_name:near ; CODE XREF: main+67p
; char *bindtextdomain(const char *domainname, const char *dirname)
		extrn bindtextdomain:near ; CODE XREF: main+8Ep
; char *textdomain(const char *domainname)
		extrn textdomain:near	; CODE XREF: main+9Ep
; void close_stdout(void)
		extrn close_stdout	; DATA XREF: main+A9o
; int atexit(void (*func)(void))
		extrn atexit:near	; CODE XREF: main+AEp
		extrn new_exclude:near	; CODE XREF: main+B6p
; char *getenv(const char *name)
		extrn getenv:near	; CODE XREF: main+C8p main+6B4p
		extrn human_options:near ; CODE	XREF: main+DEp	main+3FBp
; int getopt_long(int argc, char *const	*argv, const char *shortopts, const struct option *longopts, int *longind)
		extrn getopt_long:near	; CODE XREF: main+103p
; char *optarg
		extrn optarg:dword	; DATA XREF: main:loc_80011AAr
					; main:loc_80011DAr ...
		extrn xstrtoul:near	; CODE XREF: main+350p
		extrn xstrtol_fatal:near ; CODE	XREF: main+42Dp
		extrn add_exclude:near	; CODE XREF: main+4E4p
					; DATA XREF: main+479o
		extrn add_exclude_file:near ; CODE XREF: main+47Ep
		extrn quotearg_colon:near ; CODE XREF: main+497p main+A83p
		extrn argmatch_die:dword ; DATA	XREF: main+501r
					; main:loc_80015D1r
		extrn __xargmatch_internal:near	; CODE XREF: main+522p
					; main+785p
		extrn proper_name_utf8:near ; CODE XREF: main+562p
		extrn Version:dword	; DATA XREF: main+56Cr
		extrn version_etc:near	; CODE XREF: main+598p
; int strcmp(const char	*s1, const char	*s2)
		extrn strcmp:near	; CODE XREF: main+6D8p	main+858p ...
; char *strchr(const char *s, int c)
		extrn strchr:near	; CODE XREF: main+707p
; int optind
		extrn optind:dword	; DATA XREF: main+7D2r	main+7DBr ...
; struct _IO_FILE *stdin
		extrn stdin:dword	; DATA XREF: main+864r
					; main:loc_8001724r ...
		extrn freopen_safer:near ; CODE	XREF: main+875p
		extrn argv_iter_init_stream:near ; CODE	XREF: main+8C0p
		extrn argv_iter_init_argv:near ; CODE XREF: main+8F5p
		extrn argv_iter:near	; CODE XREF: main+924p
		extrn argv_iter_free:near ; CODE XREF: main+93Dp
		extrn argv_iter_n_args:near ; CODE XREF: main+A60p
; int ferror_unlocked(FILE *stream)
		extrn ferror_unlocked:near ; CODE XREF:	main+AF1p
; int fclose(FILE *stream)
		extrn fclose:near	; CODE XREF: main+B06p
		extrn hash_free:near	; CODE XREF: main+B75p


		end
