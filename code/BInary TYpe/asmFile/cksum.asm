;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B611-7234-BB			    |
; |		Doskey Lee, Kingsoft Internet Security Software		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	344AFCAD4445DDABB566A9EF86836881
; Input	CRC32 :	83787572

; File Name   :	D:\coreutils-o\cksum.o
; Format      :	ELF for	Intel 386 (Relocatable)
;
; Source File :	'cksum.c'

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	byte public 'CODE' use32
		assume cs:_text
		;org 8000000h
		assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void emit_ancillary_info()
emit_ancillary_info proc near		; CODE XREF: usage+CEp

lc_messages	= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset msgid	; "\nReport %s bugs to %s\n"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset aBugCoreutils@g ; "bug-coreutils@gnu.org"
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	offset aSHomePageHttpW ; "%s home page:	<http://www.gnu.org/softw"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset domainname ; "coreutils"
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aGeneralHelpUsi ; "General help using GNU software: <http:"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		sub	esp, 8
		push	0		; locale
		push	5		; category
		call	setlocale
		add	esp, 10h
		mov	[ebp+lc_messages], eax
		cmp	[ebp+lc_messages], 0
		jz	short loc_80000E6
		sub	esp, 4
		push	3		; n
		push	offset s2	; "en_"
		push	[ebp+lc_messages] ; s1
		call	strncmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_80000E6
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aReportSTransla ; "Report %s translation	bugs to	<http://t"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h

loc_80000E6:				; CODE XREF: emit_ancillary_info+9Bj
					; emit_ancillary_info+B4j
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aForCompleteDoc ; "For complete documentation, run: info	c"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		nop
		mov	ebx, [ebp+var_4]
		leave
		retn
emit_ancillary_info endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; _Bool	__cdecl	cksum(const char *file,	_Bool print_name)
cksum		proc near		; CODE XREF: main+D7p main+109p

var_10068	= dword	ptr -10068h
var_10064	= dword	ptr -10064h
print_name	= byte ptr -10060h
file		= dword	ptr -1005Ch
crc		= dword	ptr -10054h
bytes_read	= dword	ptr -10050h
fp		= dword	ptr -1004Ch
cp		= dword	ptr -10048h
hp		= dword	ptr -10044h
length		= qword	ptr -10040h
length_buf	= byte ptr -10031h
buf		= byte ptr -1001Ch
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1005Ch
		mov	eax, [ebp+arg_4]
		mov	edx, [ebp+arg_0]
		mov	[ebp+file], edx
		mov	[ebp+print_name], al
		mov	eax, large gs:14h
		mov	[ebp+var_1C], eax
		xor	eax, eax
		mov	[ebp+crc], 0
		mov	dword ptr [ebp+length],	0
		mov	dword ptr [ebp+length+4], 0
		sub	esp, 8
		push	offset file	; "-"
		push	[ebp+file]	; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		jnz	short loc_8000194
		mov	eax, ds:stdin
		mov	[ebp+fp], eax
		mov	ds:have_read_stdin, 1
		jmp	loc_80002C6
; ---------------------------------------------------------------------------

loc_8000194:				; CODE XREF: cksum+5Fj
		sub	esp, 8
		push	offset aR	; "r"
		push	[ebp+file]
		call	fopen64
		add	esp, 10h
		mov	[ebp+fp], eax
		cmp	[ebp+fp], 0
		jnz	loc_80002C6
		call	__errno_location
		mov	eax, [eax]
		push	[ebp+file]
		push	offset format	; "%s"
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	eax, 0
		jmp	loc_80004FB
; ---------------------------------------------------------------------------

loc_80001E4:				; CODE XREF: cksum+1D3j
		lea	eax, [ebp+buf]
		mov	[ebp+cp], eax
		mov	ecx, [ebp+bytes_read]
		mov	ebx, 0
		mov	eax, dword ptr [ebp+length]
		mov	edx, dword ptr [ebp+length+4]
		add	eax, ecx
		adc	edx, ebx
		cmp	edx, dword ptr [ebp+length+4]
		ja	short loc_8000246
		cmp	edx, dword ptr [ebp+length+4]
		jb	short loc_8000223
		cmp	eax, dword ptr [ebp+length]
		jnb	short loc_8000246

loc_8000223:				; CODE XREF: cksum+FDj
		sub	esp, 0Ch
		push	offset aSFileTooLong ; "%s: file too long"
		call	gettext
		add	esp, 10h
		push	[ebp+file]
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_8000246:				; CODE XREF: cksum+F5j	cksum+105j
		mov	eax, [ebp+bytes_read]
		mov	edx, 0
		add	dword ptr [ebp+length],	eax
		adc	dword ptr [ebp+length+4], edx
		jmp	short loc_800029E
; ---------------------------------------------------------------------------

loc_800025F:				; CODE XREF: cksum+193j
		mov	eax, [ebp+crc]
		shl	eax, 8
		mov	ecx, eax
		mov	eax, [ebp+crc]
		shr	eax, 18h
		mov	ebx, eax
		mov	edx, [ebp+cp]
		lea	eax, [edx+1]
		mov	[ebp+cp], eax
		movzx	eax, byte ptr [edx]
		movzx	eax, al
		xor	eax, ebx
		movzx	eax, al
		mov	eax, ds:crctab[eax*4]
		xor	eax, ecx
		mov	[ebp+crc], eax

loc_800029E:				; CODE XREF: cksum+141j
		mov	eax, [ebp+bytes_read]
		lea	edx, [eax-1]
		mov	[ebp+bytes_read], edx
		test	eax, eax
		jnz	short loc_800025F
		sub	esp, 0Ch
		push	[ebp+fp]	; stream
		call	feof_unlocked
		add	esp, 10h
		test	eax, eax
		jnz	short loc_80002F7

loc_80002C6:				; CODE XREF: cksum+73j	cksum+9Bj
		push	[ebp+fp]	; stream
		push	10000h		; n
		push	1		; size
		lea	eax, [ebp+buf]
		push	eax		; ptr
		call	fread_unlocked
		add	esp, 10h
		mov	[ebp+bytes_read], eax
		cmp	[ebp+bytes_read], 0
		jnz	loc_80001E4
		jmp	short loc_80002F8
; ---------------------------------------------------------------------------

loc_80002F7:				; CODE XREF: cksum+1A8j
		nop

loc_80002F8:				; CODE XREF: cksum+1D9j
		sub	esp, 0Ch
		push	[ebp+fp]	; stream
		call	ferror_unlocked
		add	esp, 10h
		test	eax, eax
		jz	short loc_800035F
		call	__errno_location
		mov	eax, [eax]
		push	[ebp+file]
		push	offset format	; "%s"
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		sub	esp, 8
		push	offset file	; "-"
		push	[ebp+file]	; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_8000355
		sub	esp, 0Ch
		push	[ebp+fp]	; stream
		call	fclose
		add	esp, 10h

loc_8000355:				; CODE XREF: cksum+226j
		mov	eax, 0
		jmp	loc_80004FB
; ---------------------------------------------------------------------------

loc_800035F:				; CODE XREF: cksum+1EFj
		sub	esp, 8
		push	offset file	; "-"
		push	[ebp+file]	; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_80003B6
		sub	esp, 0Ch
		push	[ebp+fp]	; stream
		call	fclose
		add	esp, 10h
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_80003B6
		call	__errno_location
		mov	eax, [eax]
		push	[ebp+file]
		push	offset format	; "%s"
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	eax, 0
		jmp	loc_80004FB
; ---------------------------------------------------------------------------

loc_80003B6:				; CODE XREF: cksum+25Bj cksum+271j
		sub	esp, 4
		lea	eax, [ebp+length_buf]
		push	eax
		push	dword ptr [ebp+length+4]
		push	dword ptr [ebp+length]
		call	umaxtostr
		add	esp, 10h
		mov	[ebp+hp], eax
		jmp	short loc_8000457
; ---------------------------------------------------------------------------

loc_80003DC:				; CODE XREF: cksum+349j
		mov	eax, [ebp+crc]
		shl	eax, 8
		mov	ecx, eax
		mov	eax, [ebp+crc]
		shr	eax, 18h
		mov	edx, 0
		mov	ebx, eax
		xor	ebx, dword ptr [ebp+length]
		mov	[ebp+var_10068], ebx
		mov	eax, edx
		xor	eax, dword ptr [ebp+length+4]
		mov	[ebp+var_10064], eax
		mov	eax, [ebp+var_10068]
		mov	edx, [ebp+var_10064]
		movzx	esi, al
		mov	eax, edx
		and	eax, 0
		mov	edi, eax
		mov	eax, esi
		mov	eax, ds:crctab[eax*4]
		xor	eax, ecx
		mov	[ebp+crc], eax
		mov	eax, dword ptr [ebp+length]
		mov	edx, dword ptr [ebp+length+4]
		shrd	eax, edx, 8
		shr	edx, 8
		mov	dword ptr [ebp+length],	eax
		mov	dword ptr [ebp+length+4], edx

loc_8000457:				; CODE XREF: cksum+2BEj
		mov	eax, dword ptr [ebp+length+4]
		or	eax, dword ptr [ebp+length]
		test	eax, eax
		jnz	loc_80003DC
		not	[ebp+crc]
		cmp	[ebp+print_name], 0
		jz	short loc_800049B
		push	[ebp+file]
		push	[ebp+hp]
		push	[ebp+crc]
		push	offset aUSS	; "%u %s %s\n"
		call	printf
		add	esp, 10h
		jmp	short loc_80004B7
; ---------------------------------------------------------------------------

loc_800049B:				; CODE XREF: cksum+35Cj
		sub	esp, 4
		push	[ebp+hp]
		push	[ebp+crc]
		push	offset aUS	; "%u %s\n"
		call	printf
		add	esp, 10h

loc_80004B7:				; CODE XREF: cksum+37Dj
		mov	eax, ds:stdout
		sub	esp, 0Ch
		push	eax		; stream
		call	ferror_unlocked
		add	esp, 10h
		test	eax, eax
		jz	short loc_80004F6
		sub	esp, 0Ch
		push	offset aWriteError ; "write error"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		push	ebx
		push	offset aS	; "-: %s"
		push	eax		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_80004F6:				; CODE XREF: cksum+3AEj
		mov	eax, 1

loc_80004FB:				; CODE XREF: cksum+C3j	cksum+23Ej ...
		mov	edi, [ebp+var_1C]
		xor	edi, large gs:14h
		jz	short loc_800050C
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_800050C:				; CODE XREF: cksum+3E9j
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
cksum		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; void __cdecl usage(int status)
		public usage
usage		proc near		; CODE XREF: main+B8p
					; DATA XREF: main+78o

status		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		cmp	[ebp+status], 0
		jz	short loc_800054F
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, ds:stderr
		sub	esp, 4
		push	ebx
		push	edx		; format
		push	eax		; stream
		call	fprintf
		add	esp, 10h
		jmp	loc_80005E7
; ---------------------------------------------------------------------------

loc_800054F:				; CODE XREF: usage+9j
		mov	esi, ds:program_name
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aUsageSFile___O ; "Usage: %s [FILE]...\n	 or:  %s [OPTION]"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	esi
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aPrintCrcChecks ; "Print	CRC checksum and byte counts of	e"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aHelpDisplayThi ; "	--help	   display this	help and "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aVersionOutputV ; "	--version  output version informa"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		call	emit_ancillary_info

loc_80005E7:				; CODE XREF: usage+36j
		sub	esp, 0Ch
		push	[ebp+status]	; status
		call	exit
usage		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public main
main		proc near

ok		= byte ptr -0Dh
i		= dword	ptr -0Ch
argc		= dword	ptr  0Ch
argv		= dword	ptr  10h
envp		= dword	ptr  14h

		lea	ecx, [esp+4]
		and	esp, 0FFFFFFF0h
		push	dword ptr [ecx-4]
		push	ebp
		mov	ebp, esp
		push	ebx
		push	ecx
		sub	esp, 10h
		mov	ebx, ecx
		mov	eax, [ebx+4]
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	set_program_name
		add	esp, 10h
		sub	esp, 8
		push	offset shortopts ; locale
		push	6		; category
		call	setlocale
		add	esp, 10h
		sub	esp, 8
		push	offset dirname	; "/usr/local/share/locale"
		push	offset domainname ; "coreutils"
		call	bindtextdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset domainname ; "coreutils"
		call	textdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset close_stdout ; func
		call	atexit
		add	esp, 10h
		mov	eax, ds:Version
		push	0
		push	offset aQ_FrankXia ; "Q. Frank Xia"
		push	offset usage
		push	eax
		push	offset domainname ; "coreutils"
		push	offset aCksum	; "cksum"
		push	dword ptr [ebx+4]
		push	dword ptr [ebx]
		call	parse_long_options
		add	esp, 20h
		sub	esp, 0Ch
		push	0		; longind
		push	0		; longopts
		push	offset shortopts ; shortopts
		push	dword ptr [ebx+4] ; argv
		push	dword ptr [ebx]	; argc
		call	getopt_long
		add	esp, 20h
		cmp	eax, 0FFFFFFFFh
		jz	short loc_80006AF
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_80006AF:				; CODE XREF: main+B1j
		mov	ds:have_read_stdin, 0
		mov	eax, ds:optind
		cmp	eax, [ebx]
		jnz	short loc_80006D6
		sub	esp, 8
		push	0		; print_name
		push	offset file	; "-"
		call	cksum
		add	esp, 10h
		mov	[ebp+ok], al
		jmp	short loc_800071F
; ---------------------------------------------------------------------------

loc_80006D6:				; CODE XREF: main+CBj
		mov	[ebp+ok], 1
		mov	eax, ds:optind
		mov	[ebp+i], eax
		jmp	short loc_8000718
; ---------------------------------------------------------------------------

loc_80006E4:				; CODE XREF: main+12Bj
		mov	eax, [ebp+i]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebx+4]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 8
		push	1		; print_name
		push	eax		; file
		call	cksum
		add	esp, 10h
		movzx	edx, [ebp+ok]
		movzx	eax, al
		and	eax, edx
		test	eax, eax
		setnz	al
		mov	[ebp+ok], al
		add	[ebp+i], 1

loc_8000718:				; CODE XREF: main+F0j
		mov	eax, [ebp+i]
		cmp	eax, [ebx]
		jl	short loc_80006E4

loc_800071F:				; CODE XREF: main+E2j
		movzx	eax, ds:have_read_stdin
		test	al, al
		jz	short loc_800075A
		mov	eax, ds:stdin
		sub	esp, 0Ch
		push	eax		; stream
		call	fclose
		add	esp, 10h
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_800075A
		call	__errno_location
		mov	eax, [eax]
		sub	esp, 4
		push	offset file	; "-"
		push	eax		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_800075A:				; CODE XREF: main+136j	main+14Cj
		cmp	[ebp+ok], 0
		jz	short loc_8000767
		mov	eax, 0
		jmp	short loc_800076C
; ---------------------------------------------------------------------------

loc_8000767:				; CODE XREF: main+16Cj
		mov	eax, 1

loc_800076C:				; CODE XREF: main+173j
		sub	esp, 0Ch
		push	eax		; status

loc_8000770:				; DATA XREF: .eh_frame:08000E54o
					; .eh_frame:08000E78o ...
		call	exit
main		endp

_text		ends

; ===========================================================================

; Segment type:	Zero-length
; Segment permissions: Read/Write
_data		segment	byte public 'DATA' use32
_data		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	byte public 'BSS' use32
		assume cs:_bss
		;org 8000776h
		assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing
; _Bool	have_read_stdin
have_read_stdin	db ?			; DATA XREF: cksum+6Cw
					; main:loc_80006AFw ...
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment '32byte' can not be represented in assembly
_rodata		segment	para public 'CONST' use32
		assume cs:_rodata
		;org 8000780h
; char msgid[]
msgid		db 0Ah			; DATA XREF: emit_ancillary_info+1Do
		db 'Report %s bugs to %s',0Ah,0
aBugCoreutils@g	db 'bug-coreutils@gnu.org',0 ; DATA XREF: emit_ancillary_info+2Do
		align 10h
; char aSHomePageHttpW[]
aSHomePageHttpW	db '%s home page: <http://www.gnu.org/software/%s/>',0Ah,0
					; DATA XREF: emit_ancillary_info+3Fo
; char domainname[]
domainname	db 'coreutils',0        ; DATA XREF: emit_ancillary_info+4Fo
					; main+3Fo ...
aGnuCoreutils	db 'GNU coreutils',0    ; DATA XREF: emit_ancillary_info+54o
		align 4
; char aGeneralHelpUsi[]
aGeneralHelpUsi	db 'General help using GNU software: <http://www.gnu.org/gethelp/>',0Ah,0
					; DATA XREF: emit_ancillary_info+6Bo
; char s2[]
s2		db 'en_',0              ; DATA XREF: emit_ancillary_info+A2o
; char aReportSTransla[]
aReportSTransla	db 'Report %s translation bugs to <http://translationproject.org/team'
					; DATA XREF: emit_ancillary_info+CCo
		db '/>',0Ah,0
		align 4
; char aForCompleteDoc[]
aForCompleteDoc	db 'For complete documentation, run: info coreutils ',27h,'%s invocation'
					; DATA XREF: emit_ancillary_info+FCo
		db 27h,0Ah,0
		align 20h
; const	uint_fast32_t crctab[256]
crctab		dd 0, 4C11DB7h,	9823B6Eh, 0D4326D9h, 130476DCh,	17C56B6Bh
					; DATA XREF: cksum+173r cksum+30Dr
		dd 1A864DB2h, 1E475005h, 2608EDB8h, 22C9F00Fh, 2F8AD6D6h
		dd 2B4BCB61h, 350C9B64h, 31CD86D3h, 3C8EA00Ah, 384FBDBDh
		dd 4C11DB70h, 48D0C6C7h, 4593E01Eh, 4152FDA9h, 5F15ADACh
		dd 5BD4B01Bh, 569796C2h, 52568B75h, 6A1936C8h, 6ED82B7Fh
		dd 639B0DA6h, 675A1011h, 791D4014h, 7DDC5DA3h, 709F7B7Ah
		dd 745E66CDh, 9823B6E0h, 9CE2AB57h, 91A18D8Eh, 95609039h
		dd 8B27C03Ch, 8FE6DD8Bh, 82A5FB52h, 8664E6E5h, 0BE2B5B58h
		dd 0BAEA46EFh, 0B7A96036h, 0B3687D81h, 0AD2F2D84h, 0A9EE3033h
		dd 0A4AD16EAh, 0A06C0B5Dh, 0D4326D90h, 0D0F37027h, 0DDB056FEh
		dd 0D9714B49h, 0C7361B4Ch, 0C3F706FBh, 0CEB42022h, 0CA753D95h
		dd 0F23A8028h, 0F6FB9D9Fh, 0FBB8BB46h, 0FF79A6F1h, 0E13EF6F4h
		dd 0E5FFEB43h, 0E8BCCD9Ah, 0EC7DD02Dh, 34867077h, 30476DC0h
		dd 3D044B19h, 39C556AEh, 278206ABh, 23431B1Ch, 2E003DC5h
		dd 2AC12072h, 128E9DCFh, 164F8078h, 1B0CA6A1h, 1FCDBB16h
		dd 18AEB13h, 54BF6A4h, 808D07Dh, 0CC9CDCAh, 7897AB07h
		dd 7C56B6B0h, 71159069h, 75D48DDEh, 6B93DDDBh, 6F52C06Ch
		dd 6211E6B5h, 66D0FB02h, 5E9F46BFh, 5A5E5B08h, 571D7DD1h
		dd 53DC6066h, 4D9B3063h, 495A2DD4h, 44190B0Dh, 40D816BAh
		dd 0ACA5C697h, 0A864DB20h, 0A527FDF9h, 0A1E6E04Eh, 0BFA1B04Bh
		dd 0BB60ADFCh, 0B6238B25h, 0B2E29692h, 8AAD2B2Fh, 8E6C3698h
		dd 832F1041h, 87EE0DF6h, 99A95DF3h, 9D684044h, 902B669Dh
		dd 94EA7B2Ah, 0E0B41DE7h, 0E4750050h, 0E9362689h, 0EDF73B3Eh
		dd 0F3B06B3Bh, 0F771768Ch, 0FA325055h, 0FEF34DE2h, 0C6BCF05Fh
		dd 0C27DEDE8h, 0CF3ECB31h, 0CBFFD686h, 0D5B88683h, 0D1799B34h
		dd 0DC3ABDEDh, 0D8FBA05Ah, 690CE0EEh, 6DCDFD59h, 608EDB80h
		dd 644FC637h, 7A089632h, 7EC98B85h, 738AAD5Ch, 774BB0EBh
		dd 4F040D56h, 4BC510E1h, 46863638h, 42472B8Fh, 5C007B8Ah
		dd 58C1663Dh, 558240E4h, 51435D53h, 251D3B9Eh, 21DC2629h
		dd 2C9F00F0h, 285E1D47h, 36194D42h, 32D850F5h, 3F9B762Ch
		dd 3B5A6B9Bh, 315D626h,	7D4CB91h, 0A97ED48h, 0E56F0FFh
		dd 1011A0FAh, 14D0BD4Dh, 19939B94h, 1D528623h, 0F12F560Eh
		dd 0F5EE4BB9h, 0F8AD6D60h, 0FC6C70D7h, 0E22B20D2h, 0E6EA3D65h
		dd 0EBA91BBCh, 0EF68060Bh, 0D727BBB6h, 0D3E6A601h, 0DEA580D8h
		dd 0DA649D6Fh, 0C423CD6Ah, 0C0E2D0DDh, 0CDA1F604h, 0C960EBB3h
		dd 0BD3E8D7Eh, 0B9FF90C9h, 0B4BCB610h, 0B07DABA7h, 0AE3AFBA2h
		dd 0AAFBE615h, 0A7B8C0CCh, 0A379DD7Bh, 9B3660C6h, 9FF77D71h
		dd 92B45BA8h, 9675461Fh, 8832161Ah, 8CF30BADh, 81B02D74h
		dd 857130C3h, 5D8A9099h, 594B8D2Eh, 5408ABF7h, 50C9B640h
		dd 4E8EE645h, 4A4FFBF2h, 470CDD2Bh, 43CDC09Ch, 7B827D21h
		dd 7F436096h, 7200464Fh, 76C15BF8h, 68860BFDh, 6C47164Ah
		dd 61043093h, 65C52D24h, 119B4BE9h, 155A565Eh, 18197087h
		dd 1CD86D30h, 29F3D35h,	65E2082h, 0B1D065Bh, 0FDC1BECh
		dd 3793A651h, 3352BBE6h, 3E119D3Fh, 3AD08088h, 2497D08Dh
		dd 2056CD3Ah, 2D15EBE3h, 29D4F654h, 0C5A92679h,	0C1683BCEh
		dd 0CC2B1D17h, 0C8EA00A0h, 0D6AD50A5h, 0D26C4D12h, 0DF2F6BCBh
		dd 0DBEE767Ch, 0E3A1CBC1h, 0E760D676h, 0EA23F0AFh, 0EEE2ED18h
		dd 0F0A5BD1Dh, 0F464A0AAh, 0F9278673h, 0FDE69BC4h, 89B8FD09h
		dd 8D79E0BEh, 803AC667h, 84FBDBD0h, 9ABC8BD5h, 9E7D9662h
		dd 933EB0BBh, 97FFAD0Ch, 0AFB010B1h, 0AB710D06h, 0A6322BDFh
		dd 0A2F33668h, 0BCB4666Dh, 0B8757BDAh, 0B5365D03h, 0B1F740B4h
; char file[2]
file		db '-',0                ; DATA XREF: cksum+4Ao cksum+211o ...
aR		db 'r',0                ; DATA XREF: cksum+7Bo
; char format[3]
format		db '%s',0               ; DATA XREF: cksum+AEo cksum+1FEo ...
; char aSFileTooLong[]
aSFileTooLong	db '%s: file too long',0 ; DATA XREF: cksum+10Ao
; char aUSS[]
aUSS		db '%u %s %s',0Ah,0     ; DATA XREF: cksum+370o
; char aUS[]
aUS		db '%u %s',0Ah,0        ; DATA XREF: cksum+38Eo
; char aWriteError[]
aWriteError	db 'write error',0      ; DATA XREF: cksum+3B3o
; char aS[]
aS		db '-: %s',0            ; DATA XREF: cksum+3CAo
; char aTrySHelpForMor[]
aTrySHelpForMor	db 'Try `%s --help',27h,' for more information.',0Ah,0
					; DATA XREF: usage+14o
		align 4
; char aUsageSFile___O[]
aUsageSFile___O	db 'Usage: %s [FILE]...',0Ah ; DATA XREF: usage+4Ao
		db '  or:  %s [OPTION]',0Ah,0
; char aPrintCrcChecks[]
aPrintCrcChecks	db 'Print CRC checksum and byte counts of each FILE.',0Ah
					; DATA XREF: usage+6Eo
		db 0Ah,0
		align 10h
; char aHelpDisplayThi[]
aHelpDisplayThi	db '      --help     display this help and exit',0Ah,0
					; DATA XREF: usage+91o
		align 10h
; char aVersionOutputV[]
aVersionOutputV	db '      --version  output version information and exit',0Ah,0
					; DATA XREF: usage+B4o
; char shortopts
shortopts	db 0			; DATA XREF: main+28o main+9Co
; char dirname[]
dirname		db '/usr/local/share/locale',0 ; DATA XREF: main+3Ao
aQ_FrankXia	db 'Q. Frank Xia',0     ; DATA XREF: main+73o
aCksum		db 'cksum',0            ; DATA XREF: main+83o
_rodata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_eh_frame	segment	dword public 'CONST' use32
		assume cs:_eh_frame
		;org 8000E34h
		dd 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 20h, 1Ch
		dd offset loc_8000770-80015C4h
		dd 11Ch, 80E4100h, 0D420285h, 3834405h,	0C5011403h, 4040CC3h
		dd 2Ch,	40h
		dd offset loc_8000770-80014CCh
		dd 3F8h, 80E4100h, 0D420285h, 3874905h,	5830486h, 0C303E803h
		dd 0C741C641h, 40CC541h, 4, 1Ch, 70h
		dd offset loc_8000770-8001104h
		dd 0DEh, 80E4100h, 0D420285h, 3864205h,	483h, 24h, 90h
		dd offset loc_8000770-8001046h
		dd 183h, 10C4400h, 5104700h, 44007502h,	7875030Fh, 2031006h
		dd 7C75h
_eh_frame	ends

; ===========================================================================

; Segment type:	Externs
; extern
		extrn program_name:dword ; DATA	XREF: emit_ancillary_info+7r
					; emit_ancillary_info+B6r ...
		extrn last_component:near ; CODE XREF: emit_ancillary_info+10p
					; emit_ancillary_info+BFp ...
; char *gettext(const char *msgid)
		extrn gettext:near	; CODE XREF: emit_ancillary_info+22p
					; emit_ancillary_info+44p ...
; int printf(const char	*format, ...)
		extrn printf:near	; CODE XREF: emit_ancillary_info+34p
					; emit_ancillary_info+5Ap ...
; struct _IO_FILE *stdout
		extrn stdout:dword	; DATA XREF: emit_ancillary_info+62r
					; cksum:loc_80004B7r ...
		extrn fputs_unlocked:near ; CODE XREF: emit_ancillary_info+7Dp
					; usage+80p ...
; char *setlocale(int category,	const char *locale)
		extrn setlocale:near	; CODE XREF: emit_ancillary_info+8Cp
					; main+2Fp
; int strncmp(const char *s1, const char *s2, size_t n)
		extrn strncmp:near	; CODE XREF: emit_ancillary_info+AAp
; int strcmp(const char	*s1, const char	*s2)
		extrn strcmp:near	; CODE XREF: cksum+55p	cksum+21Cp ...
; struct _IO_FILE *stdin
		extrn stdin:dword	; DATA XREF: cksum+61r	main+138r
		extrn fopen64:near	; CODE XREF: cksum+86p
; int *_errno_location(void)
		extrn __errno_location:near ; CODE XREF: cksum+A1p cksum+1F1p	...
; void error(int status, int errnum, const char	*format, ...)
		extrn error:near	; CODE XREF: cksum+B6p	cksum+122p ...
; int feof_unlocked(FILE *stream)
		extrn feof_unlocked:near ; CODE	XREF: cksum+19Ep
; size_t fread_unlocked(void *ptr, size_t size,	size_t n, FILE *stream)
		extrn fread_unlocked:near ; CODE XREF: cksum+1BEp
; int ferror_unlocked(FILE *stream)
		extrn ferror_unlocked:near ; CODE XREF:	cksum+1E5p cksum+3A4p
; int fclose(FILE *stream)
		extrn fclose:near	; CODE XREF: cksum+231p cksum+266p ...
		extrn umaxtostr:near	; CODE XREF: cksum+2B0p
		extrn __stack_chk_fail:near ; CODE XREF: cksum+3EBp
; struct _IO_FILE *stderr
		extrn stderr:dword	; DATA XREF: usage+23r
; int fprintf(FILE *stream, const char *format,	...)
		extrn fprintf:near	; CODE XREF: usage+2Ep
; void exit(int	status)
		extrn exit:near		; CODE XREF: usage+D9p
					; main:loc_8000770p
		extrn set_program_name:near ; CODE XREF: main+1Dp
; char *bindtextdomain(const char *domainname, const char *dirname)
		extrn bindtextdomain:near ; CODE XREF: main+44p
; char *textdomain(const char *domainname)
		extrn textdomain:near	; CODE XREF: main+54p
; void close_stdout(void)
		extrn close_stdout	; DATA XREF: main+5Fo
; int atexit(void (*func)(void))
		extrn atexit:near	; CODE XREF: main+64p
		extrn Version:dword	; DATA XREF: main+6Cr
		extrn parse_long_options:near ;	CODE XREF: main+8Dp
; int getopt_long(int argc, char *const	*argv, const char *shortopts, const struct option *longopts, int *longind)
		extrn getopt_long:near	; CODE XREF: main+A6p
; int optind
		extrn optind:dword	; DATA XREF: main+C4r main+E8r


		end
