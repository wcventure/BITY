;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B611-7234-BB			    |
; |		Doskey Lee, Kingsoft Internet Security Software		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	CE4CADE43FF504249A62827B877E3E2B
; Input	CRC32 :	8DB2D2A1

; File Name   :	D:\coreutils-o\stat.o
; Format      :	ELF for	Intel 386 (Relocatable)
;
; Source File :	'stat.c'

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	byte public 'CODE' use32
		assume cs:_text
		;org 8000000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl freecon(char *con)
freecon		proc near		; CODE XREF: out_file_context+D2p

con		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		nop
		pop	ebp
		retn
freecon		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; int __cdecl getfilecon(const char *file, char	**con)
getfilecon	proc near		; CODE XREF: out_file_context+34p

file		= dword	ptr  8
con		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		call	__errno_location
		mov	dword ptr [eax], 5Fh
		mov	eax, 0FFFFFFFFh
		leave
		retn
getfilecon	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; int __cdecl lgetfilecon(const	char *file, char **con)
lgetfilecon	proc near		; CODE XREF: out_file_context+4Bp

file		= dword	ptr  8
con		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		call	__errno_location
		mov	dword ptr [eax], 5Fh
		mov	eax, 0FFFFFFFFh
		leave
		retn
lgetfilecon	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; unsigned __int8 __cdecl to_uchar(char	ch_0)
to_uchar	proc near		; CODE XREF: print_it+20Dp
					; print_it+2B2p

ch_0		= byte ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 4
		mov	eax, [ebp+arg_0]
		mov	[ebp+ch_0], al
		movzx	eax, [ebp+ch_0]
		leave
		retn
to_uchar	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void emit_ancillary_info()
emit_ancillary_info proc near		; CODE XREF: usage+1DFp

lc_messages	= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset msgid	; "\nReport %s bugs to %s\n"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset aBugCoreutils@g ; "bug-coreutils@gnu.org"
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	offset aSHomePageHttpW ; "%s home page:	<http://www.gnu.org/softw"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset domainname ; "coreutils"
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aGeneralHelpUsi ; "General help using GNU software: <http:"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		sub	esp, 8
		push	0		; locale
		push	5		; category
		call	setlocale
		add	esp, 10h
		mov	[ebp+lc_messages], eax
		cmp	[ebp+lc_messages], 0
		jz	short loc_800012E
		sub	esp, 4
		push	3		; n
		push	offset s2	; "en_"
		push	[ebp+lc_messages] ; s1
		call	strncmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_800012E
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aReportSTransla ; "Report %s translation	bugs to	<http://t"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h

loc_800012E:				; CODE XREF: emit_ancillary_info+9Bj
					; emit_ancillary_info+B4j
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aForCompleteDoc ; "For complete documentation, run: info	c"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		nop
		mov	ebx, [ebp+var_4]
		leave
		retn
emit_ancillary_info endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; char *__cdecl	timetostr(time_t t, char *buf)
timetostr	proc near		; CODE XREF: human_time+2Ap

t		= dword	ptr  8
buf		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	eax, [ebp+t]
		cdq
		sub	esp, 4
		push	[ebp+buf]
		push	edx
		push	eax
		call	imaxtostr
		add	esp, 10h
		leave
		retn
timetostr	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; timespec *get_stat_atime(timespec *__return_ptr __struct_ptr retstr, const stat *st)
get_stat_atime	proc near		; CODE XREF: print_stat+3DEp

retstr		= dword	ptr  8
st		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+retstr]
		mov	eax, [ebp+st]
		mov	edx, [eax+44h]
		mov	eax, [eax+40h]
		mov	[ecx], eax
		mov	[ecx+4], edx
		mov	eax, [ebp+retstr]
		pop	ebp
		retn	4
get_stat_atime	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; timespec *get_stat_ctime(timespec *__return_ptr __struct_ptr retstr, const stat *st)
get_stat_ctime	proc near		; CODE XREF: print_stat+487p

retstr		= dword	ptr  8
st		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+retstr]
		mov	eax, [ebp+st]
		mov	edx, [eax+54h]
		mov	eax, [eax+50h]
		mov	[ecx], eax
		mov	[ecx+4], edx
		mov	eax, [ebp+retstr]
		pop	ebp
		retn	4
get_stat_ctime	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; timespec *get_stat_mtime(timespec *__return_ptr __struct_ptr retstr, const stat *st)
get_stat_mtime	proc near		; CODE XREF: print_stat+434p

retstr		= dword	ptr  8
st		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+retstr]
		mov	eax, [ebp+st]
		mov	edx, [eax+4Ch]
		mov	eax, [eax+48h]
		mov	[ecx], eax
		mov	[ecx+4], edx
		mov	eax, [ebp+retstr]
		pop	ebp
		retn	4
get_stat_mtime	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; const	char *__cdecl human_fstype(const statfs	*statfsbuf)
human_fstype	proc near		; CODE XREF: print_statfs+11Bp

type		= dword	ptr -0Ch
statfsbuf	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+statfsbuf]
		mov	eax, [eax]
		cmp	eax, 0EF53h
		jz	loc_8000745
		cmp	eax, 0EF53h
		jg	loc_800042A
		cmp	eax, 3434h
		jz	loc_800085D
		cmp	eax, 3434h
		jg	loc_8000317
		cmp	eax, 2Fh
		jz	loc_800088F
		cmp	eax, 2Fh
		jg	short loc_800028B
		cmp	eax, 0A501FCF5h
		jz	loc_800092B
		cmp	eax, 0A501FCF5h
		jg	short loc_800024E
		cmp	eax, 9123683Eh
		jz	loc_80006CD
		cmp	eax, 958458F6h
		jz	loc_800079F
		cmp	eax, 858458F6h
		jz	loc_8000899
		jmp	loc_800094E
; ---------------------------------------------------------------------------

loc_800024E:				; CODE XREF: human_fstype+55j
		cmp	eax, 0F97CFF8Ch
		jz	loc_80008CB
		cmp	eax, 0F97CFF8Ch
		jg	short loc_8000270
		cmp	eax, 0ABBA1974h
		jz	loc_8000932
		jmp	loc_800094E
; ---------------------------------------------------------------------------

loc_8000270:				; CODE XREF: human_fstype+8Dj
		cmp	eax, 0F995E849h
		jz	loc_8000795
		cmp	eax, 0FF534D42h
		jz	loc_80006E1
		jmp	loc_800094E
; ---------------------------------------------------------------------------

loc_800028B:				; CODE XREF: human_fstype+43j
		cmp	eax, 137Fh
		jz	loc_8000803
		cmp	eax, 137Fh
		jg	short loc_80002DA
		cmp	eax, 7C0h
		jz	loc_80007D1
		cmp	eax, 7C0h
		jg	short loc_80002BF
		cmp	eax, 187h
		jz	loc_80006A5
		jmp	loc_800094E
; ---------------------------------------------------------------------------

loc_80002BF:				; CODE XREF: human_fstype+DCj
		cmp	eax, 1373h
		jz	loc_800071D
		cmp	eax, 137Dh
		jz	loc_800073B
		jmp	loc_800094E
; ---------------------------------------------------------------------------

loc_80002DA:				; CODE XREF: human_fstype+CAj
		cmp	eax, 1CD1h
		jz	loc_8000727
		cmp	eax, 1CD1h
		jg	short loc_80002FC
		cmp	eax, 138Fh
		jz	loc_800080D
		jmp	loc_800094E
; ---------------------------------------------------------------------------

loc_80002FC:				; CODE XREF: human_fstype+119j
		cmp	eax, 2468h
		jz	loc_8000817
		cmp	eax, 2478h
		jz	loc_8000821
		jmp	loc_800094E
; ---------------------------------------------------------------------------

loc_8000317:				; CODE XREF: human_fstype+31j
		cmp	eax, 6969h
		jz	loc_8000849
		cmp	eax, 6969h
		jg	short loc_800039E
		cmp	eax, 4244h
		jz	loc_800078B
		cmp	eax, 4244h
		jg	short loc_8000361
		cmp	eax, 4004h
		jz	loc_80007BD
		cmp	eax, 4006h
		jz	loc_8000759
		cmp	eax, 4000h
		jz	loc_80007C7
		jmp	loc_800094E
; ---------------------------------------------------------------------------

loc_8000361:				; CODE XREF: human_fstype+168j
		cmp	eax, 4D5Ah
		jz	loc_800082B
		cmp	eax, 4D5Ah
		jg	short loc_8000383
		cmp	eax, 4D44h
		jz	loc_8000835
		jmp	loc_800094E
; ---------------------------------------------------------------------------

loc_8000383:				; CODE XREF: human_fstype+1A0j
		cmp	eax, 517Bh
		jz	loc_80008D5
		cmp	eax, 564Ch
		jz	loc_800083F
		jmp	loc_800094E
; ---------------------------------------------------------------------------

loc_800039E:				; CODE XREF: human_fstype+156j
		cmp	eax, 9FA1h
		jz	loc_8000871
		cmp	eax, 9FA1h
		jg	short loc_80003ED
		cmp	eax, 72B6h
		jz	loc_80007DB
		cmp	eax, 72B6h
		jg	short loc_80003D2
		cmp	eax, 7275h
		jz	loc_80008AD
		jmp	loc_800094E
; ---------------------------------------------------------------------------

loc_80003D2:				; CODE XREF: human_fstype+1EFj
		cmp	eax, 9660h
		jz	loc_80007B3
		cmp	eax, 9FA0h
		jz	loc_8000885
		jmp	loc_800094E
; ---------------------------------------------------------------------------

loc_80003ED:				; CODE XREF: human_fstype+1DDj
		cmp	eax, 0ADF5h
		jz	loc_800067D
		cmp	eax, 0ADF5h
		jg	short loc_800040F
		cmp	eax, 9FA2h
		jz	loc_8000924
		jmp	loc_800094E
; ---------------------------------------------------------------------------

loc_800040F:				; CODE XREF: human_fstype+22Cj
		cmp	eax, 0ADFFh
		jz	loc_8000687
		cmp	eax, 0EF51h
		jz	loc_800074F
		jmp	loc_800094E
; ---------------------------------------------------------------------------

loc_800042A:				; CODE XREF: human_fstype+1Bj
		cmp	eax, 42465331h
		jz	loc_80006AF
		cmp	eax, 42465331h
		jg	loc_8000553
		cmp	eax, 12FF7B6h
		jz	loc_80008FA
		cmp	eax, 12FF7B6h
		jg	short loc_80004C7
		cmp	eax, 1021994h
		jz	loc_8000908
		cmp	eax, 1021994h
		jg	short loc_800048A
		cmp	eax, 27E0EBh
		jz	loc_80006D7
		cmp	eax, 414A53h
		jz	loc_8000731
		cmp	eax, 11954h
		jz	loc_8000916
		jmp	loc_800094E
; ---------------------------------------------------------------------------

loc_800048A:				; CODE XREF: human_fstype+291j
		cmp	eax, 12FD16Dh
		jz	loc_8000947
		cmp	eax, 12FD16Dh
		jg	short loc_80004AC
		cmp	eax, 1161970h
		jz	loc_8000781
		jmp	loc_800094E
; ---------------------------------------------------------------------------

loc_80004AC:				; CODE XREF: human_fstype+2C9j
		cmp	eax, 12FF7B4h
		jz	loc_8000939
		cmp	eax, 12FF7B5h
		jz	loc_8000901
		jmp	loc_800094E
; ---------------------------------------------------------------------------

loc_80004C7:				; CODE XREF: human_fstype+27Fj
		cmp	eax, 15013346h
		jz	loc_800090F
		cmp	eax, 15013346h
		jg	short loc_8000516
		cmp	eax, 9041934h
		jz	loc_800069B
		cmp	eax, 9041934h
		jg	short loc_80004FB
		cmp	eax, 12FF7B7h
		jz	loc_80006F5
		jmp	loc_800094E
; ---------------------------------------------------------------------------

loc_80004FB:				; CODE XREF: human_fstype+318j
		cmp	eax, 0BAD1DEAh
		jz	loc_8000777
		cmp	eax, 0BD00BD0h
		jz	loc_80007F9
		jmp	loc_800094E
; ---------------------------------------------------------------------------

loc_8000516:				; CODE XREF: human_fstype+306j
		cmp	eax, 28CD3D45h
		jz	loc_80006FF
		cmp	eax, 28CD3D45h
		jg	short loc_8000538
		cmp	eax, 1BADFACEh
		jz	loc_80006B9
		jmp	loc_800094E
; ---------------------------------------------------------------------------

loc_8000538:				; CODE XREF: human_fstype+355j
		cmp	eax, 2BAD1DEAh
		jz	loc_80007A9
		cmp	eax, 3153464Ah
		jz	loc_80007E5
		jmp	loc_800094E
; ---------------------------------------------------------------------------

loc_8000553:				; CODE XREF: human_fstype+269j
		cmp	eax, 64626720h
		jz	loc_8000713
		cmp	eax, 64626720h
		jg	loc_80005F5
		cmp	eax, 5346544Eh
		jz	loc_8000867
		cmp	eax, 5346544Eh
		jg	short loc_80005B8
		cmp	eax, 453DCD28h
		jz	loc_8000709
		cmp	eax, 453DCD28h
		jg	short loc_800059D
		cmp	eax, 42494E4Dh
		jz	loc_80006C3
		jmp	loc_800094E
; ---------------------------------------------------------------------------

loc_800059D:				; CODE XREF: human_fstype+3BAj
		cmp	eax, 52654973h
		jz	loc_80008A3
		cmp	eax, 5346414Fh
		jz	loc_8000691
		jmp	loc_800094E
; ---------------------------------------------------------------------------

loc_80005B8:				; CODE XREF: human_fstype+3A8j
		cmp	eax, 54190100h
		jz	loc_800091D
		cmp	eax, 54190100h
		jg	short loc_80005DA
		cmp	eax, 534F434Bh
		jz	loc_80008DF
		jmp	loc_800094E
; ---------------------------------------------------------------------------

loc_80005DA:				; CODE XREF: human_fstype+3F7j
		cmp	eax, 58465342h
		jz	loc_8000940
		cmp	eax, 62656572h
		jz	loc_80008F3
		jmp	loc_800094E
; ---------------------------------------------------------------------------

loc_80005F5:				; CODE XREF: human_fstype+392j
		cmp	eax, 6E667364h
		jz	loc_8000853
		cmp	eax, 6E667364h
		jg	short loc_8000644
		cmp	eax, 65735546h
		jz	loc_8000763
		cmp	eax, 65735546h
		jg	short loc_8000629
		cmp	eax, 65735543h
		jz	loc_800076D
		jmp	loc_800094E
; ---------------------------------------------------------------------------

loc_8000629:				; CODE XREF: human_fstype+446j
		cmp	eax, 67596969h
		jz	loc_80008B7
		cmp	eax, 6B414653h
		jz	loc_80007EF
		jmp	loc_800094E
; ---------------------------------------------------------------------------

loc_8000644:				; CODE XREF: human_fstype+434j
		cmp	eax, 73717368h
		jz	loc_80008E9
		cmp	eax, 73717368h
		jg	short loc_8000666
		cmp	eax, 73636673h
		jz	loc_80008C1
		jmp	loc_800094E
; ---------------------------------------------------------------------------

loc_8000666:				; CODE XREF: human_fstype+483j
		cmp	eax, 73757245h
		jz	short loc_80006EB
		cmp	eax, 7461636Fh
		jz	loc_800087B
		jmp	loc_800094E
; ---------------------------------------------------------------------------

loc_800067D:				; CODE XREF: human_fstype+221j
		mov	eax, offset aAdfs ; "adfs"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_8000687:				; CODE XREF: human_fstype+243j
		mov	eax, offset aAffs ; "affs"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_8000691:				; CODE XREF: human_fstype+3DCj
		mov	eax, offset aAfs ; "afs"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_800069B:				; CODE XREF: human_fstype+30Dj
		mov	eax, offset aAnonInodeFs ; "anon-inode FS"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_80006A5:				; CODE XREF: human_fstype+E3j
		mov	eax, offset aAutofs ; "autofs"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_80006AF:				; CODE XREF: human_fstype+25Ej
		mov	eax, offset aBefs ; "befs"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_80006B9:				; CODE XREF: human_fstype+35Cj
		mov	eax, offset aBfs ; "bfs"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_80006C3:				; CODE XREF: human_fstype+3C1j
		mov	eax, offset aBinfmt_misc ; "binfmt_misc"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_80006CD:				; CODE XREF: human_fstype+5Cj
		mov	eax, offset aBtrfs ; "btrfs"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_80006D7:				; CODE XREF: human_fstype+298j
		mov	eax, offset aCgroupfs ;	"cgroupfs"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_80006E1:				; CODE XREF: human_fstype+AFj
		mov	eax, offset aCifs ; "cifs"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_80006EB:				; CODE XREF: human_fstype+49Aj
		mov	eax, offset aCoda ; "coda"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_80006F5:				; CODE XREF: human_fstype+31Fj
		mov	eax, offset aCoh ; "coh"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_80006FF:				; CODE XREF: human_fstype+34Aj
		mov	eax, offset aCramfs ; "cramfs"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_8000709:				; CODE XREF: human_fstype+3AFj
		mov	eax, offset aCramfsWend	; "cramfs-wend"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_8000713:				; CODE XREF: human_fstype+387j
		mov	eax, offset aDebugfs ; "debugfs"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_800071D:				; CODE XREF: human_fstype+F3j
		mov	eax, offset aDevfs ; "devfs"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_8000727:				; CODE XREF: human_fstype+10Ej
		mov	eax, offset aDevpts ; "devpts"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_8000731:				; CODE XREF: human_fstype+2A3j
		mov	eax, offset aEfs ; "efs"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_800073B:				; CODE XREF: human_fstype+FEj
		mov	eax, offset aExt ; "ext"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_8000745:				; CODE XREF: human_fstype+10j
		mov	eax, offset aExt2Ext3 ;	"ext2/ext3"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_800074F:				; CODE XREF: human_fstype+24Ej
		mov	eax, offset aExt2 ; "ext2"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_8000759:				; CODE XREF: human_fstype+17Aj
		mov	eax, offset aFat ; "fat"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_8000763:				; CODE XREF: human_fstype+43Bj
		mov	eax, offset aFuseblk ; "fuseblk"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_800076D:				; CODE XREF: human_fstype+44Dj
		mov	eax, offset aFusectl ; "fusectl"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_8000777:				; CODE XREF: human_fstype+32Fj
		mov	eax, offset aFutexfs ; "futexfs"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_8000781:				; CODE XREF: human_fstype+2D0j
		mov	eax, offset aGfsGfs2 ; "gfs/gfs2"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_800078B:				; CODE XREF: human_fstype+15Dj
		mov	eax, offset aHfs ; "hfs"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_8000795:				; CODE XREF: human_fstype+A4j
		mov	eax, offset aHpfs ; "hpfs"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_800079F:				; CODE XREF: human_fstype+67j
		mov	eax, offset aHugetlbfs ; "hugetlbfs"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_80007A9:				; CODE XREF: human_fstype+36Cj
		mov	eax, offset aInotifyfs ; "inotifyfs"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_80007B3:				; CODE XREF: human_fstype+206j
		mov	eax, offset aIsofs ; "isofs"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_80007BD:				; CODE XREF: human_fstype+16Fj
		mov	eax, offset aIsofs ; "isofs"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_80007C7:				; CODE XREF: human_fstype+185j
		mov	eax, offset aIsofs ; "isofs"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_80007D1:				; CODE XREF: human_fstype+D1j
		mov	eax, offset aJffs ; "jffs"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_80007DB:				; CODE XREF: human_fstype+1E4j
		mov	eax, offset aJffs2 ; "jffs2"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_80007E5:				; CODE XREF: human_fstype+377j
		mov	eax, offset aJfs ; "jfs"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_80007EF:				; CODE XREF: human_fstype+468j
		mov	eax, offset aKAfs ; "k-afs"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_80007F9:				; CODE XREF: human_fstype+33Aj
		mov	eax, offset aLustre ; "lustre"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_8000803:				; CODE XREF: human_fstype+BFj
		mov	eax, offset aMinix ; "minix"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_800080D:				; CODE XREF: human_fstype+120j
		mov	eax, offset aMinix30Char_ ; "minix (30 char.)"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_8000817:				; CODE XREF: human_fstype+130j
		mov	eax, offset aMinixV2 ; "minix v2"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_8000821:				; CODE XREF: human_fstype+13Bj
		mov	eax, offset aMinixV230Char_ ; "minix v2	(30 char.)"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_800082B:				; CODE XREF: human_fstype+195j
		mov	eax, offset aMinix3 ; "minix3"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_8000835:				; CODE XREF: human_fstype+1A7j
		mov	eax, offset aMsdos ; "msdos"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_800083F:				; CODE XREF: human_fstype+1C2j
		mov	eax, offset aNovell ; "novell"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_8000849:				; CODE XREF: human_fstype+14Bj
		mov	eax, offset aNfs ; "nfs"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_8000853:				; CODE XREF: human_fstype+429j
		mov	eax, offset aNfsd ; "nfsd"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_800085D:				; CODE XREF: human_fstype+26j
		mov	eax, offset aNilfs ; "nilfs"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_8000867:				; CODE XREF: human_fstype+39Dj
		mov	eax, offset aNtfs ; "ntfs"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_8000871:				; CODE XREF: human_fstype+1D2j
		mov	eax, offset aOpenprom ;	"openprom"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_800087B:				; CODE XREF: human_fstype+4A1j
		mov	eax, offset aOcfs2 ; "ocfs2"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_8000885:				; CODE XREF: human_fstype+211j
		mov	eax, offset aProc ; "proc"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_800088F:				; CODE XREF: human_fstype+3Aj
		mov	eax, offset aQnx4 ; "qnx4"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_8000899:				; CODE XREF: human_fstype+72j
		mov	eax, offset aRamfs ; "ramfs"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_80008A3:				; CODE XREF: human_fstype+3D1j
		mov	eax, offset aReiserfs ;	"reiserfs"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_80008AD:				; CODE XREF: human_fstype+1F6j
		mov	eax, offset aRomfs ; "romfs"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_80008B7:				; CODE XREF: human_fstype+45Dj
		mov	eax, offset aRpc_pipefs	; "rpc_pipefs"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_80008C1:				; CODE XREF: human_fstype+48Aj
		mov	eax, offset aSecurityfs	; "securityfs"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_80008CB:				; CODE XREF: human_fstype+82j
		mov	eax, offset aSelinux ; "selinux"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_80008D5:				; CODE XREF: human_fstype+1B7j
		mov	eax, offset aSmb ; "smb"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_80008DF:				; CODE XREF: human_fstype+3FEj
		mov	eax, offset aSockfs ; "sockfs"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_80008E9:				; CODE XREF: human_fstype+478j
		mov	eax, offset aSquashfs ;	"squashfs"
		jmp	locret_8000973
; ---------------------------------------------------------------------------

loc_80008F3:				; CODE XREF: human_fstype+419j
		mov	eax, offset aSysfs ; "sysfs"
		jmp	short locret_8000973
; ---------------------------------------------------------------------------

loc_80008FA:				; CODE XREF: human_fstype+274j
		mov	eax, offset aSysv2 ; "sysv2"
		jmp	short locret_8000973
; ---------------------------------------------------------------------------

loc_8000901:				; CODE XREF: human_fstype+2EBj
		mov	eax, offset aSysv4 ; "sysv4"
		jmp	short locret_8000973
; ---------------------------------------------------------------------------

loc_8000908:				; CODE XREF: human_fstype+286j
		mov	eax, offset aTmpfs ; "tmpfs"
		jmp	short locret_8000973
; ---------------------------------------------------------------------------

loc_800090F:				; CODE XREF: human_fstype+2FBj
		mov	eax, offset aUdf ; "udf"
		jmp	short locret_8000973
; ---------------------------------------------------------------------------

loc_8000916:				; CODE XREF: human_fstype+2AEj
		mov	eax, offset aUfs ; "ufs"
		jmp	short locret_8000973
; ---------------------------------------------------------------------------

loc_800091D:				; CODE XREF: human_fstype+3ECj
		mov	eax, offset aUfs ; "ufs"
		jmp	short locret_8000973
; ---------------------------------------------------------------------------

loc_8000924:				; CODE XREF: human_fstype+233j
		mov	eax, offset aUsbdevfs ;	"usbdevfs"
		jmp	short locret_8000973
; ---------------------------------------------------------------------------

loc_800092B:				; CODE XREF: human_fstype+4Aj
		mov	eax, offset aVxfs ; "vxfs"
		jmp	short locret_8000973
; ---------------------------------------------------------------------------

loc_8000932:				; CODE XREF: human_fstype+94j
		mov	eax, offset aXenfs ; "xenfs"
		jmp	short locret_8000973
; ---------------------------------------------------------------------------

loc_8000939:				; CODE XREF: human_fstype+2E0j
		mov	eax, offset aXenix ; "xenix"
		jmp	short locret_8000973
; ---------------------------------------------------------------------------

loc_8000940:				; CODE XREF: human_fstype+40Ej
		mov	eax, offset aXfs ; "xfs"
		jmp	short locret_8000973
; ---------------------------------------------------------------------------

loc_8000947:				; CODE XREF: human_fstype+2BEj
		mov	eax, offset aXia ; "xia"
		jmp	short locret_8000973
; ---------------------------------------------------------------------------

loc_800094E:				; CODE XREF: human_fstype+78j
					; human_fstype+9Aj ...
		mov	eax, [ebp+statfsbuf]
		mov	eax, [eax]
		mov	[ebp+type], eax
		sub	esp, 4
		push	[ebp+type]
		push	offset format	; "UNKNOWN (0x%lx)"
		push	offset buf_5536	; s
		call	sprintf
		add	esp, 10h
		mov	eax, offset buf_5536

locret_8000973:				; CODE XREF: human_fstype+4B1j
					; human_fstype+4BBj ...
		leave
		retn
human_fstype	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; char *__cdecl	human_access(const stat	*statbuf)
human_access	proc near		; CODE XREF: print_stat+1B8p

statbuf		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		sub	esp, 8
		push	offset modebuf_5540
		push	[ebp+statbuf]
		call	filemodestring
		add	esp, 10h
		mov	ds:modebuf_5540+0Ah, 0
		mov	eax, offset modebuf_5540
		leave
		retn
human_access	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; char *__cdecl	human_time(timespec t)
human_time	proc near		; CODE XREF: print_stat+3EFp
					; print_stat+445p ...

tm		= dword	ptr -0Ch
t		= timespec ptr	8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		sub	esp, 0Ch
		lea	eax, [ebp+t]
		push	eax		; timer
		call	localtime
		add	esp, 10h
		mov	[ebp+tm], eax
		cmp	[ebp+tm], 0
		jnz	short loc_80009D0
		mov	eax, [ebp+t.tv_sec]
		sub	esp, 8
		push	offset str_5544	; buf
		push	eax		; t
		call	timetostr
		add	esp, 10h
		jmp	short locret_80009F5
; ---------------------------------------------------------------------------

loc_80009D0:				; CODE XREF: human_time+1Cj
		mov	eax, [ebp+t.tv_nsec]
		sub	esp, 8
		push	eax
		push	0
		push	[ebp+tm]
		push	offset aYMDHMS_NZ ; "%Y-%m-%d %H:%M:%S.%N %z"
		push	2Ch
		push	offset str_5544
		call	nstrftime
		add	esp, 20h
		mov	eax, offset str_5544

locret_80009F5:				; CODE XREF: human_time+32j
		leave
		retn
human_time	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl out_string(char *pformat, size_t	prefix_len, const char *arg)
out_string	proc near		; CODE XREF: print_statfs+37p
					; print_statfs+12Dp ...

pformat		= dword	ptr  8
prefix_len	= dword	ptr  0Ch
arg		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	edx, [ebp+pformat]
		mov	eax, [ebp+prefix_len]
		add	eax, edx
		mov	word ptr [eax],	73h
		sub	esp, 8
		push	[ebp+arg]
		push	[ebp+pformat]	; format
		call	printf
		add	esp, 10h
		nop
		leave
		retn
out_string	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl out_int(char *pformat, size_t prefix_len, intmax_t arg)
out_int		proc near		; CODE XREF: print_statfs+14Bp
					; print_statfs+169p ...

arg		= qword	ptr -10h
pformat		= dword	ptr  8
prefix_len	= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_8]
		mov	dword ptr [ebp+arg], eax
		mov	eax, [ebp+arg_C]
		mov	dword ptr [ebp+arg+4], eax
		mov	edx, [ebp+pformat]
		mov	eax, [ebp+prefix_len]
		add	eax, edx
		mov	dword ptr [eax], 646C6Ch
		sub	esp, 4
		push	dword ptr [ebp+arg+4]
		push	dword ptr [ebp+arg]
		push	[ebp+pformat]	; format
		call	printf
		add	esp, 10h
		nop
		leave
		retn
out_int		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl out_uint(char *pformat, size_t prefix_len, uintmax_t arg)
out_uint	proc near		; CODE XREF: print_statfs+EDp
					; print_statfs+1A3p ...

arg		= qword	ptr -10h
pformat		= dword	ptr  8
prefix_len	= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_8]
		mov	dword ptr [ebp+arg], eax
		mov	eax, [ebp+arg_C]
		mov	dword ptr [ebp+arg+4], eax
		mov	edx, [ebp+pformat]
		mov	eax, [ebp+prefix_len]
		add	eax, edx
		mov	dword ptr [eax], 756C6Ch
		sub	esp, 4
		push	dword ptr [ebp+arg+4]
		push	dword ptr [ebp+arg]
		push	[ebp+pformat]	; format
		call	printf
		add	esp, 10h
		nop
		leave
		retn
out_uint	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl out_uint_o(char *pformat, size_t	prefix_len, uintmax_t arg)
out_uint_o	proc near		; CODE XREF: print_stat+1A5p

arg		= qword	ptr -10h
pformat		= dword	ptr  8
prefix_len	= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_8]
		mov	dword ptr [ebp+arg], eax
		mov	eax, [ebp+arg_C]
		mov	dword ptr [ebp+arg+4], eax
		mov	edx, [ebp+pformat]
		mov	eax, [ebp+prefix_len]
		add	eax, edx
		mov	dword ptr [eax], 6F6C6Ch
		sub	esp, 4
		push	dword ptr [ebp+arg+4]
		push	dword ptr [ebp+arg]
		push	[ebp+pformat]	; format
		call	printf
		add	esp, 10h
		nop
		leave
		retn
out_uint_o	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl out_uint_x(char *pformat, size_t	prefix_len, uintmax_t arg)
out_uint_x	proc near		; CODE XREF: print_statfs+D1p
					; print_statfs+108p ...

arg		= qword	ptr -10h
pformat		= dword	ptr  8
prefix_len	= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_8]
		mov	dword ptr [ebp+arg], eax
		mov	eax, [ebp+arg_C]
		mov	dword ptr [ebp+arg+4], eax
		mov	edx, [ebp+pformat]
		mov	eax, [ebp+prefix_len]
		add	eax, edx
		mov	dword ptr [eax], 786C6Ch
		sub	esp, 4
		push	dword ptr [ebp+arg+4]
		push	dword ptr [ebp+arg]
		push	[ebp+pformat]	; format
		call	printf
		add	esp, 10h
		nop
		leave
		retn
out_uint_x	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl out_file_context(const char *filename, char *pformat, size_t prefix_len)
out_file_context proc near		; CODE XREF: print_statfs+22Dp
					; print_stat+4D9p

pformat		= dword	ptr -20h
filename	= dword	ptr -1Ch
scontext	= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
prefix_len	= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 20h
		mov	eax, [ebp+arg_0]
		mov	[ebp+filename],	eax
		mov	eax, [ebp+arg_4]
		mov	[ebp+pformat], eax
		mov	eax, large gs:14h
		mov	[ebp+var_C], eax
		xor	eax, eax
		movzx	eax, ds:follow_links
		test	al, al
		jz	short loc_8000B3B
		sub	esp, 8
		lea	eax, [ebp+scontext]
		push	eax		; con
		push	[ebp+filename]	; file
		call	getfilecon
		add	esp, 10h
		shr	eax, 1Fh
		jmp	short loc_8000B50
; ---------------------------------------------------------------------------

loc_8000B3B:				; CODE XREF: out_file_context+28j
		sub	esp, 8
		lea	eax, [ebp+scontext]
		push	eax		; con
		push	[ebp+filename]	; file
		call	lgetfilecon
		add	esp, 10h
		shr	eax, 1Fh

loc_8000B50:				; CODE XREF: out_file_context+3Fj
		test	al, al
		jz	short loc_8000B91
		sub	esp, 0Ch
		push	[ebp+filename]
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aFailedToGetSec ; "failed to get	security context of %s"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		push	esi
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	[ebp+scontext],	0

loc_8000B91:				; CODE XREF: out_file_context+58j
		mov	edx, [ebp+pformat]
		mov	eax, [ebp+prefix_len]
		add	eax, edx
		mov	word ptr [eax],	73h
		mov	eax, [ebp+scontext]
		test	eax, eax
		jz	short loc_8000BAA
		mov	eax, [ebp+scontext]
		jmp	short loc_8000BAF
; ---------------------------------------------------------------------------

loc_8000BAA:				; CODE XREF: out_file_context+A9j
		mov	eax, offset a?	; "?"

loc_8000BAF:				; CODE XREF: out_file_context+AEj
		sub	esp, 8
		push	eax
		push	[ebp+pformat]	; format
		call	printf
		add	esp, 10h
		mov	eax, [ebp+scontext]
		test	eax, eax
		jz	short loc_8000BD4
		mov	eax, [ebp+scontext]
		sub	esp, 0Ch
		push	eax		; con
		call	freecon
		add	esp, 10h

loc_8000BD4:				; CODE XREF: out_file_context+C9j
		nop
		mov	eax, [ebp+var_C]
		xor	eax, large gs:14h
		jz	short loc_8000BE6
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_8000BE6:				; CODE XREF: out_file_context+E5j
		lea	esp, [ebp-8]
		pop	ebx
		pop	esi
		pop	ebp
		retn
out_file_context endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl print_statfs(char *pformat, size_t prefix_len, char m, const char *filename, const void *data)
print_statfs	proc near		; DATA XREF: do_statfs+E6o

m		= byte ptr -3Ch
i		= dword	ptr -30h
statfsbuf	= dword	ptr -2Ch
p		= dword	ptr -28h
words		= dword	ptr -24h
fsid		= qword	ptr -20h
frsize		= qword	ptr -18h
u		= qword	ptr -10h
pformat		= dword	ptr  8
prefix_len	= dword	ptr  0Ch
arg_8		= dword	ptr  10h
filename	= dword	ptr  14h
data		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 48h
		mov	eax, [ebp+arg_8]
		mov	[ebp+m], al
		mov	eax, [ebp+data]
		mov	[ebp+statfsbuf], eax
		movsx	eax, [ebp+m]
		sub	eax, 43h	; switch 50 cases
		cmp	eax, 31h
		ja	loc_8000E24	; jumptable 08000C16 default case
		mov	eax, ds:off_80023D8[eax*4]
		jmp	eax		; switch jump
; ---------------------------------------------------------------------------

loc_8000C18:				; CODE XREF: print_statfs+29j
					; DATA XREF: .rodata:off_80023D8o
		sub	esp, 4		; jumptable 08000C16 case 110
		push	[ebp+filename]	; arg
		push	[ebp+prefix_len] ; prefix_len
		push	[ebp+pformat]	; pformat
		call	out_string
		add	esp, 10h
		jmp	loc_8000E38
; ---------------------------------------------------------------------------

loc_8000C31:				; CODE XREF: print_statfs+29j
					; DATA XREF: .rodata:off_80023D8o
		mov	eax, [ebp+statfsbuf] ; jumptable 08000C16 case 105
		add	eax, 30h
		mov	[ebp+p], eax
		mov	dword ptr [ebp+fsid], 0
		mov	dword ptr [ebp+fsid+4],	0
		mov	[ebp+words], 2
		mov	[ebp+i], 0
		jmp	short loc_8000C9F
; ---------------------------------------------------------------------------

loc_8000C58:				; CODE XREF: print_statfs+C3j
		mov	eax, [ebp+words]
		sub	eax, 1
		sub	eax, [ebp+i]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+p]
		add	eax, edx
		mov	eax, [eax]
		mov	dword ptr [ebp+u], eax
		mov	dword ptr [ebp+u+4], 0
		mov	eax, [ebp+i]
		shl	eax, 5
		mov	ecx, eax
		mov	eax, dword ptr [ebp+u]
		mov	edx, dword ptr [ebp+u+4]
		shld	edx, eax, cl
		shl	eax, cl
		test	cl, 20h
		jz	short loc_8000C95
		mov	edx, eax
		xor	eax, eax

loc_8000C95:				; CODE XREF: print_statfs+A2j
		or	dword ptr [ebp+fsid], eax
		or	dword ptr [ebp+fsid+4],	edx
		add	[ebp+i], 1

loc_8000C9F:				; CODE XREF: print_statfs+69j
		mov	eax, [ebp+i]
		cmp	eax, [ebp+words]
		jge	short loc_8000CB2
		mov	eax, [ebp+i]
		shl	eax, 2
		cmp	eax, 7
		jbe	short loc_8000C58

loc_8000CB2:				; CODE XREF: print_statfs+B8j
		push	dword ptr [ebp+fsid+4]
		push	dword ptr [ebp+fsid] ; arg
		push	[ebp+prefix_len] ; prefix_len
		push	[ebp+pformat]	; pformat
		call	out_uint_x
		add	esp, 10h
		jmp	loc_8000E38
; ---------------------------------------------------------------------------

loc_8000CCB:				; CODE XREF: print_statfs+29j
					; DATA XREF: .rodata:off_80023D8o
		mov	eax, [ebp+statfsbuf] ; jumptable 08000C16 case 108
		mov	eax, [eax+38h]
		cdq
		push	edx
		push	eax		; arg
		push	[ebp+prefix_len] ; prefix_len
		push	[ebp+pformat]	; pformat
		call	out_uint
		add	esp, 10h
		jmp	loc_8000E38
; ---------------------------------------------------------------------------

loc_8000CE7:				; CODE XREF: print_statfs+29j
					; DATA XREF: .rodata:off_80023D8o
		mov	eax, [ebp+statfsbuf] ; jumptable 08000C16 case 116
		mov	eax, [eax]
		cdq
		push	edx
		push	eax		; arg
		push	[ebp+prefix_len] ; prefix_len
		push	[ebp+pformat]	; pformat
		call	out_uint_x
		add	esp, 10h
		jmp	loc_8000E38
; ---------------------------------------------------------------------------

loc_8000D02:				; CODE XREF: print_statfs+29j
					; DATA XREF: .rodata:off_80023D8o
		sub	esp, 0Ch	; jumptable 08000C16 case 84
		push	[ebp+statfsbuf]	; statfsbuf
		call	human_fstype
		add	esp, 10h
		sub	esp, 4
		push	eax		; arg
		push	[ebp+prefix_len] ; prefix_len
		push	[ebp+pformat]	; pformat
		call	out_string
		add	esp, 10h
		jmp	loc_8000E38
; ---------------------------------------------------------------------------

loc_8000D27:				; CODE XREF: print_statfs+29j
					; DATA XREF: .rodata:off_80023D8o
		mov	eax, [ebp+statfsbuf] ; jumptable 08000C16 case 98
		mov	edx, [eax+0Ch]
		mov	eax, [eax+8]
		push	edx
		push	eax		; arg
		push	[ebp+prefix_len] ; prefix_len
		push	[ebp+pformat]	; pformat
		call	out_int
		add	esp, 10h
		jmp	loc_8000E38
; ---------------------------------------------------------------------------

loc_8000D45:				; CODE XREF: print_statfs+29j
					; DATA XREF: .rodata:off_80023D8o
		mov	eax, [ebp+statfsbuf] ; jumptable 08000C16 case 102
		mov	edx, [eax+14h]
		mov	eax, [eax+10h]
		push	edx
		push	eax		; arg
		push	[ebp+prefix_len] ; prefix_len
		push	[ebp+pformat]	; pformat
		call	out_int
		add	esp, 10h
		jmp	loc_8000E38
; ---------------------------------------------------------------------------

loc_8000D63:				; CODE XREF: print_statfs+29j
					; DATA XREF: .rodata:off_80023D8o
		mov	eax, [ebp+statfsbuf] ; jumptable 08000C16 case 97
		mov	edx, [eax+1Ch]
		mov	eax, [eax+18h]
		push	edx
		push	eax		; arg
		push	[ebp+prefix_len] ; prefix_len
		push	[ebp+pformat]	; pformat
		call	out_int
		add	esp, 10h
		jmp	loc_8000E38
; ---------------------------------------------------------------------------

loc_8000D81:				; CODE XREF: print_statfs+29j
					; DATA XREF: .rodata:off_80023D8o
		mov	eax, [ebp+statfsbuf] ; jumptable 08000C16 case 115
		mov	eax, [eax+4]
		cdq
		push	edx
		push	eax		; arg
		push	[ebp+prefix_len] ; prefix_len
		push	[ebp+pformat]	; pformat
		call	out_uint
		add	esp, 10h
		jmp	loc_8000E38
; ---------------------------------------------------------------------------

loc_8000D9D:				; CODE XREF: print_statfs+29j
					; DATA XREF: .rodata:off_80023D8o
		mov	dword ptr [ebp+frsize],	0 ; jumptable 08000C16 case 83
		mov	dword ptr [ebp+frsize+4], 0
		mov	eax, dword ptr [ebp+frsize+4]
		or	eax, dword ptr [ebp+frsize]
		test	eax, eax
		jnz	short loc_8000DC2
		mov	eax, [ebp+statfsbuf]
		mov	eax, [eax+4]
		cdq
		mov	dword ptr [ebp+frsize],	eax
		mov	dword ptr [ebp+frsize+4], edx

loc_8000DC2:				; CODE XREF: print_statfs+1C6j
		push	dword ptr [ebp+frsize+4]
		push	dword ptr [ebp+frsize] ; arg
		push	[ebp+prefix_len] ; prefix_len
		push	[ebp+pformat]	; pformat
		call	out_uint
		add	esp, 10h
		jmp	short loc_8000E38
; ---------------------------------------------------------------------------

loc_8000DD8:				; CODE XREF: print_statfs+29j
					; DATA XREF: .rodata:off_80023D8o
		mov	eax, [ebp+statfsbuf] ; jumptable 08000C16 case 99
		mov	edx, [eax+24h]
		mov	eax, [eax+20h]
		push	edx
		push	eax		; arg
		push	[ebp+prefix_len] ; prefix_len
		push	[ebp+pformat]	; pformat
		call	out_uint
		add	esp, 10h
		jmp	short loc_8000E38
; ---------------------------------------------------------------------------

loc_8000DF3:				; CODE XREF: print_statfs+29j
					; DATA XREF: .rodata:off_80023D8o
		mov	eax, [ebp+statfsbuf] ; jumptable 08000C16 case 100
		mov	edx, [eax+2Ch]
		mov	eax, [eax+28h]
		push	edx
		push	eax		; arg
		push	[ebp+prefix_len] ; prefix_len
		push	[ebp+pformat]	; pformat
		call	out_int
		add	esp, 10h
		jmp	short loc_8000E38
; ---------------------------------------------------------------------------

loc_8000E0E:				; CODE XREF: print_statfs+29j
					; DATA XREF: .rodata:off_80023D8o
		sub	esp, 4		; jumptable 08000C16 case 67
		push	[ebp+prefix_len] ; prefix_len
		push	[ebp+pformat]	; pformat
		push	[ebp+filename]	; filename
		call	out_file_context
		add	esp, 10h
		jmp	short loc_8000E38
; ---------------------------------------------------------------------------

loc_8000E24:				; CODE XREF: print_statfs+1Cj
					; print_statfs+29j
					; DATA XREF: ...
		mov	eax, ds:stdout	; jumptable 08000C16 default case
		sub	esp, 8
		push	eax		; stream
		push	3Fh		; c
		call	fputc_unlocked
		add	esp, 10h
		nop

loc_8000E38:				; CODE XREF: print_statfs+3Fj
					; print_statfs+D9j ...
		nop
		leave
		retn
print_statfs	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl print_stat(char *pformat, size_t	prefix_len, char m, const char *filename, const	void *data)
print_stat	proc near		; DATA XREF: do_stat+159o

data		= dword	ptr -48h
filename	= dword	ptr -44h
m		= byte ptr -40h
pformat		= dword	ptr -3Ch
statbuf		= dword	ptr -34h
linkname	= dword	ptr -30h
pw_ent		= dword	ptr -2Ch
gw_ent		= dword	ptr -28h
t		= timespec ptr -24h
var_1C		= timespec ptr -1Ch
var_14		= timespec ptr -14h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
prefix_len	= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 40h
		mov	ecx, [ebp+arg_8]
		mov	ebx, [ebp+arg_0]
		mov	[ebp+pformat], ebx
		mov	[ebp+m], cl
		mov	ecx, [ebp+arg_C]
		mov	[ebp+filename],	ecx
		mov	ecx, [ebp+arg_10]
		mov	[ebp+data], ecx
		mov	esi, large gs:14h
		mov	[ebp+var_C], esi
		xor	esi, esi
		mov	ecx, [ebp+data]
		mov	[ebp+statbuf], ecx
		movsx	ecx, [ebp+m]
		sub	ecx, 41h	; switch 58 cases
		cmp	ecx, 39h
		ja	loc_800131E	; jumptable 08000E84 default case
		mov	ecx, ds:off_80024CC[ecx*4]
		jmp	ecx		; switch jump
; ---------------------------------------------------------------------------

loc_8000E86:				; CODE XREF: print_stat+49j
					; DATA XREF: .rodata:off_80024CCo
		sub	esp, 4		; jumptable 08000E84 case 110
		push	[ebp+filename]	; arg
		push	[ebp+prefix_len] ; prefix_len
		push	[ebp+pformat]	; pformat
		call	out_string
		add	esp, 10h
		jmp	loc_8001335
; ---------------------------------------------------------------------------

loc_8000E9F:				; CODE XREF: print_stat+49j
					; DATA XREF: .rodata:off_80024CCo
		sub	esp, 0Ch	; jumptable 08000E84 case 78
		push	[ebp+filename]
		call	quote
		add	esp, 10h
		sub	esp, 4
		push	eax		; arg
		push	[ebp+prefix_len] ; prefix_len
		push	[ebp+pformat]	; pformat
		call	out_string
		add	esp, 10h
		mov	eax, [ebp+statbuf]
		mov	eax, [eax+10h]
		and	eax, 0F000h
		cmp	eax, 0A000h
		jnz	loc_8001334
		mov	eax, [ebp+statbuf]
		mov	edx, [eax+30h]
		mov	eax, [eax+2Ch]
		sub	esp, 8
		push	eax
		push	[ebp+filename]
		call	areadlink_with_size
		add	esp, 10h
		mov	[ebp+linkname],	eax
		cmp	[ebp+linkname],	0
		jnz	short loc_8000F31
		sub	esp, 0Ch
		push	[ebp+filename]
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aCannotReadSymb ; "cannot read symbolic link %s"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		push	esi
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		jmp	loc_8001335
; ---------------------------------------------------------------------------

loc_8000F31:				; CODE XREF: print_stat+B9j
		sub	esp, 0Ch
		push	offset asc_80024BD ; " -> "
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+linkname]
		call	quote
		add	esp, 10h
		sub	esp, 4
		push	eax		; arg
		push	[ebp+prefix_len] ; prefix_len
		push	[ebp+pformat]	; pformat
		call	out_string
		add	esp, 10h
		jmp	loc_8001334
; ---------------------------------------------------------------------------

loc_8000F66:				; CODE XREF: print_stat+49j
					; DATA XREF: .rodata:off_80024CCo
		mov	eax, [ebp+statbuf] ; jumptable 08000E84	case 100
		mov	edx, [eax+4]
		mov	eax, [eax]
		push	edx
		push	eax		; arg
		push	[ebp+prefix_len] ; prefix_len
		push	[ebp+pformat]	; pformat
		call	out_uint
		add	esp, 10h
		jmp	loc_8001335
; ---------------------------------------------------------------------------

loc_8000F83:				; CODE XREF: print_stat+49j
					; DATA XREF: .rodata:off_80024CCo
		mov	eax, [ebp+statbuf] ; jumptable 08000E84	case 68
		mov	edx, [eax+4]
		mov	eax, [eax]
		push	edx
		push	eax		; arg
		push	[ebp+prefix_len] ; prefix_len
		push	[ebp+pformat]	; pformat
		call	out_uint_x
		add	esp, 10h
		jmp	loc_8001335
; ---------------------------------------------------------------------------

loc_8000FA0:				; CODE XREF: print_stat+49j
					; DATA XREF: .rodata:off_80024CCo
		mov	eax, [ebp+statbuf] ; jumptable 08000E84	case 105
		mov	edx, [eax+5Ch]
		mov	eax, [eax+58h]
		push	edx
		push	eax		; arg
		push	[ebp+prefix_len] ; prefix_len
		push	[ebp+pformat]	; pformat
		call	out_uint
		add	esp, 10h
		jmp	loc_8001335
; ---------------------------------------------------------------------------

loc_8000FBE:				; CODE XREF: print_stat+49j
					; DATA XREF: .rodata:off_80024CCo
		mov	ecx, [ebp+statbuf] ; jumptable 08000E84	case 97
		mov	ecx, [ecx+10h]
		mov	ebx, 0
		mov	esi, ecx
		and	esi, 0FFFh
		mov	eax, esi
		and	ebx, 0
		mov	edx, ebx
		push	edx
		push	eax		; arg
		push	[ebp+prefix_len] ; prefix_len
		push	[ebp+pformat]	; pformat
		call	out_uint_o
		add	esp, 10h
		jmp	loc_8001335
; ---------------------------------------------------------------------------

loc_8000FED:				; CODE XREF: print_stat+49j
					; DATA XREF: .rodata:off_80024CCo
		sub	esp, 0Ch	; jumptable 08000E84 case 65
		push	[ebp+statbuf]	; statbuf
		call	human_access
		add	esp, 10h
		sub	esp, 4
		push	eax		; arg
		push	[ebp+prefix_len] ; prefix_len
		push	[ebp+pformat]	; pformat
		call	out_string
		add	esp, 10h
		jmp	loc_8001335
; ---------------------------------------------------------------------------

loc_8001012:				; CODE XREF: print_stat+49j
					; DATA XREF: .rodata:off_80024CCo
		mov	eax, [ebp+statbuf] ; jumptable 08000E84	case 102
		mov	eax, [eax+10h]
		mov	edx, 0
		push	edx
		push	eax		; arg
		push	[ebp+prefix_len] ; prefix_len
		push	[ebp+pformat]	; pformat
		call	out_uint_x
		add	esp, 10h
		jmp	loc_8001335
; ---------------------------------------------------------------------------

loc_8001032:				; CODE XREF: print_stat+49j
					; DATA XREF: .rodata:off_80024CCo
		sub	esp, 0Ch	; jumptable 08000E84 case 70
		push	[ebp+statbuf]
		call	file_type
		add	esp, 10h
		sub	esp, 4
		push	eax		; arg
		push	[ebp+prefix_len] ; prefix_len
		push	[ebp+pformat]	; pformat
		call	out_string
		add	esp, 10h
		jmp	loc_8001335
; ---------------------------------------------------------------------------

loc_8001057:				; CODE XREF: print_stat+49j
					; DATA XREF: .rodata:off_80024CCo
		mov	eax, [ebp+statbuf] ; jumptable 08000E84	case 104
		mov	eax, [eax+14h]
		mov	edx, 0
		push	edx
		push	eax		; arg
		push	[ebp+prefix_len] ; prefix_len
		push	[ebp+pformat]	; pformat
		call	out_uint
		add	esp, 10h
		jmp	loc_8001335
; ---------------------------------------------------------------------------

loc_8001077:				; CODE XREF: print_stat+49j
					; DATA XREF: .rodata:off_80024CCo
		mov	eax, [ebp+statbuf] ; jumptable 08000E84	case 117
		mov	eax, [eax+18h]
		mov	edx, 0
		push	edx
		push	eax		; arg
		push	[ebp+prefix_len] ; prefix_len
		push	[ebp+pformat]	; pformat
		call	out_uint
		add	esp, 10h
		jmp	loc_8001335
; ---------------------------------------------------------------------------

loc_8001097:				; CODE XREF: print_stat+49j
					; DATA XREF: .rodata:off_80024CCo
		call	setpwent	; jumptable 08000E84 case 85
		mov	eax, [ebp+statbuf]
		mov	eax, [eax+18h]
		sub	esp, 0Ch
		push	eax		; uid
		call	getpwuid
		add	esp, 10h
		mov	[ebp+pw_ent], eax
		cmp	[ebp+pw_ent], 0
		jz	short loc_80010BE
		mov	eax, [ebp+pw_ent]
		mov	eax, [eax]
		jmp	short loc_80010C3
; ---------------------------------------------------------------------------

loc_80010BE:				; CODE XREF: print_stat+27Aj
		mov	eax, offset aUnknown ; "UNKNOWN"

loc_80010C3:				; CODE XREF: print_stat+281j
		sub	esp, 4
		push	eax		; arg
		push	[ebp+prefix_len] ; prefix_len
		push	[ebp+pformat]	; pformat
		call	out_string
		add	esp, 10h
		jmp	loc_8001335
; ---------------------------------------------------------------------------

loc_80010DA:				; CODE XREF: print_stat+49j
					; DATA XREF: .rodata:off_80024CCo
		mov	eax, [ebp+statbuf] ; jumptable 08000E84	case 103
		mov	eax, [eax+1Ch]
		mov	edx, 0
		push	edx
		push	eax		; arg
		push	[ebp+prefix_len] ; prefix_len
		push	[ebp+pformat]	; pformat
		call	out_uint
		add	esp, 10h
		jmp	loc_8001335
; ---------------------------------------------------------------------------

loc_80010FA:				; CODE XREF: print_stat+49j
					; DATA XREF: .rodata:off_80024CCo
		call	setgrent	; jumptable 08000E84 case 71
		mov	eax, [ebp+statbuf]
		mov	eax, [eax+1Ch]
		sub	esp, 0Ch
		push	eax		; gid
		call	getgrgid
		add	esp, 10h
		mov	[ebp+gw_ent], eax
		cmp	[ebp+gw_ent], 0
		jz	short loc_8001121
		mov	eax, [ebp+gw_ent]
		mov	eax, [eax]
		jmp	short loc_8001126
; ---------------------------------------------------------------------------

loc_8001121:				; CODE XREF: print_stat+2DDj
		mov	eax, offset aUnknown ; "UNKNOWN"

loc_8001126:				; CODE XREF: print_stat+2E4j
		sub	esp, 4
		push	eax		; arg
		push	[ebp+prefix_len] ; prefix_len
		push	[ebp+pformat]	; pformat
		call	out_string
		add	esp, 10h
		jmp	loc_8001335
; ---------------------------------------------------------------------------

loc_800113D:				; CODE XREF: print_stat+49j
					; DATA XREF: .rodata:off_80024CCo
		mov	eax, [ebp+statbuf] ; jumptable 08000E84	case 116
		mov	edx, [eax+24h]
		mov	eax, [eax+20h]
		sub	esp, 8
		push	edx
		push	eax		; dev
		call	gnu_dev_major
		add	esp, 10h
		mov	edx, 0
		push	edx
		push	eax		; arg
		push	[ebp+prefix_len] ; prefix_len
		push	[ebp+pformat]	; pformat
		call	out_uint_x
		add	esp, 10h
		jmp	loc_8001335
; ---------------------------------------------------------------------------

loc_800116D:				; CODE XREF: print_stat+49j
					; DATA XREF: .rodata:off_80024CCo
		mov	eax, [ebp+statbuf] ; jumptable 08000E84	case 84
		mov	edx, [eax+24h]
		mov	eax, [eax+20h]
		sub	esp, 8
		push	edx
		push	eax		; dev
		call	gnu_dev_minor
		add	esp, 10h
		mov	edx, 0
		push	edx
		push	eax		; arg
		push	[ebp+prefix_len] ; prefix_len
		push	[ebp+pformat]	; pformat
		call	out_uint_x
		add	esp, 10h
		jmp	loc_8001335
; ---------------------------------------------------------------------------

loc_800119D:				; CODE XREF: print_stat+49j
					; DATA XREF: .rodata:off_80024CCo
		mov	eax, [ebp+statbuf] ; jumptable 08000E84	case 115
		mov	edx, [eax+30h]
		mov	eax, [eax+2Ch]
		push	edx
		push	eax		; arg
		push	[ebp+prefix_len] ; prefix_len
		push	[ebp+pformat]	; pformat
		call	out_uint
		add	esp, 10h
		jmp	loc_8001335
; ---------------------------------------------------------------------------

loc_80011BB:				; CODE XREF: print_stat+49j
					; DATA XREF: .rodata:off_80024CCo
		push	0		; jumptable 08000E84 case 66
		push	200h		; arg
		push	[ebp+prefix_len] ; prefix_len
		push	[ebp+pformat]	; pformat
		call	out_uint
		add	esp, 10h
		jmp	loc_8001335
; ---------------------------------------------------------------------------

loc_80011D5:				; CODE XREF: print_stat+49j
					; DATA XREF: .rodata:off_80024CCo
		mov	eax, [ebp+statbuf] ; jumptable 08000E84	case 98
		mov	edx, [eax+3Ch]
		mov	eax, [eax+38h]
		push	edx
		push	eax		; arg
		push	[ebp+prefix_len] ; prefix_len
		push	[ebp+pformat]	; pformat
		call	out_uint
		add	esp, 10h
		jmp	loc_8001335
; ---------------------------------------------------------------------------

loc_80011F3:				; CODE XREF: print_stat+49j
					; DATA XREF: .rodata:off_80024CCo
		mov	eax, [ebp+statbuf] ; jumptable 08000E84	case 111
		mov	eax, [eax+34h]
		cdq
		push	edx
		push	eax		; arg
		push	[ebp+prefix_len] ; prefix_len
		push	[ebp+pformat]	; pformat
		call	out_uint
		add	esp, 10h
		jmp	loc_8001335
; ---------------------------------------------------------------------------

loc_800120F:				; CODE XREF: print_stat+49j
					; DATA XREF: .rodata:off_80024CCo
		lea	eax, [ebp+t]	; jumptable 08000E84 case 120
		sub	esp, 8
		push	[ebp+statbuf]	; st
		push	eax		; retstr
		call	get_stat_atime
		add	esp, 0Ch
		sub	esp, 8
		push	[ebp+t.tv_nsec]
		push	[ebp+t.tv_sec]	; t
		call	human_time
		add	esp, 10h
		sub	esp, 4
		push	eax		; arg
		push	[ebp+prefix_len] ; prefix_len
		push	[ebp+pformat]	; pformat
		call	out_string
		add	esp, 10h
		jmp	loc_8001335
; ---------------------------------------------------------------------------

loc_8001249:				; CODE XREF: print_stat+49j
					; DATA XREF: .rodata:off_80024CCo
		mov	eax, [ebp+statbuf] ; jumptable 08000E84	case 88
		mov	eax, [eax+40h]
		cdq
		push	edx
		push	eax		; arg
		push	[ebp+prefix_len] ; prefix_len
		push	[ebp+pformat]	; pformat
		call	out_int
		add	esp, 10h
		jmp	loc_8001335
; ---------------------------------------------------------------------------

loc_8001265:				; CODE XREF: print_stat+49j
					; DATA XREF: .rodata:off_80024CCo
		lea	eax, [ebp+var_1C] ; jumptable 08000E84 case 121
		sub	esp, 8
		push	[ebp+statbuf]	; st
		push	eax		; retstr
		call	get_stat_mtime
		add	esp, 0Ch
		sub	esp, 8
		push	[ebp+var_1C.tv_nsec]
		push	[ebp+var_1C.tv_sec] ; t
		call	human_time
		add	esp, 10h
		sub	esp, 4
		push	eax		; arg
		push	[ebp+prefix_len] ; prefix_len
		push	[ebp+pformat]	; pformat
		call	out_string
		add	esp, 10h
		jmp	loc_8001335
; ---------------------------------------------------------------------------

loc_800129F:				; CODE XREF: print_stat+49j
					; DATA XREF: .rodata:off_80024CCo
		mov	eax, [ebp+statbuf] ; jumptable 08000E84	case 89
		mov	eax, [eax+48h]
		cdq
		push	edx
		push	eax		; arg
		push	[ebp+prefix_len] ; prefix_len
		push	[ebp+pformat]	; pformat
		call	out_int
		add	esp, 10h
		jmp	short loc_8001335
; ---------------------------------------------------------------------------

loc_80012B8:				; CODE XREF: print_stat+49j
					; DATA XREF: .rodata:off_80024CCo
		lea	eax, [ebp+var_14] ; jumptable 08000E84 case 122
		sub	esp, 8
		push	[ebp+statbuf]	; st
		push	eax		; retstr
		call	get_stat_ctime
		add	esp, 0Ch
		sub	esp, 8
		push	[ebp+var_14.tv_nsec]
		push	[ebp+var_14.tv_sec] ; t
		call	human_time
		add	esp, 10h
		sub	esp, 4
		push	eax		; arg
		push	[ebp+prefix_len] ; prefix_len
		push	[ebp+pformat]	; pformat
		call	out_string
		add	esp, 10h
		jmp	short loc_8001335
; ---------------------------------------------------------------------------

loc_80012EF:				; CODE XREF: print_stat+49j
					; DATA XREF: .rodata:off_80024CCo
		mov	eax, [ebp+statbuf] ; jumptable 08000E84	case 90
		mov	eax, [eax+50h]
		cdq
		push	edx
		push	eax		; arg
		push	[ebp+prefix_len] ; prefix_len
		push	[ebp+pformat]	; pformat
		call	out_int
		add	esp, 10h
		jmp	short loc_8001335
; ---------------------------------------------------------------------------

loc_8001308:				; CODE XREF: print_stat+49j
					; DATA XREF: .rodata:off_80024CCo
		sub	esp, 4		; jumptable 08000E84 case 67
		push	[ebp+prefix_len] ; prefix_len
		push	[ebp+pformat]	; pformat
		push	[ebp+filename]	; filename
		call	out_file_context
		add	esp, 10h
		jmp	short loc_8001335
; ---------------------------------------------------------------------------

loc_800131E:				; CODE XREF: print_stat+3Cj
					; print_stat+49j
					; DATA XREF: ...
		mov	eax, ds:stdout	; jumptable 08000E84 default case
		sub	esp, 8
		push	eax		; stream
		push	3Fh		; c
		call	fputc_unlocked
		add	esp, 10h
		nop
		jmp	short loc_8001335
; ---------------------------------------------------------------------------

loc_8001334:				; CODE XREF: print_stat+94j
					; print_stat+126j
		nop

loc_8001335:				; CODE XREF: print_stat+5Fj
					; print_stat+F1j ...
		mov	eax, [ebp+var_C]
		xor	eax, large gs:14h
		jz	short loc_8001346
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_8001346:				; CODE XREF: print_stat+504j
		lea	esp, [ebp-8]
		pop	ebx
		pop	esi
		pop	ebp
		retn
print_stat	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl print_esc_char(char c)
print_esc_char	proc near		; CODE XREF: print_it+38Bp

c		= byte ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, [ebp+arg_0]
		mov	[ebp+c], al
		movsx	eax, [ebp+c]
		sub	eax, 22h	; switch 85 cases
		cmp	eax, 54h
		ja	short loc_800139F ; jumptable 0800136D default case
		mov	eax, ds:off_80025D8[eax*4]
		jmp	eax		; switch jump
; ---------------------------------------------------------------------------

loc_800136F:				; CODE XREF: print_esc_char+20j
					; DATA XREF: .rodata:off_80025D8o
		mov	[ebp+c], 7	; jumptable 0800136D case 97
		jmp	short loc_80013C4
; ---------------------------------------------------------------------------

loc_8001375:				; CODE XREF: print_esc_char+20j
					; DATA XREF: .rodata:off_80025D8o
		mov	[ebp+c], 8	; jumptable 0800136D case 98
		jmp	short loc_80013C4
; ---------------------------------------------------------------------------

loc_800137B:				; CODE XREF: print_esc_char+20j
					; DATA XREF: .rodata:off_80025D8o
		mov	[ebp+c], 1Bh	; jumptable 0800136D case 101
		jmp	short loc_80013C4
; ---------------------------------------------------------------------------

loc_8001381:				; CODE XREF: print_esc_char+20j
					; DATA XREF: .rodata:off_80025D8o
		mov	[ebp+c], 0Ch	; jumptable 0800136D case 102
		jmp	short loc_80013C4
; ---------------------------------------------------------------------------

loc_8001387:				; CODE XREF: print_esc_char+20j
					; DATA XREF: .rodata:off_80025D8o
		mov	[ebp+c], 0Ah	; jumptable 0800136D case 110
		jmp	short loc_80013C4
; ---------------------------------------------------------------------------

loc_800138D:				; CODE XREF: print_esc_char+20j
					; DATA XREF: .rodata:off_80025D8o
		mov	[ebp+c], 0Dh	; jumptable 0800136D case 114
		jmp	short loc_80013C4
; ---------------------------------------------------------------------------

loc_8001393:				; CODE XREF: print_esc_char+20j
					; DATA XREF: .rodata:off_80025D8o
		mov	[ebp+c], 9	; jumptable 0800136D case 116
		jmp	short loc_80013C4
; ---------------------------------------------------------------------------

loc_8001399:				; CODE XREF: print_esc_char+20j
					; DATA XREF: .rodata:off_80025D8o
		mov	[ebp+c], 0Bh	; jumptable 0800136D case 118
		jmp	short loc_80013C4
; ---------------------------------------------------------------------------

loc_800139F:				; CODE XREF: print_esc_char+17j
					; print_esc_char+20j
					; DATA XREF: ...
		movsx	ebx, [ebp+c]	; jumptable 0800136D default case
		sub	esp, 0Ch
		push	offset aWarningUnrecog ; "warning: unrecognized	escape `\\%c'"
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		jmp	short loc_80013C4
; ---------------------------------------------------------------------------

loc_80013C3:				; CODE XREF: print_esc_char+20j
					; DATA XREF: .rodata:off_80025D8o
		nop			; jumptable 0800136D cases 34,92

loc_80013C4:				; CODE XREF: print_esc_char+26j
					; print_esc_char+2Cj ...
		movsx	eax, [ebp+c]
		sub	esp, 0Ch
		push	eax		; c
		call	putchar_unlocked
		add	esp, 10h
		nop
		mov	ebx, [ebp+var_4]
		leave
		retn
print_esc_char	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl print_it(const char *format, const char *filename, void (*print_func)(char *, size_t, char, const char *, const void *),	const void *data)
print_it	proc near		; CODE XREF: do_statfs+F1p
					; do_stat+167p

b		= dword	ptr -28h
esc_value	= dword	ptr -24h
esc_length	= dword	ptr -20h
esc_value_0	= dword	ptr -1Ch
n_alloc		= dword	ptr -18h
dest		= dword	ptr -14h
len		= dword	ptr -10h
fmt_char	= dword	ptr -0Ch
var_4		= dword	ptr -4
format		= dword	ptr  8
filename	= dword	ptr  0Ch
print_func	= dword	ptr  10h
data		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 24h
		sub	esp, 0Ch
		push	[ebp+format]	; s
		call	strlen
		add	esp, 10h
		add	eax, 4
		mov	[ebp+n_alloc], eax
		sub	esp, 0Ch
		push	[ebp+n_alloc]	; size_t
		call	xmalloc
		add	esp, 10h
		mov	[ebp+dest], eax
		mov	eax, [ebp+format]
		mov	[ebp+b], eax
		jmp	loc_800178B
; ---------------------------------------------------------------------------

loc_8001411:				; CODE XREF: print_it+3B9j
		mov	eax, [ebp+b]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		cmp	eax, 25h
		jz	short loc_800142D
		cmp	eax, 5Ch
		jz	loc_800151A
		jmp	loc_8001771
; ---------------------------------------------------------------------------

loc_800142D:				; CODE XREF: print_it+43j
		mov	eax, [ebp+b]
		add	eax, 1
		sub	esp, 8
		push	offset accept	; "#-+.I 0123456789"
		push	eax		; s
		call	strspn
		add	esp, 10h
		mov	[ebp+len], eax
		mov	eax, [ebp+len]
		lea	edx, [eax+1]
		mov	eax, [ebp+b]
		add	eax, edx
		mov	[ebp+fmt_char],	eax
		mov	eax, [ebp+len]
		add	eax, 1
		sub	esp, 4
		push	eax		; n
		push	[ebp+b]		; src
		push	[ebp+dest]	; dest
		call	memcpy
		add	esp, 10h
		mov	eax, [ebp+fmt_char]
		mov	[ebp+b], eax
		mov	eax, [ebp+fmt_char]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		test	eax, eax
		jz	short loc_8001487
		cmp	eax, 25h
		jz	short loc_800148B
		jmp	short loc_80014EF
; ---------------------------------------------------------------------------

loc_8001487:				; CODE XREF: print_it+A4j
		sub	[ebp+b], 1

loc_800148B:				; CODE XREF: print_it+A9j
		cmp	[ebp+len], 0
		jz	short loc_80014E0
		mov	eax, [ebp+len]
		lea	edx, [eax+1]
		mov	eax, [ebp+dest]
		add	edx, eax
		mov	eax, [ebp+fmt_char]
		movzx	eax, byte ptr [eax]
		mov	[edx], al
		mov	eax, [ebp+len]
		lea	edx, [eax+2]
		mov	eax, [ebp+dest]
		add	eax, edx
		mov	byte ptr [eax],	0
		sub	esp, 0Ch
		push	[ebp+dest]
		call	quotearg_colon
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aSInvalidDirect ; "%s: invalid directive"
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_80014E0:				; CODE XREF: print_it+B5j
		sub	esp, 0Ch
		push	25h		; c
		call	putchar_unlocked
		add	esp, 10h
		jmp	short loc_8001515
; ---------------------------------------------------------------------------

loc_80014EF:				; CODE XREF: print_it+ABj
		mov	eax, [ebp+fmt_char]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		mov	edx, [ebp+len]
		add	edx, 1
		sub	esp, 0Ch
		push	[ebp+data]
		push	[ebp+filename]
		push	eax
		push	edx
		push	[ebp+dest]
		mov	eax, [ebp+print_func]
		call	eax
		add	esp, 20h
		nop

loc_8001515:				; CODE XREF: print_it+113j
		jmp	loc_8001787
; ---------------------------------------------------------------------------

loc_800151A:				; CODE XREF: print_it+48j
		movzx	eax, ds:interpret_backslash_escapes
		xor	eax, 1
		test	al, al
		jz	short loc_800153A
		sub	esp, 0Ch
		push	5Ch		; c
		call	putchar_unlocked
		add	esp, 10h
		jmp	loc_8001787
; ---------------------------------------------------------------------------

loc_800153A:				; CODE XREF: print_it+14Cj
		add	[ebp+b], 1
		mov	eax, [ebp+b]
		movzx	eax, byte ptr [eax]
		cmp	al, 2Fh
		jle	short loc_80015C2
		mov	eax, [ebp+b]
		movzx	eax, byte ptr [eax]
		cmp	al, 37h
		jg	short loc_80015C2
		mov	eax, [ebp+b]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	eax, 30h
		mov	[ebp+esc_value], eax
		mov	[ebp+esc_length], 1
		add	[ebp+b], 1
		jmp	short loc_8001591
; ---------------------------------------------------------------------------

loc_800156E:				; CODE XREF: print_it+1CFj
		mov	eax, [ebp+esc_value]
		lea	edx, ds:0[eax*8]
		mov	eax, [ebp+b]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	eax, 30h
		add	eax, edx
		mov	[ebp+esc_value], eax
		add	[ebp+esc_length], 1
		add	[ebp+b], 1

loc_8001591:				; CODE XREF: print_it+192j
		cmp	[ebp+esc_length], 2
		jg	short loc_80015AB
		mov	eax, [ebp+b]
		movzx	eax, byte ptr [eax]
		cmp	al, 2Fh
		jle	short loc_80015AB
		mov	eax, [ebp+b]
		movzx	eax, byte ptr [eax]
		cmp	al, 37h
		jle	short loc_800156E

loc_80015AB:				; CODE XREF: print_it+1BBj
					; print_it+1C5j
		sub	esp, 0Ch
		push	[ebp+esc_value]	; c
		call	putchar_unlocked
		add	esp, 10h
		sub	[ebp+b], 1
		jmp	loc_800176F
; ---------------------------------------------------------------------------

loc_80015C2:				; CODE XREF: print_it+16Cj
					; print_it+176j
		mov	eax, [ebp+b]
		movzx	eax, byte ptr [eax]
		cmp	al, 78h
		jnz	loc_800171B
		call	__ctype_b_loc
		mov	ebx, [eax]
		mov	eax, [ebp+b]
		add	eax, 1
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; ch_0
		call	to_uchar
		add	esp, 10h
		movzx	eax, al
		add	eax, eax
		add	eax, ebx
		movzx	eax, word ptr [eax]
		movzx	eax, ax
		and	eax, 1000h
		test	eax, eax
		jz	loc_800171B
		mov	eax, [ebp+b]
		add	eax, 1
		movzx	eax, byte ptr [eax]
		cmp	al, 60h
		jle	short loc_8001634
		mov	eax, [ebp+b]
		add	eax, 1
		movzx	eax, byte ptr [eax]
		cmp	al, 66h
		jg	short loc_8001634
		mov	eax, [ebp+b]
		add	eax, 1
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	eax, 57h
		jmp	short loc_800166E
; ---------------------------------------------------------------------------

loc_8001634:				; CODE XREF: print_it+23Aj
					; print_it+247j
		mov	eax, [ebp+b]
		add	eax, 1
		movzx	eax, byte ptr [eax]
		cmp	al, 40h
		jle	short loc_800165F
		mov	eax, [ebp+b]
		add	eax, 1
		movzx	eax, byte ptr [eax]
		cmp	al, 46h
		jg	short loc_800165F
		mov	eax, [ebp+b]
		add	eax, 1
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	eax, 37h
		jmp	short loc_800166E
; ---------------------------------------------------------------------------

loc_800165F:				; CODE XREF: print_it+265j
					; print_it+272j
		mov	eax, [ebp+b]
		add	eax, 1
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	eax, 30h

loc_800166E:				; CODE XREF: print_it+258j
					; print_it+283j
		mov	[ebp+esc_value_0], eax
		add	[ebp+b], 1
		call	__ctype_b_loc
		mov	ebx, [eax]
		mov	eax, [ebp+b]
		add	eax, 1
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; ch_0
		call	to_uchar
		add	esp, 10h
		movzx	eax, al
		add	eax, eax
		add	eax, ebx
		movzx	eax, word ptr [eax]
		movzx	eax, ax
		and	eax, 1000h
		test	eax, eax
		jz	short loc_800170B
		add	[ebp+b], 1
		mov	eax, [ebp+esc_value_0]
		shl	eax, 4
		mov	edx, eax
		mov	eax, [ebp+b]
		movzx	eax, byte ptr [eax]
		cmp	al, 60h
		jle	short loc_80016D8
		mov	eax, [ebp+b]
		movzx	eax, byte ptr [eax]
		cmp	al, 66h
		jg	short loc_80016D8
		mov	eax, [ebp+b]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	eax, 57h
		jmp	short loc_8001706
; ---------------------------------------------------------------------------

loc_80016D8:				; CODE XREF: print_it+2E4j
					; print_it+2EEj
		mov	eax, [ebp+b]
		movzx	eax, byte ptr [eax]
		cmp	al, 40h
		jle	short loc_80016FA
		mov	eax, [ebp+b]
		movzx	eax, byte ptr [eax]
		cmp	al, 46h
		jg	short loc_80016FA
		mov	eax, [ebp+b]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	eax, 37h
		jmp	short loc_8001706
; ---------------------------------------------------------------------------

loc_80016FA:				; CODE XREF: print_it+306j
					; print_it+310j
		mov	eax, [ebp+b]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	eax, 30h

loc_8001706:				; CODE XREF: print_it+2FCj
					; print_it+31Ej
		add	eax, edx
		mov	[ebp+esc_value_0], eax

loc_800170B:				; CODE XREF: print_it+2CEj
		sub	esp, 0Ch
		push	[ebp+esc_value_0] ; c
		call	putchar_unlocked
		add	esp, 10h
		jmp	short loc_800176F
; ---------------------------------------------------------------------------

loc_800171B:				; CODE XREF: print_it+1F0j
					; print_it+229j
		mov	eax, [ebp+b]
		movzx	eax, byte ptr [eax]
		test	al, al
		jnz	short loc_8001758
		sub	esp, 0Ch
		push	offset aWarningBacksla ; "warning: backslash at	end of format"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		sub	esp, 0Ch
		push	5Ch		; c
		call	putchar_unlocked
		add	esp, 10h
		sub	[ebp+b], 1
		jmp	short loc_8001787
; ---------------------------------------------------------------------------

loc_8001758:				; CODE XREF: print_it+349j
		mov	eax, [ebp+b]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; c
		call	print_esc_char
		add	esp, 10h
		jmp	short loc_8001787
; ---------------------------------------------------------------------------

loc_800176F:				; CODE XREF: print_it+1E3j
					; print_it+33Fj
		jmp	short loc_8001787
; ---------------------------------------------------------------------------

loc_8001771:				; CODE XREF: print_it+4Ej
		mov	eax, [ebp+b]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; c
		call	putchar_unlocked
		add	esp, 10h
		nop

loc_8001787:				; CODE XREF: print_it:loc_8001515j
					; print_it+15Bj ...
		add	[ebp+b], 1

loc_800178B:				; CODE XREF: print_it+32j
		mov	eax, [ebp+b]
		movzx	eax, byte ptr [eax]
		test	al, al
		jnz	loc_8001411
		sub	esp, 0Ch
		push	[ebp+dest]	; ptr
		call	free
		add	esp, 10h
		mov	edx, ds:stdout
		mov	eax, trailing_delim
		sub	esp, 8
		push	edx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		nop
		mov	ebx, [ebp+var_4]
		leave
		retn
print_it	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; _Bool	__cdecl	do_statfs(const	char *filename,	_Bool terse, const char	*format)
do_statfs	proc near		; CODE XREF: main+219p

format		= dword	ptr -74h
terse		= byte ptr -70h
filename	= dword	ptr -6Ch
statfsbuf	= statfs ptr -60h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 70h
		mov	eax, [ebp+arg_4]
		mov	edx, [ebp+arg_0]
		mov	[ebp+filename],	edx
		mov	[ebp+terse], al
		mov	eax, [ebp+arg_8]
		mov	[ebp+format], eax
		mov	eax, large gs:14h
		mov	[ebp+var_C], eax
		xor	eax, eax
		sub	esp, 8
		push	offset asc_8002778 ; "-"
		push	[ebp+filename]	; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		jnz	short loc_8001839
		sub	esp, 0Ch
		push	[ebp+filename]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aUsingSToDenote ; "using	%s to denote standard input does "...
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	eax, 0
		jmp	loc_80018C3
; ---------------------------------------------------------------------------

loc_8001839:				; CODE XREF: do_statfs+3Aj
		sub	esp, 8
		lea	eax, [ebp+statfsbuf]
		push	eax
		push	[ebp+filename]
		call	statfs64
		add	esp, 10h
		test	eax, eax
		jz	short loc_800188C
		sub	esp, 0Ch
		push	[ebp+filename]
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aCannotReadFile ; "cannot read file system information for"...
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		push	esi
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	eax, 0
		jmp	short loc_80018C3
; ---------------------------------------------------------------------------

loc_800188C:				; CODE XREF: do_statfs+88j
		cmp	[ebp+format], 0
		jnz	short loc_80018A7
		cmp	[ebp+terse], 0
		jz	short loc_800189F
		mov	eax, offset aNILTSSBFACD ; "%n %i %l %t	%s %S %b %f %a %c %d\n"
		jmp	short loc_80018A4
; ---------------------------------------------------------------------------

loc_800189F:				; CODE XREF: do_statfs+D1j
		mov	eax, offset aFileNId8iNamel ; "	 File: \"%n\"\n	   ID: %-8i Namelen: %"...

loc_80018A4:				; CODE XREF: do_statfs+D8j
		mov	[ebp+format], eax

loc_80018A7:				; CODE XREF: do_statfs+CBj
		lea	eax, [ebp+statfsbuf]
		push	eax		; data
		push	offset print_statfs ; print_func
		push	[ebp+filename]	; filename
		push	[ebp+format]	; format
		call	print_it
		add	esp, 10h
		mov	eax, 1

loc_80018C3:				; CODE XREF: do_statfs+6Fj
					; do_statfs+C5j
		mov	ecx, [ebp+var_C]
		xor	ecx, large gs:14h
		jz	short loc_80018D4
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_80018D4:				; CODE XREF: do_statfs+108j
		lea	esp, [ebp-8]
		pop	ebx
		pop	esi
		pop	ebp
		retn
do_statfs	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; _Bool	__cdecl	do_stat(const char *filename, _Bool terse, const char *format)
do_stat		proc near		; CODE XREF: main+243p

format		= dword	ptr -84h
terse		= byte ptr -80h
filename	= dword	ptr -7Ch
statbuf		= stat ptr -6Ch
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		add	esp, 0FFFFFF80h
		mov	eax, [ebp+arg_4]
		mov	edx, [ebp+arg_0]
		mov	[ebp+filename],	edx
		mov	[ebp+terse], al
		mov	eax, [ebp+arg_8]
		mov	[ebp+format], eax
		mov	eax, large gs:14h
		mov	[ebp+var_C], eax
		xor	eax, eax
		sub	esp, 8
		push	offset asc_8002778 ; "-"
		push	[ebp+filename]	; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		jnz	short loc_8001965
		sub	esp, 8
		lea	eax, [ebp+statbuf]
		push	eax
		push	0
		call	fstat64
		add	esp, 10h
		test	eax, eax
		jz	loc_80019E1
		sub	esp, 0Ch
		push	offset aCannotStatStan ; "cannot stat standard input"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		sub	esp, 4
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	eax, 0
		jmp	loc_8001A4F
; ---------------------------------------------------------------------------

loc_8001965:				; CODE XREF: do_stat+3Dj
		movzx	eax, ds:follow_links
		test	al, al
		jz	short loc_8001989
		sub	esp, 8
		lea	eax, [ebp+statbuf]
		push	eax
		push	[ebp+filename]
		call	stat64
		add	esp, 10h
		test	eax, eax
		setnz	al
		jmp	short loc_80019A0
; ---------------------------------------------------------------------------

loc_8001989:				; CODE XREF: do_stat+93j
		sub	esp, 8
		lea	eax, [ebp+statbuf]
		push	eax
		push	[ebp+filename]
		call	lstat64
		add	esp, 10h
		test	eax, eax
		setnz	al

loc_80019A0:				; CODE XREF: do_stat+ACj
		test	al, al
		jz	short loc_80019E1
		sub	esp, 0Ch
		push	[ebp+filename]
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aCannotStatS ; "cannot stat %s"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		push	esi
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	eax, 0
		jmp	short loc_8001A4F
; ---------------------------------------------------------------------------

loc_80019E1:				; CODE XREF: do_stat+52j do_stat+C7j
		cmp	[ebp+format], 0
		jnz	short loc_8001A30
		cmp	[ebp+terse], 0
		jz	short loc_80019FC
		mov	[ebp+format], offset aNSBFUGDIHTTXYZ ; "%n %s %b %f %u %g %D %i	%h %t %T %X %Y "...
		jmp	short loc_8001A30
; ---------------------------------------------------------------------------

loc_80019FC:				; CODE XREF: do_stat+113j
		mov	eax, [ebp+statbuf.st_mode]
		and	eax, 0F000h
		cmp	eax, 6000h
		jz	short loc_8001A1A
		mov	eax, [ebp+statbuf.st_mode]
		and	eax, 0F000h
		cmp	eax, 2000h
		jnz	short loc_8001A26

loc_8001A1A:				; CODE XREF: do_stat+12Ej
		mov	[ebp+format], offset aFileNSize10sBl ; "  File:	%N\n  Size: %-10s\tBlocks: %-10"...
		jmp	short loc_8001A30
; ---------------------------------------------------------------------------

loc_8001A26:				; CODE XREF: do_stat+13Dj
		mov	[ebp+format], offset aFileNSize10s_0 ; "  File:	%N\n  Size: %-10s\tBlocks: %-10"...

loc_8001A30:				; CODE XREF: do_stat+10Dj do_stat+11Fj ...
		lea	eax, [ebp+statbuf]
		push	eax		; data
		push	offset print_stat ; print_func
		push	[ebp+filename]	; filename
		push	[ebp+format]	; format
		call	print_it
		add	esp, 10h
		mov	eax, 1

loc_8001A4F:				; CODE XREF: do_stat+85j do_stat+104j
		mov	ecx, [ebp+var_C]
		xor	ecx, large gs:14h
		jz	short loc_8001A60
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_8001A60:				; CODE XREF: do_stat+17Ej
		lea	esp, [ebp-8]
		pop	ebx
		pop	esi
		pop	ebp
		retn
do_stat		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; void __cdecl usage(int status)
		public usage
usage		proc near		; CODE XREF: main+14Ep	main+18Bp ...

status		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 4
		cmp	[ebp+status], 0
		jz	short loc_8001AA4
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, ds:stderr
		sub	esp, 4
		push	ebx
		push	edx		; format
		push	eax		; stream
		call	fprintf
		add	esp, 10h
		jmp	loc_8001C4B
; ---------------------------------------------------------------------------

loc_8001AA4:				; CODE XREF: usage+Bj
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aUsageSOption__ ; "Usage: %s [OPTION]...	FILE...\n"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aDisplayFileOrF ; "Display file or file system status.\n\n"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aCFormatFormatU ; "  -c	--format=FORMAT	  use the specifi"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aHelpDisplayThi ; "	--help	   display this	help and "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aVersionOutputV ; "	--version  output version informa"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aTheValidFormat ; "\nThe	valid format sequences for files "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aDDeviceNumberI ; "  %d	 Device	number in decimal\n  %D	 "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aHNumberOfHardL ; "  %h	 Number	of hard	links\n	 %i   Ino"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aUUserIdOfOwner ; "  %u	 User ID of owner\n  %U	  User na"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aValidFormatSeq ; "Valid	format sequences for file systems"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aIFileSystemIdI ; "  %i	 File System ID	in hex\n  %l   Ma"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		sub	esp, 0Ch
		push	offset aNoteYourShellM ; "\nNOTE: your shell may have its own ver"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	offset aStat	; "stat"
		push	eax		; format
		call	printf
		add	esp, 10h
		call	emit_ancillary_info

loc_8001C4B:				; CODE XREF: usage+38j
		sub	esp, 0Ch
		push	[ebp+status]	; status
		call	exit
usage		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public main
main		proc near

fs_0		= byte ptr -17h
terse		= byte ptr -16h
ok		= byte ptr -15h
i		= dword	ptr -14h
format		= dword	ptr -10h
c		= dword	ptr -0Ch
argc		= dword	ptr  0Ch
argv		= dword	ptr  10h
envp		= dword	ptr  14h

		lea	ecx, [esp+4]
		and	esp, 0FFFFFFF0h
		push	dword ptr [ecx-4]
		push	ebp
		mov	ebp, esp
		push	ebx
		push	ecx
		sub	esp, 10h
		mov	ebx, ecx
		mov	[ebp+fs_0], 0
		mov	[ebp+terse], 0
		mov	[ebp+format], 0
		mov	[ebp+ok], 1
		mov	eax, [ebx+4]
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	set_program_name
		add	esp, 10h
		sub	esp, 8
		push	offset locale	; locale
		push	6		; category
		call	setlocale
		add	esp, 10h
		sub	esp, 8
		push	offset dirname	; "/usr/local/share/locale"
		push	offset domainname ; "coreutils"
		call	bindtextdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset domainname ; "coreutils"
		call	textdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset close_stdout ; func
		call	atexit
		add	esp, 10h
		jmp	loc_8001DE6
; ---------------------------------------------------------------------------

loc_8001CDA:				; CODE XREF: main+1B3j
		mov	eax, [ebp+c]
		cmp	eax, 5Ah
		jz	loc_8001D7D
		cmp	eax, 5Ah
		jg	short loc_8001D0B
		cmp	eax, 0FFFFFF7Eh
		jz	loc_8001D9F
		cmp	eax, 4Ch
		jz	short loc_8001D68
		cmp	eax, 0FFFFFF7Dh
		jz	loc_8001DA9
		jmp	loc_8001DDC
; ---------------------------------------------------------------------------

loc_8001D0B:				; CODE XREF: main+93j
		cmp	eax, 66h
		jz	short loc_8001D71
		cmp	eax, 66h
		jg	short loc_8001D1F
		cmp	eax, 63h
		jz	short loc_8001D4D
		jmp	loc_8001DDC
; ---------------------------------------------------------------------------

loc_8001D1F:				; CODE XREF: main+BDj
		cmp	eax, 74h
		jz	short loc_8001D77
		cmp	eax, 80h
		jnz	loc_8001DDC
		mov	eax, ds:optarg
		mov	[ebp+format], eax
		mov	ds:interpret_backslash_escapes,	1
		mov	trailing_delim,	offset locale
		jmp	loc_8001DE6
; ---------------------------------------------------------------------------

loc_8001D4D:				; CODE XREF: main+C2j
		mov	eax, ds:optarg
		mov	[ebp+format], eax
		mov	ds:interpret_backslash_escapes,	0
		mov	trailing_delim,	offset asc_8003430 ; "\n"
		jmp	short loc_8001DE6
; ---------------------------------------------------------------------------

loc_8001D68:				; CODE XREF: main+A3j
		mov	ds:follow_links, 1
		jmp	short loc_8001DE6
; ---------------------------------------------------------------------------

loc_8001D71:				; CODE XREF: main+B8j
		mov	[ebp+fs_0], 1
		jmp	short loc_8001DE6
; ---------------------------------------------------------------------------

loc_8001D77:				; CODE XREF: main+CCj
		mov	[ebp+terse], 1
		jmp	short loc_8001DE6
; ---------------------------------------------------------------------------

loc_8001D7D:				; CODE XREF: main+8Aj
		sub	esp, 0Ch
		push	offset aTheContextZOpt ; "the --context	(-Z) option is obsolete	a"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		jmp	short loc_8001DE6
; ---------------------------------------------------------------------------

loc_8001D9F:				; CODE XREF: main+9Aj
		sub	esp, 0Ch
		push	0		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8001DA9:				; CODE XREF: main+AAj
		mov	edx, ds:Version
		mov	eax, ds:stdout
		sub	esp, 8
		push	0
		push	offset aMichaelMeskes ;	"Michael Meskes"
		push	edx
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	offset aStat	; "stat"
		push	eax
		call	version_etc
		add	esp, 20h
		sub	esp, 0Ch
		push	0		; status
		call	exit
; ---------------------------------------------------------------------------

loc_8001DDC:				; CODE XREF: main+B0j main+C4j ...
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8001DE6:				; CODE XREF: main+7Fj main+F2j ...
		sub	esp, 0Ch
		push	0		; longind
		push	offset long_options ; longopts
		push	offset shortopts ; "c:fLtZ"
		push	dword ptr [ebx+4] ; argv
		push	dword ptr [ebx]	; argc
		call	getopt_long
		add	esp, 20h
		mov	[ebp+c], eax
		cmp	[ebp+c], 0FFFFFFFFh
		jnz	loc_8001CDA
		mov	eax, ds:optind
		cmp	[ebx], eax
		jnz	short loc_8001E42
		sub	esp, 0Ch
		push	offset aMissingOperand ; "missing operand"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8001E42:				; CODE XREF: main+1C0j
		mov	eax, ds:optind
		mov	[ebp+i], eax
		jmp	short loc_8001EB6
; ---------------------------------------------------------------------------

loc_8001E4C:				; CODE XREF: main+265j
		cmp	[ebp+fs_0], 0
		jz	short loc_8001E7C
		movzx	edx, [ebp+terse]
		mov	eax, [ebp+i]
		lea	ecx, ds:0[eax*4]
		mov	eax, [ebx+4]
		add	eax, ecx
		mov	eax, [eax]
		sub	esp, 4
		push	[ebp+format]	; format
		push	edx		; terse
		push	eax		; filename
		call	do_statfs
		add	esp, 10h
		movzx	eax, al
		jmp	short loc_8001EA4
; ---------------------------------------------------------------------------

loc_8001E7C:				; CODE XREF: main+1FAj
		movzx	edx, [ebp+terse]
		mov	eax, [ebp+i]
		lea	ecx, ds:0[eax*4]
		mov	eax, [ebx+4]
		add	eax, ecx
		mov	eax, [eax]
		sub	esp, 4
		push	[ebp+format]	; format
		push	edx		; terse
		push	eax		; filename
		call	do_stat
		add	esp, 10h
		movzx	eax, al

loc_8001EA4:				; CODE XREF: main+224j
		movzx	edx, [ebp+ok]
		and	eax, edx
		test	eax, eax
		setnz	al
		mov	[ebp+ok], al
		add	[ebp+i], 1

loc_8001EB6:				; CODE XREF: main+1F4j
		mov	eax, [ebp+i]
		cmp	eax, [ebx]
		jl	short loc_8001E4C
		cmp	[ebp+ok], 0
		jz	short loc_8001ECA
		mov	eax, 0
		jmp	short loc_8001ECF
; ---------------------------------------------------------------------------

loc_8001ECA:				; CODE XREF: main+26Bj
		mov	eax, 1

loc_8001ECF:				; CODE XREF: main+272j
		sub	esp, 0Ch
		push	eax		; status

loc_8001ED3:				; DATA XREF: .eh_frame:080034C8o
					; .eh_frame:080034E8o ...
		call	exit
main		endp

_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 8001ED8h
; const	char *trailing_delim
trailing_delim	dd offset locale	; DATA XREF: print_it+3D3r main+E8w ...
_data		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
; Segment alignment '32byte' can not be represented in assembly
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 8001EE0h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
; _Bool	follow_links
follow_links	db ?			; DATA XREF: out_file_context+1Fr
					; do_stat:loc_8001965r	...
; _Bool	interpret_backslash_escapes
interpret_backslash_escapes db ?	; DATA XREF: print_it:loc_800151Ar
					; main+E1w ...
		align 4
; Function-local static	variable
; char buf_5536[21]
buf_5536	db 15h dup(?)		; DATA XREF: human_fstype+790o
					; human_fstype+79Do
		align 4
; Function-local static	variable
; char modebuf_5540[12]
modebuf_5540	db 0Ch dup(?)		; DATA XREF: human_access+9o
					; human_access+20o ...
		align 20h
; Function-local static	variable
; char str_5544[44]
str_5544	db 2Ch dup(?)		; DATA XREF: human_time+24o
					; human_time+47o ...
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment '32byte' can not be represented in assembly
_rodata		segment	para public 'CONST' use32
		assume cs:_rodata
		;org 8001F60h
; char msgid[]
msgid		db 0Ah			; DATA XREF: emit_ancillary_info+1Do
		db 'Report %s bugs to %s',0Ah,0
aBugCoreutils@g	db 'bug-coreutils@gnu.org',0 ; DATA XREF: emit_ancillary_info+2Do
		align 10h
; char aSHomePageHttpW[]
aSHomePageHttpW	db '%s home page: <http://www.gnu.org/software/%s/>',0Ah,0
					; DATA XREF: emit_ancillary_info+3Fo
; char domainname[]
domainname	db 'coreutils',0        ; DATA XREF: emit_ancillary_info+4Fo
					; main+52o ...
aGnuCoreutils	db 'GNU coreutils',0    ; DATA XREF: emit_ancillary_info+54o
					; main+169o
		align 4
; char aGeneralHelpUsi[]
aGeneralHelpUsi	db 'General help using GNU software: <http://www.gnu.org/gethelp/>',0Ah,0
					; DATA XREF: emit_ancillary_info+6Bo
; char s2[]
s2		db 'en_',0              ; DATA XREF: emit_ancillary_info+A2o
; char aReportSTransla[]
aReportSTransla	db 'Report %s translation bugs to <http://translationproject.org/team'
					; DATA XREF: emit_ancillary_info+CCo
		db '/>',0Ah,0
		align 4
; char aForCompleteDoc[]
aForCompleteDoc	db 'For complete documentation, run: info coreutils ',27h,'%s invocation'
					; DATA XREF: emit_ancillary_info+FCo
		db 27h,0Ah,0
aContext	db 'context',0          ; DATA XREF: .rodata:long_optionso
aDereference	db 'dereference',0      ; DATA XREF: .rodata:long_optionso
aFileSystem	db 'file-system',0      ; DATA XREF: .rodata:long_optionso
aFormat		db 'format',0           ; DATA XREF: .rodata:long_optionso
aPrintf		db 'printf',0           ; DATA XREF: .rodata:long_optionso
aTerse		db 'terse',0            ; DATA XREF: .rodata:long_optionso
aHelp		db 'help',0             ; DATA XREF: .rodata:long_optionso
aVersion	db 'version',0          ; DATA XREF: .rodata:long_optionso
		align 20h
; const	option long_options[9]
long_options	option <offset aContext, 0, 0, 5Ah> ; DATA XREF: main+195o
		option <offset aDereference, 0,	0, 4Ch>	; "context"
		option <offset aFileSystem, 0, 0, 66h>
		option <offset aFormat,	1, 0, 63h>
		option <offset aPrintf,	1, 0, 80h>
		option <offset aTerse, 0, 0, 74h>
		option <offset aHelp, 0, 0, 0FFFFFF7Eh>
		option <offset aVersion, 0, 0, 0FFFFFF7Dh>
		option	<0>
; char locale
locale		db 0			; DATA XREF: main+3Bo main+E8o ...
aAdfs		db 'adfs',0             ; DATA XREF: human_fstype:loc_800067Do
aAffs		db 'affs',0             ; DATA XREF: human_fstype:loc_8000687o
aAfs		db 'afs',0              ; DATA XREF: human_fstype:loc_8000691o
aAnonInodeFs	db 'anon-inode FS',0    ; DATA XREF: human_fstype:loc_800069Bo
aAutofs		db 'autofs',0           ; DATA XREF: human_fstype:loc_80006A5o
aBefs		db 'befs',0             ; DATA XREF: human_fstype:loc_80006AFo
aBfs		db 'bfs',0              ; DATA XREF: human_fstype:loc_80006B9o
aBinfmt_misc	db 'binfmt_misc',0      ; DATA XREF: human_fstype:loc_80006C3o
aBtrfs		db 'btrfs',0            ; DATA XREF: human_fstype:loc_80006CDo
aCgroupfs	db 'cgroupfs',0         ; DATA XREF: human_fstype:loc_80006D7o
aCifs		db 'cifs',0             ; DATA XREF: human_fstype:loc_80006E1o
aCoda		db 'coda',0             ; DATA XREF: human_fstype:loc_80006EBo
aCoh		db 'coh',0              ; DATA XREF: human_fstype:loc_80006F5o
aCramfs		db 'cramfs',0           ; DATA XREF: human_fstype:loc_80006FFo
aCramfsWend	db 'cramfs-wend',0      ; DATA XREF: human_fstype:loc_8000709o
aDebugfs	db 'debugfs',0          ; DATA XREF: human_fstype:loc_8000713o
aDevfs		db 'devfs',0            ; DATA XREF: human_fstype:loc_800071Do
aDevpts		db 'devpts',0           ; DATA XREF: human_fstype:loc_8000727o
aEfs		db 'efs',0              ; DATA XREF: human_fstype:loc_8000731o
aExt		db 'ext',0              ; DATA XREF: human_fstype:loc_800073Bo
aExt2Ext3	db 'ext2/ext3',0        ; DATA XREF: human_fstype:loc_8000745o
aExt2		db 'ext2',0             ; DATA XREF: human_fstype:loc_800074Fo
aFat		db 'fat',0              ; DATA XREF: human_fstype:loc_8000759o
aFuseblk	db 'fuseblk',0          ; DATA XREF: human_fstype:loc_8000763o
aFusectl	db 'fusectl',0          ; DATA XREF: human_fstype:loc_800076Do
aFutexfs	db 'futexfs',0          ; DATA XREF: human_fstype:loc_8000777o
aGfsGfs2	db 'gfs/gfs2',0         ; DATA XREF: human_fstype:loc_8000781o
aHfs		db 'hfs',0              ; DATA XREF: human_fstype:loc_800078Bo
aHpfs		db 'hpfs',0             ; DATA XREF: human_fstype:loc_8000795o
aHugetlbfs	db 'hugetlbfs',0        ; DATA XREF: human_fstype:loc_800079Fo
aInotifyfs	db 'inotifyfs',0        ; DATA XREF: human_fstype:loc_80007A9o
aIsofs		db 'isofs',0            ; DATA XREF: human_fstype:loc_80007B3o
					; human_fstype:loc_80007BDo ...
aJffs		db 'jffs',0             ; DATA XREF: human_fstype:loc_80007D1o
aJffs2		db 'jffs2',0            ; DATA XREF: human_fstype:loc_80007DBo
aJfs		db 'jfs',0              ; DATA XREF: human_fstype:loc_80007E5o
aKAfs		db 'k-afs',0            ; DATA XREF: human_fstype:loc_80007EFo
aLustre		db 'lustre',0           ; DATA XREF: human_fstype:loc_80007F9o
aMinix		db 'minix',0            ; DATA XREF: human_fstype:loc_8000803o
aMinix30Char_	db 'minix (30 char.)',0 ; DATA XREF: human_fstype:loc_800080Do
aMinixV2	db 'minix v2',0         ; DATA XREF: human_fstype:loc_8000817o
aMinixV230Char_	db 'minix v2 (30 char.)',0 ; DATA XREF: human_fstype:loc_8000821o
aMinix3		db 'minix3',0           ; DATA XREF: human_fstype:loc_800082Bo
aMsdos		db 'msdos',0            ; DATA XREF: human_fstype:loc_8000835o
aNovell		db 'novell',0           ; DATA XREF: human_fstype:loc_800083Fo
aNfs		db 'nfs',0              ; DATA XREF: human_fstype:loc_8000849o
aNfsd		db 'nfsd',0             ; DATA XREF: human_fstype:loc_8000853o
aNilfs		db 'nilfs',0            ; DATA XREF: human_fstype:loc_800085Do
aNtfs		db 'ntfs',0             ; DATA XREF: human_fstype:loc_8000867o
aOpenprom	db 'openprom',0         ; DATA XREF: human_fstype:loc_8000871o
aOcfs2		db 'ocfs2',0            ; DATA XREF: human_fstype:loc_800087Bo
aProc		db 'proc',0             ; DATA XREF: human_fstype:loc_8000885o
aQnx4		db 'qnx4',0             ; DATA XREF: human_fstype:loc_800088Fo
aRamfs		db 'ramfs',0            ; DATA XREF: human_fstype:loc_8000899o
aReiserfs	db 'reiserfs',0         ; DATA XREF: human_fstype:loc_80008A3o
aRomfs		db 'romfs',0            ; DATA XREF: human_fstype:loc_80008ADo
aRpc_pipefs	db 'rpc_pipefs',0       ; DATA XREF: human_fstype:loc_80008B7o
aSecurityfs	db 'securityfs',0       ; DATA XREF: human_fstype:loc_80008C1o
aSelinux	db 'selinux',0          ; DATA XREF: human_fstype:loc_80008CBo
aSmb		db 'smb',0              ; DATA XREF: human_fstype:loc_80008D5o
aSockfs		db 'sockfs',0           ; DATA XREF: human_fstype:loc_80008DFo
aSquashfs	db 'squashfs',0         ; DATA XREF: human_fstype:loc_80008E9o
aSysfs		db 'sysfs',0            ; DATA XREF: human_fstype:loc_80008F3o
aSysv2		db 'sysv2',0            ; DATA XREF: human_fstype:loc_80008FAo
aSysv4		db 'sysv4',0            ; DATA XREF: human_fstype:loc_8000901o
aTmpfs		db 'tmpfs',0            ; DATA XREF: human_fstype:loc_8000908o
aUdf		db 'udf',0              ; DATA XREF: human_fstype:loc_800090Fo
aUfs		db 'ufs',0              ; DATA XREF: human_fstype:loc_8000916o
					; human_fstype:loc_800091Do
aUsbdevfs	db 'usbdevfs',0         ; DATA XREF: human_fstype:loc_8000924o
aVxfs		db 'vxfs',0             ; DATA XREF: human_fstype:loc_800092Bo
aXenfs		db 'xenfs',0            ; DATA XREF: human_fstype:loc_8000932o
aXenix		db 'xenix',0            ; DATA XREF: human_fstype:loc_8000939o
aXfs		db 'xfs',0              ; DATA XREF: human_fstype:loc_8000940o
aXia		db 'xia',0              ; DATA XREF: human_fstype:loc_8000947o
; char format[]
format		db 'UNKNOWN (0x%lx)',0  ; DATA XREF: human_fstype+78Bo
aYMDHMS_NZ	db '%Y-%m-%d %H:%M:%S.%N %z',0 ; DATA XREF: human_time+40o
		align 10h
; char aFailedToGetSec[]
aFailedToGetSec	db 'failed to get security context of %s',0
					; DATA XREF: out_file_context+6Do
a?		db '?',0                ; DATA XREF: out_file_context:loc_8000BAAo
		align 4
off_80023D8	dd offset loc_8000E0E	; DATA XREF: print_statfs+22r
		dd offset loc_8000E24	; jump table for switch	statement
		dd offset loc_8000E24
		dd offset loc_8000E24
		dd offset loc_8000E24
		dd offset loc_8000E24
		dd offset loc_8000E24
		dd offset loc_8000E24
		dd offset loc_8000E24
		dd offset loc_8000E24
		dd offset loc_8000E24
		dd offset loc_8000E24
		dd offset loc_8000E24
		dd offset loc_8000E24
		dd offset loc_8000E24
		dd offset loc_8000E24
		dd offset loc_8000D9D
		dd offset loc_8000D02
		dd offset loc_8000E24
		dd offset loc_8000E24
		dd offset loc_8000E24
		dd offset loc_8000E24
		dd offset loc_8000E24
		dd offset loc_8000E24
		dd offset loc_8000E24
		dd offset loc_8000E24
		dd offset loc_8000E24
		dd offset loc_8000E24
		dd offset loc_8000E24
		dd offset loc_8000E24
		dd offset loc_8000D63
		dd offset loc_8000D27
		dd offset loc_8000DD8
		dd offset loc_8000DF3
		dd offset loc_8000E24
		dd offset loc_8000D45
		dd offset loc_8000E24
		dd offset loc_8000E24
		dd offset loc_8000C31
		dd offset loc_8000E24
		dd offset loc_8000E24
		dd offset loc_8000CCB
		dd offset loc_8000E24
		dd offset loc_8000C18
		dd offset loc_8000E24
		dd offset loc_8000E24
		dd offset loc_8000E24
		dd offset loc_8000E24
		dd offset loc_8000D81
		dd offset loc_8000CE7
; char aCannotReadSymb[]
aCannotReadSymb	db 'cannot read symbolic link %s',0 ; DATA XREF: print_stat+CEo
; char asc_80024BD[]
asc_80024BD	db ' -> ',0             ; DATA XREF: print_stat+F9o
aUnknown	db 'UNKNOWN',0          ; DATA XREF: print_stat:loc_80010BEo
					; print_stat:loc_8001121o
		align 4
off_80024CC	dd offset loc_8000FED, offset loc_80011BB, offset loc_8001308
					; DATA XREF: print_stat+42r
		dd offset loc_8000F83, offset loc_800131E, offset loc_8001032 ;	jump table for switch statement
		dd offset loc_80010FA, offset loc_800131E, offset loc_800131E
		dd offset loc_800131E, offset loc_800131E, offset loc_800131E
		dd offset loc_800131E, offset loc_8000E9F, offset loc_800131E
		dd offset loc_800131E, offset loc_800131E, offset loc_800131E
		dd offset loc_800131E, offset loc_800116D, offset loc_8001097
		dd offset loc_800131E, offset loc_800131E, offset loc_8001249
		dd offset loc_800129F, offset loc_80012EF, offset loc_800131E
		dd offset loc_800131E, offset loc_800131E, offset loc_800131E
		dd offset loc_800131E, offset loc_800131E, offset loc_8000FBE
		dd offset loc_80011D5, offset loc_800131E, offset loc_8000F66
		dd offset loc_800131E, offset loc_8001012, offset loc_80010DA
		dd offset loc_8001057, offset loc_8000FA0, offset loc_800131E
		dd offset loc_800131E, offset loc_800131E, offset loc_800131E
		dd offset loc_8000E86, offset loc_80011F3, offset loc_800131E
		dd offset loc_800131E, offset loc_800131E, offset loc_800119D
		dd offset loc_800113D, offset loc_8001077, offset loc_800131E
		dd offset loc_800131E, offset loc_800120F, offset loc_8001265
		dd offset loc_80012B8
; char aWarningUnrecog[]
aWarningUnrecog	db 'warning: unrecognized escape `\%c',27h,0 ; DATA XREF: print_esc_char+59o
		align 4
off_80025D8	dd offset loc_80013C3, offset loc_800139F, offset loc_800139F
					; DATA XREF: print_esc_char+19r
		dd offset loc_800139F, offset loc_800139F, offset loc_800139F ;	jump table for switch statement
		dd offset loc_800139F, offset loc_800139F, offset loc_800139F
		dd offset loc_800139F, offset loc_800139F, offset loc_800139F
		dd offset loc_800139F, offset loc_800139F, offset loc_800139F
		dd offset loc_800139F, offset loc_800139F, offset loc_800139F
		dd offset loc_800139F, offset loc_800139F, offset loc_800139F
		dd offset loc_800139F, offset loc_800139F, offset loc_800139F
		dd offset loc_800139F, offset loc_800139F, offset loc_800139F
		dd offset loc_800139F, offset loc_800139F, offset loc_800139F
		dd offset loc_800139F, offset loc_800139F, offset loc_800139F
		dd offset loc_800139F, offset loc_800139F, offset loc_800139F
		dd offset loc_800139F, offset loc_800139F, offset loc_800139F
		dd offset loc_800139F, offset loc_800139F, offset loc_800139F
		dd offset loc_800139F, offset loc_800139F, offset loc_800139F
		dd offset loc_800139F, offset loc_800139F, offset loc_800139F
		dd offset loc_800139F, offset loc_800139F, offset loc_800139F
		dd offset loc_800139F, offset loc_800139F, offset loc_800139F
		dd offset loc_800139F, offset loc_800139F, offset loc_800139F
		dd offset loc_800139F, offset loc_80013C3, offset loc_800139F
		dd offset loc_800139F, offset loc_800139F, offset loc_800139F
		dd offset loc_800136F, offset loc_8001375, offset loc_800139F
		dd offset loc_800139F, offset loc_800137B, offset loc_8001381
		dd offset loc_800139F, offset loc_800139F, offset loc_800139F
		dd offset loc_800139F, offset loc_800139F, offset loc_800139F
		dd offset loc_800139F, offset loc_8001387, offset loc_800139F
		dd offset loc_800139F, offset loc_800139F, offset loc_800138D
		dd offset loc_800139F, offset loc_8001393, offset loc_800139F
		dd offset loc_8001399
; char accept[]
accept		db '#-+.I 0123456789',0 ; DATA XREF: print_it+5Co
; char aSInvalidDirect[]
aSInvalidDirect	db '%s: invalid directive',0 ; DATA XREF: print_it+EBo
		align 4
; char aWarningBacksla[]
aWarningBacksla	db 'warning: backslash at end of format',0 ; DATA XREF: print_it+34Eo
; char asc_8002778[]
asc_8002778	db '-',0                ; DATA XREF: do_statfs+28o do_stat+2Bo
		align 4
; char aUsingSToDenote[]
aUsingSToDenote	db 'using %s to denote standard input does not work in file system mo'
					; DATA XREF: do_statfs+4Fo
		db 'de',0
; char aCannotReadFile[]
aCannotReadFile	db 'cannot read file system information for %s',0 ; DATA XREF: do_statfs+9Do
		align 4
aNILTSSBFACD	db '%n %i %l %t %s %S %b %f %a %c %d',0Ah,0 ; DATA XREF: do_statfs+D3o
		align 10h
aFileNId8iNamel	db '  File: "%n"',0Ah   ; DATA XREF: do_statfs:loc_800189Fo
		db '    ID: %-8i Namelen: %-7l Type: %T',0Ah
		db 'Block size: %-10s Fundamental block size: %S',0Ah
		db 'Blocks: Total: %-10b Free: %-10f Available: %a',0Ah
		db 'Inodes: Total: %-10c Free: %d',0Ah,0
; char aCannotStatStan[]
aCannotStatStan	db 'cannot stat standard input',0 ; DATA XREF: do_stat+5Bo
; char aCannotStatS[]
aCannotStatS	db 'cannot stat %s',0   ; DATA XREF: do_stat+DCo
		align 4
aNSBFUGDIHTTXYZ	db '%n %s %b %f %u %g %D %i %h %t %T %X %Y %Z %o',0Ah,0
					; DATA XREF: do_stat+115o
		align 4
aFileNSize10sBl	db '  File: %N',0Ah     ; DATA XREF: do_stat:loc_8001A1Ao
		db '  Size: %-10s',9,'Blocks: %-10b IO Block: %-6o %F',0Ah
		db 'Device: %Dh/%dd',9,'Inode: %-10i  Links: %-5h Device type: %t,%T',0Ah
		db 'Access: (%04a/%10.10A)  Uid: (%5u/%8U)   Gid: (%5g/%8G)',0Ah
		db 'Access: %x',0Ah
		db 'Modify: %y',0Ah
		db 'Change: %z',0Ah,0
aFileNSize10s_0	db '  File: %N',0Ah     ; DATA XREF: do_stat:loc_8001A26o
		db '  Size: %-10s',9,'Blocks: %-10b IO Block: %-6o %F',0Ah
		db 'Device: %Dh/%dd',9,'Inode: %-10i  Links: %h',0Ah
		db 'Access: (%04a/%10.10A)  Uid: (%5u/%8U)   Gid: (%5g/%8G)',0Ah
		db 'Access: %x',0Ah
		db 'Modify: %y',0Ah
		db 'Change: %z',0Ah,0
		align 4
; char aTrySHelpForMor[]
aTrySHelpForMor	db 'Try `%s --help',27h,' for more information.',0Ah,0
					; DATA XREF: usage+16o
		align 4
; char aUsageSOption__[]
aUsageSOption__	db 'Usage: %s [OPTION]... FILE...',0Ah,0 ; DATA XREF: usage+46o
		align 4
; char aDisplayFileOrF[]
aDisplayFileOrF	db 'Display file or file system status.',0Ah ; DATA XREF: usage+69o
		db 0Ah
		db '  -L, --dereference     follow links',0Ah
		db '  -f, --file-system     display file system status instead of fil'
		db 'e status',0Ah,0
		align 4
; char aCFormatFormatU[]
aCFormatFormatU	db '  -c  --format=FORMAT   use the specified FORMAT instead of the d'
					; DATA XREF: usage+8Co
		db 'efault;',0Ah
		db '                          output a newline after each use of FORM'
		db 'AT',0Ah
		db '      --printf=FORMAT   like --format, but interpret backslash es'
		db 'capes,',0Ah
		db '                          and do not output a mandatory trailing '
		db 'newline.',0Ah
		db '                          If you want a newline, include \n in FO'
		db 'RMAT.',0Ah
		db '  -t, --terse           print the information in terse form',0Ah,0
		align 4
; char aHelpDisplayThi[]
aHelpDisplayThi	db '      --help     display this help and exit',0Ah,0
					; DATA XREF: usage+AFo
		align 4
; char aVersionOutputV[]
aVersionOutputV	db '      --version  output version information and exit',0Ah,0
					; DATA XREF: usage+D2o
		align 10h
; char aTheValidFormat[]
aTheValidFormat	db 0Ah			; DATA XREF: usage+F5o
		db 'The valid format sequences for files (without --file-system):',0Ah
		db 0Ah
		db '  %a   Access rights in octal',0Ah
		db '  %A   Access rights in human readable form',0Ah
		db '  %b   Number of blocks allocated (see %B)',0Ah
		db '  %B   The size in bytes of each block reported by %b',0Ah
		db '  %C   SELinux security context string',0Ah,0
		align 4
; char aDDeviceNumberI[]
aDDeviceNumberI	db '  %d   Device number in decimal',0Ah ; DATA XREF: usage+118o
		db '  %D   Device number in hex',0Ah
		db '  %f   Raw mode in hex',0Ah
		db '  %F   File type',0Ah
		db '  %g   Group ID of owner',0Ah
		db '  %G   Group name of owner',0Ah,0
		align 10h
; char aHNumberOfHardL[]
aHNumberOfHardL	db '  %h   Number of hard links',0Ah ; DATA XREF: usage+13Bo
		db '  %i   Inode number',0Ah
		db '  %n   File name',0Ah
		db '  %N   Quoted file name with dereference if symbolic link',0Ah
		db '  %o   I/O block size',0Ah
		db '  %s   Total size, in bytes',0Ah
		db '  %t   Major device type in hex',0Ah
		db '  %T   Minor device type in hex',0Ah,0
		align 10h
; char aUUserIdOfOwner[]
aUUserIdOfOwner	db '  %u   User ID of owner',0Ah ; DATA XREF: usage+15Eo
		db '  %U   User name of owner',0Ah
		db '  %x   Time of last access',0Ah
		db '  %X   Time of last access as seconds since Epoch',0Ah
		db '  %y   Time of last modification',0Ah
		db '  %Y   Time of last modification as seconds since Epoch',0Ah
		db '  %z   Time of last change',0Ah
		db '  %Z   Time of last change as seconds since Epoch',0Ah
		db 0Ah,0
		align 4
; char aValidFormatSeq[]
aValidFormatSeq	db 'Valid format sequences for file systems:',0Ah ; DATA XREF: usage+181o
		db 0Ah
		db '  %a   Free blocks available to non-superuser',0Ah
		db '  %b   Total data blocks in file system',0Ah
		db '  %c   Total file nodes in file system',0Ah
		db '  %d   Free file nodes in file system',0Ah
		db '  %f   Free blocks in file system',0Ah
		db '  %C   SELinux security context string',0Ah,0
		align 10h
; char aIFileSystemIdI[]
aIFileSystemIdI	db '  %i   File System ID in hex',0Ah ; DATA XREF: usage+1A4o
		db '  %l   Maximum length of filenames',0Ah
		db '  %n   File name',0Ah
		db '  %s   Block size (for faster transfers)',0Ah
		db '  %S   Fundamental block size (for block counts)',0Ah
		db '  %t   Type in hex',0Ah
		db '  %T   Type in human readable form',0Ah,0
		align 4
; char aNoteYourShellM[]
aNoteYourShellM	db 0Ah			; DATA XREF: usage+1C1o
		db 'NOTE: your shell may have its own version of %s, which usually su'
		db 'persedes',0Ah
		db 'the version described here.  Please refer to your shell',27h,'s docu'
		db 'mentation',0Ah
		db 'for details about the options it supports.',0Ah,0
aStat		db 'stat',0             ; DATA XREF: usage+1D1o main+16Eo
; char dirname[]
dirname		db '/usr/local/share/locale',0 ; DATA XREF: main+4Do
asc_8003430	db 0Ah,0		; DATA XREF: main+106o
		align 4
; char aTheContextZOpt[]
aTheContextZOpt	db 'the --context (-Z) option is obsolete and will be removed',0Ah
					; DATA XREF: main+12Ao
		db 'in a future release',0
aMichaelMeskes	db 'Michael Meskes',0   ; DATA XREF: main+163o
; char shortopts[]
shortopts	db 'c:fLtZ',0           ; DATA XREF: main+19Ao
; char aMissingOperand[]
aMissingOperand	db 'missing operand',0  ; DATA XREF: main+1C5o
_rodata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_eh_frame	segment	dword public 'CONST' use32
		assume cs:_eh_frame
		;org 80034A8h
		dd 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 2	dup(1Ch)
		dd offset loc_8001ED3-800539Bh
		dd 6, 80E4100h,	0D420285h, 0CC54205h, 404h, 1Ch, 3Ch
		dd offset loc_8001ED3-80053B5h
		dd 18h,	80E4100h, 0D420285h, 0CC55405h,	404h, 1Ch, 5Ch
		dd offset loc_8001ED3-80053BDh
		dd 18h,	80E4100h, 0D420285h, 0CC55405h,	404h, 1Ch, 7Ch
		dd offset loc_8001ED3-80053C5h
		dd 12h,	80E4100h, 0D420285h, 0CC54E05h,	404h, 20h, 9Ch
		dd offset loc_8001ED3-80053D3h
		dd 11Ch, 80E4100h, 0D420285h, 3834405h,	0C5011403h, 4040CC3h
		dd 1Ch,	0C0h
		dd offset loc_8001ED3-80052DBh
		dd 1Ch,	80E4100h, 0D420285h, 0CC55805h,	404h, 1Ch, 0E0h
		dd offset loc_8001ED3-80052DFh
		dd 1Bh,	80E4100h, 0D420285h, 0CC55505h,	404h, 1Ch, 100h
		dd offset loc_8001ED3-80052E4h
		dd 1Bh,	80E4100h, 0D420285h, 0CC55505h,	404h, 1Ch, 120h
		dd offset loc_8001ED3-80052E9h
		dd 1Bh,	80E4100h, 0D420285h, 0CC55505h,	404h, 1Ch, 140h
		dd offset loc_8001ED3-80052EEh
		dd 7A4h, 80E4100h, 0D420285h, 7A00305h,	4040CC5h, 1Ch
		dd 160h
		dd offset loc_8001ED3-8004B6Ah
		dd 27h,	80E4100h, 0D420285h, 0CC56305h,	404h, 1Ch, 180h
		dd offset loc_8001ED3-8004B63h
		dd 5Bh,	80E4100h, 0D420285h, 0C5570205h, 4040Ch, 1Ch, 1A0h
		dd offset loc_8001ED3-8004B28h
		dd 27h,	80E4100h, 0D420285h, 0CC56305h,	404h, 1Ch, 1C0h
		dd offset loc_8001ED3-8004B21h
		dd 37h,	80E4100h, 0D420285h, 0CC57305h,	404h, 1Ch, 1E0h
		dd offset loc_8001ED3-8004B0Ah
		dd 37h,	80E4100h, 0D420285h, 0CC57305h,	404h, 1Ch, 200h
		dd offset loc_8001ED3-8004AF3h
		dd 37h,	80E4100h, 0D420285h, 0CC57305h,	404h, 1Ch, 220h
		dd offset loc_8001ED3-8004ADCh
		dd 37h,	80E4100h, 0D420285h, 0CC57305h,	404h, 24h, 240h
		dd offset loc_8001ED3-8004AC5h
		dd 0F3h, 80E4100h, 0D420285h, 3864505h,	0E8020483h, 41C641C3h
		dd 4040CC5h, 1Ch, 268h
		dd offset loc_8001ED3-80049FAh
		dd 24Eh, 80E4100h, 0D420285h, 24A0305h,	4040CC5h, 28h
		dd 288h
		dd offset loc_8001ED3-80047CCh
		dd 512h, 80E4100h, 0D420285h, 3864505h,	7030483h, 0C641C305h
		dd 40CC541h, 4,	20h, 2B4h
		dd offset loc_8001ED3-80042E6h
		dd 8Dh,	80E4100h, 0D420285h, 3834405h, 0C3C58502h, 4040Ch
		dd 20h,	2D8h
		dd offset loc_8001ED3-800427Dh
		dd 3EBh, 80E4100h, 0D420285h, 3834405h,	0C503E303h, 4040CC3h
		dd 28h,	2FCh
		dd offset loc_8001ED3-8003EB6h
		dd 116h, 80E4100h, 0D420285h, 3864505h,	0B030483h, 0C641C301h
		dd 40CC541h, 4,	28h, 328h
		dd offset loc_8001ED3-8003DCCh
		dd 18Ch, 80E4100h, 0D420285h, 3864505h,	81030483h, 0C641C301h
		dd 40CC541h, 4,	18h, 354h
		dd offset loc_8001ED3-8003C6Ch
		dd 1EFh, 80E4100h, 0D420285h, 3834405h,	24h, 370h
		dd offset loc_8001ED3-8003A99h
		dd 282h, 10C4400h, 5104700h, 44007502h,	7875030Fh, 2031006h
		dd 7C75h
_eh_frame	ends

; ===========================================================================

; Segment type:	Externs
; extern
; int *_errno_location(void)
		extrn __errno_location:near ; CODE XREF: getfilecon+6p
					; lgetfilecon+6p ...
		extrn program_name:dword ; DATA	XREF: emit_ancillary_info+7r
					; emit_ancillary_info+B6r ...
		extrn last_component:near ; CODE XREF: emit_ancillary_info+10p
					; emit_ancillary_info+BFp ...
; char *gettext(const char *msgid)
		extrn gettext:near	; CODE XREF: emit_ancillary_info+22p
					; emit_ancillary_info+44p ...
; int printf(const char	*format, ...)
		extrn printf:near	; CODE XREF: emit_ancillary_info+34p
					; emit_ancillary_info+5Ap ...
; struct _IO_FILE *stdout
		extrn stdout:dword	; DATA XREF: emit_ancillary_info+62r
					; print_statfs:loc_8000E24r ...
		extrn fputs_unlocked:near ; CODE XREF: emit_ancillary_info+7Dp
					; print_it+3DDp ...
; char *setlocale(int category,	const char *locale)
		extrn setlocale:near	; CODE XREF: emit_ancillary_info+8Cp
					; main+42p
; int strncmp(const char *s1, const char *s2, size_t n)
		extrn strncmp:near	; CODE XREF: emit_ancillary_info+AAp
		extrn imaxtostr:near	; CODE XREF: timetostr+12p
; int sprintf(char *s, const char *format, ...)
		extrn sprintf:near	; CODE XREF: human_fstype+795p
		extrn filemodestring:near ; CODE XREF: human_access+11p
; struct tm *localtime(const time_t *timer)
		extrn localtime:near	; CODE XREF: human_time+Dp
		extrn nstrftime:near	; CODE XREF: human_time+4Cp
		extrn quote:near	; CODE XREF: out_file_context+60p
					; print_stat+6Ap ...
; void error(int status, int errnum, const char	*format, ...)
		extrn error:near	; CODE XREF: out_file_context+88p
					; print_stat+E9p ...
		extrn __stack_chk_fail:near ; CODE XREF: out_file_context+E7p
					; print_stat+506p ...
; int fputc_unlocked(int c, FILE *stream)
		extrn fputc_unlocked:near ; CODE XREF: print_statfs+242p
					; print_stat+4EEp
		extrn areadlink_with_size:near ; CODE XREF: print_stat+AAp
		extrn file_type:near	; CODE XREF: print_stat+1FDp
; void setpwent(void)
		extrn setpwent:near	; CODE XREF: print_stat:loc_8001097p
; struct passwd	*getpwuid(__uid_t uid)
		extrn getpwuid:near	; CODE XREF: print_stat+26Bp
; void setgrent(void)
		extrn setgrent:near	; CODE XREF: print_stat:loc_80010FAp
; struct group *getgrgid(__gid_t gid)
		extrn getgrgid:near	; CODE XREF: print_stat+2CEp
; unsigned int gnu_dev_major(unsigned __int64 dev)
		extrn gnu_dev_major:near ; CODE	XREF: print_stat+310p
; unsigned int gnu_dev_minor(unsigned __int64 dev)
		extrn gnu_dev_minor:near ; CODE	XREF: print_stat+340p
; int putchar_unlocked(int c)
		extrn putchar_unlocked:near ; CODE XREF: print_esc_char+7Fp
					; print_it+10Bp ...
; size_t strlen(const char *s)
		extrn strlen:near	; CODE XREF: print_it+Dp
; void *xmalloc(size_t)
		extrn xmalloc:near	; CODE XREF: print_it+21p
; size_t strspn(const char *s, const char *accept)
		extrn strspn:near	; CODE XREF: print_it+62p
; void *memcpy(void *dest, const void *src, size_t n)
		extrn memcpy:near	; CODE XREF: print_it+8Bp
		extrn quotearg_colon:near ; CODE XREF: print_it+DEp
; const	unsigned __int16 **_ctype_b_loc(void)
		extrn __ctype_b_loc:near ; CODE	XREF: print_it+1F6p
					; print_it+29Bp
; void free(void *ptr)
		extrn free:near		; CODE XREF: print_it+3C5p
; int strcmp(const char	*s1, const char	*s2)
		extrn strcmp:near	; CODE XREF: do_statfs+30p do_stat+33p
		extrn statfs64:near	; CODE XREF: do_statfs+7Ep
		extrn fstat64:near	; CODE XREF: do_stat+48p
		extrn stat64:near	; CODE XREF: do_stat+9Fp
		extrn lstat64:near	; CODE XREF: do_stat+B8p
; struct _IO_FILE *stderr
		extrn stderr:dword	; DATA XREF: usage+25r
; int fprintf(FILE *stream, const char *format,	...)
		extrn fprintf:near	; CODE XREF: usage+30p
; void exit(int	status)
		extrn exit:near		; CODE XREF: usage+1EAp main+181p ...
		extrn set_program_name:near ; CODE XREF: main+30p
; char *bindtextdomain(const char *domainname, const char *dirname)
		extrn bindtextdomain:near ; CODE XREF: main+57p
; char *textdomain(const char *domainname)
		extrn textdomain:near	; CODE XREF: main+67p
; void close_stdout(void)
		extrn close_stdout	; DATA XREF: main+72o
; int atexit(void (*func)(void))
		extrn atexit:near	; CODE XREF: main+77p
; char *optarg
		extrn optarg:dword	; DATA XREF: main+D9r
					; main:loc_8001D4Dr
		extrn Version:dword	; DATA XREF: main:loc_8001DA9r
		extrn version_etc:near	; CODE XREF: main+174p
; int getopt_long(int argc, char *const	*argv, const char *shortopts, const struct option *longopts, int *longind)
		extrn getopt_long:near	; CODE XREF: main+1A4p
; int optind
		extrn optind:dword	; DATA XREF: main+1B9r
					; main:loc_8001E42r


		end
