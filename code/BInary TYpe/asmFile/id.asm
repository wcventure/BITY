;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B611-7234-BB			    |
; |		Doskey Lee, Kingsoft Internet Security Software		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	3E3CCB935FDBA97673E0C47219CDA0AC
; Input	CRC32 :	297835F1

; File Name   :	D:\coreutils-o\id.o
; Format      :	ELF for	Intel 386 (Relocatable)
;
; Source File :	'id.c'

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	byte public 'CODE' use32
		assume cs:_text
		;org 8000000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; int __cdecl getcon(char **con)
getcon		proc near		; CODE XREF: main+263p

con		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		call	__errno_location
		mov	dword ptr [eax], 5Fh
		mov	eax, 0FFFFFFFFh
		leave
		retn
getcon		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void emit_ancillary_info()
emit_ancillary_info proc near		; CODE XREF: usage+ECp

lc_messages	= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset msgid	; "\nReport %s bugs to %s\n"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset aBugCoreutils@g ; "bug-coreutils@gnu.org"
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	offset aSHomePageHttpW ; "%s home page:	<http://www.gnu.org/softw"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset domainname ; "coreutils"
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aGeneralHelpUsi ; "General help using GNU software: <http:"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		sub	esp, 8
		push	0		; locale
		push	5		; category
		call	setlocale
		add	esp, 10h
		mov	[ebp+lc_messages], eax
		cmp	[ebp+lc_messages], 0
		jz	short loc_80000FE
		sub	esp, 4
		push	3		; n
		push	offset s2	; "en_"
		push	[ebp+lc_messages] ; s1
		call	strncmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_80000FE
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aReportSTransla ; "Report %s translation	bugs to	<http://t"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h

loc_80000FE:				; CODE XREF: emit_ancillary_info+9Bj
					; emit_ancillary_info+B4j
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aForCompleteDoc ; "For complete documentation, run: info	c"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		nop
		mov	ebx, [ebp+var_4]
		leave
		retn
emit_ancillary_info endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; void __cdecl usage(int status)
		public usage
usage		proc near		; CODE XREF: main+147p	main+189p ...

status		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 4
		cmp	[ebp+status], 0
		jz	short loc_8000171
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, ds:stderr
		sub	esp, 4
		push	ebx
		push	edx		; format
		push	eax		; stream
		call	fprintf
		add	esp, 10h
		jmp	loc_8000225
; ---------------------------------------------------------------------------

loc_8000171:				; CODE XREF: usage+Bj
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aUsageSOption__ ; "Usage: %s [OPTION]...	[USERNAME]\n"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aPrintUserAndGr ; "Print	user and group information for th"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aHelpDisplayThi ; "	--help	   display this	help and "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aVersionOutputV ; "	--version  output version informa"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aWithoutAnyOpti ; "\nWithout any	OPTION,	print some useful"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		call	emit_ancillary_info

loc_8000225:				; CODE XREF: usage+38j
		sub	esp, 0Ch
		push	[ebp+status]	; status
		call	exit
usage		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public main
main		proc near

var_2C		= dword	ptr -2Ch
just_group_list	= byte ptr -28h
just_group	= byte ptr -27h
use_real	= byte ptr -26h
just_user	= byte ptr -25h
selinux_enabled	= dword	ptr -24h
optc		= dword	ptr -20h
pwd		= dword	ptr -1Ch
argc		= dword	ptr  0Ch
argv		= dword	ptr  10h
envp		= dword	ptr  14h

		lea	ecx, [esp+4]
		and	esp, 0FFFFFFF0h
		push	dword ptr [ecx-4]
		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		push	ecx
		sub	esp, 28h
		mov	ebx, ecx
		mov	[ebp+selinux_enabled], 0
		mov	[ebp+just_group_list], 0
		mov	[ebp+just_group], 0
		mov	[ebp+use_real],	0
		mov	[ebp+just_user], 0
		mov	eax, [ebx+4]
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	set_program_name
		add	esp, 10h
		sub	esp, 8
		push	offset locale	; locale
		push	6		; category
		call	setlocale
		add	esp, 10h
		sub	esp, 8
		push	offset dirname	; "/usr/local/share/locale"
		push	offset domainname ; "coreutils"
		call	bindtextdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset domainname ; "coreutils"
		call	textdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset close_stdout ; func
		call	atexit
		add	esp, 10h
		jmp	loc_80003BE
; ---------------------------------------------------------------------------

loc_80002BA:				; CODE XREF: main+1B1j
		mov	eax, [ebp+optc]
		cmp	eax, 61h
		jz	loc_80003BE
		cmp	eax, 61h
		jg	short loc_80002FC
		cmp	eax, 0FFFFFF7Eh
		jz	loc_8000372
		cmp	eax, 0FFFFFF7Eh
		jg	short loc_80002ED
		cmp	eax, 0FFFFFF7Dh
		jz	loc_800037C
		jmp	loc_80003B4
; ---------------------------------------------------------------------------

loc_80002ED:				; CODE XREF: main+ABj
		cmp	eax, 47h
		jz	short loc_800036C
		cmp	eax, 5Ah
		jz	short loc_800031F
		jmp	loc_80003B4
; ---------------------------------------------------------------------------

loc_80002FC:				; CODE XREF: main+99j
		cmp	eax, 6Eh
		jz	short loc_8000357
		cmp	eax, 6Eh
		jg	short loc_8000310
		cmp	eax, 67h
		jz	short loc_8000351
		jmp	loc_80003B4
; ---------------------------------------------------------------------------

loc_8000310:				; CODE XREF: main+D4j
		cmp	eax, 72h
		jz	short loc_8000360
		cmp	eax, 75h
		jz	short loc_8000366
		jmp	loc_80003B4
; ---------------------------------------------------------------------------

loc_800031F:				; CODE XREF: main+C5j
		cmp	[ebp+selinux_enabled], 0
		jnz	short loc_8000345
		sub	esp, 0Ch
		push	offset aContextZWorksO ; "--context (-Z) works only on an SELinux"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_8000345:				; CODE XREF: main+F3j
		mov	ds:just_context, 1
		jmp	short loc_80003BE
; ---------------------------------------------------------------------------

loc_8000351:				; CODE XREF: main+D9j
		mov	[ebp+just_group], 1
		jmp	short loc_80003BE
; ---------------------------------------------------------------------------

loc_8000357:				; CODE XREF: main+CFj
		mov	ds:use_name, 1
		jmp	short loc_80003BE
; ---------------------------------------------------------------------------

loc_8000360:				; CODE XREF: main+E3j
		mov	[ebp+use_real],	1
		jmp	short loc_80003BE
; ---------------------------------------------------------------------------

loc_8000366:				; CODE XREF: main+E8j
		mov	[ebp+just_user], 1
		jmp	short loc_80003BE
; ---------------------------------------------------------------------------

loc_800036C:				; CODE XREF: main+C0j
		mov	[ebp+just_group_list], 1
		jmp	short loc_80003BE
; ---------------------------------------------------------------------------

loc_8000372:				; CODE XREF: main+A0j
		sub	esp, 0Ch
		push	0		; status
		call	usage
; ---------------------------------------------------------------------------

loc_800037C:				; CODE XREF: main+B2j
		mov	edx, ds:Version
		mov	eax, ds:stdout
		sub	esp, 4
		push	0
		push	offset aDavidMackenzie ; "David	MacKenzie"
		push	offset aArnoldRobbins ;	"Arnold	Robbins"
		push	edx
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	offset aId	; "id"
		push	eax
		call	version_etc
		add	esp, 20h
		sub	esp, 0Ch
		push	0		; status
		call	exit
; ---------------------------------------------------------------------------

loc_80003B4:				; CODE XREF: main+B8j main+C7j ...
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_80003BE:				; CODE XREF: main+85j main+90j ...
		sub	esp, 0Ch
		push	0		; longind
		push	offset longopts	; longopts
		push	offset shortopts ; "agnruGZ"
		push	dword ptr [ebx+4] ; argv
		push	dword ptr [ebx]	; argc
		call	getopt_long
		add	esp, 20h
		mov	[ebp+optc], eax
		cmp	[ebp+optc], 0FFFFFFFFh
		jnz	loc_80002BA
		mov	eax, ds:optind
		mov	edx, [ebx]
		sub	edx, eax
		mov	eax, edx
		cmp	eax, 1
		jle	short loc_8000443
		mov	eax, ds:optind
		add	eax, 1
		lea	edx, ds:0[eax*4]
		mov	eax, [ebx+4]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aExtraOperandS ;	"extra operand %s"
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8000443:				; CODE XREF: main+1C5j
		mov	eax, ds:optind
		mov	edx, [ebx]
		sub	edx, eax
		mov	eax, edx
		cmp	eax, 1
		jnz	short loc_800047C
		mov	eax, ds:just_context
		test	eax, eax
		jz	short loc_800047C
		sub	esp, 0Ch
		push	offset aCannotPrintSec ; "cannot print security	context	when user"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_800047C:				; CODE XREF: main+221j	main+22Aj
		cmp	[ebp+selinux_enabled], 0
		jz	short loc_80004C8
		mov	eax, ds:optind
		cmp	[ebx], eax
		jnz	short loc_80004C8
		sub	esp, 0Ch
		push	offset context	; con
		call	getcon
		add	esp, 10h
		test	eax, eax
		jz	short loc_80004C8
		mov	eax, ds:just_context
		test	eax, eax
		jz	short loc_80004C8
		sub	esp, 0Ch
		push	offset aCanTGetProcess ; "can't get process context"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_80004C8:				; CODE XREF: main+250j	main+259j ...
		movzx	edx, [ebp+just_user]
		movzx	eax, [ebp+just_group]
		add	edx, eax
		movzx	eax, [ebp+just_group_list]
		add	edx, eax
		mov	eax, ds:just_context
		add	eax, edx
		cmp	eax, 1
		jle	short loc_8000504
		sub	esp, 0Ch
		push	offset aCannotPrintOnl ; "cannot print \"only\"	of more	than one "...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_8000504:				; CODE XREF: main+2B2j
		movzx	edx, [ebp+just_user]
		movzx	eax, [ebp+just_group]
		add	edx, eax
		movzx	eax, [ebp+just_group_list]
		add	eax, edx
		test	eax, eax
		jnz	short loc_8000549
		cmp	[ebp+use_real],	0
		jnz	short loc_8000529
		movzx	eax, ds:use_name
		test	al, al
		jz	short loc_8000549

loc_8000529:				; CODE XREF: main+2ECj
		sub	esp, 0Ch
		push	offset aCannotPrintO_0 ; "cannot print only names or real IDs in "...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_8000549:				; CODE XREF: main+2E6j	main+2F7j
		mov	eax, ds:optind
		mov	edx, [ebx]
		sub	edx, eax
		mov	eax, edx
		cmp	eax, 1
		jnz	loc_80005E2
		mov	eax, ds:optind
		lea	edx, ds:0[eax*4]
		mov	eax, [ebx+4]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax		; name
		call	getpwnam
		add	esp, 10h
		mov	[ebp+pwd], eax
		cmp	[ebp+pwd], 0
		jnz	short loc_80005B6
		mov	eax, ds:optind
		lea	edx, ds:0[eax*4]
		mov	eax, [ebx+4]
		add	eax, edx
		mov	esi, [eax]
		sub	esp, 0Ch
		push	offset aSNoSuchUser ; "%s: No such user"
		call	gettext
		add	esp, 10h
		push	esi
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_80005B6:				; CODE XREF: main+353j
		mov	eax, [ebp+pwd]
		mov	eax, [eax+8]
		mov	ds:euid, eax
		mov	eax, ds:euid
		mov	ds:ruid, eax
		mov	eax, [ebp+pwd]
		mov	eax, [eax+0Ch]
		mov	ds:egid, eax
		mov	eax, ds:egid
		mov	ds:rgid, eax
		jmp	short loc_800060A
; ---------------------------------------------------------------------------

loc_80005E2:				; CODE XREF: main+327j
		call	geteuid
		mov	ds:euid, eax
		call	getuid
		mov	ds:ruid, eax
		call	getegid
		mov	ds:egid, eax
		call	getgid
		mov	ds:rgid, eax

loc_800060A:				; CODE XREF: main+3B0j
		cmp	[ebp+just_user], 0
		jz	short loc_8000633
		cmp	[ebp+use_real],	0
		jz	short loc_800061D
		mov	eax, ds:ruid
		jmp	short loc_8000622
; ---------------------------------------------------------------------------

loc_800061D:				; CODE XREF: main+3E4j
		mov	eax, ds:euid

loc_8000622:				; CODE XREF: main+3EBj
		sub	esp, 0Ch
		push	eax		; uid
		call	print_user
		add	esp, 10h
		jmp	loc_8000710
; ---------------------------------------------------------------------------

loc_8000633:				; CODE XREF: main+3DEj
		cmp	[ebp+just_group], 0
		jz	short loc_8000679
		movzx	eax, ds:use_name
		movzx	edx, al
		cmp	[ebp+use_real],	0
		jz	short loc_8000650
		mov	eax, ds:rgid
		jmp	short loc_8000655
; ---------------------------------------------------------------------------

loc_8000650:				; CODE XREF: main+417j
		mov	eax, ds:egid

loc_8000655:				; CODE XREF: main+41Ej
		sub	esp, 8
		push	edx
		push	eax
		call	print_group
		add	esp, 10h
		xor	eax, 1
		test	al, al
		jz	loc_8000710
		mov	ok, 0
		jmp	loc_8000710
; ---------------------------------------------------------------------------

loc_8000679:				; CODE XREF: main+407j
		cmp	[ebp+just_group_list], 0
		jz	short loc_80006CE
		movzx	eax, ds:use_name
		movzx	edi, al
		mov	esi, ds:egid
		mov	ecx, ds:rgid
		mov	edx, ds:ruid
		mov	eax, ds:optind
		shl	eax, 2
		mov	[ebp+var_2C], eax
		mov	eax, [ebx+4]
		add	eax, [ebp+var_2C]
		mov	eax, [eax]
		sub	esp, 0Ch
		push	edi
		push	esi
		push	ecx
		push	edx
		push	eax
		call	print_group_list
		add	esp, 20h
		xor	eax, 1
		test	al, al
		jz	short loc_8000710
		mov	ok, 0
		jmp	short loc_8000710
; ---------------------------------------------------------------------------

loc_80006CE:				; CODE XREF: main+44Dj
		mov	eax, ds:just_context
		test	eax, eax
		jz	short loc_80006F1
		mov	edx, ds:stdout
		mov	eax, ds:context
		sub	esp, 8
		push	edx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		jmp	short loc_8000710
; ---------------------------------------------------------------------------

loc_80006F1:				; CODE XREF: main+4A5j
		mov	eax, ds:optind
		lea	edx, ds:0[eax*4]
		mov	eax, [ebx+4]
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax		; username
		call	print_full_info
		add	esp, 10h

loc_8000710:				; CODE XREF: main+3FEj	main+437j ...
		sub	esp, 0Ch
		push	0Ah		; c
		call	putchar_unlocked
		add	esp, 10h
		movzx	eax, ok
		test	al, al
		jz	short loc_800072F
		mov	eax, 0
		jmp	short loc_8000734
; ---------------------------------------------------------------------------

loc_800072F:				; CODE XREF: main+4F6j
		mov	eax, 1

loc_8000734:				; CODE XREF: main+4FDj
		sub	esp, 0Ch
		push	eax		; status
		call	exit
main		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl print_user(uid_t	uid)
print_user	proc near		; CODE XREF: main+3F6p

pwd		= dword	ptr -0Ch
uid		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+pwd], 0
		movzx	eax, ds:use_name
		test	al, al
		jz	short loc_8000793
		sub	esp, 0Ch
		push	[ebp+uid]	; uid
		call	getpwuid
		add	esp, 10h
		mov	[ebp+pwd], eax
		cmp	[ebp+pwd], 0
		jnz	short loc_8000793
		sub	esp, 0Ch
		push	offset aCannotFindName ; "cannot find name for user ID %lu"
		call	gettext
		add	esp, 10h
		push	[ebp+uid]
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	ok, 0

loc_8000793:				; CODE XREF: print_user+16j
					; print_user+2Dj
		cmp	[ebp+pwd], 0
		jnz	short loc_80007AE
		sub	esp, 8
		push	[ebp+uid]
		push	offset format	; "%lu"
		call	printf
		add	esp, 10h
		jmp	short loc_80007C4
; ---------------------------------------------------------------------------

loc_80007AE:				; CODE XREF: print_user+5Aj
		mov	eax, [ebp+pwd]
		mov	eax, [eax]
		sub	esp, 8
		push	eax
		push	offset aS	; "%s"
		call	printf
		add	esp, 10h

loc_80007C4:				; CODE XREF: print_user+6Fj
		nop
		leave
		retn
print_user	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl print_full_info(const char *username)
print_full_info	proc near		; CODE XREF: main+4D8p

username	= dword	ptr -2Ch
groups		= dword	ptr -20h
pwd		= dword	ptr -1Ch
i		= dword	ptr -18h
grp		= dword	ptr -14h
n_groups	= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 30h
		mov	eax, [ebp+arg_0]
		mov	[ebp+username],	eax
		mov	eax, large gs:14h
		mov	[ebp+var_C], eax
		xor	eax, eax
		mov	ebx, ds:ruid
		sub	esp, 0Ch
		push	offset aUidLu	; "uid=%lu"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	eax, ds:ruid
		sub	esp, 0Ch
		push	eax		; uid
		call	getpwuid
		add	esp, 10h
		mov	[ebp+pwd], eax
		cmp	[ebp+pwd], 0
		jz	short loc_8000833
		mov	eax, [ebp+pwd]
		mov	eax, [eax]
		sub	esp, 8
		push	eax
		push	offset aS_0	; "(%s)"
		call	printf
		add	esp, 10h

loc_8000833:				; CODE XREF: print_full_info+54j
		mov	ebx, ds:rgid
		sub	esp, 0Ch
		push	offset aGidLu	; " gid=%lu"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	eax, ds:rgid
		sub	esp, 0Ch
		push	eax		; gid
		call	getgrgid
		add	esp, 10h
		mov	[ebp+grp], eax
		cmp	[ebp+grp], 0
		jz	short loc_8000886
		mov	eax, [ebp+grp]
		mov	eax, [eax]
		sub	esp, 8
		push	eax
		push	offset aS_0	; "(%s)"
		call	printf
		add	esp, 10h

loc_8000886:				; CODE XREF: print_full_info+A7j
		mov	edx, ds:euid
		mov	eax, ds:ruid
		cmp	edx, eax
		jz	short loc_80008E8
		mov	ebx, ds:euid
		sub	esp, 0Ch
		push	offset aEuidLu	; " euid=%lu"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	eax, ds:euid
		sub	esp, 0Ch
		push	eax		; uid
		call	getpwuid
		add	esp, 10h
		mov	[ebp+pwd], eax
		cmp	[ebp+pwd], 0
		jz	short loc_80008E8
		mov	eax, [ebp+pwd]
		mov	eax, [eax]
		sub	esp, 8
		push	eax
		push	offset aS_0	; "(%s)"
		call	printf
		add	esp, 10h

loc_80008E8:				; CODE XREF: print_full_info+CCj
					; print_full_info+109j
		mov	edx, ds:egid
		mov	eax, ds:rgid
		cmp	edx, eax
		jz	short loc_800094A
		mov	ebx, ds:egid
		sub	esp, 0Ch
		push	offset aEgidLu	; " egid=%lu"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	eax, ds:egid
		sub	esp, 0Ch
		push	eax		; gid
		call	getgrgid
		add	esp, 10h
		mov	[ebp+grp], eax
		cmp	[ebp+grp], 0
		jz	short loc_800094A
		mov	eax, [ebp+grp]
		mov	eax, [eax]
		sub	esp, 8
		push	eax
		push	offset aS_0	; "(%s)"
		call	printf
		add	esp, 10h

loc_800094A:				; CODE XREF: print_full_info+12Ej
					; print_full_info+16Bj
		cmp	[ebp+pwd], 0
		jz	short loc_8000958
		mov	eax, [ebp+pwd]
		mov	eax, [eax+0Ch]
		jmp	short loc_800095D
; ---------------------------------------------------------------------------

loc_8000958:				; CODE XREF: print_full_info+187j
		mov	eax, 0FFFFFFFFh

loc_800095D:				; CODE XREF: print_full_info+18Fj
		sub	esp, 4
		lea	edx, [ebp+groups]
		push	edx
		push	eax
		push	[ebp+username]
		call	xgetgroups
		add	esp, 10h
		mov	[ebp+n_groups],	eax
		cmp	[ebp+n_groups],	0
		jns	short loc_80009EB
		cmp	[ebp+username],	0
		jz	short loc_80009B7
		sub	esp, 0Ch
		push	[ebp+username]
		call	quote
		add	esp, 10h
		mov	esi, eax
		sub	esp, 0Ch
		push	offset aFailedToGetGro ; "failed to get	groups for user	%s"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		push	esi
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		jmp	short loc_80009DF
; ---------------------------------------------------------------------------

loc_80009B7:				; CODE XREF: print_full_info+1B6j
		sub	esp, 0Ch
		push	offset aFailedToGetG_0 ; "failed to get	groups for the current pr"...
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		sub	esp, 4
		push	ebx		; format
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h

loc_80009DF:				; CODE XREF: print_full_info+1EEj
		mov	ok, 0
		jmp	loc_8000AE1
; ---------------------------------------------------------------------------

loc_80009EB:				; CODE XREF: print_full_info+1B0j
		cmp	[ebp+n_groups],	0
		jle	short loc_8000A14
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aGroups	; " groups="
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h

loc_8000A14:				; CODE XREF: print_full_info+228j
		mov	[ebp+i], 0
		jmp	short loc_8000A8A
; ---------------------------------------------------------------------------

loc_8000A1D:				; CODE XREF: print_full_info+2C9j
		cmp	[ebp+i], 0
		jle	short loc_8000A30
		sub	esp, 0Ch
		push	2Ch		; c
		call	putchar_unlocked
		add	esp, 10h

loc_8000A30:				; CODE XREF: print_full_info+25Aj
		mov	eax, [ebp+groups]
		mov	edx, [ebp+i]
		shl	edx, 2
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 8
		push	eax
		push	offset format	; "%lu"
		call	printf
		add	esp, 10h
		mov	eax, [ebp+groups]
		mov	edx, [ebp+i]
		shl	edx, 2
		add	eax, edx
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax		; gid
		call	getgrgid
		add	esp, 10h
		mov	[ebp+grp], eax
		cmp	[ebp+grp], 0
		jz	short loc_8000A86
		mov	eax, [ebp+grp]
		mov	eax, [eax]
		sub	esp, 8
		push	eax
		push	offset aS_0	; "(%s)"
		call	printf
		add	esp, 10h

loc_8000A86:				; CODE XREF: print_full_info+2A7j
		add	[ebp+i], 1

loc_8000A8A:				; CODE XREF: print_full_info+254j
		mov	eax, [ebp+i]
		cmp	eax, [ebp+n_groups]
		jl	short loc_8000A1D
		mov	eax, [ebp+groups]
		sub	esp, 0Ch
		push	eax		; ptr
		call	free
		add	esp, 10h
		mov	eax, ds:context
		test	eax, eax
		jz	short loc_8000AE1
		sub	esp, 0Ch
		push	offset name	; "POSIXLY_CORRECT"
		call	getenv
		add	esp, 10h
		test	eax, eax
		jnz	short loc_8000AE1
		mov	ebx, ds:context
		sub	esp, 0Ch
		push	offset aContextS ; " context=%s"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h

loc_8000AE1:				; CODE XREF: print_full_info+21Fj
					; print_full_info+2E1j	...
		mov	eax, [ebp+var_C]
		xor	eax, large gs:14h
		jz	short loc_8000AF2
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_8000AF2:				; CODE XREF: print_full_info+324j
		lea	esp, [ebp-8]
		pop	ebx
		pop	esi
		pop	ebp

locret_8000AF8:				; DATA XREF: .eh_frame:08001270o
					; .eh_frame:08001290o ...
		retn
print_full_info	endp

_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	byte public 'DATA' use32
		assume cs:_data
		;org 8000AF9h
; _Bool	ok
ok		db 1			; DATA XREF: main+43Dw	main+495w ...
_data		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
		assume cs:_bss
		;org 8000AFCh
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
; int just_context
just_context	dd ?			; DATA XREF: main:loc_8000345w
					; main+223r ...
; _Bool	use_name
use_name	db ?			; DATA XREF: main:loc_8000357w
					; main+2EEr ...
		align 4
; uid_t	ruid
ruid		dd ?			; DATA XREF: main+396w	main+3C1w ...
; uid_t	euid
euid		dd ?			; DATA XREF: main+38Cw	main+391r ...
; gid_t	rgid
rgid		dd ?			; DATA XREF: main+3ABw	main+3D5w ...
; gid_t	egid
egid		dd ?			; DATA XREF: main+3A1w	main+3A6r ...
; char *context
context		dd ?			; DATA XREF: main+25Eo	main+4ADr ...
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment '32byte' can not be represented in assembly
_rodata		segment	para public 'CONST' use32
		assume cs:_rodata
		;org 8000B20h
; char msgid[]
msgid		db 0Ah			; DATA XREF: emit_ancillary_info+1Do
		db 'Report %s bugs to %s',0Ah,0
aBugCoreutils@g	db 'bug-coreutils@gnu.org',0 ; DATA XREF: emit_ancillary_info+2Do
		align 10h
; char aSHomePageHttpW[]
aSHomePageHttpW	db '%s home page: <http://www.gnu.org/software/%s/>',0Ah,0
					; DATA XREF: emit_ancillary_info+3Fo
; char domainname[]
domainname	db 'coreutils',0        ; DATA XREF: emit_ancillary_info+4Fo
					; main+58o ...
aGnuCoreutils	db 'GNU coreutils',0    ; DATA XREF: emit_ancillary_info+54o
					; main+167o
		align 4
; char aGeneralHelpUsi[]
aGeneralHelpUsi	db 'General help using GNU software: <http://www.gnu.org/gethelp/>',0Ah,0
					; DATA XREF: emit_ancillary_info+6Bo
; char s2[]
s2		db 'en_',0              ; DATA XREF: emit_ancillary_info+A2o
; char aReportSTransla[]
aReportSTransla	db 'Report %s translation bugs to <http://translationproject.org/team'
					; DATA XREF: emit_ancillary_info+CCo
		db '/>',0Ah,0
		align 4
; char aForCompleteDoc[]
aForCompleteDoc	db 'For complete documentation, run: info coreutils ',27h,'%s invocation'
					; DATA XREF: emit_ancillary_info+FCo
		db 27h,0Ah,0
aContext	db 'context',0          ; DATA XREF: .rodata:longoptso
aGroup		db 'group',0            ; DATA XREF: .rodata:longoptso
aGroups_0	db 'groups',0           ; DATA XREF: .rodata:longoptso
aName		db 'name',0             ; DATA XREF: .rodata:longoptso
aReal		db 'real',0             ; DATA XREF: .rodata:longoptso
aUser		db 'user',0             ; DATA XREF: .rodata:longoptso
aHelp		db 'help',0             ; DATA XREF: .rodata:longoptso
aVersion	db 'version',0          ; DATA XREF: .rodata:longoptso
		align 10h
; const	option longopts[9]
longopts	option <offset aContext, 0, 0, 5Ah> ; DATA XREF: main+193o
		option <offset aGroup, 0, 0, 67h> ; "context"
		option <offset aGroups_0, 0, 0,	47h>
		option <offset aName, 0, 0, 6Eh>
		option <offset aReal, 0, 0, 72h>
		option <offset aUser, 0, 0, 75h>
		option <offset aHelp, 0, 0, 0FFFFFF7Eh>
		option <offset aVersion, 0, 0, 0FFFFFF7Dh>
		option	<0>
; char aTrySHelpForMor[]
aTrySHelpForMor	db 'Try `%s --help',27h,' for more information.',0Ah,0
					; DATA XREF: usage+16o
		align 4
; char aUsageSOption__[]
aUsageSOption__	db 'Usage: %s [OPTION]... [USERNAME]',0Ah,0 ; DATA XREF: usage+46o
		align 4
; char aPrintUserAndGr[]
aPrintUserAndGr	db 'Print user and group information for the specified USERNAME,',0Ah
					; DATA XREF: usage+69o
		db 'or (when USERNAME omitted) for the current user.',0Ah
		db 0Ah
		db '  -a              ignore, for compatibility with other versions',0Ah
		db '  -Z, --context   print only the security context of the current '
		db 'user',0Ah
		db '  -g, --group     print only the effective group ID',0Ah
		db '  -G, --groups    print all group IDs',0Ah
		db '  -n, --name      print a name instead of a number, for -ugG',0Ah
		db '  -r, --real      print the real ID instead of the effective ID, '
		db 'with -ugG',0Ah
		db '  -u, --user      print only the effective user ID',0Ah,0
		align 4
; char aHelpDisplayThi[]
aHelpDisplayThi	db '      --help     display this help and exit',0Ah,0
					; DATA XREF: usage+8Co
		align 4
; char aVersionOutputV[]
aVersionOutputV	db '      --version  output version information and exit',0Ah,0
					; DATA XREF: usage+AFo
		align 10h
; char aWithoutAnyOpti[]
aWithoutAnyOpti	db 0Ah			; DATA XREF: usage+D2o
		db 'Without any OPTION, print some useful set of identified informati'
		db 'on.',0Ah,0
; char locale
locale		db 0			; DATA XREF: main+41o
; char dirname[]
dirname		db '/usr/local/share/locale',0 ; DATA XREF: main+53o
; char aContextZWorksO[]
aContextZWorksO	db '--context (-Z) works only on an SELinux-enabled kernel',0
					; DATA XREF: main+F8o
aDavidMackenzie	db 'David MacKenzie',0  ; DATA XREF: main+15Co
aArnoldRobbins	db 'Arnold Robbins',0   ; DATA XREF: main+161o
aId		db 'id',0               ; DATA XREF: main+16Co
; char shortopts[]
shortopts	db 'agnruGZ',0          ; DATA XREF: main+198o
; char aExtraOperandS[]
aExtraOperandS	db 'extra operand %s',0 ; DATA XREF: main+1EEo
		align 4
; char aCannotPrintSec[]
aCannotPrintSec	db 'cannot print security context when user specified',0
					; DATA XREF: main+22Fo
; char aCanTGetProcess[]
aCanTGetProcess	db 'can',27h,'t get process context',0 ; DATA XREF: main+27Bo
; char aCannotPrintOnl[]
aCannotPrintOnl	db 'cannot print "only" of more than one choice',0 ; DATA XREF: main+2B7o
; char aCannotPrintO_0[]
aCannotPrintO_0	db 'cannot print only names or real IDs in default format',0
					; DATA XREF: main+2FCo
; char aSNoSuchUser[]
aSNoSuchUser	db '%s: No such user',0 ; DATA XREF: main+36Bo
		align 4
; char aCannotFindName[]
aCannotFindName	db 'cannot find name for user ID %lu',0 ; DATA XREF: print_user+32o
; char format[]
format		db '%lu',0              ; DATA XREF: print_user+62o
					; print_full_info+27Ao
; char aS[]
aS		db '%s',0               ; DATA XREF: print_user+7Ao
; char aUidLu[]
aUidLu		db 'uid=%lu',0          ; DATA XREF: print_full_info+22o
; char aS_0[]
aS_0		db '(%s)',0             ; DATA XREF: print_full_info+5Fo
					; print_full_info+B2o ...
; char aGidLu[]
aGidLu		db ' gid=%lu',0         ; DATA XREF: print_full_info+75o
; char aEuidLu[]
aEuidLu		db ' euid=%lu',0        ; DATA XREF: print_full_info+D7o
; char aEgidLu[]
aEgidLu		db ' egid=%lu',0        ; DATA XREF: print_full_info+139o
		align 4
; char aFailedToGetGro[]
aFailedToGetGro	db 'failed to get groups for user %s',0 ; DATA XREF: print_full_info+1CBo
		align 4
; char aFailedToGetG_0[]
aFailedToGetG_0	db 'failed to get groups for the current process',0
					; DATA XREF: print_full_info+1F3o
; char aGroups[]
aGroups		db ' groups=',0         ; DATA XREF: print_full_info+233o
; char name[]
name		db 'POSIXLY_CORRECT',0  ; DATA XREF: print_full_info+2E6o
; char aContextS[]
aContextS	db ' context=%s',0      ; DATA XREF: print_full_info+300o
_rodata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_eh_frame	segment	dword public 'CONST' use32
		assume cs:_eh_frame
		;org 8001250h
		dd 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 2	dup(1Ch)
		dd offset locret_8000AF8-8001D68h
		dd 18h,	80E4100h, 0D420285h, 0CC55405h,	404h, 20h, 3Ch
		dd offset locret_8000AF8-8001D70h
		dd 11Ch, 80E4100h, 0D420285h, 3834405h,	0C5011403h, 4040CC3h
		dd 18h,	60h
		dd offset locret_8000AF8-8001C78h
		dd 0FCh, 80E4100h, 0D420285h, 3834405h,	2Ch, 7Ch
		dd offset locret_8000AF8-8001B98h
		dd 50Dh, 10C4400h, 5104700h, 46007502h,	7075030Fh, 2071006h
		dd 6107C75h, 10787502h,	74750203h, 1Ch,	0ACh
		dd offset locret_8000AF8-80016BBh
		dd 8Ah,	80E4100h, 0D420285h, 0C5860205h, 4040Ch, 28h, 0CCh
		dd offset locret_8000AF8-8001651h
		dd 332h, 80E4100h, 0D420285h, 3864505h,	27030483h, 0C641C303h
		dd 40CC541h, 4
_eh_frame	ends

; ===========================================================================

; Segment type:	Externs
; extern
; int *_errno_location(void)
		extrn __errno_location:near ; CODE XREF: getcon+6p
					; print_full_info+1DAp	...
		extrn program_name:dword ; DATA	XREF: emit_ancillary_info+7r
					; emit_ancillary_info+B6r ...
		extrn last_component:near ; CODE XREF: emit_ancillary_info+10p
					; emit_ancillary_info+BFp ...
; char *gettext(const char *msgid)
		extrn gettext:near	; CODE XREF: emit_ancillary_info+22p
					; emit_ancillary_info+44p ...
; int printf(const char	*format, ...)
		extrn printf:near	; CODE XREF: emit_ancillary_info+34p
					; emit_ancillary_info+5Ap ...
; struct _IO_FILE *stdout
		extrn stdout:dword	; DATA XREF: emit_ancillary_info+62r
					; usage+60r ...
		extrn fputs_unlocked:near ; CODE XREF: emit_ancillary_info+7Dp
					; usage+7Bp ...
; char *setlocale(int category,	const char *locale)
		extrn setlocale:near	; CODE XREF: emit_ancillary_info+8Cp
					; main+48p
; int strncmp(const char *s1, const char *s2, size_t n)
		extrn strncmp:near	; CODE XREF: emit_ancillary_info+AAp
; struct _IO_FILE *stderr
		extrn stderr:dword	; DATA XREF: usage+25r
; int fprintf(FILE *stream, const char *format,	...)
		extrn fprintf:near	; CODE XREF: usage+30p
; void exit(int	status)
		extrn exit:near		; CODE XREF: usage+F7p	main+17Fp ...
		extrn set_program_name:near ; CODE XREF: main+36p
; char *bindtextdomain(const char *domainname, const char *dirname)
		extrn bindtextdomain:near ; CODE XREF: main+5Dp
; char *textdomain(const char *domainname)
		extrn textdomain:near	; CODE XREF: main+6Dp
; void close_stdout(void)
		extrn close_stdout	; DATA XREF: main+78o
; int atexit(void (*func)(void))
		extrn atexit:near	; CODE XREF: main+7Dp
; void error(int status, int errnum, const char	*format, ...)
		extrn error:near	; CODE XREF: main+10Dp	main+201p ...
		extrn Version:dword	; DATA XREF: main:loc_800037Cr
		extrn version_etc:near	; CODE XREF: main+172p
; int getopt_long(int argc, char *const	*argv, const char *shortopts, const struct option *longopts, int *longind)
		extrn getopt_long:near	; CODE XREF: main+1A2p
; int optind
		extrn optind:dword	; DATA XREF: main+1B7r	main+1C7r ...
		extrn quote:near	; CODE XREF: main+1E1p
					; print_full_info+1BEp
; struct passwd	*getpwnam(const	char *name)
		extrn getpwnam:near	; CODE XREF: main+344p
; __uid_t geteuid(void)
		extrn geteuid:near	; CODE XREF: main:loc_80005E2p
; __uid_t getuid(void)
		extrn getuid:near	; CODE XREF: main+3BCp
; __gid_t getegid(void)
		extrn getegid:near	; CODE XREF: main+3C6p
; __gid_t getgid(void)
		extrn getgid:near	; CODE XREF: main+3D0p
		extrn print_group:near	; CODE XREF: main+42Ap
		extrn print_group_list:near ; CODE XREF: main+486p
; int putchar_unlocked(int c)
		extrn putchar_unlocked:near ; CODE XREF: main+4E5p
					; print_full_info+261p
; struct passwd	*getpwuid(__uid_t uid)
		extrn getpwuid:near	; CODE XREF: print_user+1Ep
					; print_full_info+45p ...
; struct group *getgrgid(__gid_t gid)
		extrn getgrgid:near	; CODE XREF: print_full_info+98p
					; print_full_info+15Cp	...
		extrn xgetgroups:near	; CODE XREF: print_full_info+1A1p
; void free(void *ptr)
		extrn free:near		; CODE XREF: print_full_info+2D2p
; char *getenv(const char *name)
		extrn getenv:near	; CODE XREF: print_full_info+2EBp
		extrn __stack_chk_fail:near ; CODE XREF: print_full_info+326p


		end
