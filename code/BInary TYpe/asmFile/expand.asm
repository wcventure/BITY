;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B611-7234-BB			    |
; |		Doskey Lee, Kingsoft Internet Security Software		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	97FBA32161BCF0E3519B96AD631523E4
; Input	CRC32 :	0D5D7811

; File Name   :	D:\coreutils-o\expand.o
; Format      :	ELF for	Intel 386 (Relocatable)
;
; Source File :	'expand.c'

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	byte public 'CODE' use32
		assume cs:_text
		;org 8000000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; unsigned __int8 __cdecl to_uchar(char	ch_0)
to_uchar	proc near		; CODE XREF: parse_tab_stops+43p

ch_0		= byte ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 4
		mov	eax, [ebp+arg_0]
		mov	[ebp+ch_0], al
		movzx	eax, [ebp+ch_0]
		leave
		retn
to_uchar	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void emit_ancillary_info()
emit_ancillary_info proc near		; CODE XREF: usage+132p

lc_messages	= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset msgid	; "\nReport %s bugs to %s\n"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset aBugCoreutils@g ; "bug-coreutils@gnu.org"
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		sub	esp, 0Ch
		push	offset aSHomePageHttpW ; "%s home page:	<http://www.gnu.org/softw"...
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	offset domainname ; "coreutils"
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aGeneralHelpUsi ; "General help using GNU software: <http:"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		sub	esp, 8
		push	0		; locale
		push	5		; category
		call	setlocale
		add	esp, 10h
		mov	[ebp+lc_messages], eax
		cmp	[ebp+lc_messages], 0
		jz	short loc_80000F8
		sub	esp, 4
		push	3		; n
		push	offset s2	; "en_"
		push	[ebp+lc_messages] ; s1
		call	strncmp
		add	esp, 10h
		test	eax, eax
		jz	short loc_80000F8
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aReportSTransla ; "Report %s translation	bugs to	<http://t"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h

loc_80000F8:				; CODE XREF: emit_ancillary_info+9Bj
					; emit_ancillary_info+B4j
		mov	eax, ds:program_name
		sub	esp, 0Ch
		push	eax
		call	last_component
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aForCompleteDoc ; "For complete documentation, run: info	c"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		nop
		mov	ebx, [ebp+var_4]
		leave
		retn
emit_ancillary_info endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; void __cdecl usage(int status)
		public usage
usage		proc near		; CODE XREF: main+142p	main+17Fp

status		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 4
		cmp	[ebp+status], 0
		jz	short loc_800016B
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
		call	gettext
		add	esp, 10h
		mov	edx, eax
		mov	eax, ds:stderr
		sub	esp, 4
		push	ebx
		push	edx		; format
		push	eax		; stream
		call	fprintf
		add	esp, 10h
		jmp	loc_8000265
; ---------------------------------------------------------------------------

loc_800016B:				; CODE XREF: usage+Bj
		mov	ebx, ds:program_name
		sub	esp, 0Ch
		push	offset aUsageSOption__ ; "Usage: %s [OPTION]...	[FILE]...\n"
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax		; format
		call	printf
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aConvertTabsInE ; "Convert tabs in each FILE to spaces, wr"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aMandatoryArgum ; "Mandatory arguments to long options are"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aIInitialDoNotC ; "  -i,	--initial	do not convert ta"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aTTabsListUseCo ; "  -t,	--tabs=LIST	use comma separat"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aHelpDisplayThi ; "	--help	   display this	help and "...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		mov	ebx, ds:stdout
		sub	esp, 0Ch
		push	offset aVersionOutputV ; "	--version  output version informa"...
		call	gettext
		add	esp, 10h
		sub	esp, 8
		push	ebx
		push	eax
		call	fputs_unlocked
		add	esp, 10h
		call	emit_ancillary_info

loc_8000265:				; CODE XREF: usage+38j
		sub	esp, 0Ch
		push	[ebp+status]	; status
		call	exit
usage		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl add_tab_stop(uintmax_t tabval)
add_tab_stop	proc near		; CODE XREF: parse_tab_stops+70p
					; parse_tab_stops+248p

tabval		= qword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_0]
		mov	dword ptr [ebp+tabval],	eax
		mov	eax, [ebp+arg_4]
		mov	dword ptr [ebp+tabval+4], eax
		mov	edx, ds:first_free_tab
		mov	eax, ds:n_tabs_allocated
		cmp	edx, eax
		jnz	short loc_80002AE
		mov	eax, ds:tab_list
		sub	esp, 4
		push	8
		push	offset n_tabs_allocated
		push	eax
		call	x2nrealloc
		add	esp, 10h
		mov	ds:tab_list, eax

loc_80002AE:				; CODE XREF: add_tab_stop+1Fj
		mov	ecx, ds:tab_list
		mov	eax, ds:first_free_tab
		lea	edx, [eax+1]
		mov	ds:first_free_tab, edx
		shl	eax, 3
		add	ecx, eax
		mov	eax, dword ptr [ebp+tabval]
		mov	edx, dword ptr [ebp+tabval+4]
		mov	[ecx], eax
		mov	[ecx+4], edx
		nop
		leave
		retn
add_tab_stop	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl parse_tab_stops(const char *stops)
parse_tab_stops	proc near		; CODE XREF: main+F6p main+118p ...

stops		= dword	ptr -2Ch
have_tabval	= byte ptr -26h
ok		= byte ptr -25h
num_start	= dword	ptr -24h
len		= dword	ptr -20h
bad_num		= dword	ptr -1Ch
tabval		= qword	ptr -18h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 34h
		mov	eax, [ebp+arg_0]
		mov	[ebp+stops], eax
		mov	eax, large gs:14h
		mov	[ebp+var_C], eax
		xor	eax, eax
		mov	[ebp+have_tabval], 0
		mov	[ebp+ok], 1
		jmp	loc_80004E9
; ---------------------------------------------------------------------------

loc_80002FA:				; CODE XREF: parse_tab_stops+21Cj
		mov	eax, [ebp+stops]
		movzx	eax, byte ptr [eax]
		cmp	al, 2Ch
		jz	short loc_8000334
		call	__ctype_b_loc
		mov	ebx, [eax]
		mov	eax, [ebp+stops]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	esp, 0Ch
		push	eax		; ch_0
		call	to_uchar
		add	esp, 10h
		movzx	eax, al
		add	eax, eax
		add	eax, ebx
		movzx	eax, word ptr [eax]
		movzx	eax, ax
		and	eax, 1
		test	eax, eax
		jz	short loc_8000356

loc_8000334:				; CODE XREF: parse_tab_stops+2Dj
		cmp	[ebp+have_tabval], 0
		jz	short loc_800034D
		mov	eax, dword ptr [ebp+tabval]
		mov	edx, dword ptr [ebp+tabval+4]
		sub	esp, 8
		push	edx
		push	eax		; tabval
		call	add_tab_stop
		add	esp, 10h

loc_800034D:				; CODE XREF: parse_tab_stops+63j
		mov	[ebp+have_tabval], 0
		jmp	loc_80004E5
; ---------------------------------------------------------------------------

loc_8000356:				; CODE XREF: parse_tab_stops+5Dj
		mov	eax, [ebp+stops]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		sub	eax, 30h
		cmp	eax, 9
		ja	loc_80004B1
		movzx	eax, [ebp+have_tabval]
		xor	eax, 1
		test	al, al
		jz	short loc_800038E
		mov	dword ptr [ebp+tabval],	0
		mov	dword ptr [ebp+tabval+4], 0
		mov	[ebp+have_tabval], 1
		mov	eax, [ebp+stops]
		mov	[ebp+num_start], eax

loc_800038E:				; CODE XREF: parse_tab_stops+9Fj
		mov	eax, dword ptr [ebp+tabval]
		mov	edx, dword ptr [ebp+tabval+4]
		cmp	edx, 19999999h
		ja	loc_800042A
		cmp	edx, 19999999h
		jb	short loc_80003AF
		cmp	eax, 99999999h
		ja	short loc_800042A

loc_80003AF:				; CODE XREF: parse_tab_stops+D1j
		mov	eax, dword ptr [ebp+tabval]
		mov	edx, dword ptr [ebp+tabval+4]
		imul	ebx, edx, 0Ah
		imul	ecx, eax, 0
		add	ecx, ebx
		mov	ebx, 0Ah
		mul	ebx
		add	ecx, edx
		mov	edx, ecx
		mov	ecx, [ebp+stops]
		movzx	ecx, byte ptr [ecx]
		movsx	ecx, cl
		sub	ecx, 30h
		mov	ebx, ecx
		sar	ebx, 1Fh
		add	ecx, eax
		adc	ebx, edx
		mov	eax, dword ptr [ebp+tabval]
		mov	edx, dword ptr [ebp+tabval+4]
		cmp	ebx, edx
		jb	short loc_800042A
		cmp	ebx, edx
		ja	short loc_80003EF
		cmp	ecx, eax
		jb	short loc_800042A

loc_80003EF:				; CODE XREF: parse_tab_stops+114j
		mov	eax, dword ptr [ebp+tabval]
		mov	edx, dword ptr [ebp+tabval+4]
		imul	ebx, edx, 0Ah
		imul	ecx, eax, 0
		add	ecx, ebx
		mov	ebx, 0Ah
		mul	ebx
		add	ecx, edx
		mov	edx, ecx
		mov	ecx, [ebp+stops]
		movzx	ecx, byte ptr [ecx]
		movsx	ecx, cl
		sub	ecx, 30h
		mov	ebx, ecx
		sar	ebx, 1Fh
		add	eax, ecx
		adc	edx, ebx
		mov	dword ptr [ebp+tabval],	eax
		mov	dword ptr [ebp+tabval+4], edx
		mov	eax, 0
		jmp	short loc_800042F
; ---------------------------------------------------------------------------

loc_800042A:				; CODE XREF: parse_tab_stops+C5j
					; parse_tab_stops+D8j ...
		mov	eax, 1

loc_800042F:				; CODE XREF: parse_tab_stops+153j
		test	al, al
		jz	loc_80004E5
		sub	esp, 8
		push	offset accept	; "0123456789"
		push	[ebp+num_start]	; s
		call	strspn
		add	esp, 10h
		mov	[ebp+len], eax
		sub	esp, 8
		push	[ebp+len]	; size_t
		push	[ebp+num_start]	; char *
		call	xstrndup
		add	esp, 10h
		mov	[ebp+bad_num], eax
		sub	esp, 0Ch
		push	[ebp+bad_num]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aTabStopIsTooLa ; "tab stop is too large	%s"
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		sub	esp, 0Ch
		push	[ebp+bad_num]	; ptr
		call	free
		add	esp, 10h
		mov	[ebp+ok], 0
		mov	eax, [ebp+len]
		lea	edx, [eax-1]
		mov	eax, [ebp+num_start]
		add	eax, edx
		mov	[ebp+stops], eax
		jmp	short loc_80004E5
; ---------------------------------------------------------------------------

loc_80004B1:				; CODE XREF: parse_tab_stops+90j
		sub	esp, 0Ch
		push	[ebp+stops]
		call	quote
		add	esp, 10h
		mov	ebx, eax
		sub	esp, 0Ch
		push	offset aTabSizeContain ; "tab size contains invalid character(s):"...
		call	gettext
		add	esp, 10h
		push	ebx
		push	eax		; format
		push	0		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	[ebp+ok], 0
		jmp	short loc_80004F7
; ---------------------------------------------------------------------------

loc_80004E5:				; CODE XREF: parse_tab_stops+7Cj
					; parse_tab_stops+15Cj	...
		add	[ebp+stops], 1

loc_80004E9:				; CODE XREF: parse_tab_stops+20j
		mov	eax, [ebp+stops]
		movzx	eax, byte ptr [eax]
		test	al, al
		jnz	loc_80002FA

loc_80004F7:				; CODE XREF: parse_tab_stops+20Ej
		movzx	eax, [ebp+ok]
		xor	eax, 1
		test	al, al
		jz	short loc_800050C
		sub	esp, 0Ch
		push	1		; status
		call	exit
; ---------------------------------------------------------------------------

loc_800050C:				; CODE XREF: parse_tab_stops+22Bj
		cmp	[ebp+have_tabval], 0
		jz	short loc_8000525
		mov	eax, dword ptr [ebp+tabval]
		mov	edx, dword ptr [ebp+tabval+4]
		sub	esp, 8
		push	edx
		push	eax		; tabval
		call	add_tab_stop
		add	esp, 10h

loc_8000525:				; CODE XREF: parse_tab_stops+23Bj
		nop
		mov	eax, [ebp+var_C]
		xor	eax, large gs:14h
		jz	short loc_8000537
		call	__stack_chk_fail
; ---------------------------------------------------------------------------

loc_8000537:				; CODE XREF: parse_tab_stops+25Bj
		mov	ebx, [ebp+var_4]
		leave
		retn
parse_tab_stops	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void __cdecl validate_tab_stops(const	uintmax_t *tabs, size_t	entries)
validate_tab_stops proc	near		; CODE XREF: main+1BDp

i		= dword	ptr -14h
prev_tab	= qword	ptr -10h
tabs		= dword	ptr  8
entries		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	dword ptr [ebp+prev_tab], 0
		mov	dword ptr [ebp+prev_tab+4], 0
		mov	[ebp+i], 0
		jmp	loc_80005F7
; ---------------------------------------------------------------------------

loc_800055C:				; CODE XREF: validate_tab_stops+C1j
		mov	eax, [ebp+i]
		lea	edx, ds:0[eax*8]
		mov	eax, [ebp+tabs]
		add	eax, edx
		mov	edx, [eax+4]
		mov	eax, [eax]
		or	eax, edx
		test	eax, eax
		jnz	short loc_8000596
		sub	esp, 0Ch
		push	offset aTabSizeCannotB ; "tab size cannot be 0"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_8000596:				; CODE XREF: validate_tab_stops+38j
		mov	eax, [ebp+i]
		lea	edx, ds:0[eax*8]
		mov	eax, [ebp+tabs]
		add	eax, edx
		mov	edx, [eax+4]
		mov	eax, [eax]
		cmp	edx, dword ptr [ebp+prev_tab+4]
		ja	short loc_80005D9
		cmp	edx, dword ptr [ebp+prev_tab+4]
		jb	short loc_80005B9
		cmp	eax, dword ptr [ebp+prev_tab]
		ja	short loc_80005D9

loc_80005B9:				; CODE XREF: validate_tab_stops+76j
		sub	esp, 0Ch
		push	offset aTabSizesMustBe ; "tab sizes must be ascending"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_80005D9:				; CODE XREF: validate_tab_stops+71j
					; validate_tab_stops+7Bj
		mov	eax, [ebp+i]
		lea	edx, ds:0[eax*8]
		mov	eax, [ebp+tabs]
		add	eax, edx
		mov	edx, [eax+4]
		mov	eax, [eax]
		mov	dword ptr [ebp+prev_tab], eax
		mov	dword ptr [ebp+prev_tab+4], edx
		add	[ebp+i], 1

loc_80005F7:				; CODE XREF: validate_tab_stops+1Bj
		mov	eax, [ebp+i]
		cmp	eax, [ebp+entries]
		jb	loc_800055C
		nop
		leave
		retn
validate_tab_stops endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; FILE *__cdecl	next_file(FILE *fp)
next_file	proc near		; CODE XREF: expand+Ep	expand+5Cp

file		= dword	ptr -0Ch
var_4		= dword	ptr -4
fp		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		cmp	[ebp+fp], 0
		jz	loc_8000738
		sub	esp, 0Ch
		push	[ebp+fp]	; stream
		call	ferror_unlocked
		add	esp, 10h
		test	eax, eax
		jz	short loc_8000651
		mov	ebx, ds:prev_file_5132
		call	__errno_location
		mov	eax, [eax]
		push	ebx
		push	offset format	; "%s"
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	ds:exit_status,	1

loc_8000651:				; CODE XREF: next_file+21j
		mov	eax, ds:prev_file_5132
		sub	esp, 8
		push	offset asc_8000E49 ; "-"
		push	eax		; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		jnz	short loc_800067E
		sub	esp, 0Ch
		push	[ebp+fp]	; stream
		call	clearerr_unlocked
		add	esp, 10h
		jmp	loc_8000738
; ---------------------------------------------------------------------------

loc_800067E:				; CODE XREF: next_file+63j
		sub	esp, 0Ch
		push	[ebp+fp]	; stream
		call	fclose
		add	esp, 10h
		test	eax, eax
		jz	loc_8000738
		mov	ebx, ds:prev_file_5132
		call	__errno_location
		mov	eax, [eax]
		push	ebx
		push	offset format	; "%s"
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	ds:exit_status,	1
		jmp	short loc_8000738
; ---------------------------------------------------------------------------

loc_80006BE:				; CODE XREF: next_file+149j
		sub	esp, 8
		push	offset asc_8000E49 ; "-"
		push	[ebp+file]	; s1
		call	strcmp
		add	esp, 10h
		test	eax, eax
		jnz	short loc_80006EB
		mov	ds:have_read_stdin, 1
		mov	eax, [ebp+file]
		mov	ds:prev_file_5132, eax
		mov	eax, ds:stdin
		jmp	short loc_800075A
; ---------------------------------------------------------------------------

loc_80006EB:				; CODE XREF: next_file+CDj
		sub	esp, 8
		push	offset aR	; "r"
		push	[ebp+file]
		call	fopen64
		add	esp, 10h
		mov	[ebp+fp], eax
		cmp	[ebp+fp], 0
		jz	short loc_8000714
		mov	eax, [ebp+file]
		mov	ds:prev_file_5132, eax
		mov	eax, [ebp+fp]
		jmp	short loc_800075A
; ---------------------------------------------------------------------------

loc_8000714:				; CODE XREF: next_file+FFj
		call	__errno_location
		mov	eax, [eax]
		push	[ebp+file]
		push	offset format	; "%s"
		push	eax		; errnum
		push	0		; status
		call	error
		add	esp, 10h
		mov	ds:exit_status,	1

loc_8000738:				; CODE XREF: next_file+Bj
					; next_file+73j ...
		mov	eax, ds:file_list
		lea	edx, [eax+4]
		mov	ds:file_list, edx
		mov	eax, [eax]
		mov	[ebp+file], eax
		cmp	[ebp+file], 0
		jnz	loc_80006BE
		mov	eax, 0

loc_800075A:				; CODE XREF: next_file+E3j
					; next_file+10Cj
		mov	ebx, [ebp+var_4]
		leave
		retn
next_file	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: static bp-based frame

; void expand()
expand		proc near		; CODE XREF: main+23Fp

convert		= byte ptr -3Dh
fp		= dword	ptr -3Ch
c		= dword	ptr -38h
tab_index	= dword	ptr -34h
column		= qword	ptr -30h
next_tab_column	= qword	ptr -28h
tab		= qword	ptr -20h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		sub	esp, 0Ch
		push	0		; fp
		call	next_file
		add	esp, 10h
		mov	[ebp+fp], eax
		cmp	[ebp+fp], 0
		jz	loc_8000A1A

loc_8000782:				; CODE XREF: expand+2B6j
		mov	[ebp+convert], 1
		mov	dword ptr [ebp+column],	0
		mov	dword ptr [ebp+column+4], 0
		mov	[ebp+tab_index], 0
		jmp	short loc_800079E
; ---------------------------------------------------------------------------

loc_800079D:				; CODE XREF: expand+6Bj
		nop

loc_800079E:				; CODE XREF: expand+3Cj expand+2B0j
		sub	esp, 0Ch
		push	[ebp+fp]	; stream
		call	getc_unlocked
		add	esp, 10h
		mov	[ebp+c], eax
		cmp	[ebp+c], 0
		jns	short loc_80007CC
		sub	esp, 0Ch
		push	[ebp+fp]	; fp
		call	next_file
		add	esp, 10h
		mov	[ebp+fp], eax
		cmp	[ebp+fp], 0
		jnz	short loc_800079D

loc_80007CC:				; CODE XREF: expand+54j
		cmp	[ebp+convert], 0
		jz	loc_80009CB
		cmp	[ebp+c], 9
		jnz	loc_8000929
		mov	eax, dword ptr ds:tab_size
		mov	edx, dword ptr ds:tab_size+4
		or	eax, edx
		test	eax, eax
		jz	short loc_8000835
		mov	esi, dword ptr ds:tab_size
		mov	edi, dword ptr ds:tab_size+4
		mov	ecx, dword ptr ds:tab_size
		mov	ebx, dword ptr ds:tab_size+4
		mov	eax, dword ptr [ebp+column]
		mov	edx, dword ptr [ebp+column+4]
		push	ebx
		push	ecx
		push	edx
		push	eax
		call	__umoddi3
		add	esp, 10h
		sub	esi, eax
		sbb	edi, edx
		mov	ecx, esi
		mov	ebx, edi
		mov	eax, dword ptr [ebp+column]
		mov	edx, dword ptr [ebp+column+4]
		add	eax, ecx
		adc	edx, ebx
		mov	dword ptr [ebp+next_tab_column], eax
		mov	dword ptr [ebp+next_tab_column+4], edx
		jmp	short loc_8000893
; ---------------------------------------------------------------------------

loc_8000835:				; CODE XREF: expand+90j expand+11Cj ...
		mov	eax, ds:first_free_tab
		cmp	[ebp+tab_index], eax
		jnz	short loc_8000853
		mov	eax, dword ptr [ebp+column]
		mov	edx, dword ptr [ebp+column+4]
		add	eax, 1
		adc	edx, 0
		mov	dword ptr [ebp+next_tab_column], eax
		mov	dword ptr [ebp+next_tab_column+4], edx
		jmp	short loc_8000893
; ---------------------------------------------------------------------------

loc_8000853:				; CODE XREF: expand+DEj
		mov	ecx, ds:tab_list
		mov	eax, [ebp+tab_index]
		lea	edx, [eax+1]
		mov	[ebp+tab_index], edx
		shl	eax, 3
		add	eax, ecx
		mov	edx, [eax+4]
		mov	eax, [eax]
		mov	dword ptr [ebp+tab], eax
		mov	dword ptr [ebp+tab+4], edx
		mov	eax, dword ptr [ebp+column]
		mov	edx, dword ptr [ebp+column+4]
		cmp	edx, dword ptr [ebp+tab+4]
		ja	short loc_8000835
		cmp	edx, dword ptr [ebp+tab+4]
		jb	short loc_8000887
		cmp	eax, dword ptr [ebp+tab]
		jnb	short loc_8000835

loc_8000887:				; CODE XREF: expand+121j
		mov	eax, dword ptr [ebp+tab]
		mov	edx, dword ptr [ebp+tab+4]
		mov	dword ptr [ebp+next_tab_column], eax
		mov	dword ptr [ebp+next_tab_column+4], edx

loc_8000893:				; CODE XREF: expand+D4j expand+F2j
		mov	eax, dword ptr [ebp+next_tab_column]
		mov	edx, dword ptr [ebp+next_tab_column+4]
		cmp	edx, dword ptr [ebp+column+4]
		ja	short loc_8000903
		cmp	edx, dword ptr [ebp+column+4]
		jb	short loc_80008A8
		cmp	eax, dword ptr [ebp+column]
		jnb	short loc_8000903

loc_80008A8:				; CODE XREF: expand+142j
		sub	esp, 0Ch
		push	offset aInputLineIsToo ; "input	line is	too long"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h
		jmp	short loc_8000903
; ---------------------------------------------------------------------------

loc_80008CA:				; CODE XREF: expand+1B5j expand+1BFj
		sub	esp, 0Ch
		push	20h		; c
		call	putchar_unlocked
		add	esp, 10h
		test	eax, eax
		jns	short loc_8000903
		sub	esp, 0Ch
		push	offset aWriteError ; "write error"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		sub	esp, 4
		push	ebx		; format
		push	eax		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_8000903:				; CODE XREF: expand+13Dj expand+147j ...
		add	dword ptr [ebp+column],	1
		adc	dword ptr [ebp+column+4], 0
		mov	eax, dword ptr [ebp+column]
		mov	edx, dword ptr [ebp+column+4]
		cmp	edx, dword ptr [ebp+next_tab_column+4]
		jb	short loc_80008CA
		cmp	edx, dword ptr [ebp+next_tab_column+4]
		ja	short loc_8000920
		cmp	eax, dword ptr [ebp+next_tab_column]
		jb	short loc_80008CA

loc_8000920:				; CODE XREF: expand+1BAj
		mov	[ebp+c], 20h
		jmp	short loc_800098B
; ---------------------------------------------------------------------------

loc_8000929:				; CODE XREF: expand+7Bj
		cmp	[ebp+c], 8
		jnz	short loc_8000959
		mov	eax, dword ptr [ebp+column]
		or	eax, dword ptr [ebp+column+4]
		test	eax, eax
		setnz	al
		mov	ecx, eax
		movzx	eax, cl
		mov	edx, 0
		sub	dword ptr [ebp+column],	eax
		sbb	dword ptr [ebp+column+4], edx
		cmp	[ebp+tab_index], 0
		setnz	al
		movzx	eax, al
		sub	[ebp+tab_index], eax
		jmp	short loc_800098B
; ---------------------------------------------------------------------------

loc_8000959:				; CODE XREF: expand+1CEj
		add	dword ptr [ebp+column],	1
		adc	dword ptr [ebp+column+4], 0
		mov	eax, dword ptr [ebp+column+4]
		or	eax, dword ptr [ebp+column]
		test	eax, eax
		jnz	short loc_800098B
		sub	esp, 0Ch
		push	offset aInputLineIsToo ; "input	line is	too long"
		call	gettext
		add	esp, 10h
		sub	esp, 4
		push	eax		; format
		push	0		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_800098B:				; CODE XREF: expand+1C8j expand+1F8j ...
		movzx	ebx, [ebp+convert]
		movzx	eax, ds:convert_entire_line
		test	al, al
		jnz	short loc_80009B5
		call	__ctype_b_loc
		mov	eax, [eax]
		mov	edx, [ebp+c]
		add	edx, edx
		add	eax, edx
		movzx	eax, word ptr [eax]
		movzx	eax, ax
		and	eax, 1
		test	eax, eax
		jz	short loc_80009BC

loc_80009B5:				; CODE XREF: expand+239j
		mov	eax, 1
		jmp	short loc_80009C1
; ---------------------------------------------------------------------------

loc_80009BC:				; CODE XREF: expand+254j
		mov	eax, 0

loc_80009C1:				; CODE XREF: expand+25Bj
		and	eax, ebx
		test	eax, eax
		setnz	al
		mov	[ebp+convert], al

loc_80009CB:				; CODE XREF: expand+71j
		cmp	[ebp+c], 0
		js	short loc_8000A1D
		sub	esp, 0Ch
		push	[ebp+c]		; c
		call	putchar_unlocked
		add	esp, 10h
		test	eax, eax
		jns	short loc_8000A0B
		sub	esp, 0Ch
		push	offset aWriteError ; "write error"
		call	gettext
		add	esp, 10h
		mov	ebx, eax
		call	__errno_location
		mov	eax, [eax]
		sub	esp, 4
		push	ebx		; format
		push	eax		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_8000A0B:				; CODE XREF: expand+282j
		cmp	[ebp+c], 0Ah
		jnz	loc_800079E
		jmp	loc_8000782
; ---------------------------------------------------------------------------

loc_8000A1A:				; CODE XREF: expand+1Dj
		nop
		jmp	short loc_8000A1E
; ---------------------------------------------------------------------------

loc_8000A1D:				; CODE XREF: expand+270j
		nop

loc_8000A1E:				; CODE XREF: expand+2BCj
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
expand		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public main
main		proc near

argv		= dword	ptr -1Ch
c		= dword	ptr -14h
tab_stop	= byte ptr -0Eh
var_C		= dword	ptr -0Ch
argc		= dword	ptr  0Ch
envp		= dword	ptr  14h

		lea	ecx, [esp+4]
		and	esp, 0FFFFFFF0h
		push	dword ptr [ecx-4]
		push	ebp
		mov	ebp, esp
		push	ebx
		push	ecx
		sub	esp, 20h
		mov	ebx, ecx
		mov	eax, [ebx+4]
		mov	[ebp+argv], eax
		mov	eax, large gs:14h
		mov	[ebp+var_C], eax
		xor	eax, eax
		mov	eax, [ebp+argv]
		mov	eax, [eax]
		sub	esp, 0Ch
		push	eax
		call	set_program_name
		add	esp, 10h
		sub	esp, 8
		push	offset locale	; locale
		push	6		; category
		call	setlocale
		add	esp, 10h
		sub	esp, 8
		push	offset dirname	; "/usr/local/share/locale"
		push	offset domainname ; "coreutils"
		call	bindtextdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset domainname ; "coreutils"
		call	textdomain
		add	esp, 10h
		sub	esp, 0Ch
		push	offset close_stdout ; func
		call	atexit
		add	esp, 10h
		mov	ds:have_read_stdin, 0
		mov	ds:exit_status,	0
		mov	ds:convert_entire_line,	1
		mov	ds:tab_list, 0
		mov	ds:first_free_tab, 0
		jmp	loc_8000BAA
; ---------------------------------------------------------------------------

loc_8000AD4:				; CODE XREF: main+1A7j
		mov	eax, [ebp+c]
		cmp	eax, 39h
		jg	short loc_8000AF8
		cmp	eax, 30h
		jge	short loc_8000B29
		cmp	eax, 0FFFFFF7Dh
		jz	loc_8000B6D
		cmp	eax, 0FFFFFF7Eh
		jz	short loc_8000B63
		jmp	loc_8000BA0
; ---------------------------------------------------------------------------

loc_8000AF8:				; CODE XREF: main+B4j
		cmp	eax, 69h
		jz	short loc_8000B07
		cmp	eax, 74h
		jz	short loc_8000B13
		jmp	loc_8000BA0
; ---------------------------------------------------------------------------

loc_8000B07:				; CODE XREF: main+D5j
		mov	ds:convert_entire_line,	0
		jmp	loc_8000BAA
; ---------------------------------------------------------------------------

loc_8000B13:				; CODE XREF: main+DAj
		mov	eax, ds:optarg
		sub	esp, 0Ch
		push	eax		; stops
		call	parse_tab_stops
		add	esp, 10h
		jmp	loc_8000BAA
; ---------------------------------------------------------------------------

loc_8000B29:				; CODE XREF: main+B9j
		mov	eax, ds:optarg
		test	eax, eax
		jz	short loc_8000B48
		mov	eax, ds:optarg
		sub	eax, 1
		sub	esp, 0Ch
		push	eax		; stops
		call	parse_tab_stops
		add	esp, 10h
		jmp	short loc_8000BAA
; ---------------------------------------------------------------------------

loc_8000B48:				; CODE XREF: main+10Aj
		mov	eax, [ebp+c]
		mov	[ebp+tab_stop],	al
		mov	[ebp+tab_stop+1], 0
		sub	esp, 0Ch
		lea	eax, [ebp+tab_stop]
		push	eax		; stops
		call	parse_tab_stops
		add	esp, 10h
		jmp	short loc_8000BAA
; ---------------------------------------------------------------------------

loc_8000B63:				; CODE XREF: main+CBj
		sub	esp, 0Ch
		push	0		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8000B6D:				; CODE XREF: main+C0j
		mov	edx, ds:Version
		mov	eax, ds:stdout
		sub	esp, 8
		push	0
		push	offset aDavidMackenzie ; "David	MacKenzie"
		push	edx
		push	offset aGnuCoreutils ; "GNU coreutils"
		push	offset aExpand	; "expand"
		push	eax
		call	version_etc
		add	esp, 20h
		sub	esp, 0Ch
		push	0		; status
		call	exit
; ---------------------------------------------------------------------------

loc_8000BA0:				; CODE XREF: main+CDj main+DCj
		sub	esp, 0Ch
		push	1		; status
		call	usage
; ---------------------------------------------------------------------------

loc_8000BAA:				; CODE XREF: main+A9j main+E8j ...
		sub	esp, 0Ch
		push	0		; longind
		push	offset longopts	; longopts
		push	offset shortopts ; "it:0::1::2::3::4::5::6::7::8::9::"
		push	[ebp+argv]	; argv
		push	dword ptr [ebx]	; argc
		call	getopt_long
		add	esp, 20h
		mov	[ebp+c], eax
		cmp	[ebp+c], 0FFFFFFFFh
		jnz	loc_8000AD4
		mov	edx, ds:first_free_tab
		mov	eax, ds:tab_list
		sub	esp, 8
		push	edx		; entries
		push	eax		; tabs
		call	validate_tab_stops
		add	esp, 10h
		mov	eax, ds:first_free_tab
		test	eax, eax
		jnz	short loc_8000C0A
		mov	dword ptr ds:tab_size, 8
		mov	dword ptr ds:tab_size+4, 0
		jmp	short loc_8000C3F
; ---------------------------------------------------------------------------

loc_8000C0A:				; CODE XREF: main+1CCj
		mov	eax, ds:first_free_tab
		cmp	eax, 1
		jnz	short loc_8000C2B
		mov	eax, ds:tab_list
		mov	edx, [eax+4]
		mov	eax, [eax]
		mov	dword ptr ds:tab_size, eax
		mov	dword ptr ds:tab_size+4, edx
		jmp	short loc_8000C3F
; ---------------------------------------------------------------------------

loc_8000C2B:				; CODE XREF: main+1ECj
		mov	dword ptr ds:tab_size, 0
		mov	dword ptr ds:tab_size+4, 0

loc_8000C3F:				; CODE XREF: main+1E2j	main+203j
		mov	eax, ds:optind
		cmp	eax, [ebx]
		jge	short loc_8000C5B
		mov	eax, ds:optind
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+argv]
		add	eax, edx
		jmp	short loc_8000C60
; ---------------------------------------------------------------------------

loc_8000C5B:				; CODE XREF: main+220j
		mov	eax, offset stdin_argv

loc_8000C60:				; CODE XREF: main+233j
		mov	ds:file_list, eax
		call	expand
		movzx	eax, ds:have_read_stdin
		test	al, al
		jz	short loc_8000CA4
		mov	eax, ds:stdin
		sub	esp, 0Ch
		push	eax		; stream
		call	fclose
		add	esp, 10h
		test	eax, eax
		jz	short loc_8000CA4
		call	__errno_location
		mov	eax, [eax]
		sub	esp, 4
		push	offset asc_8000E49 ; "-"
		push	eax		; errnum
		push	1		; status
		call	error
		add	esp, 10h

loc_8000CA4:				; CODE XREF: main+24Dj	main+262j
		mov	eax, ds:exit_status
		sub	esp, 0Ch
		push	eax		; status

loc_8000CAD:				; DATA XREF: .eh_frame:0800122Co
					; .eh_frame:0800124Co ...
		call	exit
main		endp

_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 8000CB4h
; char *stdin_argv[2]
stdin_argv	dd offset asc_8000E49, 0 ; DATA	XREF: main:loc_8000C5Bo
_data		ends			; "-"

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 8000CC0h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
; _Bool	convert_entire_line
convert_entire_line db ?		; DATA XREF: expand+230r main+8Ew ...
		align 8
; uintmax_t tab_size
tab_size	dq ?			; DATA XREF: expand+81r expand+92r ...
; uintmax_t *tab_list
tab_list	dd ?			; DATA XREF: add_tab_stop+21r
					; add_tab_stop+39w ...
; size_t n_tabs_allocated
n_tabs_allocated dd ?			; DATA XREF: add_tab_stop+18r
					; add_tab_stop+2Bo
; size_t first_free_tab
first_free_tab	dd ?			; DATA XREF: add_tab_stop+12r
					; add_tab_stop+44r ...
; char **file_list
file_list	dd ?			; DATA XREF: next_file:loc_8000738r
					; next_file+13Aw ...
; _Bool	have_read_stdin
have_read_stdin	db ?			; DATA XREF: next_file+CFw main+7Dw ...
		align 4
; int exit_status
exit_status	dd ?			; DATA XREF: next_file+41w
					; next_file+ACw ...
; Function-local static	variable
; char *prev_file_5132
prev_file_5132	dd ?			; DATA XREF: next_file+23r
					; next_file:loc_8000651r ...
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment '32byte' can not be represented in assembly
_rodata		segment	para public 'CONST' use32
		assume cs:_rodata
		;org 8000D00h
; char msgid[]
msgid		db 0Ah			; DATA XREF: emit_ancillary_info+1Do
		db 'Report %s bugs to %s',0Ah,0
aBugCoreutils@g	db 'bug-coreutils@gnu.org',0 ; DATA XREF: emit_ancillary_info+2Do
		align 10h
; char aSHomePageHttpW[]
aSHomePageHttpW	db '%s home page: <http://www.gnu.org/software/%s/>',0Ah,0
					; DATA XREF: emit_ancillary_info+3Fo
; char domainname[]
domainname	db 'coreutils',0        ; DATA XREF: emit_ancillary_info+4Fo
					; main+50o ...
aGnuCoreutils	db 'GNU coreutils',0    ; DATA XREF: emit_ancillary_info+54o
					; main+15Do
		align 4
; char aGeneralHelpUsi[]
aGeneralHelpUsi	db 'General help using GNU software: <http://www.gnu.org/gethelp/>',0Ah,0
					; DATA XREF: emit_ancillary_info+6Bo
; char s2[]
s2		db 'en_',0              ; DATA XREF: emit_ancillary_info+A2o
; char aReportSTransla[]
aReportSTransla	db 'Report %s translation bugs to <http://translationproject.org/team'
					; DATA XREF: emit_ancillary_info+CCo
		db '/>',0Ah,0
		align 4
; char aForCompleteDoc[]
aForCompleteDoc	db 'For complete documentation, run: info coreutils ',27h,'%s invocation'
					; DATA XREF: emit_ancillary_info+FCo
		db 27h,0Ah,0
; char asc_8000E49[]
asc_8000E49	db '-',0                ; DATA XREF: next_file+53o
					; next_file+BBo ...
		align 20h
; char shortopts[34]
shortopts	db 'it:0::1::2::3::4::5::6::7::8::9::',0 ; DATA XREF: main+18Eo
aTabs		db 'tabs',0             ; DATA XREF: .rodata:longoptso
aInitial	db 'initial',0          ; DATA XREF: .rodata:longoptso
aHelp		db 'help',0             ; DATA XREF: .rodata:longoptso
aVersion	db 'version',0          ; DATA XREF: .rodata:longoptso
		align 10h
; const	option longopts[5]
longopts	option <offset aTabs, 1, 0, 74h> ; DATA	XREF: main+189o
		option <offset aInitial, 0, 0, 69h> ; "tabs"
		option <offset aHelp, 0, 0, 0FFFFFF7Eh>
		option <offset aVersion, 0, 0, 0FFFFFF7Dh>
		option	<0>
; char aTrySHelpForMor[]
aTrySHelpForMor	db 'Try `%s --help',27h,' for more information.',0Ah,0
					; DATA XREF: usage+16o
		align 4
; char aUsageSOption__[]
aUsageSOption__	db 'Usage: %s [OPTION]... [FILE]...',0Ah,0 ; DATA XREF: usage+46o
		align 4
; char aConvertTabsInE[]
aConvertTabsInE	db 'Convert tabs in each FILE to spaces, writing to standard output.',0Ah
					; DATA XREF: usage+69o
		db 'With no FILE, or when FILE is -, read standard input.',0Ah
		db 0Ah,0
		align 4
; char aMandatoryArgum[]
aMandatoryArgum	db 'Mandatory arguments to long options are mandatory for short optio'
					; DATA XREF: usage+8Co
		db 'ns too.',0Ah,0
		align 4
; char aIInitialDoNotC[]
aIInitialDoNotC	db '  -i, --initial       do not convert tabs after non blanks',0Ah
					; DATA XREF: usage+AFo
		db '  -t, --tabs=NUMBER   have tabs NUMBER characters apart, not 8',0Ah,0
		align 10h
; char aTTabsListUseCo[]
aTTabsListUseCo	db '  -t, --tabs=LIST     use comma separated list of explicit tab po'
					; DATA XREF: usage+D2o
		db 'sitions',0Ah,0
		align 4
; char aHelpDisplayThi[]
aHelpDisplayThi	db '      --help     display this help and exit',0Ah,0
					; DATA XREF: usage+F5o
		align 4
; char aVersionOutputV[]
aVersionOutputV	db '      --version  output version information and exit',0Ah,0
					; DATA XREF: usage+118o
; char accept[]
accept		db '0123456789',0       ; DATA XREF: parse_tab_stops+165o
; char aTabStopIsTooLa[]
aTabStopIsTooLa	db 'tab stop is too large %s',0 ; DATA XREF: parse_tab_stops+19Fo
		align 4
; char aTabSizeContain[]
aTabSizeContain	db 'tab size contains invalid character(s): %s',0
					; DATA XREF: parse_tab_stops+1EFo
; char aTabSizeCannotB[]
aTabSizeCannotB	db 'tab size cannot be 0',0 ; DATA XREF: validate_tab_stops+3Do
; char aTabSizesMustBe[]
aTabSizesMustBe	db 'tab sizes must be ascending',0 ; DATA XREF: validate_tab_stops+80o
; char format[]
format		db '%s',0               ; DATA XREF: next_file+31o
					; next_file+9Co ...
aR		db 'r',0                ; DATA XREF: next_file+E8o
; char aInputLineIsToo[]
aInputLineIsToo	db 'input line is too long',0 ; DATA XREF: expand+14Co
					; expand+20Fo
; char aWriteError[]
aWriteError	db 'write error',0      ; DATA XREF: expand+17Fo expand+287o
; char locale
locale		db 0			; DATA XREF: main+39o
; char dirname[]
dirname		db '/usr/local/share/locale',0 ; DATA XREF: main+4Bo
aDavidMackenzie	db 'David MacKenzie',0  ; DATA XREF: main+157o
aExpand		db 'expand',0           ; DATA XREF: main+162o
_rodata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_eh_frame	segment	dword public 'CONST' use32
		assume cs:_eh_frame
		;org 800120Ch
		dd 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 2	dup(1Ch)
		dd offset loc_8000CAD-8001ED9h
		dd 12h,	80E4100h, 0D420285h, 0CC54E05h,	404h, 20h, 3Ch
		dd offset loc_8000CAD-8001EE7h
		dd 11Ch, 80E4100h, 0D420285h, 3834405h,	0C5011403h, 4040CC3h
		dd 18h,	60h
		dd offset loc_8000CAD-8001DEFh
		dd 142h, 80E4100h, 0D420285h, 3834405h,	1Ch, 7Ch
		dd offset loc_8000CAD-8001CC9h
		dd 65h,	80E4100h, 0D420285h, 0C5610205h, 4040Ch, 20h, 9Ch
		dd offset loc_8000CAD-8001C84h
		dd 267h, 80E4100h, 0D420285h, 3834405h,	0C5025F03h, 4040CC3h
		dd 1Ch,	0C0h
		dd offset loc_8000CAD-8001A41h
		dd 0CAh, 80E4100h, 0D420285h, 0C5C60205h, 4040Ch, 20h
		dd 0E0h
		dd offset loc_8000CAD-8001997h
		dd 159h, 80E4100h, 0D420285h, 3834405h,	0C5015103h, 4040CC3h
		dd 2Ch,	104h
		dd offset loc_8000CAD-8001862h
		dd 2C7h, 80E4100h, 0D420285h, 3874605h,	5830486h, 0C302BA03h
		dd 0C741C641h, 40CC541h, 4, 24h, 134h
		dd offset loc_8000CAD-80015CBh
		dd 28Ch, 10C4400h, 5104700h, 44007502h,	7875030Fh, 2031006h
		dd 7C75h
_eh_frame	ends

; ===========================================================================

; Segment type:	Externs
; extern
		extrn program_name:dword ; DATA	XREF: emit_ancillary_info+7r
					; emit_ancillary_info+B6r ...
		extrn last_component:near ; CODE XREF: emit_ancillary_info+10p
					; emit_ancillary_info+BFp ...
; char *gettext(const char *msgid)
		extrn gettext:near	; CODE XREF: emit_ancillary_info+22p
					; emit_ancillary_info+44p ...
; int printf(const char	*format, ...)
		extrn printf:near	; CODE XREF: emit_ancillary_info+34p
					; emit_ancillary_info+5Ap ...
; struct _IO_FILE *stdout
		extrn stdout:dword	; DATA XREF: emit_ancillary_info+62r
					; usage+60r ...
		extrn fputs_unlocked:near ; CODE XREF: emit_ancillary_info+7Dp
					; usage+7Bp ...
; char *setlocale(int category,	const char *locale)
		extrn setlocale:near	; CODE XREF: emit_ancillary_info+8Cp
					; main+40p
; int strncmp(const char *s1, const char *s2, size_t n)
		extrn strncmp:near	; CODE XREF: emit_ancillary_info+AAp
; struct _IO_FILE *stderr
		extrn stderr:dword	; DATA XREF: usage+25r
; int fprintf(FILE *stream, const char *format,	...)
		extrn fprintf:near	; CODE XREF: usage+30p
; void exit(int	status)
		extrn exit:near		; CODE XREF: usage+13Dp
					; parse_tab_stops+232p	...
		extrn x2nrealloc:near	; CODE XREF: add_tab_stop+31p
; const	unsigned __int16 **_ctype_b_loc(void)
		extrn __ctype_b_loc:near ; CODE	XREF: parse_tab_stops+2Fp
					; expand+23Bp
; size_t strspn(const char *s, const char *accept)
		extrn strspn:near	; CODE XREF: parse_tab_stops+16Dp
; char *xstrndup(const char *, size_t)
		extrn xstrndup:near	; CODE XREF: parse_tab_stops+181p
		extrn quote:near	; CODE XREF: parse_tab_stops+192p
					; parse_tab_stops+1E2p
; void error(int status, int errnum, const char	*format, ...)
		extrn error:near	; CODE XREF: parse_tab_stops+1B2p
					; parse_tab_stops+202p	...
; void free(void *ptr)
		extrn free:near		; CODE XREF: parse_tab_stops+1C0p
		extrn __stack_chk_fail:near ; CODE XREF: parse_tab_stops+25Dp
; int ferror_unlocked(FILE *stream)
		extrn ferror_unlocked:near ; CODE XREF:	next_file+17p
; int *_errno_location(void)
		extrn __errno_location:near ; CODE XREF: next_file+29p
					; next_file+94p ...
; int strcmp(const char	*s1, const char	*s2)
		extrn strcmp:near	; CODE XREF: next_file+59p
					; next_file+C3p
; void clearerr_unlocked(FILE *stream)
		extrn clearerr_unlocked:near ; CODE XREF: next_file+6Bp
; int fclose(FILE *stream)
		extrn fclose:near	; CODE XREF: next_file+7Ep main+258p
; struct _IO_FILE *stdin
		extrn stdin:dword	; DATA XREF: next_file+DEr main+24Fr
		extrn fopen64:near	; CODE XREF: next_file+F0p
		extrn __umoddi3:near	; CODE XREF: expand+B4p
; int getc_unlocked(FILE *stream)
		extrn getc_unlocked:near ; CODE	XREF: expand+45p
; int putchar_unlocked(int c)
		extrn putchar_unlocked:near ; CODE XREF: expand+170p
					; expand+278p
		extrn set_program_name:near ; CODE XREF: main+2Ep
; char *bindtextdomain(const char *domainname, const char *dirname)
		extrn bindtextdomain:near ; CODE XREF: main+55p
; char *textdomain(const char *domainname)
		extrn textdomain:near	; CODE XREF: main+65p
; void close_stdout(void)
		extrn close_stdout	; DATA XREF: main+70o
; int atexit(void (*func)(void))
		extrn atexit:near	; CODE XREF: main+75p
; char *optarg
		extrn optarg:dword	; DATA XREF: main:loc_8000B13r
					; main:loc_8000B29r ...
		extrn Version:dword	; DATA XREF: main:loc_8000B6Dr
		extrn version_etc:near	; CODE XREF: main+168p
; int getopt_long(int argc, char *const	*argv, const char *shortopts, const struct option *longopts, int *longind)
		extrn getopt_long:near	; CODE XREF: main+198p
; int optind
		extrn optind:dword	; DATA XREF: main:loc_8000C3Fr
					; main+222r


		end
