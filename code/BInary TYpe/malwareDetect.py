from svmutil import *
from Normalization import *

benignfile = 'SaveData/benign_TYPE_info.txt'
malwarefile = 'SaveData/malware_TYPE_info.txt'
benignfile_save = 'SaveData/benign_TYPE_info_save.txt'
malwarefile_save = 'SaveData/malware_TYPE_info_save.txt'

def AddDateAndLabel(file, Label, Data, Pname, num):
    with open(file, 'r', encoding='utf-8') as programTypeInfoFile:
        for line in programTypeInfoFile.readlines():
            name, rest = line.split(' ', 1)
            rest = rest.strip()
            vector = eval(rest)

            Label.append(num)
            Data.append(vector)
            Pname.append(name)


def trainMalwareDetectModel():
    Data = []
    Label = []
    Pname = []

    AddDateAndLabel(benignfile_save,Label, Data, Pname, 0)
    AddDateAndLabel(malwarefile_save,Label, Data, Pname, 1)

    #FindMuSigma(Data)#找各个维度平均值和标准差
    #Z_ScoreNormalization(Data,0)#向量zscore归一化处理
    #FindMaxMin(Data);#找各个维度最大值和最小值
    #MaxMinNormalization(Data,0)#向量-1~1归一化处理

    model = svm_train(Label,Data, '-s 0 -t 2 -c 9999 -g 0.01 -e 0.00001 -h 0')
    svm_save_model('SaveData/malwareDetectmodel', model)
    print("train ending...")


def testMalwareDetect():
    Data = []
    Label = []
    Pname = []

    AddDateAndLabel(benignfile, Label, Data, Pname, 0)
    AddDateAndLabel(malwarefile, Label, Data, Pname, 1)

    #FindMuSigma(Data)  # 找各个维度平均值和标准差
    #Z_ScoreNormalization(Data,0)  # 向量zscore归一化处理
    #FindMaxMin(Data);#找各个维度最大值和最小值
    #MaxMinNormalization(Data,0)#向量-1~1归一化处理

    model = svm_load_model('SaveData/malwareDetectmodel')
    predictlabel_list, accuracy, value = svm_predict(Label, Data, model)

    for eachname,eachlabel in zip(Pname,predictlabel_list):
        print(eachname + '\t\t' + str(eachlabel))


trainMalwareDetectModel()
testMalwareDetect()